//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "PlayFabCppBaseModel.h"

namespace PlayFab
{
namespace AddonModels
{

    struct PLAYFABCPP_API FEntityKey : public PlayFab::FPlayFabCppBaseModel
    {
        // Unique ID of the entity.
        FString Id;

        // [optional] Entity type. See https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types
        FString Type;

        FEntityKey() :
            FPlayFabCppBaseModel(),
            Id(),
            Type()
            {}

        FEntityKey(const FEntityKey& src) = default;

        FEntityKey(const TSharedPtr<FJsonObject>& obj) : FEntityKey()
        {
            readFromValue(obj);
        }

        ~FEntityKey();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateAppleRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // iOS App Bundle ID obtained after setting up your app in the App Store.
        FString AppBundleId;

        // [optional] iOS App Shared Secret obtained after setting up your app in the App Store.
        FString AppSharedSecret;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        // [optional] If an error should be returned if the addon already exists.
        Boxed<bool> ErrorIfExists;

        /**
         * [optional] Ignore expiration date for identity tokens. Be aware that when set to true this can invalidate expired tokens in the
         * case where Apple rotates their signing keys.
         */
        Boxed<bool> IgnoreExpirationDate;

        // [optional] Require secure authentication only for this app.
        Boxed<bool> RequireSecureAuthentication;

        FCreateOrUpdateAppleRequest() :
            FPlayFabCppRequestCommon(),
            AppBundleId(),
            AppSharedSecret(),
            CustomTags(),
            Entity(nullptr),
            ErrorIfExists(),
            IgnoreExpirationDate(),
            RequireSecureAuthentication()
            {}

        FCreateOrUpdateAppleRequest(const FCreateOrUpdateAppleRequest& src) = default;

        FCreateOrUpdateAppleRequest(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateAppleRequest()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateAppleRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateAppleResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FCreateOrUpdateAppleResponse() :
            FPlayFabCppResultCommon()
            {}

        FCreateOrUpdateAppleResponse(const FCreateOrUpdateAppleResponse& src) = default;

        FCreateOrUpdateAppleResponse(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateAppleResponse()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateAppleResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateFacebookInstantGamesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // Facebook App ID obtained after setting up your app in Facebook Instant Games.
        FString AppID;

        // Facebook App Secret obtained after setting up your app in Facebook Instant Games.
        FString AppSecret;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        // [optional] If an error should be returned if the addon already exists.
        Boxed<bool> ErrorIfExists;

        FCreateOrUpdateFacebookInstantGamesRequest() :
            FPlayFabCppRequestCommon(),
            AppID(),
            AppSecret(),
            CustomTags(),
            Entity(nullptr),
            ErrorIfExists()
            {}

        FCreateOrUpdateFacebookInstantGamesRequest(const FCreateOrUpdateFacebookInstantGamesRequest& src) = default;

        FCreateOrUpdateFacebookInstantGamesRequest(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateFacebookInstantGamesRequest()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateFacebookInstantGamesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateFacebookInstantGamesResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FCreateOrUpdateFacebookInstantGamesResponse() :
            FPlayFabCppResultCommon()
            {}

        FCreateOrUpdateFacebookInstantGamesResponse(const FCreateOrUpdateFacebookInstantGamesResponse& src) = default;

        FCreateOrUpdateFacebookInstantGamesResponse(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateFacebookInstantGamesResponse()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateFacebookInstantGamesResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateFacebookRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // Facebook App ID obtained after setting up your app in Facebook.
        FString AppID;

        // Facebook App Secret obtained after setting up your app in Facebook.
        FString AppSecret;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        // [optional] If an error should be returned if the addon already exists.
        Boxed<bool> ErrorIfExists;

        // Email address for purchase dispute notifications.
        FString NotificationEmail;

        FCreateOrUpdateFacebookRequest() :
            FPlayFabCppRequestCommon(),
            AppID(),
            AppSecret(),
            CustomTags(),
            Entity(nullptr),
            ErrorIfExists(),
            NotificationEmail()
            {}

        FCreateOrUpdateFacebookRequest(const FCreateOrUpdateFacebookRequest& src) = default;

        FCreateOrUpdateFacebookRequest(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateFacebookRequest()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateFacebookRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateFacebookResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FCreateOrUpdateFacebookResponse() :
            FPlayFabCppResultCommon()
            {}

        FCreateOrUpdateFacebookResponse(const FCreateOrUpdateFacebookResponse& src) = default;

        FCreateOrUpdateFacebookResponse(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateFacebookResponse()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateFacebookResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateGoogleRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        /**
         * [optional] Google App License Key obtained after setting up your app in the Google Play developer portal. Required if using Google
         * receipt validation.
         */
        FString AppLicenseKey;

        /**
         * [optional] Google App Package ID obtained after setting up your app in the Google Play developer portal. Required if using Google
         * receipt validation.
         */
        FString AppPackageID;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        // [optional] If an error should be returned if the addon already exists.
        Boxed<bool> ErrorIfExists;

        /**
         * [optional] Google OAuth Client ID obtained through the Google Developer Console by creating a new set of "OAuth Client ID".
         * Required if using Google Authentication.
         */
        FString OAuthClientID;

        /**
         * [optional] Google OAuth Client Secret obtained through the Google Developer Console by creating a new set of "OAuth Client ID".
         * Required if using Google Authentication.
         */
        FString OAuthClientSecret;

        /**
         * [optional] Authorized Redirect Uri obtained through the Google Developer Console. This currently defaults to
         * https://oauth.playfab.com/oauth2/google. If you are authenticating players via browser, please update this to your own
         * domain.
         */
        FString OAuthCustomRedirectUri;

        // [optional] Needed to enable pending purchase handling and subscription processing.
        FString ServiceAccountKey;

        FCreateOrUpdateGoogleRequest() :
            FPlayFabCppRequestCommon(),
            AppLicenseKey(),
            AppPackageID(),
            CustomTags(),
            Entity(nullptr),
            ErrorIfExists(),
            OAuthClientID(),
            OAuthClientSecret(),
            OAuthCustomRedirectUri(),
            ServiceAccountKey()
            {}

        FCreateOrUpdateGoogleRequest(const FCreateOrUpdateGoogleRequest& src) = default;

        FCreateOrUpdateGoogleRequest(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateGoogleRequest()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateGoogleRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateGoogleResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FCreateOrUpdateGoogleResponse() :
            FPlayFabCppResultCommon()
            {}

        FCreateOrUpdateGoogleResponse(const FCreateOrUpdateGoogleResponse& src) = default;

        FCreateOrUpdateGoogleResponse(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateGoogleResponse()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateGoogleResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateKongregateRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        // [optional] If an error should be returned if the addon already exists.
        Boxed<bool> ErrorIfExists;

        // Kongregate Secret API Key obtained after setting up your game in your Kongregate developer account.
        FString SecretAPIKey;

        FCreateOrUpdateKongregateRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr),
            ErrorIfExists(),
            SecretAPIKey()
            {}

        FCreateOrUpdateKongregateRequest(const FCreateOrUpdateKongregateRequest& src) = default;

        FCreateOrUpdateKongregateRequest(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateKongregateRequest()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateKongregateRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateKongregateResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FCreateOrUpdateKongregateResponse() :
            FPlayFabCppResultCommon()
            {}

        FCreateOrUpdateKongregateResponse(const FCreateOrUpdateKongregateResponse& src) = default;

        FCreateOrUpdateKongregateResponse(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateKongregateResponse()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateKongregateResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FNintendoEnvironment : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Client ID for the Nintendo Environment.
        FString ClientID;

        // [optional] Client Secret for the Nintendo Environment.
        FString ClientSecret;

        // [optional] ID for the Nintendo Environment.
        FString ID;

        FNintendoEnvironment() :
            FPlayFabCppBaseModel(),
            ClientID(),
            ClientSecret(),
            ID()
            {}

        FNintendoEnvironment(const FNintendoEnvironment& src) = default;

        FNintendoEnvironment(const TSharedPtr<FJsonObject>& obj) : FNintendoEnvironment()
        {
            readFromValue(obj);
        }

        ~FNintendoEnvironment();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateNintendoRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] Nintendo Switch Application ID, without the "0x" prefix.
        FString ApplicationID;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        // [optional] List of Nintendo Environments, currently supporting up to 4. Needs Catalog enabled.
        TArray<FNintendoEnvironment> Environments;
        // [optional] If an error should be returned if the addon already exists.
        Boxed<bool> ErrorIfExists;

        FCreateOrUpdateNintendoRequest() :
            FPlayFabCppRequestCommon(),
            ApplicationID(),
            CustomTags(),
            Entity(nullptr),
            Environments(),
            ErrorIfExists()
            {}

        FCreateOrUpdateNintendoRequest(const FCreateOrUpdateNintendoRequest& src) = default;

        FCreateOrUpdateNintendoRequest(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateNintendoRequest()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateNintendoRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateNintendoResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FCreateOrUpdateNintendoResponse() :
            FPlayFabCppResultCommon()
            {}

        FCreateOrUpdateNintendoResponse(const FCreateOrUpdateNintendoResponse& src) = default;

        FCreateOrUpdateNintendoResponse(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateNintendoResponse()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateNintendoResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdatePSNRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] Client ID obtained after setting up your game with Sony. This one is associated with the existing PS4 marketplace.
        FString ClientID;

        // [optional] Client secret obtained after setting up your game with Sony. This one is associated with the existing PS4 marketplace.
        FString ClientSecret;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        // [optional] If an error should be returned if the addon already exists.
        Boxed<bool> ErrorIfExists;

        /**
         * [optional] Client ID obtained after setting up your game with Sony. This one is associated with the modern marketplace, which
         * includes PS5, cross-generation for PS4, and unified entitlements.
         */
        FString NextGenClientID;

        /**
         * [optional] Client secret obtained after setting up your game with Sony. This one is associated with the modern marketplace, which
         * includes PS5, cross-generation for PS4, and unified entitlements.
         */
        FString NextGenClientSecret;

        FCreateOrUpdatePSNRequest() :
            FPlayFabCppRequestCommon(),
            ClientID(),
            ClientSecret(),
            CustomTags(),
            Entity(nullptr),
            ErrorIfExists(),
            NextGenClientID(),
            NextGenClientSecret()
            {}

        FCreateOrUpdatePSNRequest(const FCreateOrUpdatePSNRequest& src) = default;

        FCreateOrUpdatePSNRequest(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdatePSNRequest()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdatePSNRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdatePSNResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FCreateOrUpdatePSNResponse() :
            FPlayFabCppResultCommon()
            {}

        FCreateOrUpdatePSNResponse(const FCreateOrUpdatePSNResponse& src) = default;

        FCreateOrUpdatePSNResponse(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdatePSNResponse()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdatePSNResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateSteamRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // Application ID obtained after setting up your app in Valve's developer portal.
        FString ApplicationId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] Enforce usage of AzurePlayFab identity in user authentication tickets.
        Boxed<bool> EnforceServiceSpecificTickets;

        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        // [optional] If an error should be returned if the addon already exists.
        Boxed<bool> ErrorIfExists;

        // Sercet Key obtained after setting up your app in Valve's developer portal.
        FString SecretKey;

        // [optional] Use Steam Payments sandbox endpoint for test transactions.
        Boxed<bool> UseSandbox;

        FCreateOrUpdateSteamRequest() :
            FPlayFabCppRequestCommon(),
            ApplicationId(),
            CustomTags(),
            EnforceServiceSpecificTickets(),
            Entity(nullptr),
            ErrorIfExists(),
            SecretKey(),
            UseSandbox()
            {}

        FCreateOrUpdateSteamRequest(const FCreateOrUpdateSteamRequest& src) = default;

        FCreateOrUpdateSteamRequest(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateSteamRequest()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateSteamRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateSteamResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FCreateOrUpdateSteamResponse() :
            FPlayFabCppResultCommon()
            {}

        FCreateOrUpdateSteamResponse(const FCreateOrUpdateSteamResponse& src) = default;

        FCreateOrUpdateSteamResponse(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateSteamResponse()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateSteamResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateTwitchRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] Client ID obtained after creating your Twitch developer account.
        FString ClientID;

        // [optional] Client Secret obtained after creating your Twitch developer account.
        FString ClientSecret;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        // [optional] If an error should be returned if the addon already exists.
        Boxed<bool> ErrorIfExists;

        FCreateOrUpdateTwitchRequest() :
            FPlayFabCppRequestCommon(),
            ClientID(),
            ClientSecret(),
            CustomTags(),
            Entity(nullptr),
            ErrorIfExists()
            {}

        FCreateOrUpdateTwitchRequest(const FCreateOrUpdateTwitchRequest& src) = default;

        FCreateOrUpdateTwitchRequest(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateTwitchRequest()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateTwitchRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateOrUpdateTwitchResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FCreateOrUpdateTwitchResponse() :
            FPlayFabCppResultCommon()
            {}

        FCreateOrUpdateTwitchResponse(const FCreateOrUpdateTwitchResponse& src) = default;

        FCreateOrUpdateTwitchResponse(const TSharedPtr<FJsonObject>& obj) : FCreateOrUpdateTwitchResponse()
        {
            readFromValue(obj);
        }

        ~FCreateOrUpdateTwitchResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteAppleRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FDeleteAppleRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FDeleteAppleRequest(const FDeleteAppleRequest& src) = default;

        FDeleteAppleRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteAppleRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteAppleRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteAppleResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FDeleteAppleResponse() :
            FPlayFabCppResultCommon()
            {}

        FDeleteAppleResponse(const FDeleteAppleResponse& src) = default;

        FDeleteAppleResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteAppleResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteAppleResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteFacebookInstantGamesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FDeleteFacebookInstantGamesRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FDeleteFacebookInstantGamesRequest(const FDeleteFacebookInstantGamesRequest& src) = default;

        FDeleteFacebookInstantGamesRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteFacebookInstantGamesRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteFacebookInstantGamesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteFacebookInstantGamesResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FDeleteFacebookInstantGamesResponse() :
            FPlayFabCppResultCommon()
            {}

        FDeleteFacebookInstantGamesResponse(const FDeleteFacebookInstantGamesResponse& src) = default;

        FDeleteFacebookInstantGamesResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteFacebookInstantGamesResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteFacebookInstantGamesResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteFacebookRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FDeleteFacebookRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FDeleteFacebookRequest(const FDeleteFacebookRequest& src) = default;

        FDeleteFacebookRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteFacebookRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteFacebookRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteFacebookResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FDeleteFacebookResponse() :
            FPlayFabCppResultCommon()
            {}

        FDeleteFacebookResponse(const FDeleteFacebookResponse& src) = default;

        FDeleteFacebookResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteFacebookResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteFacebookResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteGoogleRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FDeleteGoogleRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FDeleteGoogleRequest(const FDeleteGoogleRequest& src) = default;

        FDeleteGoogleRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteGoogleRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteGoogleRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteGoogleResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FDeleteGoogleResponse() :
            FPlayFabCppResultCommon()
            {}

        FDeleteGoogleResponse(const FDeleteGoogleResponse& src) = default;

        FDeleteGoogleResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteGoogleResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteGoogleResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteKongregateRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FDeleteKongregateRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FDeleteKongregateRequest(const FDeleteKongregateRequest& src) = default;

        FDeleteKongregateRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteKongregateRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteKongregateRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteKongregateResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FDeleteKongregateResponse() :
            FPlayFabCppResultCommon()
            {}

        FDeleteKongregateResponse(const FDeleteKongregateResponse& src) = default;

        FDeleteKongregateResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteKongregateResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteKongregateResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteNintendoRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FDeleteNintendoRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FDeleteNintendoRequest(const FDeleteNintendoRequest& src) = default;

        FDeleteNintendoRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteNintendoRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteNintendoRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteNintendoResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FDeleteNintendoResponse() :
            FPlayFabCppResultCommon()
            {}

        FDeleteNintendoResponse(const FDeleteNintendoResponse& src) = default;

        FDeleteNintendoResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteNintendoResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteNintendoResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeletePSNRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FDeletePSNRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FDeletePSNRequest(const FDeletePSNRequest& src) = default;

        FDeletePSNRequest(const TSharedPtr<FJsonObject>& obj) : FDeletePSNRequest()
        {
            readFromValue(obj);
        }

        ~FDeletePSNRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeletePSNResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FDeletePSNResponse() :
            FPlayFabCppResultCommon()
            {}

        FDeletePSNResponse(const FDeletePSNResponse& src) = default;

        FDeletePSNResponse(const TSharedPtr<FJsonObject>& obj) : FDeletePSNResponse()
        {
            readFromValue(obj);
        }

        ~FDeletePSNResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteSteamRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FDeleteSteamRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FDeleteSteamRequest(const FDeleteSteamRequest& src) = default;

        FDeleteSteamRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteSteamRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteSteamRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteSteamResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FDeleteSteamResponse() :
            FPlayFabCppResultCommon()
            {}

        FDeleteSteamResponse(const FDeleteSteamResponse& src) = default;

        FDeleteSteamResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteSteamResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteSteamResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteTwitchRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FDeleteTwitchRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FDeleteTwitchRequest(const FDeleteTwitchRequest& src) = default;

        FDeleteTwitchRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteTwitchRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteTwitchRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteTwitchResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FDeleteTwitchResponse() :
            FPlayFabCppResultCommon()
            {}

        FDeleteTwitchResponse(const FDeleteTwitchResponse& src) = default;

        FDeleteTwitchResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteTwitchResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteTwitchResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetAppleRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FGetAppleRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FGetAppleRequest(const FGetAppleRequest& src) = default;

        FGetAppleRequest(const TSharedPtr<FJsonObject>& obj) : FGetAppleRequest()
        {
            readFromValue(obj);
        }

        ~FGetAppleRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetAppleResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] iOS App Bundle ID obtained after setting up your app in the App Store.
        FString AppBundleId;

        // Addon status.
        bool Created;

        // [optional] Ignore expiration date for identity tokens.
        Boxed<bool> IgnoreExpirationDate;

        // [optional] Require secure authentication only for this app.
        Boxed<bool> RequireSecureAuthentication;

        FGetAppleResponse() :
            FPlayFabCppResultCommon(),
            AppBundleId(),
            Created(false),
            IgnoreExpirationDate(),
            RequireSecureAuthentication()
            {}

        FGetAppleResponse(const FGetAppleResponse& src) = default;

        FGetAppleResponse(const TSharedPtr<FJsonObject>& obj) : FGetAppleResponse()
        {
            readFromValue(obj);
        }

        ~FGetAppleResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetFacebookInstantGamesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FGetFacebookInstantGamesRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FGetFacebookInstantGamesRequest(const FGetFacebookInstantGamesRequest& src) = default;

        FGetFacebookInstantGamesRequest(const TSharedPtr<FJsonObject>& obj) : FGetFacebookInstantGamesRequest()
        {
            readFromValue(obj);
        }

        ~FGetFacebookInstantGamesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetFacebookInstantGamesResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Facebook App ID obtained after setting up your app in Facebook Instant Games.
        FString AppID;

        // Addon status.
        bool Created;

        FGetFacebookInstantGamesResponse() :
            FPlayFabCppResultCommon(),
            AppID(),
            Created(false)
            {}

        FGetFacebookInstantGamesResponse(const FGetFacebookInstantGamesResponse& src) = default;

        FGetFacebookInstantGamesResponse(const TSharedPtr<FJsonObject>& obj) : FGetFacebookInstantGamesResponse()
        {
            readFromValue(obj);
        }

        ~FGetFacebookInstantGamesResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetFacebookRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FGetFacebookRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FGetFacebookRequest(const FGetFacebookRequest& src) = default;

        FGetFacebookRequest(const TSharedPtr<FJsonObject>& obj) : FGetFacebookRequest()
        {
            readFromValue(obj);
        }

        ~FGetFacebookRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetFacebookResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Facebook App ID obtained after setting up your app in Facebook.
        FString AppID;

        // Addon status.
        bool Created;

        // [optional] Email address for purchase dispute notifications.
        FString NotificationEmail;

        FGetFacebookResponse() :
            FPlayFabCppResultCommon(),
            AppID(),
            Created(false),
            NotificationEmail()
            {}

        FGetFacebookResponse(const FGetFacebookResponse& src) = default;

        FGetFacebookResponse(const TSharedPtr<FJsonObject>& obj) : FGetFacebookResponse()
        {
            readFromValue(obj);
        }

        ~FGetFacebookResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetGoogleRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FGetGoogleRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FGetGoogleRequest(const FGetGoogleRequest& src) = default;

        FGetGoogleRequest(const TSharedPtr<FJsonObject>& obj) : FGetGoogleRequest()
        {
            readFromValue(obj);
        }

        ~FGetGoogleRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetGoogleResponse : public PlayFab::FPlayFabCppResultCommon
    {
        /**
         * [optional] Google App Package ID obtained after setting up your app in the Google Play developer portal. Required if using Google
         * receipt validation.
         */
        FString AppPackageID;

        // Addon status.
        bool Created;

        /**
         * [optional] Google OAuth Client ID obtained through the Google Developer Console by creating a new set of "OAuth Client ID".
         * Required if using Google Authentication.
         */
        FString OAuthClientID;

        /**
         * [optional] Authorized Redirect Uri obtained through the Google Developer Console. This currently defaults to
         * https://oauth.playfab.com/oauth2/google. If you are authenticating players via browser, please update this to your own
         * domain.
         */
        FString OauthCustomRedirectUri;

        FGetGoogleResponse() :
            FPlayFabCppResultCommon(),
            AppPackageID(),
            Created(false),
            OAuthClientID(),
            OauthCustomRedirectUri()
            {}

        FGetGoogleResponse(const FGetGoogleResponse& src) = default;

        FGetGoogleResponse(const TSharedPtr<FJsonObject>& obj) : FGetGoogleResponse()
        {
            readFromValue(obj);
        }

        ~FGetGoogleResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetKongregateRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FGetKongregateRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FGetKongregateRequest(const FGetKongregateRequest& src) = default;

        FGetKongregateRequest(const TSharedPtr<FJsonObject>& obj) : FGetKongregateRequest()
        {
            readFromValue(obj);
        }

        ~FGetKongregateRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetKongregateResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // Addon status.
        bool Created;

        FGetKongregateResponse() :
            FPlayFabCppResultCommon(),
            Created(false)
            {}

        FGetKongregateResponse(const FGetKongregateResponse& src) = default;

        FGetKongregateResponse(const TSharedPtr<FJsonObject>& obj) : FGetKongregateResponse()
        {
            readFromValue(obj);
        }

        ~FGetKongregateResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetNintendoRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FGetNintendoRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FGetNintendoRequest(const FGetNintendoRequest& src) = default;

        FGetNintendoRequest(const TSharedPtr<FJsonObject>& obj) : FGetNintendoRequest()
        {
            readFromValue(obj);
        }

        ~FGetNintendoRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetNintendoResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Nintendo Switch Application ID, without the "0x" prefix.
        FString ApplicationID;

        // Addon status.
        bool Created;

        // [optional] List of Nintendo Environments, currently supporting up to 4.
        TArray<FNintendoEnvironment> Environments;
        FGetNintendoResponse() :
            FPlayFabCppResultCommon(),
            ApplicationID(),
            Created(false),
            Environments()
            {}

        FGetNintendoResponse(const FGetNintendoResponse& src) = default;

        FGetNintendoResponse(const TSharedPtr<FJsonObject>& obj) : FGetNintendoResponse()
        {
            readFromValue(obj);
        }

        ~FGetNintendoResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetPSNRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FGetPSNRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FGetPSNRequest(const FGetPSNRequest& src) = default;

        FGetPSNRequest(const TSharedPtr<FJsonObject>& obj) : FGetPSNRequest()
        {
            readFromValue(obj);
        }

        ~FGetPSNRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetPSNResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Client ID obtained after setting up your game with Sony. This one is associated with the existing PS4 marketplace.
        FString ClientID;

        // Addon status.
        bool Created;

        /**
         * [optional] Client ID obtained after setting up your game with Sony. This one is associated with the modern marketplace, which
         * includes PS5, cross-generation for PS4, and unified entitlements.
         */
        FString NextGenClientID;

        FGetPSNResponse() :
            FPlayFabCppResultCommon(),
            ClientID(),
            Created(false),
            NextGenClientID()
            {}

        FGetPSNResponse(const FGetPSNResponse& src) = default;

        FGetPSNResponse(const TSharedPtr<FJsonObject>& obj) : FGetPSNResponse()
        {
            readFromValue(obj);
        }

        ~FGetPSNResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetSteamRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FGetSteamRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FGetSteamRequest(const FGetSteamRequest& src) = default;

        FGetSteamRequest(const TSharedPtr<FJsonObject>& obj) : FGetSteamRequest()
        {
            readFromValue(obj);
        }

        ~FGetSteamRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetSteamResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Application ID obtained after setting up your game in Valve's developer portal.
        FString ApplicationId;

        // Addon status.
        bool Created;

        // [optional] Enforce usage of AzurePlayFab identity in user authentication tickets.
        Boxed<bool> EnforceServiceSpecificTickets;

        // [optional] Use Steam Payments sandbox endpoint for test transactions.
        Boxed<bool> UseSandbox;

        FGetSteamResponse() :
            FPlayFabCppResultCommon(),
            ApplicationId(),
            Created(false),
            EnforceServiceSpecificTickets(),
            UseSandbox()
            {}

        FGetSteamResponse(const FGetSteamResponse& src) = default;

        FGetSteamResponse(const TSharedPtr<FJsonObject>& obj) : FGetSteamResponse()
        {
            readFromValue(obj);
        }

        ~FGetSteamResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetTwitchRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FGetTwitchRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FGetTwitchRequest(const FGetTwitchRequest& src) = default;

        FGetTwitchRequest(const TSharedPtr<FJsonObject>& obj) : FGetTwitchRequest()
        {
            readFromValue(obj);
        }

        ~FGetTwitchRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetTwitchResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Client ID obtained after creating your Twitch developer account.
        FString ClientID;

        // Addon status.
        bool Created;

        FGetTwitchResponse() :
            FPlayFabCppResultCommon(),
            ClientID(),
            Created(false)
            {}

        FGetTwitchResponse(const FGetTwitchResponse& src) = default;

        FGetTwitchResponse(const TSharedPtr<FJsonObject>& obj) : FGetTwitchResponse()
        {
            readFromValue(obj);
        }

        ~FGetTwitchResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

}
}
