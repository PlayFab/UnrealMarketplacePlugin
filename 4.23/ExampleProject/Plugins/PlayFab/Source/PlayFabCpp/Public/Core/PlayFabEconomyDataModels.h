//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "PlayFabCppBaseModel.h"

namespace PlayFab
{
namespace EconomyModels
{

    struct PLAYFABCPP_API FCatalogAlternateId : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Type of the alternate ID.
        FString Type;

        // [optional] Value of the alternate ID.
        FString Value;

        FCatalogAlternateId() :
            FPlayFabCppBaseModel(),
            Type(),
            Value()
            {}

        FCatalogAlternateId(const FCatalogAlternateId& src) = default;

        FCatalogAlternateId(const TSharedPtr<FJsonObject>& obj) : FCatalogAlternateId()
        {
            readFromValue(obj);
        }

        ~FCatalogAlternateId();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEntityKey : public PlayFab::FPlayFabCppBaseModel
    {
        // Unique ID of the entity.
        FString Id;

        // [optional] Entity type. See https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types
        FString Type;

        FEntityKey() :
            FPlayFabCppBaseModel(),
            Id(),
            Type()
            {}

        FEntityKey(const FEntityKey& src) = default;

        FEntityKey(const TSharedPtr<FJsonObject>& obj) : FEntityKey()
        {
            readFromValue(obj);
        }

        ~FEntityKey();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum DisplayPropertyType
    {
        DisplayPropertyTypeNone,
        DisplayPropertyTypeQueryDateTime,
        DisplayPropertyTypeQueryDouble,
        DisplayPropertyTypeQueryString,
        DisplayPropertyTypeSearchString
    };

    PLAYFABCPP_API void writeDisplayPropertyTypeEnumJSON(DisplayPropertyType enumVal, JsonWriter& writer);
    PLAYFABCPP_API DisplayPropertyType readDisplayPropertyTypeFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API DisplayPropertyType readDisplayPropertyTypeFromValue(const FString& value);

    struct PLAYFABCPP_API FDisplayPropertyIndexInfo : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The property name in the 'DisplayProperties' property to be indexed.
        FString Name;

        // [optional] The type of the property to be indexed.
        Boxed<DisplayPropertyType> Type;

        FDisplayPropertyIndexInfo() :
            FPlayFabCppBaseModel(),
            Name(),
            Type()
            {}

        FDisplayPropertyIndexInfo(const FDisplayPropertyIndexInfo& src) = default;

        FDisplayPropertyIndexInfo(const TSharedPtr<FJsonObject>& obj) : FDisplayPropertyIndexInfo()
        {
            readFromValue(obj);
        }

        ~FDisplayPropertyIndexInfo();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FFileConfig : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The set of content types that will be used for validation.
        TArray<FString> ContentTypes;
        // [optional] The set of tags that will be used for validation.
        TArray<FString> Tags;
        FFileConfig() :
            FPlayFabCppBaseModel(),
            ContentTypes(),
            Tags()
            {}

        FFileConfig(const FFileConfig& src) = default;

        FFileConfig(const TSharedPtr<FJsonObject>& obj) : FFileConfig()
        {
            readFromValue(obj);
        }

        ~FFileConfig();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FImageConfig : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The set of tags that will be used for validation.
        TArray<FString> Tags;
        FImageConfig() :
            FPlayFabCppBaseModel(),
            Tags()
            {}

        FImageConfig(const FImageConfig& src) = default;

        FImageConfig(const TSharedPtr<FJsonObject>& obj) : FImageConfig()
        {
            readFromValue(obj);
        }

        ~FImageConfig();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUserGeneratedContentSpecificConfig : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The set of content types that will be used for validation.
        TArray<FString> ContentTypes;
        // [optional] The set of tags that will be used for validation.
        TArray<FString> Tags;
        FUserGeneratedContentSpecificConfig() :
            FPlayFabCppBaseModel(),
            ContentTypes(),
            Tags()
            {}

        FUserGeneratedContentSpecificConfig(const FUserGeneratedContentSpecificConfig& src) = default;

        FUserGeneratedContentSpecificConfig(const TSharedPtr<FJsonObject>& obj) : FUserGeneratedContentSpecificConfig()
        {
            readFromValue(obj);
        }

        ~FUserGeneratedContentSpecificConfig();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogConfig : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] A list of player entity keys that will have admin permissions.
        TArray<FEntityKey> AdminEntities;
        // [optional] A list of display properties to index.
        TArray<FDisplayPropertyIndexInfo> DisplayPropertyIndexInfos;
        // [optional] The set of configuration that only applies to Files.
        TSharedPtr<FFileConfig> File;

        // [optional] The set of configuration that only applies to Images.
        TSharedPtr<FImageConfig> Image;

        // Flag defining whether catalog is enabled.
        bool IsCatalogEnabled;

        // [optional] A list of Platforms that can be applied to catalog items.
        TArray<FString> Platforms;
        // [optional] A set of player entity keys that are allowed to review content.
        TArray<FEntityKey> ReviewerEntities;
        // [optional] The set of configuration that only applies to user generated contents.
        TSharedPtr<FUserGeneratedContentSpecificConfig> UserGeneratedContent;

        FCatalogConfig() :
            FPlayFabCppBaseModel(),
            AdminEntities(),
            DisplayPropertyIndexInfos(),
            File(nullptr),
            Image(nullptr),
            IsCatalogEnabled(false),
            Platforms(),
            ReviewerEntities(),
            UserGeneratedContent(nullptr)
            {}

        FCatalogConfig(const FCatalogConfig& src) = default;

        FCatalogConfig(const TSharedPtr<FJsonObject>& obj) : FCatalogConfig()
        {
            readFromValue(obj);
        }

        ~FCatalogConfig();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FContent : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The content unique ID.
        FString Id;

        // [optional] The maximum client version that this content is compatible with.
        FString MaxClientVersion;

        // [optional] The minimum client version that this content is compatible with.
        FString MinClientVersion;

        // [optional] The list of tags that are associated with this content.
        TArray<FString> Tags;
        // [optional] The client-defined type of the content.
        FString Type;

        // [optional] The Azure CDN URL for retrieval of the catalog item binary content.
        FString Url;

        FContent() :
            FPlayFabCppBaseModel(),
            Id(),
            MaxClientVersion(),
            MinClientVersion(),
            Tags(),
            Type(),
            Url()
            {}

        FContent(const FContent& src) = default;

        FContent(const TSharedPtr<FJsonObject>& obj) : FContent()
        {
            readFromValue(obj);
        }

        ~FContent();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FImage : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The image unique ID.
        FString Id;

        // [optional] The client-defined tag associated with this image.
        FString Tag;

        // [optional] The client-defined type of this image.
        FString Type;

        // [optional] The URL for retrieval of the image.
        FString Url;

        FImage() :
            FPlayFabCppBaseModel(),
            Id(),
            Tag(),
            Type(),
            Url()
            {}

        FImage(const FImage& src) = default;

        FImage(const TSharedPtr<FJsonObject>& obj) : FImage()
        {
            readFromValue(obj);
        }

        ~FImage();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FKeywordSet : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] A list of localized keywords.
        TArray<FString> Values;
        FKeywordSet() :
            FPlayFabCppBaseModel(),
            Values()
            {}

        FKeywordSet(const FKeywordSet& src) = default;

        FKeywordSet(const TSharedPtr<FJsonObject>& obj) : FKeywordSet()
        {
            readFromValue(obj);
        }

        ~FKeywordSet();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum ModerationStatus
    {
        ModerationStatusUnknown,
        ModerationStatusAwaitingModeration,
        ModerationStatusApproved,
        ModerationStatusRejected
    };

    PLAYFABCPP_API void writeModerationStatusEnumJSON(ModerationStatus enumVal, JsonWriter& writer);
    PLAYFABCPP_API ModerationStatus readModerationStatusFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API ModerationStatus readModerationStatusFromValue(const FString& value);

    struct PLAYFABCPP_API FModerationState : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The date and time this moderation state was last updated.
        Boxed<FDateTime> LastModifiedDate;

        // [optional] The current stated reason for the associated item being moderated.
        FString Reason;

        // [optional] The current moderation status for the associated item.
        Boxed<ModerationStatus> Status;

        FModerationState() :
            FPlayFabCppBaseModel(),
            LastModifiedDate(),
            Reason(),
            Status()
            {}

        FModerationState(const FModerationState& src) = default;

        FModerationState(const TSharedPtr<FJsonObject>& obj) : FModerationState()
        {
            readFromValue(obj);
        }

        ~FModerationState();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRating : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The average rating for this item.
        Boxed<float> Average;

        // [optional] The total count of 1 star ratings for this item.
        Boxed<int32> Count1Star;

        // [optional] The total count of 2 star ratings for this item.
        Boxed<int32> Count2Star;

        // [optional] The total count of 3 star ratings for this item.
        Boxed<int32> Count3Star;

        // [optional] The total count of 4 star ratings for this item.
        Boxed<int32> Count4Star;

        // [optional] The total count of 5 star ratings for this item.
        Boxed<int32> Count5Star;

        // [optional] The total count of ratings for this item.
        Boxed<int32> TotalCount;

        FRating() :
            FPlayFabCppBaseModel(),
            Average(),
            Count1Star(),
            Count2Star(),
            Count3Star(),
            Count4Star(),
            Count5Star(),
            TotalCount()
            {}

        FRating(const FRating& src) = default;

        FRating(const TSharedPtr<FJsonObject>& obj) : FRating()
        {
            readFromValue(obj);
        }

        ~FRating();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogItem : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The alternate IDs associated with this item.
        TArray<FCatalogAlternateId> AlternateIds;
        // [optional] The set of contents associated with this item.
        TArray<FContent> Contents;
        // [optional] The client-defined type of the item.
        FString ContentType;

        // [optional] The date and time when this item was created.
        Boxed<FDateTime> CreationDate;

        // [optional] The ID of the creator of this catalog item.
        TSharedPtr<FEntityKey> CreatorEntity;

        /**
         * [optional] A dictionary of localized descriptions. Key is language code and localized string is the value. The neutral locale is
         * required.
         */
        TMap<FString, FString> Description;
        // [optional] Game specific properties for display purposes. This is an arbitrary JSON blob.
        FJsonKeeper DisplayProperties;

        // [optional] The user provided version of the item for display purposes.
        FString DisplayVersion;

        // [optional] The date of when the item will cease to be available. If not provided then the product will be available indefinitely.
        Boxed<FDateTime> EndDate;

        // [optional] The current ETag value that can be used for optimistic concurrency in the If-None-Match header.
        FString ETag;

        // [optional] The unique ID of the item.
        FString Id;

        // [optional] The images associated with this item. Images can be thumbnails or screenshots.
        TArray<FImage> Images;
        // [optional] Indicates if the item is hidden.
        Boxed<bool> IsHidden;

        // [optional] A dictionary of localized keywords. Key is language code and localized list of keywords is the value.
        TMap<FString, FKeywordSet> Keywords;
        // [optional] The date and time this item was last updated.
        Boxed<FDateTime> LastModifiedDate;

        // [optional] The moderation state for this item.
        TSharedPtr<FModerationState> Moderation;

        // [optional] Rating summary for this item.
        TSharedPtr<FRating> pfRating;

        // [optional] The date of when the item will be available. If not provided then the product will appear immediately.
        Boxed<FDateTime> StartDate;

        // [optional] The list of tags that are associated with this item.
        TArray<FString> Tags;
        /**
         * [optional] A dictionary of localized titles. Key is language code and localized string is the value. The neutral locale is
         * required.
         */
        TMap<FString, FString> Title;
        // [optional] The high-level type of the item.
        FString Type;

        FCatalogItem() :
            FPlayFabCppBaseModel(),
            AlternateIds(),
            Contents(),
            ContentType(),
            CreationDate(),
            CreatorEntity(nullptr),
            Description(),
            DisplayProperties(),
            DisplayVersion(),
            EndDate(),
            ETag(),
            Id(),
            Images(),
            IsHidden(),
            Keywords(),
            LastModifiedDate(),
            Moderation(nullptr),
            pfRating(nullptr),
            StartDate(),
            Tags(),
            Title(),
            Type()
            {}

        FCatalogItem(const FCatalogItem& src) = default;

        FCatalogItem(const TSharedPtr<FJsonObject>& obj) : FCatalogItem()
        {
            readFromValue(obj);
        }

        ~FCatalogItem();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogPriceAmount : public PlayFab::FPlayFabCppBaseModel
    {
        // The amount of the catalog price.
        int32 Amount;

        // [optional] The Item ID of the price.
        FString Id;

        FCatalogPriceAmount() :
            FPlayFabCppBaseModel(),
            Amount(0),
            Id()
            {}

        FCatalogPriceAmount(const FCatalogPriceAmount& src) = default;

        FCatalogPriceAmount(const TSharedPtr<FJsonObject>& obj) : FCatalogPriceAmount()
        {
            readFromValue(obj);
        }

        ~FCatalogPriceAmount();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogPriceInstance : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The amounts of the catalog item price.
        TArray<FCatalogPriceAmount> Amounts;
        FCatalogPriceInstance() :
            FPlayFabCppBaseModel(),
            Amounts()
            {}

        FCatalogPriceInstance(const FCatalogPriceInstance& src) = default;

        FCatalogPriceInstance(const TSharedPtr<FJsonObject>& obj) : FCatalogPriceInstance()
        {
            readFromValue(obj);
        }

        ~FCatalogPriceInstance();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogPrice : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Prices of the catalog item.
        TArray<FCatalogPriceInstance> Prices;
        // [optional] Real prices of the catalog item.
        TArray<FCatalogPriceInstance> RealPrices;
        // [optional] A standardized sorting key to allow proper sorting between items with prices in different currencies.
        Boxed<int32> Sort;

        FCatalogPrice() :
            FPlayFabCppBaseModel(),
            Prices(),
            RealPrices(),
            Sort()
            {}

        FCatalogPrice(const FCatalogPrice& src) = default;

        FCatalogPrice(const TSharedPtr<FJsonObject>& obj) : FCatalogPrice()
        {
            readFromValue(obj);
        }

        ~FCatalogPrice();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogItemReference : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The amount of the catalog item.
        Boxed<int32> Amount;

        // [optional] The unique ID of the catalog item.
        FString Id;

        // [optional] The price of the catalog item.
        TSharedPtr<FCatalogPrice> Price;

        FCatalogItemReference() :
            FPlayFabCppBaseModel(),
            Amount(),
            Id(),
            Price(nullptr)
            {}

        FCatalogItemReference(const FCatalogItemReference& src) = default;

        FCatalogItemReference(const TSharedPtr<FJsonObject>& obj) : FCatalogItemReference()
        {
            readFromValue(obj);
        }

        ~FCatalogItemReference();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogSpecificConfig : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The set of content types that will be used for validation.
        TArray<FString> ContentTypes;
        // [optional] The set of tags that will be used for validation.
        TArray<FString> Tags;
        FCatalogSpecificConfig() :
            FPlayFabCppBaseModel(),
            ContentTypes(),
            Tags()
            {}

        FCatalogSpecificConfig(const FCatalogSpecificConfig& src) = default;

        FCatalogSpecificConfig(const TSharedPtr<FJsonObject>& obj) : FCatalogSpecificConfig()
        {
            readFromValue(obj);
        }

        ~FCatalogSpecificConfig();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum ConcernCategory
    {
        ConcernCategoryNone,
        ConcernCategoryOffensiveContent,
        ConcernCategoryChildExploitation,
        ConcernCategoryMalwareOrVirus,
        ConcernCategoryPrivacyConcerns,
        ConcernCategoryMisleadingApp,
        ConcernCategoryPoorPerformance,
        ConcernCategoryReviewResponse,
        ConcernCategorySpamAdvertising,
        ConcernCategoryProfanity
    };

    PLAYFABCPP_API void writeConcernCategoryEnumJSON(ConcernCategory enumVal, JsonWriter& writer);
    PLAYFABCPP_API ConcernCategory readConcernCategoryFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API ConcernCategory readConcernCategoryFromValue(const FString& value);

    struct PLAYFABCPP_API FCreateDraftItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] Metadata describing the new catalog item to be created.
        TSharedPtr<FCatalogItem> Item;

        // Whether the item should be published immediately.
        bool Publish;

        FCreateDraftItemRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Item(nullptr),
            Publish(false)
            {}

        FCreateDraftItemRequest(const FCreateDraftItemRequest& src) = default;

        FCreateDraftItemRequest(const TSharedPtr<FJsonObject>& obj) : FCreateDraftItemRequest()
        {
            readFromValue(obj);
        }

        ~FCreateDraftItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateDraftItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Updated metadata describing the catalog item just created.
        TSharedPtr<FCatalogItem> Item;

        FCreateDraftItemResponse() :
            FPlayFabCppResultCommon(),
            Item(nullptr)
            {}

        FCreateDraftItemResponse(const FCreateDraftItemResponse& src) = default;

        FCreateDraftItemResponse(const TSharedPtr<FJsonObject>& obj) : FCreateDraftItemResponse()
        {
            readFromValue(obj);
        }

        ~FCreateDraftItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUploadInfo : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Name of the file to be uploaded.
        FString FileName;

        FUploadInfo() :
            FPlayFabCppBaseModel(),
            FileName()
            {}

        FUploadInfo(const FUploadInfo& src) = default;

        FUploadInfo(const TSharedPtr<FJsonObject>& obj) : FUploadInfo()
        {
            readFromValue(obj);
        }

        ~FUploadInfo();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateUploadUrlsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] Description of the files to be uploaded by the client.
        TArray<FUploadInfo> Files;
        FCreateUploadUrlsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Files()
            {}

        FCreateUploadUrlsRequest(const FCreateUploadUrlsRequest& src) = default;

        FCreateUploadUrlsRequest(const TSharedPtr<FJsonObject>& obj) : FCreateUploadUrlsRequest()
        {
            readFromValue(obj);
        }

        ~FCreateUploadUrlsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUploadUrlMetadata : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Name of the file for which this upload URL was requested.
        FString FileName;

        // [optional] Unique ID for the binary content to be uploaded to the target URL.
        FString Id;

        // [optional] URL for the binary content to be uploaded to.
        FString Url;

        FUploadUrlMetadata() :
            FPlayFabCppBaseModel(),
            FileName(),
            Id(),
            Url()
            {}

        FUploadUrlMetadata(const FUploadUrlMetadata& src) = default;

        FUploadUrlMetadata(const TSharedPtr<FJsonObject>& obj) : FUploadUrlMetadata()
        {
            readFromValue(obj);
        }

        ~FUploadUrlMetadata();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateUploadUrlsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] List of URLs metadata for the files to be uploaded by the client.
        TArray<FUploadUrlMetadata> UploadUrls;
        FCreateUploadUrlsResponse() :
            FPlayFabCppResultCommon(),
            UploadUrls()
            {}

        FCreateUploadUrlsResponse(const FCreateUploadUrlsResponse& src) = default;

        FCreateUploadUrlsResponse(const TSharedPtr<FJsonObject>& obj) : FCreateUploadUrlsResponse()
        {
            readFromValue(obj);
        }

        ~FCreateUploadUrlsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeepLinkFormat : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The format of the deep link to return. The format should contain '{id}' to represent where the item ID should be placed.
        FString Format;

        // [optional] The target platform for the deep link.
        FString Platform;

        FDeepLinkFormat() :
            FPlayFabCppBaseModel(),
            Format(),
            Platform()
            {}

        FDeepLinkFormat(const FDeepLinkFormat& src) = default;

        FDeepLinkFormat(const TSharedPtr<FJsonObject>& obj) : FDeepLinkFormat()
        {
            readFromValue(obj);
        }

        ~FDeepLinkFormat();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteEntityItemReviewsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        FDeleteEntityItemReviewsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FDeleteEntityItemReviewsRequest(const FDeleteEntityItemReviewsRequest& src) = default;

        FDeleteEntityItemReviewsRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteEntityItemReviewsRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteEntityItemReviewsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteEntityItemReviewsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FDeleteEntityItemReviewsResponse() :
            FPlayFabCppResultCommon()
            {}

        FDeleteEntityItemReviewsResponse(const FDeleteEntityItemReviewsResponse& src) = default;

        FDeleteEntityItemReviewsResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteEntityItemReviewsResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteEntityItemReviewsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The unique ID of the item.
        FString Id;

        FDeleteItemRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            Id()
            {}

        FDeleteItemRequest(const FDeleteItemRequest& src) = default;

        FDeleteItemRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteItemRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FDeleteItemResponse() :
            FPlayFabCppResultCommon()
            {}

        FDeleteItemResponse(const FDeleteItemResponse& src) = default;

        FDeleteItemResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteItemResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FFilterOptions : public PlayFab::FPlayFabCppBaseModel
    {
        FFilterOptions() :
            FPlayFabCppBaseModel()
            {}

        FFilterOptions(const FFilterOptions& src) = default;

        FFilterOptions(const TSharedPtr<FJsonObject>& obj) : FFilterOptions()
        {
            readFromValue(obj);
        }

        ~FFilterOptions();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetCatalogConfigRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FGetCatalogConfigRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FGetCatalogConfigRequest(const FGetCatalogConfigRequest& src) = default;

        FGetCatalogConfigRequest(const TSharedPtr<FJsonObject>& obj) : FGetCatalogConfigRequest()
        {
            readFromValue(obj);
        }

        ~FGetCatalogConfigRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetCatalogConfigResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The catalog configuration.
        TSharedPtr<FCatalogConfig> Config;

        FGetCatalogConfigResponse() :
            FPlayFabCppResultCommon(),
            Config(nullptr)
            {}

        FGetCatalogConfigResponse(const FGetCatalogConfigResponse& src) = default;

        FGetCatalogConfigResponse(const TSharedPtr<FJsonObject>& obj) : FGetCatalogConfigResponse()
        {
            readFromValue(obj);
        }

        ~FGetCatalogConfigResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetDraftItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The unique ID of the item.
        FString Id;

        FGetDraftItemRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            Id()
            {}

        FGetDraftItemRequest(const FGetDraftItemRequest& src) = default;

        FGetDraftItemRequest(const TSharedPtr<FJsonObject>& obj) : FGetDraftItemRequest()
        {
            readFromValue(obj);
        }

        ~FGetDraftItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetDraftItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Full metadata of the catalog item requested.
        TSharedPtr<FCatalogItem> Item;

        FGetDraftItemResponse() :
            FPlayFabCppResultCommon(),
            Item(nullptr)
            {}

        FGetDraftItemResponse(const FGetDraftItemResponse& src) = default;

        FGetDraftItemResponse(const TSharedPtr<FJsonObject>& obj) : FGetDraftItemResponse()
        {
            readFromValue(obj);
        }

        ~FGetDraftItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetDraftItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] List of item alternate IDs.
        TArray<FCatalogAlternateId> AlternateIds;
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] List of Item Ids.
        TArray<FString> Ids;
        FGetDraftItemsRequest() :
            FPlayFabCppRequestCommon(),
            AlternateIds(),
            CustomTags(),
            Entity(nullptr),
            Ids()
            {}

        FGetDraftItemsRequest(const FGetDraftItemsRequest& src) = default;

        FGetDraftItemsRequest(const TSharedPtr<FJsonObject>& obj) : FGetDraftItemsRequest()
        {
            readFromValue(obj);
        }

        ~FGetDraftItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetDraftItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] An opaque token used to retrieve the next page of items, if any are available.
        FString ContinuationToken;

        // [optional] A set of items created by the entity.
        TArray<FCatalogItem> Items;
        FGetDraftItemsResponse() :
            FPlayFabCppResultCommon(),
            ContinuationToken(),
            Items()
            {}

        FGetDraftItemsResponse(const FGetDraftItemsResponse& src) = default;

        FGetDraftItemsResponse(const TSharedPtr<FJsonObject>& obj) : FGetDraftItemsResponse()
        {
            readFromValue(obj);
        }

        ~FGetDraftItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetEntityDraftItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        /**
         * [optional] An opaque token used to retrieve the next page of items created by the caller, if any are available. Should be null on
         * initial request.
         */
        FString ContinuationToken;

        // Number of items to retrieve. Maximum page size is 10.
        int32 Count;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        FGetEntityDraftItemsRequest() :
            FPlayFabCppRequestCommon(),
            ContinuationToken(),
            Count(0),
            CustomTags(),
            Entity(nullptr)
            {}

        FGetEntityDraftItemsRequest(const FGetEntityDraftItemsRequest& src) = default;

        FGetEntityDraftItemsRequest(const TSharedPtr<FJsonObject>& obj) : FGetEntityDraftItemsRequest()
        {
            readFromValue(obj);
        }

        ~FGetEntityDraftItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetEntityDraftItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] An opaque token used to retrieve the next page of items, if any are available.
        FString ContinuationToken;

        // [optional] A set of items created by the entity.
        TArray<FCatalogItem> Items;
        FGetEntityDraftItemsResponse() :
            FPlayFabCppResultCommon(),
            ContinuationToken(),
            Items()
            {}

        FGetEntityDraftItemsResponse(const FGetEntityDraftItemsResponse& src) = default;

        FGetEntityDraftItemsResponse(const TSharedPtr<FJsonObject>& obj) : FGetEntityDraftItemsResponse()
        {
            readFromValue(obj);
        }

        ~FGetEntityDraftItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetEntityItemReviewRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The unique ID of the item.
        FString Id;

        FGetEntityItemReviewRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            Id()
            {}

        FGetEntityItemReviewRequest(const FGetEntityItemReviewRequest& src) = default;

        FGetEntityItemReviewRequest(const TSharedPtr<FJsonObject>& obj) : FGetEntityItemReviewRequest()
        {
            readFromValue(obj);
        }

        ~FGetEntityItemReviewRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReview : public PlayFab::FPlayFabCppBaseModel
    {
        // The number of negative helpfulness votes for this review.
        int32 HelpfulNegative;

        // The number of positive helpfulness votes for this review.
        int32 HelpfulPositive;

        // Indicates whether the review author has the item installed.
        bool IsInstalled;

        // [optional] The ID of the item being reviewed.
        FString ItemId;

        // [optional] The version of the item being reviewed.
        FString ItemVersion;

        // [optional] The locale for which this review was submitted in.
        FString Locale;

        // Star rating associated with this review.
        int32 Rating;

        // [optional] The ID of the author of the review.
        FString ReviewerId;

        // [optional] The ID of the review.
        FString ReviewId;

        // [optional] The full text of this review.
        FString ReviewText;

        // The date and time this review was last submitted.
        FDateTime Submitted;

        // [optional] The title of this review.
        FString Title;

        FReview() :
            FPlayFabCppBaseModel(),
            HelpfulNegative(0),
            HelpfulPositive(0),
            IsInstalled(false),
            ItemId(),
            ItemVersion(),
            Locale(),
            Rating(0),
            ReviewerId(),
            ReviewId(),
            ReviewText(),
            Submitted(0),
            Title()
            {}

        FReview(const FReview& src) = default;

        FReview(const TSharedPtr<FJsonObject>& obj) : FReview()
        {
            readFromValue(obj);
        }

        ~FReview();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetEntityItemReviewResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The review the entity submitted for the requested item.
        TSharedPtr<FReview> pfReview;

        FGetEntityItemReviewResponse() :
            FPlayFabCppResultCommon(),
            pfReview(nullptr)
            {}

        FGetEntityItemReviewResponse(const FGetEntityItemReviewResponse& src) = default;

        FGetEntityItemReviewResponse(const TSharedPtr<FJsonObject>& obj) : FGetEntityItemReviewResponse()
        {
            readFromValue(obj);
        }

        ~FGetEntityItemReviewResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemModerationStateRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The unique ID of the item.
        FString Id;

        FGetItemModerationStateRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Id()
            {}

        FGetItemModerationStateRequest(const FGetItemModerationStateRequest& src) = default;

        FGetItemModerationStateRequest(const TSharedPtr<FJsonObject>& obj) : FGetItemModerationStateRequest()
        {
            readFromValue(obj);
        }

        ~FGetItemModerationStateRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemModerationStateResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The current moderation state for the requested item.
        TSharedPtr<FModerationState> State;

        FGetItemModerationStateResponse() :
            FPlayFabCppResultCommon(),
            State(nullptr)
            {}

        FGetItemModerationStateResponse(const FGetItemModerationStateResponse& src) = default;

        FGetItemModerationStateResponse(const TSharedPtr<FJsonObject>& obj) : FGetItemModerationStateResponse()
        {
            readFromValue(obj);
        }

        ~FGetItemModerationStateResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemPublishStatusRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The unique ID of the item.
        FString Id;

        FGetItemPublishStatusRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            Id()
            {}

        FGetItemPublishStatusRequest(const FGetItemPublishStatusRequest& src) = default;

        FGetItemPublishStatusRequest(const TSharedPtr<FJsonObject>& obj) : FGetItemPublishStatusRequest()
        {
            readFromValue(obj);
        }

        ~FGetItemPublishStatusRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum PublishResult
    {
        PublishResultUnknown,
        PublishResultPending,
        PublishResultSucceeded,
        PublishResultFailed,
        PublishResultCanceled
    };

    PLAYFABCPP_API void writePublishResultEnumJSON(PublishResult enumVal, JsonWriter& writer);
    PLAYFABCPP_API PublishResult readPublishResultFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API PublishResult readPublishResultFromValue(const FString& value);

    struct PLAYFABCPP_API FGetItemPublishStatusResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] High level status of the published item.
        Boxed<PublishResult> Result;

        // [optional] Descriptive message about the current status of the publish.
        FString StatusMessage;

        FGetItemPublishStatusResponse() :
            FPlayFabCppResultCommon(),
            Result(),
            StatusMessage()
            {}

        FGetItemPublishStatusResponse(const FGetItemPublishStatusResponse& src) = default;

        FGetItemPublishStatusResponse(const TSharedPtr<FJsonObject>& obj) : FGetItemPublishStatusResponse()
        {
            readFromValue(obj);
        }

        ~FGetItemPublishStatusResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The unique ID of the item.
        FString Id;

        FGetItemRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            Id()
            {}

        FGetItemRequest(const FGetItemRequest& src) = default;

        FGetItemRequest(const TSharedPtr<FJsonObject>& obj) : FGetItemRequest()
        {
            readFromValue(obj);
        }

        ~FGetItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The item result.
        TSharedPtr<FCatalogItem> Item;

        FGetItemResponse() :
            FPlayFabCppResultCommon(),
            Item(nullptr)
            {}

        FGetItemResponse(const FGetItemResponse& src) = default;

        FGetItemResponse(const TSharedPtr<FJsonObject>& obj) : FGetItemResponse()
        {
            readFromValue(obj);
        }

        ~FGetItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemReviewsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] An opaque token used to retrieve the next page of items, if any are available.
        FString ContinuationToken;

        // Number of items to retrieve. Maximum page size is 200. If not specified, defaults to 10.
        int32 Count;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The unique ID of the item.
        FString Id;

        // [optional] An OData orderBy used to order the results of the query.
        FString OrderBy;

        FGetItemReviewsRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            ContinuationToken(),
            Count(0),
            CustomTags(),
            Id(),
            OrderBy()
            {}

        FGetItemReviewsRequest(const FGetItemReviewsRequest& src) = default;

        FGetItemReviewsRequest(const TSharedPtr<FJsonObject>& obj) : FGetItemReviewsRequest()
        {
            readFromValue(obj);
        }

        ~FGetItemReviewsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemReviewsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] An opaque token used to retrieve the next page of items, if any are available.
        FString ContinuationToken;

        // [optional] The paginated set of results.
        TArray<FReview> Reviews;
        FGetItemReviewsResponse() :
            FPlayFabCppResultCommon(),
            ContinuationToken(),
            Reviews()
            {}

        FGetItemReviewsResponse(const FGetItemReviewsResponse& src) = default;

        FGetItemReviewsResponse(const TSharedPtr<FJsonObject>& obj) : FGetItemReviewsResponse()
        {
            readFromValue(obj);
        }

        ~FGetItemReviewsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemReviewSummaryRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The unique ID of the item.
        FString Id;

        FGetItemReviewSummaryRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Id()
            {}

        FGetItemReviewSummaryRequest(const FGetItemReviewSummaryRequest& src) = default;

        FGetItemReviewSummaryRequest(const TSharedPtr<FJsonObject>& obj) : FGetItemReviewSummaryRequest()
        {
            readFromValue(obj);
        }

        ~FGetItemReviewSummaryRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemReviewSummaryResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The least favorable review for this item.
        TSharedPtr<FReview> LeastFavorableReview;

        // [optional] The most favorable review for this item.
        TSharedPtr<FReview> MostFavorableReview;

        // [optional] The summary of ratings associated with this item.
        TSharedPtr<FRating> pfRating;

        // The total number of reviews associated with this item.
        int32 ReviewsCount;

        FGetItemReviewSummaryResponse() :
            FPlayFabCppResultCommon(),
            LeastFavorableReview(nullptr),
            MostFavorableReview(nullptr),
            pfRating(nullptr),
            ReviewsCount(0)
            {}

        FGetItemReviewSummaryResponse(const FGetItemReviewSummaryResponse& src) = default;

        FGetItemReviewSummaryResponse(const TSharedPtr<FJsonObject>& obj) : FGetItemReviewSummaryResponse()
        {
            readFromValue(obj);
        }

        ~FGetItemReviewSummaryResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] List of item alternate IDs.
        TArray<FCatalogAlternateId> AlternateIds;
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] List of Item Ids.
        TArray<FString> Ids;
        FGetItemsRequest() :
            FPlayFabCppRequestCommon(),
            AlternateIds(),
            CustomTags(),
            Entity(nullptr),
            Ids()
            {}

        FGetItemsRequest(const FGetItemsRequest& src) = default;

        FGetItemsRequest(const TSharedPtr<FJsonObject>& obj) : FGetItemsRequest()
        {
            readFromValue(obj);
        }

        ~FGetItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Metadata of set of items.
        TArray<FCatalogItem> Items;
        FGetItemsResponse() :
            FPlayFabCppResultCommon(),
            Items()
            {}

        FGetItemsResponse(const FGetItemsResponse& src) = default;

        FGetItemsResponse(const TSharedPtr<FJsonObject>& obj) : FGetItemsResponse()
        {
            readFromValue(obj);
        }

        ~FGetItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum HelpfulnessVote
    {
        HelpfulnessVoteNone,
        HelpfulnessVoteUnHelpful,
        HelpfulnessVoteHelpful
    };

    PLAYFABCPP_API void writeHelpfulnessVoteEnumJSON(HelpfulnessVote enumVal, JsonWriter& writer);
    PLAYFABCPP_API HelpfulnessVote readHelpfulnessVoteFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API HelpfulnessVote readHelpfulnessVoteFromValue(const FString& value);

    struct PLAYFABCPP_API FPayoutDetails : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The Dev Center account ID of the payee.
        FString AccountSellerId;

        // [optional] The tax code for payout calculations.
        FString TaxCode;

        // [optional] The Universal account ID of the payee.
        FString Uaid;

        FPayoutDetails() :
            FPlayFabCppBaseModel(),
            AccountSellerId(),
            TaxCode(),
            Uaid()
            {}

        FPayoutDetails(const FPayoutDetails& src) = default;

        FPayoutDetails(const TSharedPtr<FJsonObject>& obj) : FPayoutDetails()
        {
            readFromValue(obj);
        }

        ~FPayoutDetails();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPriceOverride : public PlayFab::FPlayFabCppBaseModel
    {
        FPriceOverride() :
            FPlayFabCppBaseModel()
            {}

        FPriceOverride(const FPriceOverride& src) = default;

        FPriceOverride(const TSharedPtr<FJsonObject>& obj) : FPriceOverride()
        {
            readFromValue(obj);
        }

        ~FPriceOverride();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPricesOverride : public PlayFab::FPlayFabCppBaseModel
    {
        FPricesOverride() :
            FPlayFabCppBaseModel()
            {}

        FPricesOverride(const FPricesOverride& src) = default;

        FPricesOverride(const TSharedPtr<FJsonObject>& obj) : FPricesOverride()
        {
            readFromValue(obj);
        }

        ~FPricesOverride();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPublishDraftItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        /**
         * [optional] ETag of the catalog item to published from the working catalog to the public catalog. Used for optimistic concurrency.
         * If the provided ETag does not match the ETag in the current working catalog, the request will be rejected. If not
         * provided, the current version of the document in the working catalog will be published.
         */
        FString ETag;

        // [optional] The unique ID of the item.
        FString Id;

        FPublishDraftItemRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            ETag(),
            Id()
            {}

        FPublishDraftItemRequest(const FPublishDraftItemRequest& src) = default;

        FPublishDraftItemRequest(const TSharedPtr<FJsonObject>& obj) : FPublishDraftItemRequest()
        {
            readFromValue(obj);
        }

        ~FPublishDraftItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPublishDraftItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FPublishDraftItemResponse() :
            FPlayFabCppResultCommon()
            {}

        FPublishDraftItemResponse(const FPublishDraftItemResponse& src) = default;

        FPublishDraftItemResponse(const TSharedPtr<FJsonObject>& obj) : FPublishDraftItemResponse()
        {
            readFromValue(obj);
        }

        ~FPublishDraftItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPurchaseOverride : public PlayFab::FPlayFabCppBaseModel
    {
        FPurchaseOverride() :
            FPlayFabCppBaseModel()
            {}

        FPurchaseOverride(const FPurchaseOverride& src) = default;

        FPurchaseOverride(const TSharedPtr<FJsonObject>& obj) : FPurchaseOverride()
        {
            readFromValue(obj);
        }

        ~FPurchaseOverride();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReportItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] Category of concern for this report.
        Boxed<ConcernCategory> pfConcernCategory;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The unique ID of the item.
        FString Id;

        // [optional] The string reason for this report.
        FString Reason;

        FReportItemRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            pfConcernCategory(),
            CustomTags(),
            Entity(nullptr),
            Id(),
            Reason()
            {}

        FReportItemRequest(const FReportItemRequest& src) = default;

        FReportItemRequest(const TSharedPtr<FJsonObject>& obj) : FReportItemRequest()
        {
            readFromValue(obj);
        }

        ~FReportItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReportItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FReportItemResponse() :
            FPlayFabCppResultCommon()
            {}

        FReportItemResponse(const FReportItemResponse& src) = default;

        FReportItemResponse(const TSharedPtr<FJsonObject>& obj) : FReportItemResponse()
        {
            readFromValue(obj);
        }

        ~FReportItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReportItemReviewRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID of the item associated with the review.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The reason this review is being reported.
        Boxed<ConcernCategory> pfConcernCategory;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The string ID of the item associated with the review.
        FString ItemId;

        // [optional] The string reason for this report.
        FString Reason;

        // [optional] The ID of the review to submit a report for.
        FString ReviewId;

        FReportItemReviewRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            pfConcernCategory(),
            CustomTags(),
            Entity(nullptr),
            ItemId(),
            Reason(),
            ReviewId()
            {}

        FReportItemReviewRequest(const FReportItemReviewRequest& src) = default;

        FReportItemReviewRequest(const TSharedPtr<FJsonObject>& obj) : FReportItemReviewRequest()
        {
            readFromValue(obj);
        }

        ~FReportItemReviewRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReportItemReviewResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FReportItemReviewResponse() :
            FPlayFabCppResultCommon()
            {}

        FReportItemReviewResponse(const FReportItemReviewResponse& src) = default;

        FReportItemReviewResponse(const TSharedPtr<FJsonObject>& obj) : FReportItemReviewResponse()
        {
            readFromValue(obj);
        }

        ~FReportItemReviewResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReviewItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The unique ID of the item.
        FString Id;

        // [optional] The review to submit.
        TSharedPtr<FReview> pfReview;

        FReviewItemRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            Id(),
            pfReview(nullptr)
            {}

        FReviewItemRequest(const FReviewItemRequest& src) = default;

        FReviewItemRequest(const TSharedPtr<FJsonObject>& obj) : FReviewItemRequest()
        {
            readFromValue(obj);
        }

        ~FReviewItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReviewItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FReviewItemResponse() :
            FPlayFabCppResultCommon()
            {}

        FReviewItemResponse(const FReviewItemResponse& src) = default;

        FReviewItemResponse(const TSharedPtr<FJsonObject>& obj) : FReviewItemResponse()
        {
            readFromValue(obj);
        }

        ~FReviewItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReviewTakedown : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The ID of the item associated with the review to take down.
        FString ItemId;

        // [optional] The ID of the review to take down.
        FString ReviewId;

        FReviewTakedown() :
            FPlayFabCppBaseModel(),
            AlternateId(nullptr),
            ItemId(),
            ReviewId()
            {}

        FReviewTakedown(const FReviewTakedown& src) = default;

        FReviewTakedown(const TSharedPtr<FJsonObject>& obj) : FReviewTakedown()
        {
            readFromValue(obj);
        }

        ~FReviewTakedown();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FScanResult : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The URL of the item which failed the scan.
        FString Url;

        FScanResult() :
            FPlayFabCppBaseModel(),
            Url()
            {}

        FScanResult(const FScanResult& src) = default;

        FScanResult(const TSharedPtr<FJsonObject>& obj) : FScanResult()
        {
            readFromValue(obj);
        }

        ~FScanResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSearchItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An opaque token used to retrieve the next page of items, if any are available.
        FString ContinuationToken;

        // Number of items to retrieve. Maximum page size is 225. Default value is 10.
        int32 Count;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] An OData filter used to refine the search query.
        FString Filter;

        // [optional] An OData orderBy used to order the results of the search query.
        FString OrderBy;

        // [optional] The text to search for.
        FString Search;

        /**
         * [optional] An OData select query option used to augment the search results. If not defined, the default search result metadata will
         * be returned.
         */
        FString Select;

        FSearchItemsRequest() :
            FPlayFabCppRequestCommon(),
            ContinuationToken(),
            Count(0),
            CustomTags(),
            Entity(nullptr),
            Filter(),
            OrderBy(),
            Search(),
            Select()
            {}

        FSearchItemsRequest(const FSearchItemsRequest& src) = default;

        FSearchItemsRequest(const TSharedPtr<FJsonObject>& obj) : FSearchItemsRequest()
        {
            readFromValue(obj);
        }

        ~FSearchItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSearchItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] An opaque token used to retrieve the next page of items, if any are available.
        FString ContinuationToken;

        // [optional] The paginated set of results for the search query.
        TArray<FCatalogItem> Items;
        FSearchItemsResponse() :
            FPlayFabCppResultCommon(),
            ContinuationToken(),
            Items()
            {}

        FSearchItemsResponse(const FSearchItemsResponse& src) = default;

        FSearchItemsResponse(const TSharedPtr<FJsonObject>& obj) : FSearchItemsResponse()
        {
            readFromValue(obj);
        }

        ~FSearchItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSetItemModerationStateRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The unique ID of the item.
        FString Id;

        // [optional] The reason for the moderation state change for the associated item.
        FString Reason;

        // [optional] The status to set for the associated item.
        Boxed<ModerationStatus> Status;

        FSetItemModerationStateRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Id(),
            Reason(),
            Status()
            {}

        FSetItemModerationStateRequest(const FSetItemModerationStateRequest& src) = default;

        FSetItemModerationStateRequest(const TSharedPtr<FJsonObject>& obj) : FSetItemModerationStateRequest()
        {
            readFromValue(obj);
        }

        ~FSetItemModerationStateRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSetItemModerationStateResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FSetItemModerationStateResponse() :
            FPlayFabCppResultCommon()
            {}

        FSetItemModerationStateResponse(const FSetItemModerationStateResponse& src) = default;

        FSetItemModerationStateResponse(const TSharedPtr<FJsonObject>& obj) : FSetItemModerationStateResponse()
        {
            readFromValue(obj);
        }

        ~FSetItemModerationStateResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FStoreDetails : public PlayFab::FPlayFabCppBaseModel
    {
        FStoreDetails() :
            FPlayFabCppBaseModel()
            {}

        FStoreDetails(const FStoreDetails& src) = default;

        FStoreDetails(const TSharedPtr<FJsonObject>& obj) : FStoreDetails()
        {
            readFromValue(obj);
        }

        ~FStoreDetails();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FStoreInfo : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] An alternate ID of the store.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The unique ID of the store.
        FString Id;

        FStoreInfo() :
            FPlayFabCppBaseModel(),
            AlternateId(nullptr),
            Id()
            {}

        FStoreInfo(const FStoreInfo& src) = default;

        FStoreInfo(const TSharedPtr<FJsonObject>& obj) : FStoreInfo()
        {
            readFromValue(obj);
        }

        ~FStoreInfo();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSubmitItemReviewVoteRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID of the item associated with the review.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The string ID of the item associated with the review.
        FString ItemId;

        // [optional] The ID of the review to submit a helpfulness vote for.
        FString ReviewId;

        // [optional] The helpfulness vote of the review.
        Boxed<HelpfulnessVote> Vote;

        FSubmitItemReviewVoteRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            ItemId(),
            ReviewId(),
            Vote()
            {}

        FSubmitItemReviewVoteRequest(const FSubmitItemReviewVoteRequest& src) = default;

        FSubmitItemReviewVoteRequest(const TSharedPtr<FJsonObject>& obj) : FSubmitItemReviewVoteRequest()
        {
            readFromValue(obj);
        }

        ~FSubmitItemReviewVoteRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSubmitItemReviewVoteResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FSubmitItemReviewVoteResponse() :
            FPlayFabCppResultCommon()
            {}

        FSubmitItemReviewVoteResponse(const FSubmitItemReviewVoteResponse& src) = default;

        FSubmitItemReviewVoteResponse(const TSharedPtr<FJsonObject>& obj) : FSubmitItemReviewVoteResponse()
        {
            readFromValue(obj);
        }

        ~FSubmitItemReviewVoteResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSubscriptionDetails : public PlayFab::FPlayFabCppBaseModel
    {
        // The length of time that the subscription will last in seconds.
        double DurationInSeconds;

        FSubscriptionDetails() :
            FPlayFabCppBaseModel(),
            DurationInSeconds(0)
            {}

        FSubscriptionDetails(const FSubscriptionDetails& src) = default;

        FSubscriptionDetails(const TSharedPtr<FJsonObject>& obj) : FSubscriptionDetails()
        {
            readFromValue(obj);
        }

        ~FSubscriptionDetails();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FTakedownItemReviewsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The set of reviews to take down.
        TArray<FReviewTakedown> Reviews;
        FTakedownItemReviewsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Reviews()
            {}

        FTakedownItemReviewsRequest(const FTakedownItemReviewsRequest& src) = default;

        FTakedownItemReviewsRequest(const TSharedPtr<FJsonObject>& obj) : FTakedownItemReviewsRequest()
        {
            readFromValue(obj);
        }

        ~FTakedownItemReviewsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FTakedownItemReviewsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FTakedownItemReviewsResponse() :
            FPlayFabCppResultCommon()
            {}

        FTakedownItemReviewsResponse(const FTakedownItemReviewsResponse& src) = default;

        FTakedownItemReviewsResponse(const TSharedPtr<FJsonObject>& obj) : FTakedownItemReviewsResponse()
        {
            readFromValue(obj);
        }

        ~FTakedownItemReviewsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateCatalogConfigRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The updated catalog configuration.
        TSharedPtr<FCatalogConfig> Config;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FUpdateCatalogConfigRequest() :
            FPlayFabCppRequestCommon(),
            Config(nullptr),
            CustomTags()
            {}

        FUpdateCatalogConfigRequest(const FUpdateCatalogConfigRequest& src) = default;

        FUpdateCatalogConfigRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateCatalogConfigRequest()
        {
            readFromValue(obj);
        }

        ~FUpdateCatalogConfigRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateCatalogConfigResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FUpdateCatalogConfigResponse() :
            FPlayFabCppResultCommon()
            {}

        FUpdateCatalogConfigResponse(const FUpdateCatalogConfigResponse& src) = default;

        FUpdateCatalogConfigResponse(const TSharedPtr<FJsonObject>& obj) : FUpdateCatalogConfigResponse()
        {
            readFromValue(obj);
        }

        ~FUpdateCatalogConfigResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateDraftItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] Updated metadata describing the catalog item to be updated.
        TSharedPtr<FCatalogItem> Item;

        // Whether the item should be published immediately.
        bool Publish;

        FUpdateDraftItemRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Item(nullptr),
            Publish(false)
            {}

        FUpdateDraftItemRequest(const FUpdateDraftItemRequest& src) = default;

        FUpdateDraftItemRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateDraftItemRequest()
        {
            readFromValue(obj);
        }

        ~FUpdateDraftItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateDraftItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Updated metadata describing the catalog item just updated.
        TSharedPtr<FCatalogItem> Item;

        FUpdateDraftItemResponse() :
            FPlayFabCppResultCommon(),
            Item(nullptr)
            {}

        FUpdateDraftItemResponse(const FUpdateDraftItemResponse& src) = default;

        FUpdateDraftItemResponse(const TSharedPtr<FJsonObject>& obj) : FUpdateDraftItemResponse()
        {
            readFromValue(obj);
        }

        ~FUpdateDraftItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

}
}
