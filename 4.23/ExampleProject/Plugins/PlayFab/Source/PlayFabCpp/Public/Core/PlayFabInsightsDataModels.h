//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "PlayFabCppBaseModel.h"

namespace PlayFab
{
namespace InsightsModels
{

    struct PLAYFABCPP_API FInsightsEmptyRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FInsightsEmptyRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FInsightsEmptyRequest(const FInsightsEmptyRequest& src) = default;

        FInsightsEmptyRequest(const TSharedPtr<FJsonObject>& obj) : FInsightsEmptyRequest()
        {
            readFromValue(obj);
        }

        ~FInsightsEmptyRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInsightsPerformanceLevel : public PlayFab::FPlayFabCppBaseModel
    {
        // Number of allowed active event exports.
        int32 ActiveEventExports;

        // Maximum cache size.
        int32 CacheSizeMB;

        // Maximum number of concurrent queries.
        int32 Concurrency;

        // Number of Insights credits consumed per minute.
        double CreditsPerMinute;

        // Maximum events per second.
        int32 EventsPerSecond;

        // Performance level.
        int32 Level;

        // Maximum amount of memory allowed per query.
        int32 MaxMemoryPerQueryMB;

        // Amount of compute power allocated for queries and operations.
        int32 VirtualCpuCores;

        FInsightsPerformanceLevel() :
            FPlayFabCppBaseModel(),
            ActiveEventExports(0),
            CacheSizeMB(0),
            Concurrency(0),
            CreditsPerMinute(0),
            EventsPerSecond(0),
            Level(0),
            MaxMemoryPerQueryMB(0),
            VirtualCpuCores(0)
            {}

        FInsightsPerformanceLevel(const FInsightsPerformanceLevel& src) = default;

        FInsightsPerformanceLevel(const TSharedPtr<FJsonObject>& obj) : FInsightsPerformanceLevel()
        {
            readFromValue(obj);
        }

        ~FInsightsPerformanceLevel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInsightsGetLimitsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // Default Insights performance level.
        int32 DefaultPerformanceLevel;

        // Default Insights data storage retention days.
        int32 DefaultStorageRetentionDays;

        // Maximum allowed data storage retention days.
        int32 StorageMaxRetentionDays;

        // Minimum allowed data storage retention days.
        int32 StorageMinRetentionDays;

        // [optional] List of Insights submeter limits for the allowed performance levels.
        TArray<FInsightsPerformanceLevel> SubMeters;
        FInsightsGetLimitsResponse() :
            FPlayFabCppResultCommon(),
            DefaultPerformanceLevel(0),
            DefaultStorageRetentionDays(0),
            StorageMaxRetentionDays(0),
            StorageMinRetentionDays(0),
            SubMeters()
            {}

        FInsightsGetLimitsResponse(const FInsightsGetLimitsResponse& src) = default;

        FInsightsGetLimitsResponse(const TSharedPtr<FJsonObject>& obj) : FInsightsGetLimitsResponse()
        {
            readFromValue(obj);
        }

        ~FInsightsGetLimitsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInsightsGetOperationStatusResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Optional message related to the operation details.
        FString Message;

        // Time the operation was completed.
        FDateTime OperationCompletedTime;

        // [optional] Id of the Insights operation.
        FString OperationId;

        // Time the operation status was last updated.
        FDateTime OperationLastUpdated;

        // Time the operation started.
        FDateTime OperationStartedTime;

        // [optional] The type of operation, SetPerformance or SetStorageRetention.
        FString OperationType;

        // The value requested for the operation.
        int32 OperationValue;

        // [optional] Current status of the operation.
        FString Status;

        FInsightsGetOperationStatusResponse() :
            FPlayFabCppResultCommon(),
            Message(),
            OperationCompletedTime(0),
            OperationId(),
            OperationLastUpdated(0),
            OperationStartedTime(0),
            OperationType(),
            OperationValue(0),
            Status()
            {}

        FInsightsGetOperationStatusResponse(const FInsightsGetOperationStatusResponse& src) = default;

        FInsightsGetOperationStatusResponse(const TSharedPtr<FJsonObject>& obj) : FInsightsGetOperationStatusResponse()
        {
            readFromValue(obj);
        }

        ~FInsightsGetOperationStatusResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInsightsGetDetailsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // Amount of data (in MB) currently used by Insights.
        uint32 DataUsageMb;

        // [optional] Details of any error that occurred while retrieving Insights details.
        FString ErrorMessage;

        // [optional] Allowed range of values for performance level and data storage retention.
        TSharedPtr<FInsightsGetLimitsResponse> Limits;

        // [optional] List of pending Insights operations for the title.
        TArray<FInsightsGetOperationStatusResponse> PendingOperations;
        // Current Insights performance level setting.
        int32 PerformanceLevel;

        // Current Insights data storage retention value in days.
        int32 RetentionDays;

        FInsightsGetDetailsResponse() :
            FPlayFabCppResultCommon(),
            DataUsageMb(0),
            ErrorMessage(),
            Limits(nullptr),
            PendingOperations(),
            PerformanceLevel(0),
            RetentionDays(0)
            {}

        FInsightsGetDetailsResponse(const FInsightsGetDetailsResponse& src) = default;

        FInsightsGetDetailsResponse(const TSharedPtr<FJsonObject>& obj) : FInsightsGetDetailsResponse()
        {
            readFromValue(obj);
        }

        ~FInsightsGetDetailsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInsightsGetOperationStatusRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] Id of the Insights operation.
        FString OperationId;

        FInsightsGetOperationStatusRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            OperationId()
            {}

        FInsightsGetOperationStatusRequest(const FInsightsGetOperationStatusRequest& src) = default;

        FInsightsGetOperationStatusRequest(const TSharedPtr<FJsonObject>& obj) : FInsightsGetOperationStatusRequest()
        {
            readFromValue(obj);
        }

        ~FInsightsGetOperationStatusRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInsightsGetPendingOperationsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The type of pending operations requested, or blank for all operation types.
        FString OperationType;

        FInsightsGetPendingOperationsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            OperationType()
            {}

        FInsightsGetPendingOperationsRequest(const FInsightsGetPendingOperationsRequest& src) = default;

        FInsightsGetPendingOperationsRequest(const TSharedPtr<FJsonObject>& obj) : FInsightsGetPendingOperationsRequest()
        {
            readFromValue(obj);
        }

        ~FInsightsGetPendingOperationsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInsightsGetPendingOperationsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] List of pending Insights operations.
        TArray<FInsightsGetOperationStatusResponse> PendingOperations;
        FInsightsGetPendingOperationsResponse() :
            FPlayFabCppResultCommon(),
            PendingOperations()
            {}

        FInsightsGetPendingOperationsResponse(const FInsightsGetPendingOperationsResponse& src) = default;

        FInsightsGetPendingOperationsResponse(const TSharedPtr<FJsonObject>& obj) : FInsightsGetPendingOperationsResponse()
        {
            readFromValue(obj);
        }

        ~FInsightsGetPendingOperationsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInsightsOperationResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Optional message related to the operation details.
        FString Message;

        // [optional] Id of the Insights operation.
        FString OperationId;

        // [optional] The type of operation, SetPerformance or SetStorageRetention.
        FString OperationType;

        FInsightsOperationResponse() :
            FPlayFabCppResultCommon(),
            Message(),
            OperationId(),
            OperationType()
            {}

        FInsightsOperationResponse(const FInsightsOperationResponse& src) = default;

        FInsightsOperationResponse(const TSharedPtr<FJsonObject>& obj) : FInsightsOperationResponse()
        {
            readFromValue(obj);
        }

        ~FInsightsOperationResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInsightsSetPerformanceRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The Insights performance level to apply to the title.
        int32 PerformanceLevel;

        FInsightsSetPerformanceRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            PerformanceLevel(0)
            {}

        FInsightsSetPerformanceRequest(const FInsightsSetPerformanceRequest& src) = default;

        FInsightsSetPerformanceRequest(const TSharedPtr<FJsonObject>& obj) : FInsightsSetPerformanceRequest()
        {
            readFromValue(obj);
        }

        ~FInsightsSetPerformanceRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInsightsSetStorageRetentionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The Insights data storage retention value (in days) to apply to the title.
        int32 RetentionDays;

        FInsightsSetStorageRetentionRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            RetentionDays(0)
            {}

        FInsightsSetStorageRetentionRequest(const FInsightsSetStorageRetentionRequest& src) = default;

        FInsightsSetStorageRetentionRequest(const TSharedPtr<FJsonObject>& obj) : FInsightsSetStorageRetentionRequest()
        {
            readFromValue(obj);
        }

        ~FInsightsSetStorageRetentionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

}
}
