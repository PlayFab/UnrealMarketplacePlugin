//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "PlayFabCppBaseModel.h"

namespace PlayFab
{
namespace MultiplayerModels
{

    struct PLAYFABCPP_API FAssetReference : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The asset's file name. This is a filename with the .zip, .tar, or .tar.gz extension.
        FString FileName;

        // [optional] The asset's mount path.
        FString MountPath;

        FAssetReference() :
            FPlayFabCppBaseModel(),
            FileName(),
            MountPath()
            {}

        FAssetReference(const FAssetReference& src) :
            FPlayFabCppBaseModel(),
            FileName(src.FileName),
            MountPath(src.MountPath)
            {}

        FAssetReference(const TSharedPtr<FJsonObject>& obj) : FAssetReference()
        {
            readFromValue(obj);
        }

        ~FAssetReference();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FAssetReferenceParams : public PlayFab::FPlayFabCppBaseModel
    {
        // The asset's file name.
        FString FileName;

        // [optional] The asset's mount path.
        FString MountPath;

        FAssetReferenceParams() :
            FPlayFabCppBaseModel(),
            FileName(),
            MountPath()
            {}

        FAssetReferenceParams(const FAssetReferenceParams& src) :
            FPlayFabCppBaseModel(),
            FileName(src.FileName),
            MountPath(src.MountPath)
            {}

        FAssetReferenceParams(const TSharedPtr<FJsonObject>& obj) : FAssetReferenceParams()
        {
            readFromValue(obj);
        }

        ~FAssetReferenceParams();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FAssetSummary : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The asset's file name. This is a filename with the .zip, .tar, or .tar.gz extension.
        FString FileName;

        // [optional] The metadata associated with the asset.
        TMap<FString, FString> Metadata;
        FAssetSummary() :
            FPlayFabCppBaseModel(),
            FileName(),
            Metadata()
            {}

        FAssetSummary(const FAssetSummary& src) :
            FPlayFabCppBaseModel(),
            FileName(src.FileName),
            Metadata(src.Metadata)
            {}

        FAssetSummary(const TSharedPtr<FJsonObject>& obj) : FAssetSummary()
        {
            readFromValue(obj);
        }

        ~FAssetSummary();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum AzureRegion
    {
        AzureRegionAustraliaEast,
        AzureRegionAustraliaSoutheast,
        AzureRegionBrazilSouth,
        AzureRegionCentralUs,
        AzureRegionEastAsia,
        AzureRegionEastUs,
        AzureRegionEastUs2,
        AzureRegionJapanEast,
        AzureRegionJapanWest,
        AzureRegionNorthCentralUs,
        AzureRegionNorthEurope,
        AzureRegionSouthCentralUs,
        AzureRegionSoutheastAsia,
        AzureRegionWestEurope,
        AzureRegionWestUs,
        AzureRegionChinaEast2,
        AzureRegionChinaNorth2,
        AzureRegionSouthAfricaNorth,
        AzureRegionCentralUsEuap,
        AzureRegionWestCentralUs,
        AzureRegionKoreaCentral,
        AzureRegionFranceCentral,
        AzureRegionWestUs2,
        AzureRegionCentralIndia,
        AzureRegionUaeNorth
    };

    PLAYFABCPP_API void writeAzureRegionEnumJSON(AzureRegion enumVal, JsonWriter& writer);
    PLAYFABCPP_API AzureRegion readAzureRegionFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API AzureRegion readAzureRegionFromValue(const FString& value);

    enum AzureVmFamily
    {
        AzureVmFamilyA,
        AzureVmFamilyAv2,
        AzureVmFamilyDv2,
        AzureVmFamilyDv3,
        AzureVmFamilyF,
        AzureVmFamilyFsv2,
        AzureVmFamilyDasv4,
        AzureVmFamilyDav4,
        AzureVmFamilyEav4,
        AzureVmFamilyEasv4,
        AzureVmFamilyEv4,
        AzureVmFamilyEsv4,
        AzureVmFamilyDsv3,
        AzureVmFamilyDsv2
    };

    PLAYFABCPP_API void writeAzureVmFamilyEnumJSON(AzureVmFamily enumVal, JsonWriter& writer);
    PLAYFABCPP_API AzureVmFamily readAzureVmFamilyFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API AzureVmFamily readAzureVmFamilyFromValue(const FString& value);

    enum AzureVmSize
    {
        AzureVmSizeStandard_A1,
        AzureVmSizeStandard_A2,
        AzureVmSizeStandard_A3,
        AzureVmSizeStandard_A4,
        AzureVmSizeStandard_A1_v2,
        AzureVmSizeStandard_A2_v2,
        AzureVmSizeStandard_A4_v2,
        AzureVmSizeStandard_A8_v2,
        AzureVmSizeStandard_D1_v2,
        AzureVmSizeStandard_D2_v2,
        AzureVmSizeStandard_D3_v2,
        AzureVmSizeStandard_D4_v2,
        AzureVmSizeStandard_D5_v2,
        AzureVmSizeStandard_D2_v3,
        AzureVmSizeStandard_D4_v3,
        AzureVmSizeStandard_D8_v3,
        AzureVmSizeStandard_D16_v3,
        AzureVmSizeStandard_F1,
        AzureVmSizeStandard_F2,
        AzureVmSizeStandard_F4,
        AzureVmSizeStandard_F8,
        AzureVmSizeStandard_F16,
        AzureVmSizeStandard_F2s_v2,
        AzureVmSizeStandard_F4s_v2,
        AzureVmSizeStandard_F8s_v2,
        AzureVmSizeStandard_F16s_v2,
        AzureVmSizeStandard_D2as_v4,
        AzureVmSizeStandard_D4as_v4,
        AzureVmSizeStandard_D8as_v4,
        AzureVmSizeStandard_D16as_v4,
        AzureVmSizeStandard_D2a_v4,
        AzureVmSizeStandard_D4a_v4,
        AzureVmSizeStandard_D8a_v4,
        AzureVmSizeStandard_D16a_v4,
        AzureVmSizeStandard_E2a_v4,
        AzureVmSizeStandard_E4a_v4,
        AzureVmSizeStandard_E8a_v4,
        AzureVmSizeStandard_E16a_v4,
        AzureVmSizeStandard_E2as_v4,
        AzureVmSizeStandard_E4as_v4,
        AzureVmSizeStandard_E8as_v4,
        AzureVmSizeStandard_E16as_v4,
        AzureVmSizeStandard_D2s_v3,
        AzureVmSizeStandard_D4s_v3,
        AzureVmSizeStandard_D8s_v3,
        AzureVmSizeStandard_D16s_v3,
        AzureVmSizeStandard_DS1_v2,
        AzureVmSizeStandard_DS2_v2,
        AzureVmSizeStandard_DS3_v2,
        AzureVmSizeStandard_DS4_v2,
        AzureVmSizeStandard_DS5_v2
    };

    PLAYFABCPP_API void writeAzureVmSizeEnumJSON(AzureVmSize enumVal, JsonWriter& writer);
    PLAYFABCPP_API AzureVmSize readAzureVmSizeFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API AzureVmSize readAzureVmSizeFromValue(const FString& value);

    struct PLAYFABCPP_API FBuildSelectionCriterion : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Dictionary of build ids and their respective weights for distribution of allocation requests.
        TMap<FString, uint32> BuildWeightDistribution;
        FBuildSelectionCriterion() :
            FPlayFabCppBaseModel(),
            BuildWeightDistribution()
            {}

        FBuildSelectionCriterion(const FBuildSelectionCriterion& src) :
            FPlayFabCppBaseModel(),
            BuildWeightDistribution(src.BuildWeightDistribution)
            {}

        FBuildSelectionCriterion(const TSharedPtr<FJsonObject>& obj) : FBuildSelectionCriterion()
        {
            readFromValue(obj);
        }

        ~FBuildSelectionCriterion();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FBuildAliasDetailsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The guid string alias Id of the alias to be created or updated.
        FString AliasId;

        // [optional] The alias name.
        FString AliasName;

        // [optional] Array of build selection criteria.
        TArray<FBuildSelectionCriterion> BuildSelectionCriteria;
        // The page size on the response.
        int32 PageSize;

        // [optional] The skip token for the paged response.
        FString SkipToken;

        FBuildAliasDetailsResponse() :
            FPlayFabCppResultCommon(),
            AliasId(),
            AliasName(),
            BuildSelectionCriteria(),
            PageSize(0),
            SkipToken()
            {}

        FBuildAliasDetailsResponse(const FBuildAliasDetailsResponse& src) :
            FPlayFabCppResultCommon(),
            AliasId(src.AliasId),
            AliasName(src.AliasName),
            BuildSelectionCriteria(src.BuildSelectionCriteria),
            PageSize(src.PageSize),
            SkipToken(src.SkipToken)
            {}

        FBuildAliasDetailsResponse(const TSharedPtr<FJsonObject>& obj) : FBuildAliasDetailsResponse()
        {
            readFromValue(obj);
        }

        ~FBuildAliasDetailsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FBuildAliasParams : public PlayFab::FPlayFabCppBaseModel
    {
        // The guid string alias ID to use for the request.
        FString AliasId;

        FBuildAliasParams() :
            FPlayFabCppBaseModel(),
            AliasId()
            {}

        FBuildAliasParams(const FBuildAliasParams& src) :
            FPlayFabCppBaseModel(),
            AliasId(src.AliasId)
            {}

        FBuildAliasParams(const TSharedPtr<FJsonObject>& obj) : FBuildAliasParams()
        {
            readFromValue(obj);
        }

        ~FBuildAliasParams();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCurrentServerStats : public PlayFab::FPlayFabCppBaseModel
    {
        // The number of active multiplayer servers.
        int32 Active;

        // The number of multiplayer servers still downloading game resources (such as assets).
        int32 Propping;

        // The number of standingby multiplayer servers.
        int32 StandingBy;

        // The total number of multiplayer servers.
        int32 Total;

        FCurrentServerStats() :
            FPlayFabCppBaseModel(),
            Active(0),
            Propping(0),
            StandingBy(0),
            Total(0)
            {}

        FCurrentServerStats(const FCurrentServerStats& src) :
            FPlayFabCppBaseModel(),
            Active(src.Active),
            Propping(src.Propping),
            StandingBy(src.StandingBy),
            Total(src.Total)
            {}

        FCurrentServerStats(const TSharedPtr<FJsonObject>& obj) : FCurrentServerStats()
        {
            readFromValue(obj);
        }

        ~FCurrentServerStats();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDynamicStandbyThreshold : public PlayFab::FPlayFabCppBaseModel
    {
        // When the trigger threshold is reached, multiply by this value
        double Multiplier;

        // The multiplier will be applied when the actual standby divided by target standby floor is less than this value
        double TriggerThresholdPercentage;

        FDynamicStandbyThreshold() :
            FPlayFabCppBaseModel(),
            Multiplier(0),
            TriggerThresholdPercentage(0)
            {}

        FDynamicStandbyThreshold(const FDynamicStandbyThreshold& src) :
            FPlayFabCppBaseModel(),
            Multiplier(src.Multiplier),
            TriggerThresholdPercentage(src.TriggerThresholdPercentage)
            {}

        FDynamicStandbyThreshold(const TSharedPtr<FJsonObject>& obj) : FDynamicStandbyThreshold()
        {
            readFromValue(obj);
        }

        ~FDynamicStandbyThreshold();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDynamicStandbySettings : public PlayFab::FPlayFabCppBaseModel
    {
        /**
         * [optional] List of auto standing by trigger values and corresponding standing by multiplier. Defaults to 1.5X at 50%, 3X at 25%,
         * and 4X at 5%
         */
        TArray<FDynamicStandbyThreshold> DynamicFloorMultiplierThresholds;
        // When true, dynamic standby will be enabled
        bool IsEnabled;

        // [optional] The time it takes to reduce target standing by to configured floor value after an increase. Defaults to 30 minutes
        Boxed<int32> RampDownSeconds;

        FDynamicStandbySettings() :
            FPlayFabCppBaseModel(),
            DynamicFloorMultiplierThresholds(),
            IsEnabled(false),
            RampDownSeconds()
            {}

        FDynamicStandbySettings(const FDynamicStandbySettings& src) :
            FPlayFabCppBaseModel(),
            DynamicFloorMultiplierThresholds(src.DynamicFloorMultiplierThresholds),
            IsEnabled(src.IsEnabled),
            RampDownSeconds(src.RampDownSeconds)
            {}

        FDynamicStandbySettings(const TSharedPtr<FJsonObject>& obj) : FDynamicStandbySettings()
        {
            readFromValue(obj);
        }

        ~FDynamicStandbySettings();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSchedule : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] A short description about this schedule. For example, "Game launch on July 15th".
        FString Description;

        /**
         * The date and time in UTC at which the schedule ends. If IsRecurringWeekly is true, this schedule will keep renewing for
         * future weeks until disabled or removed.
         */
        FDateTime EndTime;

        // Disables the schedule.
        bool IsDisabled;

        // If true, the StartTime and EndTime will get renewed every week.
        bool IsRecurringWeekly;

        // The date and time in UTC at which the schedule starts.
        FDateTime StartTime;

        // The standby target to maintain for the duration of the schedule.
        int32 TargetStandby;

        FSchedule() :
            FPlayFabCppBaseModel(),
            Description(),
            EndTime(0),
            IsDisabled(false),
            IsRecurringWeekly(false),
            StartTime(0),
            TargetStandby(0)
            {}

        FSchedule(const FSchedule& src) :
            FPlayFabCppBaseModel(),
            Description(src.Description),
            EndTime(src.EndTime),
            IsDisabled(src.IsDisabled),
            IsRecurringWeekly(src.IsRecurringWeekly),
            StartTime(src.StartTime),
            TargetStandby(src.TargetStandby)
            {}

        FSchedule(const TSharedPtr<FJsonObject>& obj) : FSchedule()
        {
            readFromValue(obj);
        }

        ~FSchedule();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FScheduledStandbySettings : public PlayFab::FPlayFabCppBaseModel
    {
        // When true, scheduled standby will be enabled
        bool IsEnabled;

        // [optional] A list of non-overlapping schedules
        TArray<FSchedule> ScheduleList;
        FScheduledStandbySettings() :
            FPlayFabCppBaseModel(),
            IsEnabled(false),
            ScheduleList()
            {}

        FScheduledStandbySettings(const FScheduledStandbySettings& src) :
            FPlayFabCppBaseModel(),
            IsEnabled(src.IsEnabled),
            ScheduleList(src.ScheduleList)
            {}

        FScheduledStandbySettings(const TSharedPtr<FJsonObject>& obj) : FScheduledStandbySettings()
        {
            readFromValue(obj);
        }

        ~FScheduledStandbySettings();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FBuildRegion : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The current multiplayer server stats for the region.
        TSharedPtr<FCurrentServerStats> pfCurrentServerStats;

        // [optional] Optional settings to control dynamic adjustment of standby target
        TSharedPtr<FDynamicStandbySettings> pfDynamicStandbySettings;

        // The maximum number of multiplayer servers for the region.
        int32 MaxServers;

        // [optional] The build region.
        FString Region;

        // [optional] Optional settings to set the standby target to specified values during the supplied schedules
        TSharedPtr<FScheduledStandbySettings> pfScheduledStandbySettings;

        // The target number of standby multiplayer servers for the region.
        int32 StandbyServers;

        /**
         * [optional] The status of multiplayer servers in the build region. Valid values are - Unknown, Initialized, Deploying, Deployed,
         * Unhealthy, Deleting, Deleted.
         */
        FString Status;

        FBuildRegion() :
            FPlayFabCppBaseModel(),
            pfCurrentServerStats(nullptr),
            pfDynamicStandbySettings(nullptr),
            MaxServers(0),
            Region(),
            pfScheduledStandbySettings(nullptr),
            StandbyServers(0),
            Status()
            {}

        FBuildRegion(const FBuildRegion& src) :
            FPlayFabCppBaseModel(),
            pfCurrentServerStats(src.pfCurrentServerStats.IsValid() ? MakeShareable(new FCurrentServerStats(*src.pfCurrentServerStats)) : nullptr),
            pfDynamicStandbySettings(src.pfDynamicStandbySettings.IsValid() ? MakeShareable(new FDynamicStandbySettings(*src.pfDynamicStandbySettings)) : nullptr),
            MaxServers(src.MaxServers),
            Region(src.Region),
            pfScheduledStandbySettings(src.pfScheduledStandbySettings.IsValid() ? MakeShareable(new FScheduledStandbySettings(*src.pfScheduledStandbySettings)) : nullptr),
            StandbyServers(src.StandbyServers),
            Status(src.Status)
            {}

        FBuildRegion(const TSharedPtr<FJsonObject>& obj) : FBuildRegion()
        {
            readFromValue(obj);
        }

        ~FBuildRegion();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FBuildRegionParams : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Optional settings to control dynamic adjustment of standby target. If not specified, dynamic standby is disabled
        TSharedPtr<FDynamicStandbySettings> pfDynamicStandbySettings;

        // The maximum number of multiplayer servers for the region.
        int32 MaxServers;

        // The build region.
        FString Region;

        // [optional] Optional settings to set the standby target to specified values during the supplied schedules
        TSharedPtr<FScheduledStandbySettings> pfScheduledStandbySettings;

        // The number of standby multiplayer servers for the region.
        int32 StandbyServers;

        FBuildRegionParams() :
            FPlayFabCppBaseModel(),
            pfDynamicStandbySettings(nullptr),
            MaxServers(0),
            Region(),
            pfScheduledStandbySettings(nullptr),
            StandbyServers(0)
            {}

        FBuildRegionParams(const FBuildRegionParams& src) :
            FPlayFabCppBaseModel(),
            pfDynamicStandbySettings(src.pfDynamicStandbySettings.IsValid() ? MakeShareable(new FDynamicStandbySettings(*src.pfDynamicStandbySettings)) : nullptr),
            MaxServers(src.MaxServers),
            Region(src.Region),
            pfScheduledStandbySettings(src.pfScheduledStandbySettings.IsValid() ? MakeShareable(new FScheduledStandbySettings(*src.pfScheduledStandbySettings)) : nullptr),
            StandbyServers(src.StandbyServers)
            {}

        FBuildRegionParams(const TSharedPtr<FJsonObject>& obj) : FBuildRegionParams()
        {
            readFromValue(obj);
        }

        ~FBuildRegionParams();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FBuildSummary : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The guid string build ID of the build.
        FString BuildId;

        // [optional] The build name.
        FString BuildName;

        // [optional] The time the build was created in UTC.
        Boxed<FDateTime> CreationTime;

        // [optional] The metadata of the build.
        TMap<FString, FString> Metadata;
        // [optional] The configuration and status for each region in the build.
        TArray<FBuildRegion> RegionConfigurations;
        FBuildSummary() :
            FPlayFabCppBaseModel(),
            BuildId(),
            BuildName(),
            CreationTime(),
            Metadata(),
            RegionConfigurations()
            {}

        FBuildSummary(const FBuildSummary& src) :
            FPlayFabCppBaseModel(),
            BuildId(src.BuildId),
            BuildName(src.BuildName),
            CreationTime(src.CreationTime),
            Metadata(src.Metadata),
            RegionConfigurations(src.RegionConfigurations)
            {}

        FBuildSummary(const TSharedPtr<FJsonObject>& obj) : FBuildSummary()
        {
            readFromValue(obj);
        }

        ~FBuildSummary();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEntityKey : public PlayFab::FPlayFabCppBaseModel
    {
        // Unique ID of the entity.
        FString Id;

        // [optional] Entity type. See https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types
        FString Type;

        FEntityKey() :
            FPlayFabCppBaseModel(),
            Id(),
            Type()
            {}

        FEntityKey(const FEntityKey& src) :
            FPlayFabCppBaseModel(),
            Id(src.Id),
            Type(src.Type)
            {}

        FEntityKey(const TSharedPtr<FJsonObject>& obj) : FEntityKey()
        {
            readFromValue(obj);
        }

        ~FEntityKey();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCancelAllMatchmakingTicketsForPlayerRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity key of the player whose tickets should be canceled.
        TSharedPtr<FEntityKey> Entity;

        // The name of the queue from which a player's tickets should be canceled.
        FString QueueName;

        FCancelAllMatchmakingTicketsForPlayerRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr),
            QueueName()
            {}

        FCancelAllMatchmakingTicketsForPlayerRequest(const FCancelAllMatchmakingTicketsForPlayerRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            QueueName(src.QueueName)
            {}

        FCancelAllMatchmakingTicketsForPlayerRequest(const TSharedPtr<FJsonObject>& obj) : FCancelAllMatchmakingTicketsForPlayerRequest()
        {
            readFromValue(obj);
        }

        ~FCancelAllMatchmakingTicketsForPlayerRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCancelAllMatchmakingTicketsForPlayerResult : public PlayFab::FPlayFabCppResultCommon
    {
        FCancelAllMatchmakingTicketsForPlayerResult() :
            FPlayFabCppResultCommon()
            {}

        FCancelAllMatchmakingTicketsForPlayerResult(const FCancelAllMatchmakingTicketsForPlayerResult& src) :
            FPlayFabCppResultCommon()
            {}

        FCancelAllMatchmakingTicketsForPlayerResult(const TSharedPtr<FJsonObject>& obj) : FCancelAllMatchmakingTicketsForPlayerResult()
        {
            readFromValue(obj);
        }

        ~FCancelAllMatchmakingTicketsForPlayerResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCancelAllServerBackfillTicketsForPlayerRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity key of the player whose backfill tickets should be canceled.
        FEntityKey Entity;

        // The name of the queue from which a player's backfill tickets should be canceled.
        FString QueueName;

        FCancelAllServerBackfillTicketsForPlayerRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            QueueName()
            {}

        FCancelAllServerBackfillTicketsForPlayerRequest(const FCancelAllServerBackfillTicketsForPlayerRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            QueueName(src.QueueName)
            {}

        FCancelAllServerBackfillTicketsForPlayerRequest(const TSharedPtr<FJsonObject>& obj) : FCancelAllServerBackfillTicketsForPlayerRequest()
        {
            readFromValue(obj);
        }

        ~FCancelAllServerBackfillTicketsForPlayerRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCancelAllServerBackfillTicketsForPlayerResult : public PlayFab::FPlayFabCppResultCommon
    {
        FCancelAllServerBackfillTicketsForPlayerResult() :
            FPlayFabCppResultCommon()
            {}

        FCancelAllServerBackfillTicketsForPlayerResult(const FCancelAllServerBackfillTicketsForPlayerResult& src) :
            FPlayFabCppResultCommon()
            {}

        FCancelAllServerBackfillTicketsForPlayerResult(const TSharedPtr<FJsonObject>& obj) : FCancelAllServerBackfillTicketsForPlayerResult()
        {
            readFromValue(obj);
        }

        ~FCancelAllServerBackfillTicketsForPlayerResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum CancellationReason
    {
        CancellationReasonRequested,
        CancellationReasonInternal,
        CancellationReasonTimeout
    };

    PLAYFABCPP_API void writeCancellationReasonEnumJSON(CancellationReason enumVal, JsonWriter& writer);
    PLAYFABCPP_API CancellationReason readCancellationReasonFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API CancellationReason readCancellationReasonFromValue(const FString& value);

    struct PLAYFABCPP_API FCancelMatchmakingTicketRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The name of the queue the ticket is in.
        FString QueueName;

        // The Id of the ticket to find a match for.
        FString TicketId;

        FCancelMatchmakingTicketRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            QueueName(),
            TicketId()
            {}

        FCancelMatchmakingTicketRequest(const FCancelMatchmakingTicketRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            QueueName(src.QueueName),
            TicketId(src.TicketId)
            {}

        FCancelMatchmakingTicketRequest(const TSharedPtr<FJsonObject>& obj) : FCancelMatchmakingTicketRequest()
        {
            readFromValue(obj);
        }

        ~FCancelMatchmakingTicketRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCancelMatchmakingTicketResult : public PlayFab::FPlayFabCppResultCommon
    {
        FCancelMatchmakingTicketResult() :
            FPlayFabCppResultCommon()
            {}

        FCancelMatchmakingTicketResult(const FCancelMatchmakingTicketResult& src) :
            FPlayFabCppResultCommon()
            {}

        FCancelMatchmakingTicketResult(const TSharedPtr<FJsonObject>& obj) : FCancelMatchmakingTicketResult()
        {
            readFromValue(obj);
        }

        ~FCancelMatchmakingTicketResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCancelServerBackfillTicketRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The name of the queue the ticket is in.
        FString QueueName;

        // The Id of the ticket to find a match for.
        FString TicketId;

        FCancelServerBackfillTicketRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            QueueName(),
            TicketId()
            {}

        FCancelServerBackfillTicketRequest(const FCancelServerBackfillTicketRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            QueueName(src.QueueName),
            TicketId(src.TicketId)
            {}

        FCancelServerBackfillTicketRequest(const TSharedPtr<FJsonObject>& obj) : FCancelServerBackfillTicketRequest()
        {
            readFromValue(obj);
        }

        ~FCancelServerBackfillTicketRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCancelServerBackfillTicketResult : public PlayFab::FPlayFabCppResultCommon
    {
        FCancelServerBackfillTicketResult() :
            FPlayFabCppResultCommon()
            {}

        FCancelServerBackfillTicketResult(const FCancelServerBackfillTicketResult& src) :
            FPlayFabCppResultCommon()
            {}

        FCancelServerBackfillTicketResult(const TSharedPtr<FJsonObject>& obj) : FCancelServerBackfillTicketResult()
        {
            readFromValue(obj);
        }

        ~FCancelServerBackfillTicketResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCertificate : public PlayFab::FPlayFabCppBaseModel
    {
        // Base64 encoded string contents of the certificate.
        FString Base64EncodedValue;

        // A name for the certificate. This is used to reference certificates in build configurations.
        FString Name;

        /**
         * [optional] If required for your PFX certificate, use this field to provide a password that will be used to install the certificate
         * on the container.
         */
        FString Password;

        FCertificate() :
            FPlayFabCppBaseModel(),
            Base64EncodedValue(),
            Name(),
            Password()
            {}

        FCertificate(const FCertificate& src) :
            FPlayFabCppBaseModel(),
            Base64EncodedValue(src.Base64EncodedValue),
            Name(src.Name),
            Password(src.Password)
            {}

        FCertificate(const TSharedPtr<FJsonObject>& obj) : FCertificate()
        {
            readFromValue(obj);
        }

        ~FCertificate();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCertificateSummary : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The name of the certificate.
        FString Name;

        // [optional] The thumbprint for the certificate.
        FString Thumbprint;

        FCertificateSummary() :
            FPlayFabCppBaseModel(),
            Name(),
            Thumbprint()
            {}

        FCertificateSummary(const FCertificateSummary& src) :
            FPlayFabCppBaseModel(),
            Name(src.Name),
            Thumbprint(src.Thumbprint)
            {}

        FCertificateSummary(const TSharedPtr<FJsonObject>& obj) : FCertificateSummary()
        {
            readFromValue(obj);
        }

        ~FCertificateSummary();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FConnectedPlayer : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The player ID of the player connected to the multiplayer server.
        FString PlayerId;

        FConnectedPlayer() :
            FPlayFabCppBaseModel(),
            PlayerId()
            {}

        FConnectedPlayer(const FConnectedPlayer& src) :
            FPlayFabCppBaseModel(),
            PlayerId(src.PlayerId)
            {}

        FConnectedPlayer(const TSharedPtr<FJsonObject>& obj) : FConnectedPlayer()
        {
            readFromValue(obj);
        }

        ~FConnectedPlayer();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum ContainerFlavor
    {
        ContainerFlavorManagedWindowsServerCore,
        ContainerFlavorCustomLinux,
        ContainerFlavorManagedWindowsServerCorePreview,
        ContainerFlavorInvalid
    };

    PLAYFABCPP_API void writeContainerFlavorEnumJSON(ContainerFlavor enumVal, JsonWriter& writer);
    PLAYFABCPP_API ContainerFlavor readContainerFlavorFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API ContainerFlavor readContainerFlavorFromValue(const FString& value);

    struct PLAYFABCPP_API FContainerImageReference : public PlayFab::FPlayFabCppBaseModel
    {
        // The container image name.
        FString ImageName;

        // [optional] The container tag.
        FString Tag;

        FContainerImageReference() :
            FPlayFabCppBaseModel(),
            ImageName(),
            Tag()
            {}

        FContainerImageReference(const FContainerImageReference& src) :
            FPlayFabCppBaseModel(),
            ImageName(src.ImageName),
            Tag(src.Tag)
            {}

        FContainerImageReference(const TSharedPtr<FJsonObject>& obj) : FContainerImageReference()
        {
            readFromValue(obj);
        }

        ~FContainerImageReference();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCoreCapacity : public PlayFab::FPlayFabCppBaseModel
    {
        // The available core capacity for the (Region, VmFamily)
        int32 Available;

        // [optional] The AzureRegion
        FString Region;

        // The total core capacity for the (Region, VmFamily)
        int32 Total;

        // [optional] The AzureVmFamily
        Boxed<AzureVmFamily> VmFamily;

        FCoreCapacity() :
            FPlayFabCppBaseModel(),
            Available(0),
            Region(),
            Total(0),
            VmFamily()
            {}

        FCoreCapacity(const FCoreCapacity& src) :
            FPlayFabCppBaseModel(),
            Available(src.Available),
            Region(src.Region),
            Total(src.Total),
            VmFamily(src.VmFamily)
            {}

        FCoreCapacity(const TSharedPtr<FJsonObject>& obj) : FCoreCapacity()
        {
            readFromValue(obj);
        }

        ~FCoreCapacity();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCoreCapacityChange : public PlayFab::FPlayFabCppBaseModel
    {
        // New quota core limit for the given vm family/region.
        int32 NewCoreLimit;

        // Region to change.
        FString Region;

        // Virtual machine family to change.
        AzureVmFamily VmFamily;

        FCoreCapacityChange() :
            FPlayFabCppBaseModel(),
            NewCoreLimit(0),
            Region(),
            VmFamily()
            {}

        FCoreCapacityChange(const FCoreCapacityChange& src) :
            FPlayFabCppBaseModel(),
            NewCoreLimit(src.NewCoreLimit),
            Region(src.Region),
            VmFamily(src.VmFamily)
            {}

        FCoreCapacityChange(const TSharedPtr<FJsonObject>& obj) : FCoreCapacityChange()
        {
            readFromValue(obj);
        }

        ~FCoreCapacityChange();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateBuildAliasRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The alias name.
        FString AliasName;

        // [optional] Array of build selection criteria.
        TArray<FBuildSelectionCriterion> BuildSelectionCriteria;
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FCreateBuildAliasRequest() :
            FPlayFabCppRequestCommon(),
            AliasName(),
            BuildSelectionCriteria(),
            CustomTags()
            {}

        FCreateBuildAliasRequest(const FCreateBuildAliasRequest& src) :
            FPlayFabCppRequestCommon(),
            AliasName(src.AliasName),
            BuildSelectionCriteria(src.BuildSelectionCriteria),
            CustomTags(src.CustomTags)
            {}

        FCreateBuildAliasRequest(const TSharedPtr<FJsonObject>& obj) : FCreateBuildAliasRequest()
        {
            readFromValue(obj);
        }

        ~FCreateBuildAliasRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGameCertificateReferenceParams : public PlayFab::FPlayFabCppBaseModel
    {
        /**
         * An alias for the game certificate. The game server will reference this alias via GSDK config to retrieve the game
         * certificate. This alias is used as an identifier in game server code to allow a new certificate with different Name
         * field to be uploaded without the need to change any game server code to reference the new Name.
         */
        FString GsdkAlias;

        /**
         * The name of the game certificate. This name should match the name of a certificate that was previously uploaded to this
         * title.
         */
        FString Name;

        FGameCertificateReferenceParams() :
            FPlayFabCppBaseModel(),
            GsdkAlias(),
            Name()
            {}

        FGameCertificateReferenceParams(const FGameCertificateReferenceParams& src) :
            FPlayFabCppBaseModel(),
            GsdkAlias(src.GsdkAlias),
            Name(src.Name)
            {}

        FGameCertificateReferenceParams(const TSharedPtr<FJsonObject>& obj) : FGameCertificateReferenceParams()
        {
            readFromValue(obj);
        }

        ~FGameCertificateReferenceParams();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FLinuxInstrumentationConfiguration : public PlayFab::FPlayFabCppBaseModel
    {
        // Designates whether Linux instrumentation configuration will be enabled for this Build
        bool IsEnabled;

        FLinuxInstrumentationConfiguration() :
            FPlayFabCppBaseModel(),
            IsEnabled(false)
            {}

        FLinuxInstrumentationConfiguration(const FLinuxInstrumentationConfiguration& src) :
            FPlayFabCppBaseModel(),
            IsEnabled(src.IsEnabled)
            {}

        FLinuxInstrumentationConfiguration(const TSharedPtr<FJsonObject>& obj) : FLinuxInstrumentationConfiguration()
        {
            readFromValue(obj);
        }

        ~FLinuxInstrumentationConfiguration();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum ProtocolType
    {
        ProtocolTypeTCP,
        ProtocolTypeUDP
    };

    PLAYFABCPP_API void writeProtocolTypeEnumJSON(ProtocolType enumVal, JsonWriter& writer);
    PLAYFABCPP_API ProtocolType readProtocolTypeFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API ProtocolType readProtocolTypeFromValue(const FString& value);

    struct PLAYFABCPP_API FPort : public PlayFab::FPlayFabCppBaseModel
    {
        // The name for the port.
        FString Name;

        // The number for the port.
        int32 Num;

        // The protocol for the port.
        ProtocolType Protocol;

        FPort() :
            FPlayFabCppBaseModel(),
            Name(),
            Num(0),
            Protocol()
            {}

        FPort(const FPort& src) :
            FPlayFabCppBaseModel(),
            Name(src.Name),
            Num(src.Num),
            Protocol(src.Protocol)
            {}

        FPort(const TSharedPtr<FJsonObject>& obj) : FPort()
        {
            readFromValue(obj);
        }

        ~FPort();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateBuildWithCustomContainerRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        /**
         * [optional] When true, assets will not be copied for each server inside the VM. All serverswill run from the same set of assets, or
         * will have the same assets mounted in the container.
         */
        Boxed<bool> AreAssetsReadonly;

        // The build name.
        FString BuildName;

        // [optional] The flavor of container to create a build from.
        Boxed<ContainerFlavor> pfContainerFlavor;

        // [optional] The container reference, consisting of the image name and tag.
        TSharedPtr<FContainerImageReference> pfContainerImageReference;

        // [optional] The container command to run when the multiplayer server has been allocated, including any arguments.
        FString ContainerRunCommand;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The list of game assets related to the build.
        TArray<FAssetReferenceParams> GameAssetReferences;
        // [optional] The game certificates for the build.
        TArray<FGameCertificateReferenceParams> GameCertificateReferences;
        // [optional] The Linux instrumentation configuration for the build.
        TSharedPtr<FLinuxInstrumentationConfiguration> pfLinuxInstrumentationConfiguration;

        /**
         * [optional] Metadata to tag the build. The keys are case insensitive. The build metadata is made available to the server through
         * Game Server SDK (GSDK).Constraints: Maximum number of keys: 30, Maximum key length: 50, Maximum value length: 100
         */
        TMap<FString, FString> Metadata;
        // The number of multiplayer servers to host on a single VM.
        int32 MultiplayerServerCountPerVm;

        // The ports to map the build on.
        TArray<FPort> Ports;
        // The region configurations for the build.
        TArray<FBuildRegionParams> RegionConfigurations;
        /**
         * [optional] When true, assets will be downloaded and uncompressed in memory, without the compressedversion being written first to
         * disc.
         */
        Boxed<bool> UseStreamingForAssetDownloads;

        // [optional] The VM size to create the build on.
        Boxed<AzureVmSize> VmSize;

        FCreateBuildWithCustomContainerRequest() :
            FPlayFabCppRequestCommon(),
            AreAssetsReadonly(),
            BuildName(),
            pfContainerFlavor(),
            pfContainerImageReference(nullptr),
            ContainerRunCommand(),
            CustomTags(),
            GameAssetReferences(),
            GameCertificateReferences(),
            pfLinuxInstrumentationConfiguration(nullptr),
            Metadata(),
            MultiplayerServerCountPerVm(0),
            Ports(),
            RegionConfigurations(),
            UseStreamingForAssetDownloads(),
            VmSize()
            {}

        FCreateBuildWithCustomContainerRequest(const FCreateBuildWithCustomContainerRequest& src) :
            FPlayFabCppRequestCommon(),
            AreAssetsReadonly(src.AreAssetsReadonly),
            BuildName(src.BuildName),
            pfContainerFlavor(src.pfContainerFlavor),
            pfContainerImageReference(src.pfContainerImageReference.IsValid() ? MakeShareable(new FContainerImageReference(*src.pfContainerImageReference)) : nullptr),
            ContainerRunCommand(src.ContainerRunCommand),
            CustomTags(src.CustomTags),
            GameAssetReferences(src.GameAssetReferences),
            GameCertificateReferences(src.GameCertificateReferences),
            pfLinuxInstrumentationConfiguration(src.pfLinuxInstrumentationConfiguration.IsValid() ? MakeShareable(new FLinuxInstrumentationConfiguration(*src.pfLinuxInstrumentationConfiguration)) : nullptr),
            Metadata(src.Metadata),
            MultiplayerServerCountPerVm(src.MultiplayerServerCountPerVm),
            Ports(src.Ports),
            RegionConfigurations(src.RegionConfigurations),
            UseStreamingForAssetDownloads(src.UseStreamingForAssetDownloads),
            VmSize(src.VmSize)
            {}

        FCreateBuildWithCustomContainerRequest(const TSharedPtr<FJsonObject>& obj) : FCreateBuildWithCustomContainerRequest()
        {
            readFromValue(obj);
        }

        ~FCreateBuildWithCustomContainerRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGameCertificateReference : public PlayFab::FPlayFabCppBaseModel
    {
        /**
         * [optional] An alias for the game certificate. The game server will reference this alias via GSDK config to retrieve the game
         * certificate. This alias is used as an identifier in game server code to allow a new certificate with different Name
         * field to be uploaded without the need to change any game server code to reference the new Name.
         */
        FString GsdkAlias;

        /**
         * [optional] The name of the game certificate. This name should match the name of a certificate that was previously uploaded to this
         * title.
         */
        FString Name;

        FGameCertificateReference() :
            FPlayFabCppBaseModel(),
            GsdkAlias(),
            Name()
            {}

        FGameCertificateReference(const FGameCertificateReference& src) :
            FPlayFabCppBaseModel(),
            GsdkAlias(src.GsdkAlias),
            Name(src.Name)
            {}

        FGameCertificateReference(const TSharedPtr<FJsonObject>& obj) : FGameCertificateReference()
        {
            readFromValue(obj);
        }

        ~FGameCertificateReference();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateBuildWithCustomContainerResponse : public PlayFab::FPlayFabCppResultCommon
    {
        /**
         * [optional] When true, assets will not be copied for each server inside the VM. All serverswill run from the same set of assets, or
         * will have the same assets mounted in the container.
         */
        Boxed<bool> AreAssetsReadonly;

        // [optional] The guid string build ID. Must be unique for every build.
        FString BuildId;

        // [optional] The build name.
        FString BuildName;

        // [optional] The flavor of container of the build.
        Boxed<ContainerFlavor> pfContainerFlavor;

        // [optional] The container command to run when the multiplayer server has been allocated, including any arguments.
        FString ContainerRunCommand;

        // [optional] The time the build was created in UTC.
        Boxed<FDateTime> CreationTime;

        // [optional] The custom game container image reference information.
        TSharedPtr<FContainerImageReference> CustomGameContainerImage;

        // [optional] The game assets for the build.
        TArray<FAssetReference> GameAssetReferences;
        // [optional] The game certificates for the build.
        TArray<FGameCertificateReference> GameCertificateReferences;
        // [optional] The Linux instrumentation configuration for this build.
        TSharedPtr<FLinuxInstrumentationConfiguration> pfLinuxInstrumentationConfiguration;

        // [optional] The metadata of the build.
        TMap<FString, FString> Metadata;
        // The number of multiplayer servers to host on a single VM of the build.
        int32 MultiplayerServerCountPerVm;

        // [optional] The OS platform used for running the game process.
        FString OsPlatform;

        // [optional] The ports the build is mapped on.
        TArray<FPort> Ports;
        // [optional] The region configuration for the build.
        TArray<FBuildRegion> RegionConfigurations;
        // [optional] The type of game server being hosted.
        FString ServerType;

        /**
         * [optional] When true, assets will be downloaded and uncompressed in memory, without the compressedversion being written first to
         * disc.
         */
        Boxed<bool> UseStreamingForAssetDownloads;

        // [optional] The VM size the build was created on.
        Boxed<AzureVmSize> VmSize;

        FCreateBuildWithCustomContainerResponse() :
            FPlayFabCppResultCommon(),
            AreAssetsReadonly(),
            BuildId(),
            BuildName(),
            pfContainerFlavor(),
            ContainerRunCommand(),
            CreationTime(),
            CustomGameContainerImage(nullptr),
            GameAssetReferences(),
            GameCertificateReferences(),
            pfLinuxInstrumentationConfiguration(nullptr),
            Metadata(),
            MultiplayerServerCountPerVm(0),
            OsPlatform(),
            Ports(),
            RegionConfigurations(),
            ServerType(),
            UseStreamingForAssetDownloads(),
            VmSize()
            {}

        FCreateBuildWithCustomContainerResponse(const FCreateBuildWithCustomContainerResponse& src) :
            FPlayFabCppResultCommon(),
            AreAssetsReadonly(src.AreAssetsReadonly),
            BuildId(src.BuildId),
            BuildName(src.BuildName),
            pfContainerFlavor(src.pfContainerFlavor),
            ContainerRunCommand(src.ContainerRunCommand),
            CreationTime(src.CreationTime),
            CustomGameContainerImage(src.CustomGameContainerImage.IsValid() ? MakeShareable(new FContainerImageReference(*src.CustomGameContainerImage)) : nullptr),
            GameAssetReferences(src.GameAssetReferences),
            GameCertificateReferences(src.GameCertificateReferences),
            pfLinuxInstrumentationConfiguration(src.pfLinuxInstrumentationConfiguration.IsValid() ? MakeShareable(new FLinuxInstrumentationConfiguration(*src.pfLinuxInstrumentationConfiguration)) : nullptr),
            Metadata(src.Metadata),
            MultiplayerServerCountPerVm(src.MultiplayerServerCountPerVm),
            OsPlatform(src.OsPlatform),
            Ports(src.Ports),
            RegionConfigurations(src.RegionConfigurations),
            ServerType(src.ServerType),
            UseStreamingForAssetDownloads(src.UseStreamingForAssetDownloads),
            VmSize(src.VmSize)
            {}

        FCreateBuildWithCustomContainerResponse(const TSharedPtr<FJsonObject>& obj) : FCreateBuildWithCustomContainerResponse()
        {
            readFromValue(obj);
        }

        ~FCreateBuildWithCustomContainerResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInstrumentationConfiguration : public PlayFab::FPlayFabCppBaseModel
    {
        /**
         * [optional] The list of processes to be monitored on a VM for this build. Providing processes will turn on performance metrics
         * collection for this build. Process names should not include extensions. If the game server process is: GameServer.exe;
         * then, ProcessesToMonitor = [ GameServer ]
         */
        TArray<FString> ProcessesToMonitor;
        FInstrumentationConfiguration() :
            FPlayFabCppBaseModel(),
            ProcessesToMonitor()
            {}

        FInstrumentationConfiguration(const FInstrumentationConfiguration& src) :
            FPlayFabCppBaseModel(),
            ProcessesToMonitor(src.ProcessesToMonitor)
            {}

        FInstrumentationConfiguration(const TSharedPtr<FJsonObject>& obj) : FInstrumentationConfiguration()
        {
            readFromValue(obj);
        }

        ~FInstrumentationConfiguration();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateBuildWithManagedContainerRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        /**
         * [optional] When true, assets will not be copied for each server inside the VM. All serverswill run from the same set of assets, or
         * will have the same assets mounted in the container.
         */
        Boxed<bool> AreAssetsReadonly;

        // The build name.
        FString BuildName;

        // [optional] The flavor of container to create a build from.
        Boxed<ContainerFlavor> pfContainerFlavor;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The list of game assets related to the build.
        TArray<FAssetReferenceParams> GameAssetReferences;
        // [optional] The game certificates for the build.
        TArray<FGameCertificateReferenceParams> GameCertificateReferences;
        /**
         * [optional] The directory containing the game executable. This would be the start path of the game assets that contain the main game
         * server executable. If not provided, a best effort will be made to extract it from the start game command.
         */
        FString GameWorkingDirectory;

        // [optional] The instrumentation configuration for the build.
        TSharedPtr<FInstrumentationConfiguration> pfInstrumentationConfiguration;

        /**
         * [optional] Metadata to tag the build. The keys are case insensitive. The build metadata is made available to the server through
         * Game Server SDK (GSDK).Constraints: Maximum number of keys: 30, Maximum key length: 50, Maximum value length: 100
         */
        TMap<FString, FString> Metadata;
        // The number of multiplayer servers to host on a single VM.
        int32 MultiplayerServerCountPerVm;

        // The ports to map the build on.
        TArray<FPort> Ports;
        // The region configurations for the build.
        TArray<FBuildRegionParams> RegionConfigurations;
        // The command to run when the multiplayer server is started, including any arguments.
        FString StartMultiplayerServerCommand;

        /**
         * [optional] When true, assets will be downloaded and uncompressed in memory, without the compressedversion being written first to
         * disc.
         */
        Boxed<bool> UseStreamingForAssetDownloads;

        // [optional] The VM size to create the build on.
        Boxed<AzureVmSize> VmSize;

        FCreateBuildWithManagedContainerRequest() :
            FPlayFabCppRequestCommon(),
            AreAssetsReadonly(),
            BuildName(),
            pfContainerFlavor(),
            CustomTags(),
            GameAssetReferences(),
            GameCertificateReferences(),
            GameWorkingDirectory(),
            pfInstrumentationConfiguration(nullptr),
            Metadata(),
            MultiplayerServerCountPerVm(0),
            Ports(),
            RegionConfigurations(),
            StartMultiplayerServerCommand(),
            UseStreamingForAssetDownloads(),
            VmSize()
            {}

        FCreateBuildWithManagedContainerRequest(const FCreateBuildWithManagedContainerRequest& src) :
            FPlayFabCppRequestCommon(),
            AreAssetsReadonly(src.AreAssetsReadonly),
            BuildName(src.BuildName),
            pfContainerFlavor(src.pfContainerFlavor),
            CustomTags(src.CustomTags),
            GameAssetReferences(src.GameAssetReferences),
            GameCertificateReferences(src.GameCertificateReferences),
            GameWorkingDirectory(src.GameWorkingDirectory),
            pfInstrumentationConfiguration(src.pfInstrumentationConfiguration.IsValid() ? MakeShareable(new FInstrumentationConfiguration(*src.pfInstrumentationConfiguration)) : nullptr),
            Metadata(src.Metadata),
            MultiplayerServerCountPerVm(src.MultiplayerServerCountPerVm),
            Ports(src.Ports),
            RegionConfigurations(src.RegionConfigurations),
            StartMultiplayerServerCommand(src.StartMultiplayerServerCommand),
            UseStreamingForAssetDownloads(src.UseStreamingForAssetDownloads),
            VmSize(src.VmSize)
            {}

        FCreateBuildWithManagedContainerRequest(const TSharedPtr<FJsonObject>& obj) : FCreateBuildWithManagedContainerRequest()
        {
            readFromValue(obj);
        }

        ~FCreateBuildWithManagedContainerRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateBuildWithManagedContainerResponse : public PlayFab::FPlayFabCppResultCommon
    {
        /**
         * [optional] When true, assets will not be copied for each server inside the VM. All serverswill run from the same set of assets, or
         * will have the same assets mounted in the container.
         */
        Boxed<bool> AreAssetsReadonly;

        // [optional] The guid string build ID. Must be unique for every build.
        FString BuildId;

        // [optional] The build name.
        FString BuildName;

        // [optional] The flavor of container of the build.
        Boxed<ContainerFlavor> pfContainerFlavor;

        // [optional] The time the build was created in UTC.
        Boxed<FDateTime> CreationTime;

        // [optional] The game assets for the build.
        TArray<FAssetReference> GameAssetReferences;
        // [optional] The game certificates for the build.
        TArray<FGameCertificateReference> GameCertificateReferences;
        /**
         * [optional] The directory containing the game executable. This would be the start path of the game assets that contain the main game
         * server executable. If not provided, a best effort will be made to extract it from the start game command.
         */
        FString GameWorkingDirectory;

        // [optional] The instrumentation configuration for this build.
        TSharedPtr<FInstrumentationConfiguration> pfInstrumentationConfiguration;

        // [optional] The metadata of the build.
        TMap<FString, FString> Metadata;
        // The number of multiplayer servers to host on a single VM of the build.
        int32 MultiplayerServerCountPerVm;

        // [optional] The OS platform used for running the game process.
        FString OsPlatform;

        // [optional] The ports the build is mapped on.
        TArray<FPort> Ports;
        // [optional] The region configuration for the build.
        TArray<FBuildRegion> RegionConfigurations;
        // [optional] The type of game server being hosted.
        FString ServerType;

        // [optional] The command to run when the multiplayer server has been allocated, including any arguments.
        FString StartMultiplayerServerCommand;

        /**
         * [optional] When true, assets will be downloaded and uncompressed in memory, without the compressedversion being written first to
         * disc.
         */
        Boxed<bool> UseStreamingForAssetDownloads;

        // [optional] The VM size the build was created on.
        Boxed<AzureVmSize> VmSize;

        FCreateBuildWithManagedContainerResponse() :
            FPlayFabCppResultCommon(),
            AreAssetsReadonly(),
            BuildId(),
            BuildName(),
            pfContainerFlavor(),
            CreationTime(),
            GameAssetReferences(),
            GameCertificateReferences(),
            GameWorkingDirectory(),
            pfInstrumentationConfiguration(nullptr),
            Metadata(),
            MultiplayerServerCountPerVm(0),
            OsPlatform(),
            Ports(),
            RegionConfigurations(),
            ServerType(),
            StartMultiplayerServerCommand(),
            UseStreamingForAssetDownloads(),
            VmSize()
            {}

        FCreateBuildWithManagedContainerResponse(const FCreateBuildWithManagedContainerResponse& src) :
            FPlayFabCppResultCommon(),
            AreAssetsReadonly(src.AreAssetsReadonly),
            BuildId(src.BuildId),
            BuildName(src.BuildName),
            pfContainerFlavor(src.pfContainerFlavor),
            CreationTime(src.CreationTime),
            GameAssetReferences(src.GameAssetReferences),
            GameCertificateReferences(src.GameCertificateReferences),
            GameWorkingDirectory(src.GameWorkingDirectory),
            pfInstrumentationConfiguration(src.pfInstrumentationConfiguration.IsValid() ? MakeShareable(new FInstrumentationConfiguration(*src.pfInstrumentationConfiguration)) : nullptr),
            Metadata(src.Metadata),
            MultiplayerServerCountPerVm(src.MultiplayerServerCountPerVm),
            OsPlatform(src.OsPlatform),
            Ports(src.Ports),
            RegionConfigurations(src.RegionConfigurations),
            ServerType(src.ServerType),
            StartMultiplayerServerCommand(src.StartMultiplayerServerCommand),
            UseStreamingForAssetDownloads(src.UseStreamingForAssetDownloads),
            VmSize(src.VmSize)
            {}

        FCreateBuildWithManagedContainerResponse(const TSharedPtr<FJsonObject>& obj) : FCreateBuildWithManagedContainerResponse()
        {
            readFromValue(obj);
        }

        ~FCreateBuildWithManagedContainerResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateBuildWithProcessBasedServerRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        /**
         * [optional] When true, assets will not be copied for each server inside the VM. All serverswill run from the same set of assets, or
         * will have the same assets mounted in the container.
         */
        Boxed<bool> AreAssetsReadonly;

        // The build name.
        FString BuildName;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The list of game assets related to the build.
        TArray<FAssetReferenceParams> GameAssetReferences;
        // [optional] The game certificates for the build.
        TArray<FGameCertificateReferenceParams> GameCertificateReferences;
        /**
         * [optional] The working directory for the game process. If this is not provided, the working directory will be set based on the
         * mount path of the game server executable.
         */
        FString GameWorkingDirectory;

        // [optional] The instrumentation configuration for the build.
        TSharedPtr<FInstrumentationConfiguration> pfInstrumentationConfiguration;

        /**
         * [optional] Indicates whether this build will be created using the OS Preview versionPreview OS is recommended for dev builds to
         * detect any breaking changes before they are released to retail. Retail builds should set this value to false.
         */
        Boxed<bool> IsOSPreview;

        /**
         * [optional] Metadata to tag the build. The keys are case insensitive. The build metadata is made available to the server through
         * Game Server SDK (GSDK).Constraints: Maximum number of keys: 30, Maximum key length: 50, Maximum value length: 100
         */
        TMap<FString, FString> Metadata;
        // The number of multiplayer servers to host on a single VM.
        int32 MultiplayerServerCountPerVm;

        // [optional] The OS platform used for running the game process.
        FString OsPlatform;

        // The ports to map the build on.
        TArray<FPort> Ports;
        // The region configurations for the build.
        TArray<FBuildRegionParams> RegionConfigurations;
        /**
         * The command to run when the multiplayer server is started, including any arguments. The path to any executable should be
         * relative to the root asset folder when unzipped.
         */
        FString StartMultiplayerServerCommand;

        /**
         * [optional] When true, assets will be downloaded and uncompressed in memory, without the compressedversion being written first to
         * disc.
         */
        Boxed<bool> UseStreamingForAssetDownloads;

        // [optional] The VM size to create the build on.
        Boxed<AzureVmSize> VmSize;

        FCreateBuildWithProcessBasedServerRequest() :
            FPlayFabCppRequestCommon(),
            AreAssetsReadonly(),
            BuildName(),
            CustomTags(),
            GameAssetReferences(),
            GameCertificateReferences(),
            GameWorkingDirectory(),
            pfInstrumentationConfiguration(nullptr),
            IsOSPreview(),
            Metadata(),
            MultiplayerServerCountPerVm(0),
            OsPlatform(),
            Ports(),
            RegionConfigurations(),
            StartMultiplayerServerCommand(),
            UseStreamingForAssetDownloads(),
            VmSize()
            {}

        FCreateBuildWithProcessBasedServerRequest(const FCreateBuildWithProcessBasedServerRequest& src) :
            FPlayFabCppRequestCommon(),
            AreAssetsReadonly(src.AreAssetsReadonly),
            BuildName(src.BuildName),
            CustomTags(src.CustomTags),
            GameAssetReferences(src.GameAssetReferences),
            GameCertificateReferences(src.GameCertificateReferences),
            GameWorkingDirectory(src.GameWorkingDirectory),
            pfInstrumentationConfiguration(src.pfInstrumentationConfiguration.IsValid() ? MakeShareable(new FInstrumentationConfiguration(*src.pfInstrumentationConfiguration)) : nullptr),
            IsOSPreview(src.IsOSPreview),
            Metadata(src.Metadata),
            MultiplayerServerCountPerVm(src.MultiplayerServerCountPerVm),
            OsPlatform(src.OsPlatform),
            Ports(src.Ports),
            RegionConfigurations(src.RegionConfigurations),
            StartMultiplayerServerCommand(src.StartMultiplayerServerCommand),
            UseStreamingForAssetDownloads(src.UseStreamingForAssetDownloads),
            VmSize(src.VmSize)
            {}

        FCreateBuildWithProcessBasedServerRequest(const TSharedPtr<FJsonObject>& obj) : FCreateBuildWithProcessBasedServerRequest()
        {
            readFromValue(obj);
        }

        ~FCreateBuildWithProcessBasedServerRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateBuildWithProcessBasedServerResponse : public PlayFab::FPlayFabCppResultCommon
    {
        /**
         * [optional] When true, assets will not be copied for each server inside the VM. All serverswill run from the same set of assets, or
         * will have the same assets mounted in the container.
         */
        Boxed<bool> AreAssetsReadonly;

        // [optional] The guid string build ID. Must be unique for every build.
        FString BuildId;

        // [optional] The build name.
        FString BuildName;

        // [optional] The flavor of container of the build.
        Boxed<ContainerFlavor> pfContainerFlavor;

        // [optional] The time the build was created in UTC.
        Boxed<FDateTime> CreationTime;

        // [optional] The game assets for the build.
        TArray<FAssetReference> GameAssetReferences;
        // [optional] The game certificates for the build.
        TArray<FGameCertificateReference> GameCertificateReferences;
        /**
         * [optional] The working directory for the game process. If this is not provided, the working directory will be set based on the
         * mount path of the game server executable.
         */
        FString GameWorkingDirectory;

        // [optional] The instrumentation configuration for this build.
        TSharedPtr<FInstrumentationConfiguration> pfInstrumentationConfiguration;

        /**
         * [optional] Indicates whether this build will be created using the OS Preview versionPreview OS is recommended for dev builds to
         * detect any breaking changes before they are released to retail. Retail builds should set this value to false.
         */
        Boxed<bool> IsOSPreview;

        // [optional] The metadata of the build.
        TMap<FString, FString> Metadata;
        // The number of multiplayer servers to host on a single VM of the build.
        int32 MultiplayerServerCountPerVm;

        // [optional] The OS platform used for running the game process.
        FString OsPlatform;

        // [optional] The ports the build is mapped on.
        TArray<FPort> Ports;
        // [optional] The region configuration for the build.
        TArray<FBuildRegion> RegionConfigurations;
        // [optional] The type of game server being hosted.
        FString ServerType;

        /**
         * [optional] The command to run when the multiplayer server is started, including any arguments. The path to any executable is
         * relative to the root asset folder when unzipped.
         */
        FString StartMultiplayerServerCommand;

        /**
         * [optional] When true, assets will be downloaded and uncompressed in memory, without the compressedversion being written first to
         * disc.
         */
        Boxed<bool> UseStreamingForAssetDownloads;

        // [optional] The VM size the build was created on.
        Boxed<AzureVmSize> VmSize;

        FCreateBuildWithProcessBasedServerResponse() :
            FPlayFabCppResultCommon(),
            AreAssetsReadonly(),
            BuildId(),
            BuildName(),
            pfContainerFlavor(),
            CreationTime(),
            GameAssetReferences(),
            GameCertificateReferences(),
            GameWorkingDirectory(),
            pfInstrumentationConfiguration(nullptr),
            IsOSPreview(),
            Metadata(),
            MultiplayerServerCountPerVm(0),
            OsPlatform(),
            Ports(),
            RegionConfigurations(),
            ServerType(),
            StartMultiplayerServerCommand(),
            UseStreamingForAssetDownloads(),
            VmSize()
            {}

        FCreateBuildWithProcessBasedServerResponse(const FCreateBuildWithProcessBasedServerResponse& src) :
            FPlayFabCppResultCommon(),
            AreAssetsReadonly(src.AreAssetsReadonly),
            BuildId(src.BuildId),
            BuildName(src.BuildName),
            pfContainerFlavor(src.pfContainerFlavor),
            CreationTime(src.CreationTime),
            GameAssetReferences(src.GameAssetReferences),
            GameCertificateReferences(src.GameCertificateReferences),
            GameWorkingDirectory(src.GameWorkingDirectory),
            pfInstrumentationConfiguration(src.pfInstrumentationConfiguration.IsValid() ? MakeShareable(new FInstrumentationConfiguration(*src.pfInstrumentationConfiguration)) : nullptr),
            IsOSPreview(src.IsOSPreview),
            Metadata(src.Metadata),
            MultiplayerServerCountPerVm(src.MultiplayerServerCountPerVm),
            OsPlatform(src.OsPlatform),
            Ports(src.Ports),
            RegionConfigurations(src.RegionConfigurations),
            ServerType(src.ServerType),
            StartMultiplayerServerCommand(src.StartMultiplayerServerCommand),
            UseStreamingForAssetDownloads(src.UseStreamingForAssetDownloads),
            VmSize(src.VmSize)
            {}

        FCreateBuildWithProcessBasedServerResponse(const TSharedPtr<FJsonObject>& obj) : FCreateBuildWithProcessBasedServerResponse()
        {
            readFromValue(obj);
        }

        ~FCreateBuildWithProcessBasedServerResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FMatchmakingPlayerAttributes : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] A data object representing a user's attributes.
        FJsonKeeper DataObject;

        // [optional] An escaped data object representing a user's attributes.
        FString EscapedDataObject;

        FMatchmakingPlayerAttributes() :
            FPlayFabCppBaseModel(),
            DataObject(),
            EscapedDataObject()
            {}

        FMatchmakingPlayerAttributes(const FMatchmakingPlayerAttributes& src) :
            FPlayFabCppBaseModel(),
            DataObject(src.DataObject),
            EscapedDataObject(src.EscapedDataObject)
            {}

        FMatchmakingPlayerAttributes(const TSharedPtr<FJsonObject>& obj) : FMatchmakingPlayerAttributes()
        {
            readFromValue(obj);
        }

        ~FMatchmakingPlayerAttributes();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FMatchmakingPlayer : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The user's attributes custom to the title.
        TSharedPtr<FMatchmakingPlayerAttributes> Attributes;

        // The entity key of the matchmaking user.
        FEntityKey Entity;

        FMatchmakingPlayer() :
            FPlayFabCppBaseModel(),
            Attributes(nullptr),
            Entity()
            {}

        FMatchmakingPlayer(const FMatchmakingPlayer& src) :
            FPlayFabCppBaseModel(),
            Attributes(src.Attributes.IsValid() ? MakeShareable(new FMatchmakingPlayerAttributes(*src.Attributes)) : nullptr),
            Entity(src.Entity)
            {}

        FMatchmakingPlayer(const TSharedPtr<FJsonObject>& obj) : FMatchmakingPlayer()
        {
            readFromValue(obj);
        }

        ~FMatchmakingPlayer();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateMatchmakingTicketRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The User who created this ticket.
        FMatchmakingPlayer Creator;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // How long to attempt matching this ticket in seconds.
        int32 GiveUpAfterSeconds;

        // [optional] A list of Entity Keys of other users to match with.
        TArray<FEntityKey> MembersToMatchWith;
        // The Id of a match queue.
        FString QueueName;

        FCreateMatchmakingTicketRequest() :
            FPlayFabCppRequestCommon(),
            Creator(),
            CustomTags(),
            GiveUpAfterSeconds(0),
            MembersToMatchWith(),
            QueueName()
            {}

        FCreateMatchmakingTicketRequest(const FCreateMatchmakingTicketRequest& src) :
            FPlayFabCppRequestCommon(),
            Creator(src.Creator),
            CustomTags(src.CustomTags),
            GiveUpAfterSeconds(src.GiveUpAfterSeconds),
            MembersToMatchWith(src.MembersToMatchWith),
            QueueName(src.QueueName)
            {}

        FCreateMatchmakingTicketRequest(const TSharedPtr<FJsonObject>& obj) : FCreateMatchmakingTicketRequest()
        {
            readFromValue(obj);
        }

        ~FCreateMatchmakingTicketRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateMatchmakingTicketResult : public PlayFab::FPlayFabCppResultCommon
    {
        // The Id of the ticket to find a match for.
        FString TicketId;

        FCreateMatchmakingTicketResult() :
            FPlayFabCppResultCommon(),
            TicketId()
            {}

        FCreateMatchmakingTicketResult(const FCreateMatchmakingTicketResult& src) :
            FPlayFabCppResultCommon(),
            TicketId(src.TicketId)
            {}

        FCreateMatchmakingTicketResult(const TSharedPtr<FJsonObject>& obj) : FCreateMatchmakingTicketResult()
        {
            readFromValue(obj);
        }

        ~FCreateMatchmakingTicketResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateRemoteUserRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string build ID of to create the remote user for.
        FString BuildId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The expiration time for the remote user created. Defaults to expiring in one day if not specified.
        Boxed<FDateTime> ExpirationTime;

        // The region of virtual machine to create the remote user for.
        FString Region;

        // The username to create the remote user with.
        FString Username;

        // The virtual machine ID the multiplayer server is located on.
        FString VmId;

        FCreateRemoteUserRequest() :
            FPlayFabCppRequestCommon(),
            BuildId(),
            CustomTags(),
            ExpirationTime(),
            Region(),
            Username(),
            VmId()
            {}

        FCreateRemoteUserRequest(const FCreateRemoteUserRequest& src) :
            FPlayFabCppRequestCommon(),
            BuildId(src.BuildId),
            CustomTags(src.CustomTags),
            ExpirationTime(src.ExpirationTime),
            Region(src.Region),
            Username(src.Username),
            VmId(src.VmId)
            {}

        FCreateRemoteUserRequest(const TSharedPtr<FJsonObject>& obj) : FCreateRemoteUserRequest()
        {
            readFromValue(obj);
        }

        ~FCreateRemoteUserRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateRemoteUserResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The expiration time for the remote user created.
        Boxed<FDateTime> ExpirationTime;

        // [optional] The generated password for the remote user that was created.
        FString Password;

        // [optional] The username for the remote user that was created.
        FString Username;

        FCreateRemoteUserResponse() :
            FPlayFabCppResultCommon(),
            ExpirationTime(),
            Password(),
            Username()
            {}

        FCreateRemoteUserResponse(const FCreateRemoteUserResponse& src) :
            FPlayFabCppResultCommon(),
            ExpirationTime(src.ExpirationTime),
            Password(src.Password),
            Username(src.Username)
            {}

        FCreateRemoteUserResponse(const TSharedPtr<FJsonObject>& obj) : FCreateRemoteUserResponse()
        {
            readFromValue(obj);
        }

        ~FCreateRemoteUserResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FMatchmakingPlayerWithTeamAssignment : public PlayFab::FPlayFabCppBaseModel
    {
        /**
         * [optional] The user's attributes custom to the title. These attributes will be null unless the request has ReturnMemberAttributes
         * flag set to true.
         */
        TSharedPtr<FMatchmakingPlayerAttributes> Attributes;

        // The entity key of the matchmaking user.
        FEntityKey Entity;

        // [optional] The Id of the team the User is assigned to.
        FString TeamId;

        FMatchmakingPlayerWithTeamAssignment() :
            FPlayFabCppBaseModel(),
            Attributes(nullptr),
            Entity(),
            TeamId()
            {}

        FMatchmakingPlayerWithTeamAssignment(const FMatchmakingPlayerWithTeamAssignment& src) :
            FPlayFabCppBaseModel(),
            Attributes(src.Attributes.IsValid() ? MakeShareable(new FMatchmakingPlayerAttributes(*src.Attributes)) : nullptr),
            Entity(src.Entity),
            TeamId(src.TeamId)
            {}

        FMatchmakingPlayerWithTeamAssignment(const TSharedPtr<FJsonObject>& obj) : FMatchmakingPlayerWithTeamAssignment()
        {
            readFromValue(obj);
        }

        ~FMatchmakingPlayerWithTeamAssignment();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FServerDetails : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The IPv4 address of the virtual machine that is hosting this multiplayer server.
        FString IPV4Address;

        // [optional] The ports the multiplayer server uses.
        TArray<FPort> Ports;
        // [optional] The server's region.
        FString Region;

        FServerDetails() :
            FPlayFabCppBaseModel(),
            IPV4Address(),
            Ports(),
            Region()
            {}

        FServerDetails(const FServerDetails& src) :
            FPlayFabCppBaseModel(),
            IPV4Address(src.IPV4Address),
            Ports(src.Ports),
            Region(src.Region)
            {}

        FServerDetails(const TSharedPtr<FJsonObject>& obj) : FServerDetails()
        {
            readFromValue(obj);
        }

        ~FServerDetails();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateServerBackfillTicketRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // How long to attempt matching this ticket in seconds.
        int32 GiveUpAfterSeconds;

        // The users who will be part of this ticket, along with their team assignments.
        TArray<FMatchmakingPlayerWithTeamAssignment> Members;
        // The Id of a match queue.
        FString QueueName;

        // [optional] The details of the server the members are connected to.
        TSharedPtr<FServerDetails> pfServerDetails;

        FCreateServerBackfillTicketRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            GiveUpAfterSeconds(0),
            Members(),
            QueueName(),
            pfServerDetails(nullptr)
            {}

        FCreateServerBackfillTicketRequest(const FCreateServerBackfillTicketRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            GiveUpAfterSeconds(src.GiveUpAfterSeconds),
            Members(src.Members),
            QueueName(src.QueueName),
            pfServerDetails(src.pfServerDetails.IsValid() ? MakeShareable(new FServerDetails(*src.pfServerDetails)) : nullptr)
            {}

        FCreateServerBackfillTicketRequest(const TSharedPtr<FJsonObject>& obj) : FCreateServerBackfillTicketRequest()
        {
            readFromValue(obj);
        }

        ~FCreateServerBackfillTicketRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateServerBackfillTicketResult : public PlayFab::FPlayFabCppResultCommon
    {
        // The Id of the ticket to find a match for.
        FString TicketId;

        FCreateServerBackfillTicketResult() :
            FPlayFabCppResultCommon(),
            TicketId()
            {}

        FCreateServerBackfillTicketResult(const FCreateServerBackfillTicketResult& src) :
            FPlayFabCppResultCommon(),
            TicketId(src.TicketId)
            {}

        FCreateServerBackfillTicketResult(const TSharedPtr<FJsonObject>& obj) : FCreateServerBackfillTicketResult()
        {
            readFromValue(obj);
        }

        ~FCreateServerBackfillTicketResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateServerMatchmakingTicketRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // How long to attempt matching this ticket in seconds.
        int32 GiveUpAfterSeconds;

        // The users who will be part of this ticket.
        TArray<FMatchmakingPlayer> Members;
        // The Id of a match queue.
        FString QueueName;

        FCreateServerMatchmakingTicketRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            GiveUpAfterSeconds(0),
            Members(),
            QueueName()
            {}

        FCreateServerMatchmakingTicketRequest(const FCreateServerMatchmakingTicketRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            GiveUpAfterSeconds(src.GiveUpAfterSeconds),
            Members(src.Members),
            QueueName(src.QueueName)
            {}

        FCreateServerMatchmakingTicketRequest(const TSharedPtr<FJsonObject>& obj) : FCreateServerMatchmakingTicketRequest()
        {
            readFromValue(obj);
        }

        ~FCreateServerMatchmakingTicketRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateTitleMultiplayerServersQuotaChangeRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] A brief description of the requested changes.
        FString ChangeDescription;

        // Changes to make to the titles cores quota.
        TArray<FCoreCapacityChange> Changes;
        // [optional] Email to be contacted by our team about this request. Only required when a request is not approved.
        FString ContactEmail;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] Additional information about this request that our team can use to better understand the requirements.
        FString Notes;

        // [optional] When these changes would need to be in effect. Only required when a request is not approved.
        Boxed<FDateTime> StartDate;

        FCreateTitleMultiplayerServersQuotaChangeRequest() :
            FPlayFabCppRequestCommon(),
            ChangeDescription(),
            Changes(),
            ContactEmail(),
            CustomTags(),
            Notes(),
            StartDate()
            {}

        FCreateTitleMultiplayerServersQuotaChangeRequest(const FCreateTitleMultiplayerServersQuotaChangeRequest& src) :
            FPlayFabCppRequestCommon(),
            ChangeDescription(src.ChangeDescription),
            Changes(src.Changes),
            ContactEmail(src.ContactEmail),
            CustomTags(src.CustomTags),
            Notes(src.Notes),
            StartDate(src.StartDate)
            {}

        FCreateTitleMultiplayerServersQuotaChangeRequest(const TSharedPtr<FJsonObject>& obj) : FCreateTitleMultiplayerServersQuotaChangeRequest()
        {
            readFromValue(obj);
        }

        ~FCreateTitleMultiplayerServersQuotaChangeRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateTitleMultiplayerServersQuotaChangeResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Id of the change request that was created.
        FString RequestId;

        // Determines if the request was approved or not. When false, our team is reviewing and may respond within 2 business days.
        bool WasApproved;

        FCreateTitleMultiplayerServersQuotaChangeResponse() :
            FPlayFabCppResultCommon(),
            RequestId(),
            WasApproved(false)
            {}

        FCreateTitleMultiplayerServersQuotaChangeResponse(const FCreateTitleMultiplayerServersQuotaChangeResponse& src) :
            FPlayFabCppResultCommon(),
            RequestId(src.RequestId),
            WasApproved(src.WasApproved)
            {}

        FCreateTitleMultiplayerServersQuotaChangeResponse(const TSharedPtr<FJsonObject>& obj) : FCreateTitleMultiplayerServersQuotaChangeResponse()
        {
            readFromValue(obj);
        }

        ~FCreateTitleMultiplayerServersQuotaChangeResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteAssetRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The filename of the asset to delete.
        FString FileName;

        FDeleteAssetRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            FileName()
            {}

        FDeleteAssetRequest(const FDeleteAssetRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            FileName(src.FileName)
            {}

        FDeleteAssetRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteAssetRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteAssetRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteBuildAliasRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string alias ID of the alias to perform the action on.
        FString AliasId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FDeleteBuildAliasRequest() :
            FPlayFabCppRequestCommon(),
            AliasId(),
            CustomTags()
            {}

        FDeleteBuildAliasRequest(const FDeleteBuildAliasRequest& src) :
            FPlayFabCppRequestCommon(),
            AliasId(src.AliasId),
            CustomTags(src.CustomTags)
            {}

        FDeleteBuildAliasRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteBuildAliasRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteBuildAliasRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteBuildRegionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string ID of the build we want to update regions for.
        FString BuildId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The build region to delete.
        FString Region;

        FDeleteBuildRegionRequest() :
            FPlayFabCppRequestCommon(),
            BuildId(),
            CustomTags(),
            Region()
            {}

        FDeleteBuildRegionRequest(const FDeleteBuildRegionRequest& src) :
            FPlayFabCppRequestCommon(),
            BuildId(src.BuildId),
            CustomTags(src.CustomTags),
            Region(src.Region)
            {}

        FDeleteBuildRegionRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteBuildRegionRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteBuildRegionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteBuildRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string build ID of the build to delete.
        FString BuildId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FDeleteBuildRequest() :
            FPlayFabCppRequestCommon(),
            BuildId(),
            CustomTags()
            {}

        FDeleteBuildRequest(const FDeleteBuildRequest& src) :
            FPlayFabCppRequestCommon(),
            BuildId(src.BuildId),
            CustomTags(src.CustomTags)
            {}

        FDeleteBuildRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteBuildRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteBuildRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteCertificateRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The name of the certificate.
        FString Name;

        FDeleteCertificateRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Name()
            {}

        FDeleteCertificateRequest(const FDeleteCertificateRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Name(src.Name)
            {}

        FDeleteCertificateRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteCertificateRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteCertificateRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteContainerImageRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The container image repository we want to delete.
        FString ImageName;

        FDeleteContainerImageRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            ImageName()
            {}

        FDeleteContainerImageRequest(const FDeleteContainerImageRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            ImageName(src.ImageName)
            {}

        FDeleteContainerImageRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteContainerImageRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteContainerImageRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteRemoteUserRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string build ID of the multiplayer server where the remote user is to delete.
        FString BuildId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The region of the multiplayer server where the remote user is to delete.
        FString Region;

        // The username of the remote user to delete.
        FString Username;

        // The virtual machine ID the multiplayer server is located on.
        FString VmId;

        FDeleteRemoteUserRequest() :
            FPlayFabCppRequestCommon(),
            BuildId(),
            CustomTags(),
            Region(),
            Username(),
            VmId()
            {}

        FDeleteRemoteUserRequest(const FDeleteRemoteUserRequest& src) :
            FPlayFabCppRequestCommon(),
            BuildId(src.BuildId),
            CustomTags(src.CustomTags),
            Region(src.Region),
            Username(src.Username),
            VmId(src.VmId)
            {}

        FDeleteRemoteUserRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteRemoteUserRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteRemoteUserRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEmptyResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FEmptyResponse() :
            FPlayFabCppResultCommon()
            {}

        FEmptyResponse(const FEmptyResponse& src) :
            FPlayFabCppResultCommon()
            {}

        FEmptyResponse(const TSharedPtr<FJsonObject>& obj) : FEmptyResponse()
        {
            readFromValue(obj);
        }

        ~FEmptyResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEnableMultiplayerServersForTitleRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FEnableMultiplayerServersForTitleRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FEnableMultiplayerServersForTitleRequest(const FEnableMultiplayerServersForTitleRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags)
            {}

        FEnableMultiplayerServersForTitleRequest(const TSharedPtr<FJsonObject>& obj) : FEnableMultiplayerServersForTitleRequest()
        {
            readFromValue(obj);
        }

        ~FEnableMultiplayerServersForTitleRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum TitleMultiplayerServerEnabledStatus
    {
        TitleMultiplayerServerEnabledStatusInitializing,
        TitleMultiplayerServerEnabledStatusEnabled,
        TitleMultiplayerServerEnabledStatusDisabled
    };

    PLAYFABCPP_API void writeTitleMultiplayerServerEnabledStatusEnumJSON(TitleMultiplayerServerEnabledStatus enumVal, JsonWriter& writer);
    PLAYFABCPP_API TitleMultiplayerServerEnabledStatus readTitleMultiplayerServerEnabledStatusFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API TitleMultiplayerServerEnabledStatus readTitleMultiplayerServerEnabledStatusFromValue(const FString& value);

    struct PLAYFABCPP_API FEnableMultiplayerServersForTitleResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The enabled status for the multiplayer server features for the title.
        Boxed<TitleMultiplayerServerEnabledStatus> Status;

        FEnableMultiplayerServersForTitleResponse() :
            FPlayFabCppResultCommon(),
            Status()
            {}

        FEnableMultiplayerServersForTitleResponse(const FEnableMultiplayerServersForTitleResponse& src) :
            FPlayFabCppResultCommon(),
            Status(src.Status)
            {}

        FEnableMultiplayerServersForTitleResponse(const TSharedPtr<FJsonObject>& obj) : FEnableMultiplayerServersForTitleResponse()
        {
            readFromValue(obj);
        }

        ~FEnableMultiplayerServersForTitleResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetAssetUploadUrlRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The asset's file name to get the upload URL for.
        FString FileName;

        FGetAssetUploadUrlRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            FileName()
            {}

        FGetAssetUploadUrlRequest(const FGetAssetUploadUrlRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            FileName(src.FileName)
            {}

        FGetAssetUploadUrlRequest(const TSharedPtr<FJsonObject>& obj) : FGetAssetUploadUrlRequest()
        {
            readFromValue(obj);
        }

        ~FGetAssetUploadUrlRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetAssetUploadUrlResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The asset's upload URL.
        FString AssetUploadUrl;

        // [optional] The asset's file name to get the upload URL for.
        FString FileName;

        FGetAssetUploadUrlResponse() :
            FPlayFabCppResultCommon(),
            AssetUploadUrl(),
            FileName()
            {}

        FGetAssetUploadUrlResponse(const FGetAssetUploadUrlResponse& src) :
            FPlayFabCppResultCommon(),
            AssetUploadUrl(src.AssetUploadUrl),
            FileName(src.FileName)
            {}

        FGetAssetUploadUrlResponse(const TSharedPtr<FJsonObject>& obj) : FGetAssetUploadUrlResponse()
        {
            readFromValue(obj);
        }

        ~FGetAssetUploadUrlResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetBuildAliasRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string alias ID of the alias to perform the action on.
        FString AliasId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FGetBuildAliasRequest() :
            FPlayFabCppRequestCommon(),
            AliasId(),
            CustomTags()
            {}

        FGetBuildAliasRequest(const FGetBuildAliasRequest& src) :
            FPlayFabCppRequestCommon(),
            AliasId(src.AliasId),
            CustomTags(src.CustomTags)
            {}

        FGetBuildAliasRequest(const TSharedPtr<FJsonObject>& obj) : FGetBuildAliasRequest()
        {
            readFromValue(obj);
        }

        ~FGetBuildAliasRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetBuildRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string build ID of the build to get.
        FString BuildId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FGetBuildRequest() :
            FPlayFabCppRequestCommon(),
            BuildId(),
            CustomTags()
            {}

        FGetBuildRequest(const FGetBuildRequest& src) :
            FPlayFabCppRequestCommon(),
            BuildId(src.BuildId),
            CustomTags(src.CustomTags)
            {}

        FGetBuildRequest(const TSharedPtr<FJsonObject>& obj) : FGetBuildRequest()
        {
            readFromValue(obj);
        }

        ~FGetBuildRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetBuildResponse : public PlayFab::FPlayFabCppResultCommon
    {
        /**
         * [optional] When true, assets will not be copied for each server inside the VM. All serverswill run from the same set of assets, or
         * will have the same assets mounted in the container.
         */
        Boxed<bool> AreAssetsReadonly;

        // [optional] The guid string build ID of the build.
        FString BuildId;

        // [optional] The build name.
        FString BuildName;

        // [optional] The current build status. Valid values are - Deploying, Deployed, DeletingRegion, Unhealthy.
        FString BuildStatus;

        // [optional] The flavor of container of he build.
        Boxed<ContainerFlavor> pfContainerFlavor;

        /**
         * [optional] The container command to run when the multiplayer server has been allocated, including any arguments. This only applies
         * to custom builds. If the build is a managed build, this field will be null.
         */
        FString ContainerRunCommand;

        // [optional] The time the build was created in UTC.
        Boxed<FDateTime> CreationTime;

        // [optional] The custom game container image for a custom build.
        TSharedPtr<FContainerImageReference> CustomGameContainerImage;

        // [optional] The game assets for the build.
        TArray<FAssetReference> GameAssetReferences;
        // [optional] The game certificates for the build.
        TArray<FGameCertificateReference> GameCertificateReferences;
        // [optional] The instrumentation configuration of the build.
        TSharedPtr<FInstrumentationConfiguration> pfInstrumentationConfiguration;

        /**
         * [optional] Metadata of the build. The keys are case insensitive. The build metadata is made available to the server through Game
         * Server SDK (GSDK).
         */
        TMap<FString, FString> Metadata;
        // The number of multiplayer servers to hosted on a single VM of the build.
        int32 MultiplayerServerCountPerVm;

        // [optional] The OS platform used for running the game process.
        FString OsPlatform;

        // [optional] The ports the build is mapped on.
        TArray<FPort> Ports;
        // [optional] The region configuration for the build.
        TArray<FBuildRegion> RegionConfigurations;
        // [optional] The type of game server being hosted.
        FString ServerType;

        /**
         * [optional] The command to run when the multiplayer server has been allocated, including any arguments. This only applies to managed
         * builds. If the build is a custom build, this field will be null.
         */
        FString StartMultiplayerServerCommand;

        /**
         * [optional] When true, assets will be downloaded and uncompressed in memory, without the compressedversion being written first to
         * disc.
         */
        Boxed<bool> UseStreamingForAssetDownloads;

        // [optional] The VM size the build was created on.
        Boxed<AzureVmSize> VmSize;

        FGetBuildResponse() :
            FPlayFabCppResultCommon(),
            AreAssetsReadonly(),
            BuildId(),
            BuildName(),
            BuildStatus(),
            pfContainerFlavor(),
            ContainerRunCommand(),
            CreationTime(),
            CustomGameContainerImage(nullptr),
            GameAssetReferences(),
            GameCertificateReferences(),
            pfInstrumentationConfiguration(nullptr),
            Metadata(),
            MultiplayerServerCountPerVm(0),
            OsPlatform(),
            Ports(),
            RegionConfigurations(),
            ServerType(),
            StartMultiplayerServerCommand(),
            UseStreamingForAssetDownloads(),
            VmSize()
            {}

        FGetBuildResponse(const FGetBuildResponse& src) :
            FPlayFabCppResultCommon(),
            AreAssetsReadonly(src.AreAssetsReadonly),
            BuildId(src.BuildId),
            BuildName(src.BuildName),
            BuildStatus(src.BuildStatus),
            pfContainerFlavor(src.pfContainerFlavor),
            ContainerRunCommand(src.ContainerRunCommand),
            CreationTime(src.CreationTime),
            CustomGameContainerImage(src.CustomGameContainerImage.IsValid() ? MakeShareable(new FContainerImageReference(*src.CustomGameContainerImage)) : nullptr),
            GameAssetReferences(src.GameAssetReferences),
            GameCertificateReferences(src.GameCertificateReferences),
            pfInstrumentationConfiguration(src.pfInstrumentationConfiguration.IsValid() ? MakeShareable(new FInstrumentationConfiguration(*src.pfInstrumentationConfiguration)) : nullptr),
            Metadata(src.Metadata),
            MultiplayerServerCountPerVm(src.MultiplayerServerCountPerVm),
            OsPlatform(src.OsPlatform),
            Ports(src.Ports),
            RegionConfigurations(src.RegionConfigurations),
            ServerType(src.ServerType),
            StartMultiplayerServerCommand(src.StartMultiplayerServerCommand),
            UseStreamingForAssetDownloads(src.UseStreamingForAssetDownloads),
            VmSize(src.VmSize)
            {}

        FGetBuildResponse(const TSharedPtr<FJsonObject>& obj) : FGetBuildResponse()
        {
            readFromValue(obj);
        }

        ~FGetBuildResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetContainerRegistryCredentialsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FGetContainerRegistryCredentialsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FGetContainerRegistryCredentialsRequest(const FGetContainerRegistryCredentialsRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags)
            {}

        FGetContainerRegistryCredentialsRequest(const TSharedPtr<FJsonObject>& obj) : FGetContainerRegistryCredentialsRequest()
        {
            readFromValue(obj);
        }

        ~FGetContainerRegistryCredentialsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetContainerRegistryCredentialsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The url of the container registry.
        FString DnsName;

        // [optional] The password for accessing the container registry.
        FString Password;

        // [optional] The username for accessing the container registry.
        FString Username;

        FGetContainerRegistryCredentialsResponse() :
            FPlayFabCppResultCommon(),
            DnsName(),
            Password(),
            Username()
            {}

        FGetContainerRegistryCredentialsResponse(const FGetContainerRegistryCredentialsResponse& src) :
            FPlayFabCppResultCommon(),
            DnsName(src.DnsName),
            Password(src.Password),
            Username(src.Username)
            {}

        FGetContainerRegistryCredentialsResponse(const TSharedPtr<FJsonObject>& obj) : FGetContainerRegistryCredentialsResponse()
        {
            readFromValue(obj);
        }

        ~FGetContainerRegistryCredentialsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetMatchmakingTicketRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        /**
         * Determines whether the matchmaking attributes will be returned as an escaped JSON string or as an un-escaped JSON
         * object.
         */
        bool EscapeObject;

        // The name of the queue to find a match for.
        FString QueueName;

        // The Id of the ticket to find a match for.
        FString TicketId;

        FGetMatchmakingTicketRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            EscapeObject(false),
            QueueName(),
            TicketId()
            {}

        FGetMatchmakingTicketRequest(const FGetMatchmakingTicketRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            EscapeObject(src.EscapeObject),
            QueueName(src.QueueName),
            TicketId(src.TicketId)
            {}

        FGetMatchmakingTicketRequest(const TSharedPtr<FJsonObject>& obj) : FGetMatchmakingTicketRequest()
        {
            readFromValue(obj);
        }

        ~FGetMatchmakingTicketRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetMatchmakingTicketResult : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The reason why the current ticket was canceled. This field is only set if the ticket is in canceled state.
        FString CancellationReasonString;

        // The server date and time at which ticket was created.
        FDateTime Created;

        // The Creator's entity key.
        FEntityKey Creator;

        // How long to attempt matching this ticket in seconds.
        int32 GiveUpAfterSeconds;

        // [optional] The Id of a match.
        FString MatchId;

        // A list of Users that have joined this ticket.
        TArray<FMatchmakingPlayer> Members;
        // [optional] A list of PlayFab Ids of Users to match with.
        TArray<FEntityKey> MembersToMatchWith;
        // The Id of a match queue.
        FString QueueName;

        /**
         * The current ticket status. Possible values are: WaitingForPlayers, WaitingForMatch, WaitingForServer, Canceled and
         * Matched.
         */
        FString Status;

        // The Id of the ticket to find a match for.
        FString TicketId;

        FGetMatchmakingTicketResult() :
            FPlayFabCppResultCommon(),
            CancellationReasonString(),
            Created(0),
            Creator(),
            GiveUpAfterSeconds(0),
            MatchId(),
            Members(),
            MembersToMatchWith(),
            QueueName(),
            Status(),
            TicketId()
            {}

        FGetMatchmakingTicketResult(const FGetMatchmakingTicketResult& src) :
            FPlayFabCppResultCommon(),
            CancellationReasonString(src.CancellationReasonString),
            Created(src.Created),
            Creator(src.Creator),
            GiveUpAfterSeconds(src.GiveUpAfterSeconds),
            MatchId(src.MatchId),
            Members(src.Members),
            MembersToMatchWith(src.MembersToMatchWith),
            QueueName(src.QueueName),
            Status(src.Status),
            TicketId(src.TicketId)
            {}

        FGetMatchmakingTicketResult(const TSharedPtr<FJsonObject>& obj) : FGetMatchmakingTicketResult()
        {
            readFromValue(obj);
        }

        ~FGetMatchmakingTicketResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetMatchRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        /**
         * Determines whether the matchmaking attributes will be returned as an escaped JSON string or as an un-escaped JSON
         * object.
         */
        bool EscapeObject;

        // The Id of a match.
        FString MatchId;

        // The name of the queue to join.
        FString QueueName;

        // Determines whether the matchmaking attributes for each user should be returned in the response for match request.
        bool ReturnMemberAttributes;

        FGetMatchRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            EscapeObject(false),
            MatchId(),
            QueueName(),
            ReturnMemberAttributes(false)
            {}

        FGetMatchRequest(const FGetMatchRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            EscapeObject(src.EscapeObject),
            MatchId(src.MatchId),
            QueueName(src.QueueName),
            ReturnMemberAttributes(src.ReturnMemberAttributes)
            {}

        FGetMatchRequest(const TSharedPtr<FJsonObject>& obj) : FGetMatchRequest()
        {
            readFromValue(obj);
        }

        ~FGetMatchRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetMatchResult : public PlayFab::FPlayFabCppResultCommon
    {
        // The Id of a match.
        FString MatchId;

        // A list of Users that are matched together, along with their team assignments.
        TArray<FMatchmakingPlayerWithTeamAssignment> Members;
        /**
         * [optional] A list of regions that the match could be played in sorted by preference. This value is only set if the queue has a
         * region selection rule.
         */
        TArray<FString> RegionPreferences;
        // [optional] The details of the server that the match has been allocated to.
        TSharedPtr<FServerDetails> pfServerDetails;

        FGetMatchResult() :
            FPlayFabCppResultCommon(),
            MatchId(),
            Members(),
            RegionPreferences(),
            pfServerDetails(nullptr)
            {}

        FGetMatchResult(const FGetMatchResult& src) :
            FPlayFabCppResultCommon(),
            MatchId(src.MatchId),
            Members(src.Members),
            RegionPreferences(src.RegionPreferences),
            pfServerDetails(src.pfServerDetails.IsValid() ? MakeShareable(new FServerDetails(*src.pfServerDetails)) : nullptr)
            {}

        FGetMatchResult(const TSharedPtr<FJsonObject>& obj) : FGetMatchResult()
        {
            readFromValue(obj);
        }

        ~FGetMatchResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetMultiplayerServerDetailsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string build ID of the multiplayer server to get details for.
        FString BuildId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The region the multiplayer server is located in to get details for.
        FString Region;

        /**
         * The title generated guid string session ID of the multiplayer server to get details for. This is to keep track of
         * multiplayer server sessions.
         */
        FString SessionId;

        FGetMultiplayerServerDetailsRequest() :
            FPlayFabCppRequestCommon(),
            BuildId(),
            CustomTags(),
            Region(),
            SessionId()
            {}

        FGetMultiplayerServerDetailsRequest(const FGetMultiplayerServerDetailsRequest& src) :
            FPlayFabCppRequestCommon(),
            BuildId(src.BuildId),
            CustomTags(src.CustomTags),
            Region(src.Region),
            SessionId(src.SessionId)
            {}

        FGetMultiplayerServerDetailsRequest(const TSharedPtr<FJsonObject>& obj) : FGetMultiplayerServerDetailsRequest()
        {
            readFromValue(obj);
        }

        ~FGetMultiplayerServerDetailsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetMultiplayerServerDetailsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The connected players in the multiplayer server.
        TArray<FConnectedPlayer> ConnectedPlayers;
        // [optional] The fully qualified domain name of the virtual machine that is hosting this multiplayer server.
        FString FQDN;

        // [optional] The IPv4 address of the virtual machine that is hosting this multiplayer server.
        FString IPV4Address;

        // [optional] The time (UTC) at which a change in the multiplayer server state was observed.
        Boxed<FDateTime> LastStateTransitionTime;

        // [optional] The ports the multiplayer server uses.
        TArray<FPort> Ports;
        // [optional] The region the multiplayer server is located in.
        FString Region;

        // [optional] The string server ID of the multiplayer server generated by PlayFab.
        FString ServerId;

        // [optional] The guid string session ID of the multiplayer server.
        FString SessionId;

        // [optional] The state of the multiplayer server.
        FString State;

        // [optional] The virtual machine ID that the multiplayer server is located on.
        FString VmId;

        FGetMultiplayerServerDetailsResponse() :
            FPlayFabCppResultCommon(),
            ConnectedPlayers(),
            FQDN(),
            IPV4Address(),
            LastStateTransitionTime(),
            Ports(),
            Region(),
            ServerId(),
            SessionId(),
            State(),
            VmId()
            {}

        FGetMultiplayerServerDetailsResponse(const FGetMultiplayerServerDetailsResponse& src) :
            FPlayFabCppResultCommon(),
            ConnectedPlayers(src.ConnectedPlayers),
            FQDN(src.FQDN),
            IPV4Address(src.IPV4Address),
            LastStateTransitionTime(src.LastStateTransitionTime),
            Ports(src.Ports),
            Region(src.Region),
            ServerId(src.ServerId),
            SessionId(src.SessionId),
            State(src.State),
            VmId(src.VmId)
            {}

        FGetMultiplayerServerDetailsResponse(const TSharedPtr<FJsonObject>& obj) : FGetMultiplayerServerDetailsResponse()
        {
            readFromValue(obj);
        }

        ~FGetMultiplayerServerDetailsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetMultiplayerServerLogsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The server ID of multiplayer server to get logs for.
        FString ServerId;

        FGetMultiplayerServerLogsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            ServerId()
            {}

        FGetMultiplayerServerLogsRequest(const FGetMultiplayerServerLogsRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            ServerId(src.ServerId)
            {}

        FGetMultiplayerServerLogsRequest(const TSharedPtr<FJsonObject>& obj) : FGetMultiplayerServerLogsRequest()
        {
            readFromValue(obj);
        }

        ~FGetMultiplayerServerLogsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetMultiplayerServerLogsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] URL for logs download.
        FString LogDownloadUrl;

        FGetMultiplayerServerLogsResponse() :
            FPlayFabCppResultCommon(),
            LogDownloadUrl()
            {}

        FGetMultiplayerServerLogsResponse(const FGetMultiplayerServerLogsResponse& src) :
            FPlayFabCppResultCommon(),
            LogDownloadUrl(src.LogDownloadUrl)
            {}

        FGetMultiplayerServerLogsResponse(const TSharedPtr<FJsonObject>& obj) : FGetMultiplayerServerLogsResponse()
        {
            readFromValue(obj);
        }

        ~FGetMultiplayerServerLogsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetMultiplayerSessionLogsBySessionIdRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The server ID of multiplayer server to get logs for.
        FString SessionId;

        FGetMultiplayerSessionLogsBySessionIdRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            SessionId()
            {}

        FGetMultiplayerSessionLogsBySessionIdRequest(const FGetMultiplayerSessionLogsBySessionIdRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            SessionId(src.SessionId)
            {}

        FGetMultiplayerSessionLogsBySessionIdRequest(const TSharedPtr<FJsonObject>& obj) : FGetMultiplayerSessionLogsBySessionIdRequest()
        {
            readFromValue(obj);
        }

        ~FGetMultiplayerSessionLogsBySessionIdRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetQueueStatisticsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The name of the queue.
        FString QueueName;

        FGetQueueStatisticsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            QueueName()
            {}

        FGetQueueStatisticsRequest(const FGetQueueStatisticsRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            QueueName(src.QueueName)
            {}

        FGetQueueStatisticsRequest(const TSharedPtr<FJsonObject>& obj) : FGetQueueStatisticsRequest()
        {
            readFromValue(obj);
        }

        ~FGetQueueStatisticsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FStatistics : public PlayFab::FPlayFabCppBaseModel
    {
        // The average.
        double Average;

        // The 50th percentile.
        double Percentile50;

        // The 90th percentile.
        double Percentile90;

        // The 99th percentile.
        double Percentile99;

        FStatistics() :
            FPlayFabCppBaseModel(),
            Average(0),
            Percentile50(0),
            Percentile90(0),
            Percentile99(0)
            {}

        FStatistics(const FStatistics& src) :
            FPlayFabCppBaseModel(),
            Average(src.Average),
            Percentile50(src.Percentile50),
            Percentile90(src.Percentile90),
            Percentile99(src.Percentile99)
            {}

        FStatistics(const TSharedPtr<FJsonObject>& obj) : FStatistics()
        {
            readFromValue(obj);
        }

        ~FStatistics();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetQueueStatisticsResult : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The current number of players in the matchmaking queue, who are waiting to be matched.
        Boxed<uint32> NumberOfPlayersMatching;

        // [optional] Statistics representing the time (in seconds) it takes for tickets to find a match.
        TSharedPtr<FStatistics> TimeToMatchStatisticsInSeconds;

        FGetQueueStatisticsResult() :
            FPlayFabCppResultCommon(),
            NumberOfPlayersMatching(),
            TimeToMatchStatisticsInSeconds(nullptr)
            {}

        FGetQueueStatisticsResult(const FGetQueueStatisticsResult& src) :
            FPlayFabCppResultCommon(),
            NumberOfPlayersMatching(src.NumberOfPlayersMatching),
            TimeToMatchStatisticsInSeconds(src.TimeToMatchStatisticsInSeconds.IsValid() ? MakeShareable(new FStatistics(*src.TimeToMatchStatisticsInSeconds)) : nullptr)
            {}

        FGetQueueStatisticsResult(const TSharedPtr<FJsonObject>& obj) : FGetQueueStatisticsResult()
        {
            readFromValue(obj);
        }

        ~FGetQueueStatisticsResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetRemoteLoginEndpointRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string build ID of the multiplayer server to get remote login information for.
        FString BuildId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The region of the multiplayer server to get remote login information for.
        FString Region;

        // The virtual machine ID the multiplayer server is located on.
        FString VmId;

        FGetRemoteLoginEndpointRequest() :
            FPlayFabCppRequestCommon(),
            BuildId(),
            CustomTags(),
            Region(),
            VmId()
            {}

        FGetRemoteLoginEndpointRequest(const FGetRemoteLoginEndpointRequest& src) :
            FPlayFabCppRequestCommon(),
            BuildId(src.BuildId),
            CustomTags(src.CustomTags),
            Region(src.Region),
            VmId(src.VmId)
            {}

        FGetRemoteLoginEndpointRequest(const TSharedPtr<FJsonObject>& obj) : FGetRemoteLoginEndpointRequest()
        {
            readFromValue(obj);
        }

        ~FGetRemoteLoginEndpointRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetRemoteLoginEndpointResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The remote login IPV4 address of multiplayer server.
        FString IPV4Address;

        // The remote login port of multiplayer server.
        int32 Port;

        FGetRemoteLoginEndpointResponse() :
            FPlayFabCppResultCommon(),
            IPV4Address(),
            Port(0)
            {}

        FGetRemoteLoginEndpointResponse(const FGetRemoteLoginEndpointResponse& src) :
            FPlayFabCppResultCommon(),
            IPV4Address(src.IPV4Address),
            Port(src.Port)
            {}

        FGetRemoteLoginEndpointResponse(const TSharedPtr<FJsonObject>& obj) : FGetRemoteLoginEndpointResponse()
        {
            readFromValue(obj);
        }

        ~FGetRemoteLoginEndpointResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetServerBackfillTicketRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        /**
         * Determines whether the matchmaking attributes will be returned as an escaped JSON string or as an un-escaped JSON
         * object.
         */
        bool EscapeObject;

        // The name of the queue to find a match for.
        FString QueueName;

        // The Id of the ticket to find a match for.
        FString TicketId;

        FGetServerBackfillTicketRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            EscapeObject(false),
            QueueName(),
            TicketId()
            {}

        FGetServerBackfillTicketRequest(const FGetServerBackfillTicketRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            EscapeObject(src.EscapeObject),
            QueueName(src.QueueName),
            TicketId(src.TicketId)
            {}

        FGetServerBackfillTicketRequest(const TSharedPtr<FJsonObject>& obj) : FGetServerBackfillTicketRequest()
        {
            readFromValue(obj);
        }

        ~FGetServerBackfillTicketRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetServerBackfillTicketResult : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The reason why the current ticket was canceled. This field is only set if the ticket is in canceled state.
        FString CancellationReasonString;

        // The server date and time at which ticket was created.
        FDateTime Created;

        // How long to attempt matching this ticket in seconds.
        int32 GiveUpAfterSeconds;

        // [optional] The Id of a match.
        FString MatchId;

        // A list of Users that are part of this ticket, along with their team assignments.
        TArray<FMatchmakingPlayerWithTeamAssignment> Members;
        // The Id of a match queue.
        FString QueueName;

        // The details of the server the members are connected to.
        FServerDetails pfServerDetails;

        // The current ticket status. Possible values are: WaitingForMatch, Canceled and Matched.
        FString Status;

        // The Id of the ticket to find a match for.
        FString TicketId;

        FGetServerBackfillTicketResult() :
            FPlayFabCppResultCommon(),
            CancellationReasonString(),
            Created(0),
            GiveUpAfterSeconds(0),
            MatchId(),
            Members(),
            QueueName(),
            pfServerDetails(),
            Status(),
            TicketId()
            {}

        FGetServerBackfillTicketResult(const FGetServerBackfillTicketResult& src) :
            FPlayFabCppResultCommon(),
            CancellationReasonString(src.CancellationReasonString),
            Created(src.Created),
            GiveUpAfterSeconds(src.GiveUpAfterSeconds),
            MatchId(src.MatchId),
            Members(src.Members),
            QueueName(src.QueueName),
            pfServerDetails(src.pfServerDetails),
            Status(src.Status),
            TicketId(src.TicketId)
            {}

        FGetServerBackfillTicketResult(const TSharedPtr<FJsonObject>& obj) : FGetServerBackfillTicketResult()
        {
            readFromValue(obj);
        }

        ~FGetServerBackfillTicketResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetTitleEnabledForMultiplayerServersStatusRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FGetTitleEnabledForMultiplayerServersStatusRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FGetTitleEnabledForMultiplayerServersStatusRequest(const FGetTitleEnabledForMultiplayerServersStatusRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags)
            {}

        FGetTitleEnabledForMultiplayerServersStatusRequest(const TSharedPtr<FJsonObject>& obj) : FGetTitleEnabledForMultiplayerServersStatusRequest()
        {
            readFromValue(obj);
        }

        ~FGetTitleEnabledForMultiplayerServersStatusRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetTitleEnabledForMultiplayerServersStatusResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The enabled status for the multiplayer server features for the title.
        Boxed<TitleMultiplayerServerEnabledStatus> Status;

        FGetTitleEnabledForMultiplayerServersStatusResponse() :
            FPlayFabCppResultCommon(),
            Status()
            {}

        FGetTitleEnabledForMultiplayerServersStatusResponse(const FGetTitleEnabledForMultiplayerServersStatusResponse& src) :
            FPlayFabCppResultCommon(),
            Status(src.Status)
            {}

        FGetTitleEnabledForMultiplayerServersStatusResponse(const TSharedPtr<FJsonObject>& obj) : FGetTitleEnabledForMultiplayerServersStatusResponse()
        {
            readFromValue(obj);
        }

        ~FGetTitleEnabledForMultiplayerServersStatusResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetTitleMultiplayerServersQuotaChangeRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // Id of the change request to get.
        FString RequestId;

        FGetTitleMultiplayerServersQuotaChangeRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            RequestId()
            {}

        FGetTitleMultiplayerServersQuotaChangeRequest(const FGetTitleMultiplayerServersQuotaChangeRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            RequestId(src.RequestId)
            {}

        FGetTitleMultiplayerServersQuotaChangeRequest(const TSharedPtr<FJsonObject>& obj) : FGetTitleMultiplayerServersQuotaChangeRequest()
        {
            readFromValue(obj);
        }

        ~FGetTitleMultiplayerServersQuotaChangeRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FQuotaChange : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] A brief description of the requested changes.
        FString ChangeDescription;

        // [optional] Requested changes to make to the titles cores quota.
        TArray<FCoreCapacityChange> Changes;
        // Whether or not this request is pending a review.
        bool IsPendingReview;

        // [optional] Additional information about this request that our team can use to better understand the requirements.
        FString Notes;

        // [optional] Id of the change request.
        FString RequestId;

        // [optional] Comments by our team when a request is reviewed.
        FString ReviewComments;

        // Whether or not this request was approved.
        bool WasApproved;

        FQuotaChange() :
            FPlayFabCppBaseModel(),
            ChangeDescription(),
            Changes(),
            IsPendingReview(false),
            Notes(),
            RequestId(),
            ReviewComments(),
            WasApproved(false)
            {}

        FQuotaChange(const FQuotaChange& src) :
            FPlayFabCppBaseModel(),
            ChangeDescription(src.ChangeDescription),
            Changes(src.Changes),
            IsPendingReview(src.IsPendingReview),
            Notes(src.Notes),
            RequestId(src.RequestId),
            ReviewComments(src.ReviewComments),
            WasApproved(src.WasApproved)
            {}

        FQuotaChange(const TSharedPtr<FJsonObject>& obj) : FQuotaChange()
        {
            readFromValue(obj);
        }

        ~FQuotaChange();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetTitleMultiplayerServersQuotaChangeResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The change request for this title.
        TSharedPtr<FQuotaChange> Change;

        FGetTitleMultiplayerServersQuotaChangeResponse() :
            FPlayFabCppResultCommon(),
            Change(nullptr)
            {}

        FGetTitleMultiplayerServersQuotaChangeResponse(const FGetTitleMultiplayerServersQuotaChangeResponse& src) :
            FPlayFabCppResultCommon(),
            Change(src.Change.IsValid() ? MakeShareable(new FQuotaChange(*src.Change)) : nullptr)
            {}

        FGetTitleMultiplayerServersQuotaChangeResponse(const TSharedPtr<FJsonObject>& obj) : FGetTitleMultiplayerServersQuotaChangeResponse()
        {
            readFromValue(obj);
        }

        ~FGetTitleMultiplayerServersQuotaChangeResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetTitleMultiplayerServersQuotasRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FGetTitleMultiplayerServersQuotasRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FGetTitleMultiplayerServersQuotasRequest(const FGetTitleMultiplayerServersQuotasRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags)
            {}

        FGetTitleMultiplayerServersQuotasRequest(const TSharedPtr<FJsonObject>& obj) : FGetTitleMultiplayerServersQuotasRequest()
        {
            readFromValue(obj);
        }

        ~FGetTitleMultiplayerServersQuotasRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FTitleMultiplayerServersQuotas : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The core capacity for the various regions and VM Family
        TArray<FCoreCapacity> CoreCapacities;
        FTitleMultiplayerServersQuotas() :
            FPlayFabCppBaseModel(),
            CoreCapacities()
            {}

        FTitleMultiplayerServersQuotas(const FTitleMultiplayerServersQuotas& src) :
            FPlayFabCppBaseModel(),
            CoreCapacities(src.CoreCapacities)
            {}

        FTitleMultiplayerServersQuotas(const TSharedPtr<FJsonObject>& obj) : FTitleMultiplayerServersQuotas()
        {
            readFromValue(obj);
        }

        ~FTitleMultiplayerServersQuotas();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetTitleMultiplayerServersQuotasResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The various quotas for multiplayer servers for the title.
        TSharedPtr<FTitleMultiplayerServersQuotas> Quotas;

        FGetTitleMultiplayerServersQuotasResponse() :
            FPlayFabCppResultCommon(),
            Quotas(nullptr)
            {}

        FGetTitleMultiplayerServersQuotasResponse(const FGetTitleMultiplayerServersQuotasResponse& src) :
            FPlayFabCppResultCommon(),
            Quotas(src.Quotas.IsValid() ? MakeShareable(new FTitleMultiplayerServersQuotas(*src.Quotas)) : nullptr)
            {}

        FGetTitleMultiplayerServersQuotasResponse(const TSharedPtr<FJsonObject>& obj) : FGetTitleMultiplayerServersQuotasResponse()
        {
            readFromValue(obj);
        }

        ~FGetTitleMultiplayerServersQuotasResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FJoinMatchmakingTicketRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The User who wants to join the ticket. Their Id must be listed in PlayFabIdsToMatchWith.
        FMatchmakingPlayer Member;

        // The name of the queue to join.
        FString QueueName;

        // The Id of the ticket to find a match for.
        FString TicketId;

        FJoinMatchmakingTicketRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Member(),
            QueueName(),
            TicketId()
            {}

        FJoinMatchmakingTicketRequest(const FJoinMatchmakingTicketRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Member(src.Member),
            QueueName(src.QueueName),
            TicketId(src.TicketId)
            {}

        FJoinMatchmakingTicketRequest(const TSharedPtr<FJsonObject>& obj) : FJoinMatchmakingTicketRequest()
        {
            readFromValue(obj);
        }

        ~FJoinMatchmakingTicketRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FJoinMatchmakingTicketResult : public PlayFab::FPlayFabCppResultCommon
    {
        FJoinMatchmakingTicketResult() :
            FPlayFabCppResultCommon()
            {}

        FJoinMatchmakingTicketResult(const FJoinMatchmakingTicketResult& src) :
            FPlayFabCppResultCommon()
            {}

        FJoinMatchmakingTicketResult(const TSharedPtr<FJsonObject>& obj) : FJoinMatchmakingTicketResult()
        {
            readFromValue(obj);
        }

        ~FJoinMatchmakingTicketResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListAssetSummariesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The page size for the request.
        Boxed<int32> PageSize;

        // [optional] The skip token for the paged request.
        FString SkipToken;

        FListAssetSummariesRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            PageSize(),
            SkipToken()
            {}

        FListAssetSummariesRequest(const FListAssetSummariesRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            PageSize(src.PageSize),
            SkipToken(src.SkipToken)
            {}

        FListAssetSummariesRequest(const TSharedPtr<FJsonObject>& obj) : FListAssetSummariesRequest()
        {
            readFromValue(obj);
        }

        ~FListAssetSummariesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListAssetSummariesResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of asset summaries.
        TArray<FAssetSummary> AssetSummaries;
        // The page size on the response.
        int32 PageSize;

        // [optional] The skip token for the paged response.
        FString SkipToken;

        FListAssetSummariesResponse() :
            FPlayFabCppResultCommon(),
            AssetSummaries(),
            PageSize(0),
            SkipToken()
            {}

        FListAssetSummariesResponse(const FListAssetSummariesResponse& src) :
            FPlayFabCppResultCommon(),
            AssetSummaries(src.AssetSummaries),
            PageSize(src.PageSize),
            SkipToken(src.SkipToken)
            {}

        FListAssetSummariesResponse(const TSharedPtr<FJsonObject>& obj) : FListAssetSummariesResponse()
        {
            readFromValue(obj);
        }

        ~FListAssetSummariesResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListBuildAliasesForTitleResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of build aliases for the title
        TArray<FBuildAliasDetailsResponse> BuildAliases;
        FListBuildAliasesForTitleResponse() :
            FPlayFabCppResultCommon(),
            BuildAliases()
            {}

        FListBuildAliasesForTitleResponse(const FListBuildAliasesForTitleResponse& src) :
            FPlayFabCppResultCommon(),
            BuildAliases(src.BuildAliases)
            {}

        FListBuildAliasesForTitleResponse(const TSharedPtr<FJsonObject>& obj) : FListBuildAliasesForTitleResponse()
        {
            readFromValue(obj);
        }

        ~FListBuildAliasesForTitleResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListBuildSummariesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The page size for the request.
        Boxed<int32> PageSize;

        // [optional] The skip token for the paged request.
        FString SkipToken;

        FListBuildSummariesRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            PageSize(),
            SkipToken()
            {}

        FListBuildSummariesRequest(const FListBuildSummariesRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            PageSize(src.PageSize),
            SkipToken(src.SkipToken)
            {}

        FListBuildSummariesRequest(const TSharedPtr<FJsonObject>& obj) : FListBuildSummariesRequest()
        {
            readFromValue(obj);
        }

        ~FListBuildSummariesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListBuildSummariesResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of build summaries for a title.
        TArray<FBuildSummary> BuildSummaries;
        // The page size on the response.
        int32 PageSize;

        // [optional] The skip token for the paged response.
        FString SkipToken;

        FListBuildSummariesResponse() :
            FPlayFabCppResultCommon(),
            BuildSummaries(),
            PageSize(0),
            SkipToken()
            {}

        FListBuildSummariesResponse(const FListBuildSummariesResponse& src) :
            FPlayFabCppResultCommon(),
            BuildSummaries(src.BuildSummaries),
            PageSize(src.PageSize),
            SkipToken(src.SkipToken)
            {}

        FListBuildSummariesResponse(const TSharedPtr<FJsonObject>& obj) : FListBuildSummariesResponse()
        {
            readFromValue(obj);
        }

        ~FListBuildSummariesResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListCertificateSummariesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The page size for the request.
        Boxed<int32> PageSize;

        // [optional] The skip token for the paged request.
        FString SkipToken;

        FListCertificateSummariesRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            PageSize(),
            SkipToken()
            {}

        FListCertificateSummariesRequest(const FListCertificateSummariesRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            PageSize(src.PageSize),
            SkipToken(src.SkipToken)
            {}

        FListCertificateSummariesRequest(const TSharedPtr<FJsonObject>& obj) : FListCertificateSummariesRequest()
        {
            readFromValue(obj);
        }

        ~FListCertificateSummariesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListCertificateSummariesResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of game certificates.
        TArray<FCertificateSummary> CertificateSummaries;
        // The page size on the response.
        int32 PageSize;

        // [optional] The skip token for the paged response.
        FString SkipToken;

        FListCertificateSummariesResponse() :
            FPlayFabCppResultCommon(),
            CertificateSummaries(),
            PageSize(0),
            SkipToken()
            {}

        FListCertificateSummariesResponse(const FListCertificateSummariesResponse& src) :
            FPlayFabCppResultCommon(),
            CertificateSummaries(src.CertificateSummaries),
            PageSize(src.PageSize),
            SkipToken(src.SkipToken)
            {}

        FListCertificateSummariesResponse(const TSharedPtr<FJsonObject>& obj) : FListCertificateSummariesResponse()
        {
            readFromValue(obj);
        }

        ~FListCertificateSummariesResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListContainerImagesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The page size for the request.
        Boxed<int32> PageSize;

        // [optional] The skip token for the paged request.
        FString SkipToken;

        FListContainerImagesRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            PageSize(),
            SkipToken()
            {}

        FListContainerImagesRequest(const FListContainerImagesRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            PageSize(src.PageSize),
            SkipToken(src.SkipToken)
            {}

        FListContainerImagesRequest(const TSharedPtr<FJsonObject>& obj) : FListContainerImagesRequest()
        {
            readFromValue(obj);
        }

        ~FListContainerImagesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListContainerImagesResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of container images.
        TArray<FString> Images;
        // The page size on the response.
        int32 PageSize;

        // [optional] The skip token for the paged response.
        FString SkipToken;

        FListContainerImagesResponse() :
            FPlayFabCppResultCommon(),
            Images(),
            PageSize(0),
            SkipToken()
            {}

        FListContainerImagesResponse(const FListContainerImagesResponse& src) :
            FPlayFabCppResultCommon(),
            Images(src.Images),
            PageSize(src.PageSize),
            SkipToken(src.SkipToken)
            {}

        FListContainerImagesResponse(const TSharedPtr<FJsonObject>& obj) : FListContainerImagesResponse()
        {
            readFromValue(obj);
        }

        ~FListContainerImagesResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListContainerImageTagsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The container images we want to list tags for.
        FString ImageName;

        FListContainerImageTagsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            ImageName()
            {}

        FListContainerImageTagsRequest(const FListContainerImageTagsRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            ImageName(src.ImageName)
            {}

        FListContainerImageTagsRequest(const TSharedPtr<FJsonObject>& obj) : FListContainerImageTagsRequest()
        {
            readFromValue(obj);
        }

        ~FListContainerImageTagsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListContainerImageTagsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of tags for a particular container image.
        TArray<FString> Tags;
        FListContainerImageTagsResponse() :
            FPlayFabCppResultCommon(),
            Tags()
            {}

        FListContainerImageTagsResponse(const FListContainerImageTagsResponse& src) :
            FPlayFabCppResultCommon(),
            Tags(src.Tags)
            {}

        FListContainerImageTagsResponse(const TSharedPtr<FJsonObject>& obj) : FListContainerImageTagsResponse()
        {
            readFromValue(obj);
        }

        ~FListContainerImageTagsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListMatchmakingTicketsForPlayerRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity key for which to find the ticket Ids.
        TSharedPtr<FEntityKey> Entity;

        // The name of the queue to find a match for.
        FString QueueName;

        FListMatchmakingTicketsForPlayerRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr),
            QueueName()
            {}

        FListMatchmakingTicketsForPlayerRequest(const FListMatchmakingTicketsForPlayerRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            QueueName(src.QueueName)
            {}

        FListMatchmakingTicketsForPlayerRequest(const TSharedPtr<FJsonObject>& obj) : FListMatchmakingTicketsForPlayerRequest()
        {
            readFromValue(obj);
        }

        ~FListMatchmakingTicketsForPlayerRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListMatchmakingTicketsForPlayerResult : public PlayFab::FPlayFabCppResultCommon
    {
        // The list of ticket Ids the user is a member of.
        TArray<FString> TicketIds;
        FListMatchmakingTicketsForPlayerResult() :
            FPlayFabCppResultCommon(),
            TicketIds()
            {}

        FListMatchmakingTicketsForPlayerResult(const FListMatchmakingTicketsForPlayerResult& src) :
            FPlayFabCppResultCommon(),
            TicketIds(src.TicketIds)
            {}

        FListMatchmakingTicketsForPlayerResult(const TSharedPtr<FJsonObject>& obj) : FListMatchmakingTicketsForPlayerResult()
        {
            readFromValue(obj);
        }

        ~FListMatchmakingTicketsForPlayerResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListMultiplayerServersRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string build ID of the multiplayer servers to list.
        FString BuildId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The page size for the request.
        Boxed<int32> PageSize;

        // The region the multiplayer servers to list.
        FString Region;

        // [optional] The skip token for the paged request.
        FString SkipToken;

        FListMultiplayerServersRequest() :
            FPlayFabCppRequestCommon(),
            BuildId(),
            CustomTags(),
            PageSize(),
            Region(),
            SkipToken()
            {}

        FListMultiplayerServersRequest(const FListMultiplayerServersRequest& src) :
            FPlayFabCppRequestCommon(),
            BuildId(src.BuildId),
            CustomTags(src.CustomTags),
            PageSize(src.PageSize),
            Region(src.Region),
            SkipToken(src.SkipToken)
            {}

        FListMultiplayerServersRequest(const TSharedPtr<FJsonObject>& obj) : FListMultiplayerServersRequest()
        {
            readFromValue(obj);
        }

        ~FListMultiplayerServersRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FMultiplayerServerSummary : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The connected players in the multiplayer server.
        TArray<FConnectedPlayer> ConnectedPlayers;
        // [optional] The time (UTC) at which a change in the multiplayer server state was observed.
        Boxed<FDateTime> LastStateTransitionTime;

        // [optional] The region the multiplayer server is located in.
        FString Region;

        // [optional] The string server ID of the multiplayer server generated by PlayFab.
        FString ServerId;

        // [optional] The title generated guid string session ID of the multiplayer server.
        FString SessionId;

        // [optional] The state of the multiplayer server.
        FString State;

        // [optional] The virtual machine ID that the multiplayer server is located on.
        FString VmId;

        FMultiplayerServerSummary() :
            FPlayFabCppBaseModel(),
            ConnectedPlayers(),
            LastStateTransitionTime(),
            Region(),
            ServerId(),
            SessionId(),
            State(),
            VmId()
            {}

        FMultiplayerServerSummary(const FMultiplayerServerSummary& src) :
            FPlayFabCppBaseModel(),
            ConnectedPlayers(src.ConnectedPlayers),
            LastStateTransitionTime(src.LastStateTransitionTime),
            Region(src.Region),
            ServerId(src.ServerId),
            SessionId(src.SessionId),
            State(src.State),
            VmId(src.VmId)
            {}

        FMultiplayerServerSummary(const TSharedPtr<FJsonObject>& obj) : FMultiplayerServerSummary()
        {
            readFromValue(obj);
        }

        ~FMultiplayerServerSummary();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListMultiplayerServersResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of multiplayer server summary details.
        TArray<FMultiplayerServerSummary> MultiplayerServerSummaries;
        // The page size on the response.
        int32 PageSize;

        // [optional] The skip token for the paged response.
        FString SkipToken;

        FListMultiplayerServersResponse() :
            FPlayFabCppResultCommon(),
            MultiplayerServerSummaries(),
            PageSize(0),
            SkipToken()
            {}

        FListMultiplayerServersResponse(const FListMultiplayerServersResponse& src) :
            FPlayFabCppResultCommon(),
            MultiplayerServerSummaries(src.MultiplayerServerSummaries),
            PageSize(src.PageSize),
            SkipToken(src.SkipToken)
            {}

        FListMultiplayerServersResponse(const TSharedPtr<FJsonObject>& obj) : FListMultiplayerServersResponse()
        {
            readFromValue(obj);
        }

        ~FListMultiplayerServersResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListPartyQosServersRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FListPartyQosServersRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FListPartyQosServersRequest(const FListPartyQosServersRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags)
            {}

        FListPartyQosServersRequest(const TSharedPtr<FJsonObject>& obj) : FListPartyQosServersRequest()
        {
            readFromValue(obj);
        }

        ~FListPartyQosServersRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FQosServer : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The region the QoS server is located in.
        FString Region;

        // [optional] The QoS server URL.
        FString ServerUrl;

        FQosServer() :
            FPlayFabCppBaseModel(),
            Region(),
            ServerUrl()
            {}

        FQosServer(const FQosServer& src) :
            FPlayFabCppBaseModel(),
            Region(src.Region),
            ServerUrl(src.ServerUrl)
            {}

        FQosServer(const TSharedPtr<FJsonObject>& obj) : FQosServer()
        {
            readFromValue(obj);
        }

        ~FQosServer();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListPartyQosServersResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // The page size on the response.
        int32 PageSize;

        // [optional] The list of QoS servers.
        TArray<FQosServer> QosServers;
        // [optional] The skip token for the paged response.
        FString SkipToken;

        FListPartyQosServersResponse() :
            FPlayFabCppResultCommon(),
            PageSize(0),
            QosServers(),
            SkipToken()
            {}

        FListPartyQosServersResponse(const FListPartyQosServersResponse& src) :
            FPlayFabCppResultCommon(),
            PageSize(src.PageSize),
            QosServers(src.QosServers),
            SkipToken(src.SkipToken)
            {}

        FListPartyQosServersResponse(const TSharedPtr<FJsonObject>& obj) : FListPartyQosServersResponse()
        {
            readFromValue(obj);
        }

        ~FListPartyQosServersResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListQosServersForTitleRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        /**
         * [optional] Indicates that the response should contain Qos servers for all regions, including those where there are no builds
         * deployed for the title.
         */
        Boxed<bool> IncludeAllRegions;

        FListQosServersForTitleRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            IncludeAllRegions()
            {}

        FListQosServersForTitleRequest(const FListQosServersForTitleRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            IncludeAllRegions(src.IncludeAllRegions)
            {}

        FListQosServersForTitleRequest(const TSharedPtr<FJsonObject>& obj) : FListQosServersForTitleRequest()
        {
            readFromValue(obj);
        }

        ~FListQosServersForTitleRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListQosServersForTitleResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // The page size on the response.
        int32 PageSize;

        // [optional] The list of QoS servers.
        TArray<FQosServer> QosServers;
        // [optional] The skip token for the paged response.
        FString SkipToken;

        FListQosServersForTitleResponse() :
            FPlayFabCppResultCommon(),
            PageSize(0),
            QosServers(),
            SkipToken()
            {}

        FListQosServersForTitleResponse(const FListQosServersForTitleResponse& src) :
            FPlayFabCppResultCommon(),
            PageSize(src.PageSize),
            QosServers(src.QosServers),
            SkipToken(src.SkipToken)
            {}

        FListQosServersForTitleResponse(const TSharedPtr<FJsonObject>& obj) : FListQosServersForTitleResponse()
        {
            readFromValue(obj);
        }

        ~FListQosServersForTitleResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListServerBackfillTicketsForPlayerRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity key for which to find the ticket Ids.
        FEntityKey Entity;

        // The name of the queue the tickets are in.
        FString QueueName;

        FListServerBackfillTicketsForPlayerRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            QueueName()
            {}

        FListServerBackfillTicketsForPlayerRequest(const FListServerBackfillTicketsForPlayerRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            QueueName(src.QueueName)
            {}

        FListServerBackfillTicketsForPlayerRequest(const TSharedPtr<FJsonObject>& obj) : FListServerBackfillTicketsForPlayerRequest()
        {
            readFromValue(obj);
        }

        ~FListServerBackfillTicketsForPlayerRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListServerBackfillTicketsForPlayerResult : public PlayFab::FPlayFabCppResultCommon
    {
        // The list of backfill ticket Ids the user is a member of.
        TArray<FString> TicketIds;
        FListServerBackfillTicketsForPlayerResult() :
            FPlayFabCppResultCommon(),
            TicketIds()
            {}

        FListServerBackfillTicketsForPlayerResult(const FListServerBackfillTicketsForPlayerResult& src) :
            FPlayFabCppResultCommon(),
            TicketIds(src.TicketIds)
            {}

        FListServerBackfillTicketsForPlayerResult(const TSharedPtr<FJsonObject>& obj) : FListServerBackfillTicketsForPlayerResult()
        {
            readFromValue(obj);
        }

        ~FListServerBackfillTicketsForPlayerResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListTitleMultiplayerServersQuotaChangesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FListTitleMultiplayerServersQuotaChangesRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FListTitleMultiplayerServersQuotaChangesRequest(const FListTitleMultiplayerServersQuotaChangesRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags)
            {}

        FListTitleMultiplayerServersQuotaChangesRequest(const TSharedPtr<FJsonObject>& obj) : FListTitleMultiplayerServersQuotaChangesRequest()
        {
            readFromValue(obj);
        }

        ~FListTitleMultiplayerServersQuotaChangesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListTitleMultiplayerServersQuotaChangesResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] All change requests for this title.
        TArray<FQuotaChange> Changes;
        FListTitleMultiplayerServersQuotaChangesResponse() :
            FPlayFabCppResultCommon(),
            Changes()
            {}

        FListTitleMultiplayerServersQuotaChangesResponse(const FListTitleMultiplayerServersQuotaChangesResponse& src) :
            FPlayFabCppResultCommon(),
            Changes(src.Changes)
            {}

        FListTitleMultiplayerServersQuotaChangesResponse(const TSharedPtr<FJsonObject>& obj) : FListTitleMultiplayerServersQuotaChangesResponse()
        {
            readFromValue(obj);
        }

        ~FListTitleMultiplayerServersQuotaChangesResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListVirtualMachineSummariesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string build ID of the virtual machines to list.
        FString BuildId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The page size for the request.
        Boxed<int32> PageSize;

        // The region of the virtual machines to list.
        FString Region;

        // [optional] The skip token for the paged request.
        FString SkipToken;

        FListVirtualMachineSummariesRequest() :
            FPlayFabCppRequestCommon(),
            BuildId(),
            CustomTags(),
            PageSize(),
            Region(),
            SkipToken()
            {}

        FListVirtualMachineSummariesRequest(const FListVirtualMachineSummariesRequest& src) :
            FPlayFabCppRequestCommon(),
            BuildId(src.BuildId),
            CustomTags(src.CustomTags),
            PageSize(src.PageSize),
            Region(src.Region),
            SkipToken(src.SkipToken)
            {}

        FListVirtualMachineSummariesRequest(const TSharedPtr<FJsonObject>& obj) : FListVirtualMachineSummariesRequest()
        {
            readFromValue(obj);
        }

        ~FListVirtualMachineSummariesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FVirtualMachineSummary : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The virtual machine health status.
        FString HealthStatus;

        // [optional] The virtual machine state.
        FString State;

        // [optional] The virtual machine ID.
        FString VmId;

        FVirtualMachineSummary() :
            FPlayFabCppBaseModel(),
            HealthStatus(),
            State(),
            VmId()
            {}

        FVirtualMachineSummary(const FVirtualMachineSummary& src) :
            FPlayFabCppBaseModel(),
            HealthStatus(src.HealthStatus),
            State(src.State),
            VmId(src.VmId)
            {}

        FVirtualMachineSummary(const TSharedPtr<FJsonObject>& obj) : FVirtualMachineSummary()
        {
            readFromValue(obj);
        }

        ~FVirtualMachineSummary();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListVirtualMachineSummariesResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // The page size on the response.
        int32 PageSize;

        // [optional] The skip token for the paged response.
        FString SkipToken;

        // [optional] The list of virtual machine summaries.
        TArray<FVirtualMachineSummary> VirtualMachines;
        FListVirtualMachineSummariesResponse() :
            FPlayFabCppResultCommon(),
            PageSize(0),
            SkipToken(),
            VirtualMachines()
            {}

        FListVirtualMachineSummariesResponse(const FListVirtualMachineSummariesResponse& src) :
            FPlayFabCppResultCommon(),
            PageSize(src.PageSize),
            SkipToken(src.SkipToken),
            VirtualMachines(src.VirtualMachines)
            {}

        FListVirtualMachineSummariesResponse(const TSharedPtr<FJsonObject>& obj) : FListVirtualMachineSummariesResponse()
        {
            readFromValue(obj);
        }

        ~FListVirtualMachineSummariesResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FMultiplayerEmptyRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FMultiplayerEmptyRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FMultiplayerEmptyRequest(const FMultiplayerEmptyRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags)
            {}

        FMultiplayerEmptyRequest(const TSharedPtr<FJsonObject>& obj) : FMultiplayerEmptyRequest()
        {
            readFromValue(obj);
        }

        ~FMultiplayerEmptyRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum OsPlatform
    {
        OsPlatformWindows,
        OsPlatformLinux
    };

    PLAYFABCPP_API void writeOsPlatformEnumJSON(OsPlatform enumVal, JsonWriter& writer);
    PLAYFABCPP_API OsPlatform readOsPlatformFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API OsPlatform readOsPlatformFromValue(const FString& value);

    struct PLAYFABCPP_API FRequestMultiplayerServerRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The identifiers of the build alias to use for the request.
        TSharedPtr<FBuildAliasParams> pfBuildAliasParams;

        // [optional] The guid string build ID of the multiplayer server to request.
        FString BuildId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        /**
         * [optional] Initial list of players (potentially matchmade) allowed to connect to the game. This list is passed to the game server
         * when requested (via GSDK) and can be used to validate players connecting to it.
         */
        TArray<FString> InitialPlayers;
        /**
         * The preferred regions to request a multiplayer server from. The Multiplayer Service will iterate through the regions in
         * the specified order and allocate a server from the first one that has servers available.
         */
        TArray<FString> PreferredRegions;
        /**
         * [optional] Data encoded as a string that is passed to the game server when requested. This can be used to to communicate
         * information such as game mode or map through the request flow.
         */
        FString SessionCookie;

        // A guid string session ID created track the multiplayer server session over its life.
        FString SessionId;

        FRequestMultiplayerServerRequest() :
            FPlayFabCppRequestCommon(),
            pfBuildAliasParams(nullptr),
            BuildId(),
            CustomTags(),
            InitialPlayers(),
            PreferredRegions(),
            SessionCookie(),
            SessionId()
            {}

        FRequestMultiplayerServerRequest(const FRequestMultiplayerServerRequest& src) :
            FPlayFabCppRequestCommon(),
            pfBuildAliasParams(src.pfBuildAliasParams.IsValid() ? MakeShareable(new FBuildAliasParams(*src.pfBuildAliasParams)) : nullptr),
            BuildId(src.BuildId),
            CustomTags(src.CustomTags),
            InitialPlayers(src.InitialPlayers),
            PreferredRegions(src.PreferredRegions),
            SessionCookie(src.SessionCookie),
            SessionId(src.SessionId)
            {}

        FRequestMultiplayerServerRequest(const TSharedPtr<FJsonObject>& obj) : FRequestMultiplayerServerRequest()
        {
            readFromValue(obj);
        }

        ~FRequestMultiplayerServerRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRequestMultiplayerServerResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The connected players in the multiplayer server.
        TArray<FConnectedPlayer> ConnectedPlayers;
        // [optional] The fully qualified domain name of the virtual machine that is hosting this multiplayer server.
        FString FQDN;

        // [optional] The IPv4 address of the virtual machine that is hosting this multiplayer server.
        FString IPV4Address;

        // [optional] The time (UTC) at which a change in the multiplayer server state was observed.
        Boxed<FDateTime> LastStateTransitionTime;

        // [optional] The ports the multiplayer server uses.
        TArray<FPort> Ports;
        // [optional] The region the multiplayer server is located in.
        FString Region;

        // [optional] The string server ID of the multiplayer server generated by PlayFab.
        FString ServerId;

        // [optional] The guid string session ID of the multiplayer server.
        FString SessionId;

        // [optional] The state of the multiplayer server.
        FString State;

        // [optional] The virtual machine ID that the multiplayer server is located on.
        FString VmId;

        FRequestMultiplayerServerResponse() :
            FPlayFabCppResultCommon(),
            ConnectedPlayers(),
            FQDN(),
            IPV4Address(),
            LastStateTransitionTime(),
            Ports(),
            Region(),
            ServerId(),
            SessionId(),
            State(),
            VmId()
            {}

        FRequestMultiplayerServerResponse(const FRequestMultiplayerServerResponse& src) :
            FPlayFabCppResultCommon(),
            ConnectedPlayers(src.ConnectedPlayers),
            FQDN(src.FQDN),
            IPV4Address(src.IPV4Address),
            LastStateTransitionTime(src.LastStateTransitionTime),
            Ports(src.Ports),
            Region(src.Region),
            ServerId(src.ServerId),
            SessionId(src.SessionId),
            State(src.State),
            VmId(src.VmId)
            {}

        FRequestMultiplayerServerResponse(const TSharedPtr<FJsonObject>& obj) : FRequestMultiplayerServerResponse()
        {
            readFromValue(obj);
        }

        ~FRequestMultiplayerServerResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRolloverContainerRegistryCredentialsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FRolloverContainerRegistryCredentialsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FRolloverContainerRegistryCredentialsRequest(const FRolloverContainerRegistryCredentialsRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags)
            {}

        FRolloverContainerRegistryCredentialsRequest(const TSharedPtr<FJsonObject>& obj) : FRolloverContainerRegistryCredentialsRequest()
        {
            readFromValue(obj);
        }

        ~FRolloverContainerRegistryCredentialsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRolloverContainerRegistryCredentialsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The url of the container registry.
        FString DnsName;

        // [optional] The password for accessing the container registry.
        FString Password;

        // [optional] The username for accessing the container registry.
        FString Username;

        FRolloverContainerRegistryCredentialsResponse() :
            FPlayFabCppResultCommon(),
            DnsName(),
            Password(),
            Username()
            {}

        FRolloverContainerRegistryCredentialsResponse(const FRolloverContainerRegistryCredentialsResponse& src) :
            FPlayFabCppResultCommon(),
            DnsName(src.DnsName),
            Password(src.Password),
            Username(src.Username)
            {}

        FRolloverContainerRegistryCredentialsResponse(const TSharedPtr<FJsonObject>& obj) : FRolloverContainerRegistryCredentialsResponse()
        {
            readFromValue(obj);
        }

        ~FRolloverContainerRegistryCredentialsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum ServerType
    {
        ServerTypeContainer,
        ServerTypeProcess
    };

    PLAYFABCPP_API void writeServerTypeEnumJSON(ServerType enumVal, JsonWriter& writer);
    PLAYFABCPP_API ServerType readServerTypeFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API ServerType readServerTypeFromValue(const FString& value);

    struct PLAYFABCPP_API FShutdownMultiplayerServerRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string build ID of the multiplayer server to delete.
        FString BuildId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The region of the multiplayer server to shut down.
        FString Region;

        // A guid string session ID of the multiplayer server to shut down.
        FString SessionId;

        FShutdownMultiplayerServerRequest() :
            FPlayFabCppRequestCommon(),
            BuildId(),
            CustomTags(),
            Region(),
            SessionId()
            {}

        FShutdownMultiplayerServerRequest(const FShutdownMultiplayerServerRequest& src) :
            FPlayFabCppRequestCommon(),
            BuildId(src.BuildId),
            CustomTags(src.CustomTags),
            Region(src.Region),
            SessionId(src.SessionId)
            {}

        FShutdownMultiplayerServerRequest(const TSharedPtr<FJsonObject>& obj) : FShutdownMultiplayerServerRequest()
        {
            readFromValue(obj);
        }

        ~FShutdownMultiplayerServerRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUntagContainerImageRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The container image which tag we want to remove.
        FString ImageName;

        // [optional] The tag we want to remove.
        FString Tag;

        FUntagContainerImageRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            ImageName(),
            Tag()
            {}

        FUntagContainerImageRequest(const FUntagContainerImageRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            ImageName(src.ImageName),
            Tag(src.Tag)
            {}

        FUntagContainerImageRequest(const TSharedPtr<FJsonObject>& obj) : FUntagContainerImageRequest()
        {
            readFromValue(obj);
        }

        ~FUntagContainerImageRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateBuildAliasRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string alias Id of the alias to be updated.
        FString AliasId;

        // [optional] The alias name.
        FString AliasName;

        // [optional] Array of build selection criteria.
        TArray<FBuildSelectionCriterion> BuildSelectionCriteria;
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FUpdateBuildAliasRequest() :
            FPlayFabCppRequestCommon(),
            AliasId(),
            AliasName(),
            BuildSelectionCriteria(),
            CustomTags()
            {}

        FUpdateBuildAliasRequest(const FUpdateBuildAliasRequest& src) :
            FPlayFabCppRequestCommon(),
            AliasId(src.AliasId),
            AliasName(src.AliasName),
            BuildSelectionCriteria(src.BuildSelectionCriteria),
            CustomTags(src.CustomTags)
            {}

        FUpdateBuildAliasRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateBuildAliasRequest()
        {
            readFromValue(obj);
        }

        ~FUpdateBuildAliasRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateBuildNameRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string ID of the build we want to update the name of.
        FString BuildId;

        // The build name.
        FString BuildName;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FUpdateBuildNameRequest() :
            FPlayFabCppRequestCommon(),
            BuildId(),
            BuildName(),
            CustomTags()
            {}

        FUpdateBuildNameRequest(const FUpdateBuildNameRequest& src) :
            FPlayFabCppRequestCommon(),
            BuildId(src.BuildId),
            BuildName(src.BuildName),
            CustomTags(src.CustomTags)
            {}

        FUpdateBuildNameRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateBuildNameRequest()
        {
            readFromValue(obj);
        }

        ~FUpdateBuildNameRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateBuildRegionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string ID of the build we want to update regions for.
        FString BuildId;

        // The updated region configuration that should be applied to the specified build.
        FBuildRegionParams BuildRegion;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FUpdateBuildRegionRequest() :
            FPlayFabCppRequestCommon(),
            BuildId(),
            BuildRegion(),
            CustomTags()
            {}

        FUpdateBuildRegionRequest(const FUpdateBuildRegionRequest& src) :
            FPlayFabCppRequestCommon(),
            BuildId(src.BuildId),
            BuildRegion(src.BuildRegion),
            CustomTags(src.CustomTags)
            {}

        FUpdateBuildRegionRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateBuildRegionRequest()
        {
            readFromValue(obj);
        }

        ~FUpdateBuildRegionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateBuildRegionsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The guid string ID of the build we want to update regions for.
        FString BuildId;

        // The updated region configuration that should be applied to the specified build.
        TArray<FBuildRegionParams> BuildRegions;
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FUpdateBuildRegionsRequest() :
            FPlayFabCppRequestCommon(),
            BuildId(),
            BuildRegions(),
            CustomTags()
            {}

        FUpdateBuildRegionsRequest(const FUpdateBuildRegionsRequest& src) :
            FPlayFabCppRequestCommon(),
            BuildId(src.BuildId),
            BuildRegions(src.BuildRegions),
            CustomTags(src.CustomTags)
            {}

        FUpdateBuildRegionsRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateBuildRegionsRequest()
        {
            readFromValue(obj);
        }

        ~FUpdateBuildRegionsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUploadCertificateRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The game certificate to upload.
        FCertificate GameCertificate;

        FUploadCertificateRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            GameCertificate()
            {}

        FUploadCertificateRequest(const FUploadCertificateRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            GameCertificate(src.GameCertificate)
            {}

        FUploadCertificateRequest(const TSharedPtr<FJsonObject>& obj) : FUploadCertificateRequest()
        {
            readFromValue(obj);
        }

        ~FUploadCertificateRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

}
}
