//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "Core/PlayFabAdminDataModels.h"
#include "Core/PlayFabJsonHelpers.h"

using namespace PlayFab;
using namespace PlayFab::AdminModels;

PlayFab::AdminModels::FAbortTaskInstanceRequest::~FAbortTaskInstanceRequest()
{

}

void PlayFab::AdminModels::FAbortTaskInstanceRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!TaskInstanceId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AbortTaskInstanceRequest::TaskInstanceId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("TaskInstanceId"));
        writer->WriteValue(TaskInstanceId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FAbortTaskInstanceRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> TaskInstanceIdValue = obj->TryGetField(TEXT("TaskInstanceId"));
    if (TaskInstanceIdValue.IsValid() && !TaskInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (TaskInstanceIdValue->TryGetString(TmpValue)) { TaskInstanceId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FActionsOnPlayersInSegmentTaskParameter::~FActionsOnPlayersInSegmentTaskParameter()
{

}

void PlayFab::AdminModels::FActionsOnPlayersInSegmentTaskParameter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!ActionId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ActionsOnPlayersInSegmentTaskParameter::ActionId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ActionId"));
        writer->WriteValue(ActionId);
    }

    if (!SegmentId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ActionsOnPlayersInSegmentTaskParameter::SegmentId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("SegmentId"));
        writer->WriteValue(SegmentId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FActionsOnPlayersInSegmentTaskParameter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ActionIdValue = obj->TryGetField(TEXT("ActionId"));
    if (ActionIdValue.IsValid() && !ActionIdValue->IsNull())
    {
        FString TmpValue;
        if (ActionIdValue->TryGetString(TmpValue)) { ActionId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SegmentIdValue = obj->TryGetField(TEXT("SegmentId"));
    if (SegmentIdValue.IsValid() && !SegmentIdValue->IsNull())
    {
        FString TmpValue;
        if (SegmentIdValue->TryGetString(TmpValue)) { SegmentId = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeTaskInstanceStatusEnumJSON(TaskInstanceStatus enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case TaskInstanceStatusSucceeded: writer->WriteValue(TEXT("Succeeded")); break;
    case TaskInstanceStatusStarting: writer->WriteValue(TEXT("Starting")); break;
    case TaskInstanceStatusInProgress: writer->WriteValue(TEXT("InProgress")); break;
    case TaskInstanceStatusFailed: writer->WriteValue(TEXT("Failed")); break;
    case TaskInstanceStatusAborted: writer->WriteValue(TEXT("Aborted")); break;
    case TaskInstanceStatusStalled: writer->WriteValue(TEXT("Stalled")); break;
    }
}

AdminModels::TaskInstanceStatus PlayFab::AdminModels::readTaskInstanceStatusFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readTaskInstanceStatusFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::TaskInstanceStatus PlayFab::AdminModels::readTaskInstanceStatusFromValue(const FString& value)
{
    static TMap<FString, TaskInstanceStatus> _TaskInstanceStatusMap;
    if (_TaskInstanceStatusMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _TaskInstanceStatusMap.Add(TEXT("Succeeded"), TaskInstanceStatusSucceeded);
        _TaskInstanceStatusMap.Add(TEXT("Starting"), TaskInstanceStatusStarting);
        _TaskInstanceStatusMap.Add(TEXT("InProgress"), TaskInstanceStatusInProgress);
        _TaskInstanceStatusMap.Add(TEXT("Failed"), TaskInstanceStatusFailed);
        _TaskInstanceStatusMap.Add(TEXT("Aborted"), TaskInstanceStatusAborted);
        _TaskInstanceStatusMap.Add(TEXT("Stalled"), TaskInstanceStatusStalled);

    }

    if (!value.IsEmpty())
    {
        auto output = _TaskInstanceStatusMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return TaskInstanceStatusSucceeded; // Basically critical fail
}

PlayFab::AdminModels::FNameIdentifier::~FNameIdentifier()
{

}

void PlayFab::AdminModels::FNameIdentifier::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FNameIdentifier::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FActionsOnPlayersInSegmentTaskSummary::~FActionsOnPlayersInSegmentTaskSummary()
{
    //if (TaskIdentifier != nullptr) delete TaskIdentifier;

}

void PlayFab::AdminModels::FActionsOnPlayersInSegmentTaskSummary::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CompletedAt.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("CompletedAt"));
        writeDatetime(CompletedAt, writer);
    }

    if (ErrorMessage.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorMessage"));
        writer->WriteValue(ErrorMessage);
    }

    if (ErrorWasFatal.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorWasFatal"));
        writer->WriteValue(ErrorWasFatal);
    }

    if (EstimatedSecondsRemaining.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("EstimatedSecondsRemaining"));
        writer->WriteValue(EstimatedSecondsRemaining);
    }

    if (PercentComplete.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("PercentComplete"));
        writer->WriteValue(PercentComplete);
    }

    if (ScheduledByUserId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ScheduledByUserId"));
        writer->WriteValue(ScheduledByUserId);
    }

    writer->WriteIdentifierPrefix(TEXT("StartedAt"));
    writeDatetime(StartedAt, writer);

    if (Status.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        writeTaskInstanceStatusEnumJSON(Status, writer);
    }

    if (TaskIdentifier.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("TaskIdentifier"));
        TaskIdentifier->writeJSON(writer);
    }

    if (TaskInstanceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TaskInstanceId"));
        writer->WriteValue(TaskInstanceId);
    }

    if (TotalPlayersInSegment.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("TotalPlayersInSegment"));
        writer->WriteValue(TotalPlayersInSegment);
    }

    if (TotalPlayersProcessed.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("TotalPlayersProcessed"));
        writer->WriteValue(TotalPlayersProcessed);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FActionsOnPlayersInSegmentTaskSummary::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CompletedAtValue = obj->TryGetField(TEXT("CompletedAt"));
    if (CompletedAtValue.IsValid())
        CompletedAt = readDatetime(CompletedAtValue);


    const TSharedPtr<FJsonValue> ErrorMessageValue = obj->TryGetField(TEXT("ErrorMessage"));
    if (ErrorMessageValue.IsValid() && !ErrorMessageValue->IsNull())
    {
        FString TmpValue;
        if (ErrorMessageValue->TryGetString(TmpValue)) { ErrorMessage = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ErrorWasFatalValue = obj->TryGetField(TEXT("ErrorWasFatal"));
    if (ErrorWasFatalValue.IsValid() && !ErrorWasFatalValue->IsNull())
    {
        bool TmpValue;
        if (ErrorWasFatalValue->TryGetBool(TmpValue)) { ErrorWasFatal = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EstimatedSecondsRemainingValue = obj->TryGetField(TEXT("EstimatedSecondsRemaining"));
    if (EstimatedSecondsRemainingValue.IsValid() && !EstimatedSecondsRemainingValue->IsNull())
    {
        double TmpValue;
        if (EstimatedSecondsRemainingValue->TryGetNumber(TmpValue)) { EstimatedSecondsRemaining = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PercentCompleteValue = obj->TryGetField(TEXT("PercentComplete"));
    if (PercentCompleteValue.IsValid() && !PercentCompleteValue->IsNull())
    {
        double TmpValue;
        if (PercentCompleteValue->TryGetNumber(TmpValue)) { PercentComplete = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ScheduledByUserIdValue = obj->TryGetField(TEXT("ScheduledByUserId"));
    if (ScheduledByUserIdValue.IsValid() && !ScheduledByUserIdValue->IsNull())
    {
        FString TmpValue;
        if (ScheduledByUserIdValue->TryGetString(TmpValue)) { ScheduledByUserId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StartedAtValue = obj->TryGetField(TEXT("StartedAt"));
    if (StartedAtValue.IsValid())
        StartedAt = readDatetime(StartedAtValue);


    Status = readTaskInstanceStatusFromValue(obj->TryGetField(TEXT("Status")));

    const TSharedPtr<FJsonValue> TaskIdentifierValue = obj->TryGetField(TEXT("TaskIdentifier"));
    if (TaskIdentifierValue.IsValid() && !TaskIdentifierValue->IsNull())
    {
        TaskIdentifier = MakeShareable(new FNameIdentifier(TaskIdentifierValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> TaskInstanceIdValue = obj->TryGetField(TEXT("TaskInstanceId"));
    if (TaskInstanceIdValue.IsValid() && !TaskInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (TaskInstanceIdValue->TryGetString(TmpValue)) { TaskInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalPlayersInSegmentValue = obj->TryGetField(TEXT("TotalPlayersInSegment"));
    if (TotalPlayersInSegmentValue.IsValid() && !TotalPlayersInSegmentValue->IsNull())
    {
        int32 TmpValue;
        if (TotalPlayersInSegmentValue->TryGetNumber(TmpValue)) { TotalPlayersInSegment = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalPlayersProcessedValue = obj->TryGetField(TEXT("TotalPlayersProcessed"));
    if (TotalPlayersProcessedValue.IsValid() && !TotalPlayersProcessedValue->IsNull())
    {
        int32 TmpValue;
        if (TotalPlayersProcessedValue->TryGetNumber(TmpValue)) { TotalPlayersProcessed = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FAdCampaignAttribution::~FAdCampaignAttribution()
{

}

void PlayFab::AdminModels::FAdCampaignAttribution::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("AttributedAt"));
    writeDatetime(AttributedAt, writer);

    if (CampaignId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CampaignId"));
        writer->WriteValue(CampaignId);
    }

    if (Platform.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writer->WriteValue(Platform);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FAdCampaignAttribution::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AttributedAtValue = obj->TryGetField(TEXT("AttributedAt"));
    if (AttributedAtValue.IsValid())
        AttributedAt = readDatetime(AttributedAtValue);


    const TSharedPtr<FJsonValue> CampaignIdValue = obj->TryGetField(TEXT("CampaignId"));
    if (CampaignIdValue.IsValid() && !CampaignIdValue->IsNull())
    {
        FString TmpValue;
        if (CampaignIdValue->TryGetString(TmpValue)) { CampaignId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlatformValue = obj->TryGetField(TEXT("Platform"));
    if (PlatformValue.IsValid() && !PlatformValue->IsNull())
    {
        FString TmpValue;
        if (PlatformValue->TryGetString(TmpValue)) { Platform = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FAdCampaignAttributionModel::~FAdCampaignAttributionModel()
{

}

void PlayFab::AdminModels::FAdCampaignAttributionModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("AttributedAt"));
    writeDatetime(AttributedAt, writer);

    if (CampaignId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CampaignId"));
        writer->WriteValue(CampaignId);
    }

    if (Platform.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writer->WriteValue(Platform);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FAdCampaignAttributionModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AttributedAtValue = obj->TryGetField(TEXT("AttributedAt"));
    if (AttributedAtValue.IsValid())
        AttributedAt = readDatetime(AttributedAtValue);


    const TSharedPtr<FJsonValue> CampaignIdValue = obj->TryGetField(TEXT("CampaignId"));
    if (CampaignIdValue.IsValid() && !CampaignIdValue->IsNull())
    {
        FString TmpValue;
        if (CampaignIdValue->TryGetString(TmpValue)) { CampaignId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlatformValue = obj->TryGetField(TEXT("Platform"));
    if (PlatformValue.IsValid() && !PlatformValue->IsNull())
    {
        FString TmpValue;
        if (PlatformValue->TryGetString(TmpValue)) { Platform = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeSegmentFilterComparisonEnumJSON(SegmentFilterComparison enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case SegmentFilterComparisonGreaterThan: writer->WriteValue(TEXT("GreaterThan")); break;
    case SegmentFilterComparisonLessThan: writer->WriteValue(TEXT("LessThan")); break;
    case SegmentFilterComparisonEqualTo: writer->WriteValue(TEXT("EqualTo")); break;
    case SegmentFilterComparisonNotEqualTo: writer->WriteValue(TEXT("NotEqualTo")); break;
    case SegmentFilterComparisonGreaterThanOrEqual: writer->WriteValue(TEXT("GreaterThanOrEqual")); break;
    case SegmentFilterComparisonLessThanOrEqual: writer->WriteValue(TEXT("LessThanOrEqual")); break;
    case SegmentFilterComparisonExists: writer->WriteValue(TEXT("Exists")); break;
    case SegmentFilterComparisonContains: writer->WriteValue(TEXT("Contains")); break;
    case SegmentFilterComparisonNotContains: writer->WriteValue(TEXT("NotContains")); break;
    }
}

AdminModels::SegmentFilterComparison PlayFab::AdminModels::readSegmentFilterComparisonFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readSegmentFilterComparisonFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::SegmentFilterComparison PlayFab::AdminModels::readSegmentFilterComparisonFromValue(const FString& value)
{
    static TMap<FString, SegmentFilterComparison> _SegmentFilterComparisonMap;
    if (_SegmentFilterComparisonMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _SegmentFilterComparisonMap.Add(TEXT("GreaterThan"), SegmentFilterComparisonGreaterThan);
        _SegmentFilterComparisonMap.Add(TEXT("LessThan"), SegmentFilterComparisonLessThan);
        _SegmentFilterComparisonMap.Add(TEXT("EqualTo"), SegmentFilterComparisonEqualTo);
        _SegmentFilterComparisonMap.Add(TEXT("NotEqualTo"), SegmentFilterComparisonNotEqualTo);
        _SegmentFilterComparisonMap.Add(TEXT("GreaterThanOrEqual"), SegmentFilterComparisonGreaterThanOrEqual);
        _SegmentFilterComparisonMap.Add(TEXT("LessThanOrEqual"), SegmentFilterComparisonLessThanOrEqual);
        _SegmentFilterComparisonMap.Add(TEXT("Exists"), SegmentFilterComparisonExists);
        _SegmentFilterComparisonMap.Add(TEXT("Contains"), SegmentFilterComparisonContains);
        _SegmentFilterComparisonMap.Add(TEXT("NotContains"), SegmentFilterComparisonNotContains);

    }

    if (!value.IsEmpty())
    {
        auto output = _SegmentFilterComparisonMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return SegmentFilterComparisonGreaterThan; // Basically critical fail
}

PlayFab::AdminModels::FAdCampaignSegmentFilter::~FAdCampaignSegmentFilter()
{

}

void PlayFab::AdminModels::FAdCampaignSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CampaignId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CampaignId"));
        writer->WriteValue(CampaignId);
    }

    if (CampaignSource.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CampaignSource"));
        writer->WriteValue(CampaignSource);
    }

    if (Comparison.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Comparison"));
        writeSegmentFilterComparisonEnumJSON(Comparison, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FAdCampaignSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CampaignIdValue = obj->TryGetField(TEXT("CampaignId"));
    if (CampaignIdValue.IsValid() && !CampaignIdValue->IsNull())
    {
        FString TmpValue;
        if (CampaignIdValue->TryGetString(TmpValue)) { CampaignId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CampaignSourceValue = obj->TryGetField(TEXT("CampaignSource"));
    if (CampaignSourceValue.IsValid() && !CampaignSourceValue->IsNull())
    {
        FString TmpValue;
        if (CampaignSourceValue->TryGetString(TmpValue)) { CampaignSource = TmpValue; }
    }

    Comparison = readSegmentFilterComparisonFromValue(obj->TryGetField(TEXT("Comparison")));

    return HasSucceeded;
}

PlayFab::AdminModels::FAddLocalizedNewsRequest::~FAddLocalizedNewsRequest()
{

}

void PlayFab::AdminModels::FAddLocalizedNewsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Body.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddLocalizedNewsRequest::Body, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Body"));
        writer->WriteValue(Body);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!Language.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddLocalizedNewsRequest::Language, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Language"));
        writer->WriteValue(Language);
    }

    if (!NewsId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddLocalizedNewsRequest::NewsId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("NewsId"));
        writer->WriteValue(NewsId);
    }

    if (!Title.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddLocalizedNewsRequest::Title, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Title"));
        writer->WriteValue(Title);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FAddLocalizedNewsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BodyValue = obj->TryGetField(TEXT("Body"));
    if (BodyValue.IsValid() && !BodyValue->IsNull())
    {
        FString TmpValue;
        if (BodyValue->TryGetString(TmpValue)) { Body = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> LanguageValue = obj->TryGetField(TEXT("Language"));
    if (LanguageValue.IsValid() && !LanguageValue->IsNull())
    {
        FString TmpValue;
        if (LanguageValue->TryGetString(TmpValue)) { Language = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NewsIdValue = obj->TryGetField(TEXT("NewsId"));
    if (NewsIdValue.IsValid() && !NewsIdValue->IsNull())
    {
        FString TmpValue;
        if (NewsIdValue->TryGetString(TmpValue)) { NewsId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TitleValue = obj->TryGetField(TEXT("Title"));
    if (TitleValue.IsValid() && !TitleValue->IsNull())
    {
        FString TmpValue;
        if (TitleValue->TryGetString(TmpValue)) { Title = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FAddLocalizedNewsResult::~FAddLocalizedNewsResult()
{

}

void PlayFab::AdminModels::FAddLocalizedNewsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FAddLocalizedNewsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FAddNewsRequest::~FAddNewsRequest()
{

}

void PlayFab::AdminModels::FAddNewsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Body.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddNewsRequest::Body, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Body"));
        writer->WriteValue(Body);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Timestamp.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Timestamp"));
        writeDatetime(Timestamp, writer);
    }

    if (!Title.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddNewsRequest::Title, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Title"));
        writer->WriteValue(Title);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FAddNewsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BodyValue = obj->TryGetField(TEXT("Body"));
    if (BodyValue.IsValid() && !BodyValue->IsNull())
    {
        FString TmpValue;
        if (BodyValue->TryGetString(TmpValue)) { Body = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> TimestampValue = obj->TryGetField(TEXT("Timestamp"));
    if (TimestampValue.IsValid())
        Timestamp = readDatetime(TimestampValue);


    const TSharedPtr<FJsonValue> TitleValue = obj->TryGetField(TEXT("Title"));
    if (TitleValue.IsValid() && !TitleValue->IsNull())
    {
        FString TmpValue;
        if (TitleValue->TryGetString(TmpValue)) { Title = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FAddNewsResult::~FAddNewsResult()
{

}

void PlayFab::AdminModels::FAddNewsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (NewsId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NewsId"));
        writer->WriteValue(NewsId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FAddNewsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NewsIdValue = obj->TryGetField(TEXT("NewsId"));
    if (NewsIdValue.IsValid() && !NewsIdValue->IsNull())
    {
        FString TmpValue;
        if (NewsIdValue->TryGetString(TmpValue)) { NewsId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FAddPlayerTagRequest::~FAddPlayerTagRequest()
{

}

void PlayFab::AdminModels::FAddPlayerTagRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddPlayerTagRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!TagName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddPlayerTagRequest::TagName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("TagName"));
        writer->WriteValue(TagName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FAddPlayerTagRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TagNameValue = obj->TryGetField(TEXT("TagName"));
    if (TagNameValue.IsValid() && !TagNameValue->IsNull())
    {
        FString TmpValue;
        if (TagNameValue->TryGetString(TmpValue)) { TagName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FAddPlayerTagResult::~FAddPlayerTagResult()
{

}

void PlayFab::AdminModels::FAddPlayerTagResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FAddPlayerTagResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

void PlayFab::AdminModels::writeRegionEnumJSON(Region enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case RegionUSCentral: writer->WriteValue(TEXT("USCentral")); break;
    case RegionUSEast: writer->WriteValue(TEXT("USEast")); break;
    case RegionEUWest: writer->WriteValue(TEXT("EUWest")); break;
    case RegionSingapore: writer->WriteValue(TEXT("Singapore")); break;
    case RegionJapan: writer->WriteValue(TEXT("Japan")); break;
    case RegionBrazil: writer->WriteValue(TEXT("Brazil")); break;
    case RegionAustralia: writer->WriteValue(TEXT("Australia")); break;
    }
}

AdminModels::Region PlayFab::AdminModels::readRegionFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readRegionFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::Region PlayFab::AdminModels::readRegionFromValue(const FString& value)
{
    static TMap<FString, Region> _RegionMap;
    if (_RegionMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _RegionMap.Add(TEXT("USCentral"), RegionUSCentral);
        _RegionMap.Add(TEXT("USEast"), RegionUSEast);
        _RegionMap.Add(TEXT("EUWest"), RegionEUWest);
        _RegionMap.Add(TEXT("Singapore"), RegionSingapore);
        _RegionMap.Add(TEXT("Japan"), RegionJapan);
        _RegionMap.Add(TEXT("Brazil"), RegionBrazil);
        _RegionMap.Add(TEXT("Australia"), RegionAustralia);

    }

    if (!value.IsEmpty())
    {
        auto output = _RegionMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return RegionUSCentral; // Basically critical fail
}

PlayFab::AdminModels::FAddServerBuildRequest::~FAddServerBuildRequest()
{

}

void PlayFab::AdminModels::FAddServerBuildRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ActiveRegions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ActiveRegions"));
        for (const Region& item : ActiveRegions)
            writeRegionEnumJSON(item, writer);
        writer->WriteArrayEnd();
    }


    if (!BuildId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddServerBuildRequest::BuildId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("BuildId"));
        writer->WriteValue(BuildId);
    }

    if (CommandLineTemplate.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CommandLineTemplate"));
        writer->WriteValue(CommandLineTemplate);
    }

    if (Comment.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Comment"));
        writer->WriteValue(Comment);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (ExecutablePath.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ExecutablePath"));
        writer->WriteValue(ExecutablePath);
    }

    writer->WriteIdentifierPrefix(TEXT("MaxGamesPerHost"));
    writer->WriteValue(MaxGamesPerHost);

    writer->WriteIdentifierPrefix(TEXT("MinFreeGameSlots"));
    writer->WriteValue(MinFreeGameSlots);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FAddServerBuildRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ActiveRegionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ActiveRegions"));
    for (int32 Idx = 0; Idx < ActiveRegionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ActiveRegionsArray[Idx];
        ActiveRegions.Add(readRegionFromValue(CurrentItem));
    }


    const TSharedPtr<FJsonValue> BuildIdValue = obj->TryGetField(TEXT("BuildId"));
    if (BuildIdValue.IsValid() && !BuildIdValue->IsNull())
    {
        FString TmpValue;
        if (BuildIdValue->TryGetString(TmpValue)) { BuildId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CommandLineTemplateValue = obj->TryGetField(TEXT("CommandLineTemplate"));
    if (CommandLineTemplateValue.IsValid() && !CommandLineTemplateValue->IsNull())
    {
        FString TmpValue;
        if (CommandLineTemplateValue->TryGetString(TmpValue)) { CommandLineTemplate = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CommentValue = obj->TryGetField(TEXT("Comment"));
    if (CommentValue.IsValid() && !CommentValue->IsNull())
    {
        FString TmpValue;
        if (CommentValue->TryGetString(TmpValue)) { Comment = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ExecutablePathValue = obj->TryGetField(TEXT("ExecutablePath"));
    if (ExecutablePathValue.IsValid() && !ExecutablePathValue->IsNull())
    {
        FString TmpValue;
        if (ExecutablePathValue->TryGetString(TmpValue)) { ExecutablePath = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MaxGamesPerHostValue = obj->TryGetField(TEXT("MaxGamesPerHost"));
    if (MaxGamesPerHostValue.IsValid() && !MaxGamesPerHostValue->IsNull())
    {
        int32 TmpValue;
        if (MaxGamesPerHostValue->TryGetNumber(TmpValue)) { MaxGamesPerHost = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MinFreeGameSlotsValue = obj->TryGetField(TEXT("MinFreeGameSlots"));
    if (MinFreeGameSlotsValue.IsValid() && !MinFreeGameSlotsValue->IsNull())
    {
        int32 TmpValue;
        if (MinFreeGameSlotsValue->TryGetNumber(TmpValue)) { MinFreeGameSlots = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeGameBuildStatusEnumJSON(GameBuildStatus enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case GameBuildStatusAvailable: writer->WriteValue(TEXT("Available")); break;
    case GameBuildStatusValidating: writer->WriteValue(TEXT("Validating")); break;
    case GameBuildStatusInvalidBuildPackage: writer->WriteValue(TEXT("InvalidBuildPackage")); break;
    case GameBuildStatusProcessing: writer->WriteValue(TEXT("Processing")); break;
    case GameBuildStatusFailedToProcess: writer->WriteValue(TEXT("FailedToProcess")); break;
    }
}

AdminModels::GameBuildStatus PlayFab::AdminModels::readGameBuildStatusFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readGameBuildStatusFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::GameBuildStatus PlayFab::AdminModels::readGameBuildStatusFromValue(const FString& value)
{
    static TMap<FString, GameBuildStatus> _GameBuildStatusMap;
    if (_GameBuildStatusMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _GameBuildStatusMap.Add(TEXT("Available"), GameBuildStatusAvailable);
        _GameBuildStatusMap.Add(TEXT("Validating"), GameBuildStatusValidating);
        _GameBuildStatusMap.Add(TEXT("InvalidBuildPackage"), GameBuildStatusInvalidBuildPackage);
        _GameBuildStatusMap.Add(TEXT("Processing"), GameBuildStatusProcessing);
        _GameBuildStatusMap.Add(TEXT("FailedToProcess"), GameBuildStatusFailedToProcess);

    }

    if (!value.IsEmpty())
    {
        auto output = _GameBuildStatusMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return GameBuildStatusAvailable; // Basically critical fail
}

PlayFab::AdminModels::FAddServerBuildResult::~FAddServerBuildResult()
{

}

void PlayFab::AdminModels::FAddServerBuildResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ActiveRegions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ActiveRegions"));
        for (const Region& item : ActiveRegions)
            writeRegionEnumJSON(item, writer);
        writer->WriteArrayEnd();
    }


    if (BuildId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("BuildId"));
        writer->WriteValue(BuildId);
    }

    if (CommandLineTemplate.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CommandLineTemplate"));
        writer->WriteValue(CommandLineTemplate);
    }

    if (Comment.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Comment"));
        writer->WriteValue(Comment);
    }

    if (ExecutablePath.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ExecutablePath"));
        writer->WriteValue(ExecutablePath);
    }

    writer->WriteIdentifierPrefix(TEXT("MaxGamesPerHost"));
    writer->WriteValue(MaxGamesPerHost);

    writer->WriteIdentifierPrefix(TEXT("MinFreeGameSlots"));
    writer->WriteValue(MinFreeGameSlots);

    if (Status.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        writeGameBuildStatusEnumJSON(Status, writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Timestamp"));
    writeDatetime(Timestamp, writer);

    if (TitleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitleId"));
        writer->WriteValue(TitleId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FAddServerBuildResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ActiveRegionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ActiveRegions"));
    for (int32 Idx = 0; Idx < ActiveRegionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ActiveRegionsArray[Idx];
        ActiveRegions.Add(readRegionFromValue(CurrentItem));
    }


    const TSharedPtr<FJsonValue> BuildIdValue = obj->TryGetField(TEXT("BuildId"));
    if (BuildIdValue.IsValid() && !BuildIdValue->IsNull())
    {
        FString TmpValue;
        if (BuildIdValue->TryGetString(TmpValue)) { BuildId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CommandLineTemplateValue = obj->TryGetField(TEXT("CommandLineTemplate"));
    if (CommandLineTemplateValue.IsValid() && !CommandLineTemplateValue->IsNull())
    {
        FString TmpValue;
        if (CommandLineTemplateValue->TryGetString(TmpValue)) { CommandLineTemplate = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CommentValue = obj->TryGetField(TEXT("Comment"));
    if (CommentValue.IsValid() && !CommentValue->IsNull())
    {
        FString TmpValue;
        if (CommentValue->TryGetString(TmpValue)) { Comment = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExecutablePathValue = obj->TryGetField(TEXT("ExecutablePath"));
    if (ExecutablePathValue.IsValid() && !ExecutablePathValue->IsNull())
    {
        FString TmpValue;
        if (ExecutablePathValue->TryGetString(TmpValue)) { ExecutablePath = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MaxGamesPerHostValue = obj->TryGetField(TEXT("MaxGamesPerHost"));
    if (MaxGamesPerHostValue.IsValid() && !MaxGamesPerHostValue->IsNull())
    {
        int32 TmpValue;
        if (MaxGamesPerHostValue->TryGetNumber(TmpValue)) { MaxGamesPerHost = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MinFreeGameSlotsValue = obj->TryGetField(TEXT("MinFreeGameSlots"));
    if (MinFreeGameSlotsValue.IsValid() && !MinFreeGameSlotsValue->IsNull())
    {
        int32 TmpValue;
        if (MinFreeGameSlotsValue->TryGetNumber(TmpValue)) { MinFreeGameSlots = TmpValue; }
    }

    Status = readGameBuildStatusFromValue(obj->TryGetField(TEXT("Status")));

    const TSharedPtr<FJsonValue> TimestampValue = obj->TryGetField(TEXT("Timestamp"));
    if (TimestampValue.IsValid())
        Timestamp = readDatetime(TimestampValue);


    const TSharedPtr<FJsonValue> TitleIdValue = obj->TryGetField(TEXT("TitleId"));
    if (TitleIdValue.IsValid() && !TitleIdValue->IsNull())
    {
        FString TmpValue;
        if (TitleIdValue->TryGetString(TmpValue)) { TitleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FAddUserVirtualCurrencyRequest::~FAddUserVirtualCurrencyRequest()
{

}

void PlayFab::AdminModels::FAddUserVirtualCurrencyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddUserVirtualCurrencyRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!VirtualCurrency.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddUserVirtualCurrencyRequest::VirtualCurrency, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("VirtualCurrency"));
        writer->WriteValue(VirtualCurrency);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FAddUserVirtualCurrencyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VirtualCurrencyValue = obj->TryGetField(TEXT("VirtualCurrency"));
    if (VirtualCurrencyValue.IsValid() && !VirtualCurrencyValue->IsNull())
    {
        FString TmpValue;
        if (VirtualCurrencyValue->TryGetString(TmpValue)) { VirtualCurrency = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FVirtualCurrencyData::~FVirtualCurrencyData()
{

}

void PlayFab::AdminModels::FVirtualCurrencyData::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!CurrencyCode.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: VirtualCurrencyData::CurrencyCode, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CurrencyCode"));
        writer->WriteValue(CurrencyCode);
    }

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (InitialDeposit.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("InitialDeposit"));
        writer->WriteValue(InitialDeposit);
    }

    if (RechargeMax.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("RechargeMax"));
        writer->WriteValue(RechargeMax);
    }

    if (RechargeRate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("RechargeRate"));
        writer->WriteValue(RechargeRate);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FVirtualCurrencyData::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CurrencyCodeValue = obj->TryGetField(TEXT("CurrencyCode"));
    if (CurrencyCodeValue.IsValid() && !CurrencyCodeValue->IsNull())
    {
        FString TmpValue;
        if (CurrencyCodeValue->TryGetString(TmpValue)) { CurrencyCode = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> InitialDepositValue = obj->TryGetField(TEXT("InitialDeposit"));
    if (InitialDepositValue.IsValid() && !InitialDepositValue->IsNull())
    {
        int32 TmpValue;
        if (InitialDepositValue->TryGetNumber(TmpValue)) { InitialDeposit = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RechargeMaxValue = obj->TryGetField(TEXT("RechargeMax"));
    if (RechargeMaxValue.IsValid() && !RechargeMaxValue->IsNull())
    {
        int32 TmpValue;
        if (RechargeMaxValue->TryGetNumber(TmpValue)) { RechargeMax = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RechargeRateValue = obj->TryGetField(TEXT("RechargeRate"));
    if (RechargeRateValue.IsValid() && !RechargeRateValue->IsNull())
    {
        int32 TmpValue;
        if (RechargeRateValue->TryGetNumber(TmpValue)) { RechargeRate = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FAddVirtualCurrencyTypesRequest::~FAddVirtualCurrencyTypesRequest()
{

}

void PlayFab::AdminModels::FAddVirtualCurrencyTypesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("VirtualCurrencies"));
    for (const FVirtualCurrencyData& item : VirtualCurrencies)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FAddVirtualCurrencyTypesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&VirtualCurrenciesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("VirtualCurrencies"));
    for (int32 Idx = 0; Idx < VirtualCurrenciesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = VirtualCurrenciesArray[Idx];
        VirtualCurrencies.Add(FVirtualCurrencyData(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FAllPlayersSegmentFilter::~FAllPlayersSegmentFilter()
{

}

void PlayFab::AdminModels::FAllPlayersSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FAllPlayersSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

void PlayFab::AdminModels::writeConditionalsEnumJSON(Conditionals enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case ConditionalsAny: writer->WriteValue(TEXT("Any")); break;
    case ConditionalsTrue: writer->WriteValue(TEXT("True")); break;
    case ConditionalsFalse: writer->WriteValue(TEXT("False")); break;
    }
}

AdminModels::Conditionals PlayFab::AdminModels::readConditionalsFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readConditionalsFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::Conditionals PlayFab::AdminModels::readConditionalsFromValue(const FString& value)
{
    static TMap<FString, Conditionals> _ConditionalsMap;
    if (_ConditionalsMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _ConditionalsMap.Add(TEXT("Any"), ConditionalsAny);
        _ConditionalsMap.Add(TEXT("True"), ConditionalsTrue);
        _ConditionalsMap.Add(TEXT("False"), ConditionalsFalse);

    }

    if (!value.IsEmpty())
    {
        auto output = _ConditionalsMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return ConditionalsAny; // Basically critical fail
}

PlayFab::AdminModels::FApiCondition::~FApiCondition()
{

}

void PlayFab::AdminModels::FApiCondition::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (HasSignatureOrEncryption.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("HasSignatureOrEncryption"));
        writeConditionalsEnumJSON(HasSignatureOrEncryption, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FApiCondition::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    HasSignatureOrEncryption = readConditionalsFromValue(obj->TryGetField(TEXT("HasSignatureOrEncryption")));

    return HasSucceeded;
}

void PlayFab::AdminModels::writeAuthTokenTypeEnumJSON(AuthTokenType enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case AuthTokenTypeEmail: writer->WriteValue(TEXT("Email")); break;
    }
}

AdminModels::AuthTokenType PlayFab::AdminModels::readAuthTokenTypeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readAuthTokenTypeFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::AuthTokenType PlayFab::AdminModels::readAuthTokenTypeFromValue(const FString& value)
{
    static TMap<FString, AuthTokenType> _AuthTokenTypeMap;
    if (_AuthTokenTypeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _AuthTokenTypeMap.Add(TEXT("Email"), AuthTokenTypeEmail);

    }

    if (!value.IsEmpty())
    {
        auto output = _AuthTokenTypeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return AuthTokenTypeEmail; // Basically critical fail
}

PlayFab::AdminModels::FBanInfo::~FBanInfo()
{

}

void PlayFab::AdminModels::FBanInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Active"));
    writer->WriteValue(Active);

    if (BanId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("BanId"));
        writer->WriteValue(BanId);
    }

    if (Created.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Created"));
        writeDatetime(Created, writer);
    }

    if (Expires.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Expires"));
        writeDatetime(Expires, writer);
    }

    if (IPAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IPAddress"));
        writer->WriteValue(IPAddress);
    }

    if (MACAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MACAddress"));
        writer->WriteValue(MACAddress);
    }

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FBanInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ActiveValue = obj->TryGetField(TEXT("Active"));
    if (ActiveValue.IsValid() && !ActiveValue->IsNull())
    {
        bool TmpValue;
        if (ActiveValue->TryGetBool(TmpValue)) { Active = TmpValue; }
    }

    const TSharedPtr<FJsonValue> BanIdValue = obj->TryGetField(TEXT("BanId"));
    if (BanIdValue.IsValid() && !BanIdValue->IsNull())
    {
        FString TmpValue;
        if (BanIdValue->TryGetString(TmpValue)) { BanId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> ExpiresValue = obj->TryGetField(TEXT("Expires"));
    if (ExpiresValue.IsValid())
        Expires = readDatetime(ExpiresValue);


    const TSharedPtr<FJsonValue> IPAddressValue = obj->TryGetField(TEXT("IPAddress"));
    if (IPAddressValue.IsValid() && !IPAddressValue->IsNull())
    {
        FString TmpValue;
        if (IPAddressValue->TryGetString(TmpValue)) { IPAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MACAddressValue = obj->TryGetField(TEXT("MACAddress"));
    if (MACAddressValue.IsValid() && !MACAddressValue->IsNull())
    {
        FString TmpValue;
        if (MACAddressValue->TryGetString(TmpValue)) { MACAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FBanPlayerSegmentAction::~FBanPlayerSegmentAction()
{

}

void PlayFab::AdminModels::FBanPlayerSegmentAction::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BanHours.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("BanHours"));
        writer->WriteValue(static_cast<int64>(BanHours));
    }

    if (ReasonForBan.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ReasonForBan"));
        writer->WriteValue(ReasonForBan);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FBanPlayerSegmentAction::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BanHoursValue = obj->TryGetField(TEXT("BanHours"));
    if (BanHoursValue.IsValid() && !BanHoursValue->IsNull())
    {
        uint32 TmpValue;
        if (BanHoursValue->TryGetNumber(TmpValue)) { BanHours = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReasonForBanValue = obj->TryGetField(TEXT("ReasonForBan"));
    if (ReasonForBanValue.IsValid() && !ReasonForBanValue->IsNull())
    {
        FString TmpValue;
        if (ReasonForBanValue->TryGetString(TmpValue)) { ReasonForBan = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FBanRequest::~FBanRequest()
{

}

void PlayFab::AdminModels::FBanRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DurationInHours.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("DurationInHours"));
        writer->WriteValue(static_cast<int64>(DurationInHours));
    }

    if (IPAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IPAddress"));
        writer->WriteValue(IPAddress);
    }

    if (MACAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MACAddress"));
        writer->WriteValue(MACAddress);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: BanRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FBanRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DurationInHoursValue = obj->TryGetField(TEXT("DurationInHours"));
    if (DurationInHoursValue.IsValid() && !DurationInHoursValue->IsNull())
    {
        uint32 TmpValue;
        if (DurationInHoursValue->TryGetNumber(TmpValue)) { DurationInHours = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IPAddressValue = obj->TryGetField(TEXT("IPAddress"));
    if (IPAddressValue.IsValid() && !IPAddressValue->IsNull())
    {
        FString TmpValue;
        if (IPAddressValue->TryGetString(TmpValue)) { IPAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MACAddressValue = obj->TryGetField(TEXT("MACAddress"));
    if (MACAddressValue.IsValid() && !MACAddressValue->IsNull())
    {
        FString TmpValue;
        if (MACAddressValue->TryGetString(TmpValue)) { MACAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FBanUsersRequest::~FBanUsersRequest()
{

}

void PlayFab::AdminModels::FBanUsersRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("Bans"));
    for (const FBanRequest& item : Bans)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FBanUsersRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BansArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Bans"));
    for (int32 Idx = 0; Idx < BansArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BansArray[Idx];
        Bans.Add(FBanRequest(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FBanUsersResult::~FBanUsersResult()
{

}

void PlayFab::AdminModels::FBanUsersResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BanData.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BanData"));
        for (const FBanInfo& item : BanData)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FBanUsersResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BanDataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("BanData"));
    for (int32 Idx = 0; Idx < BanDataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BanDataArray[Idx];
        BanData.Add(FBanInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FBlankResult::~FBlankResult()
{

}

void PlayFab::AdminModels::FBlankResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FBlankResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FCatalogItemBundleInfo::~FCatalogItemBundleInfo()
{

}

void PlayFab::AdminModels::FCatalogItemBundleInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BundledItems.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BundledItems"));
        for (const FString& item : BundledItems)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (BundledResultTables.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BundledResultTables"));
        for (const FString& item : BundledResultTables)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (BundledVirtualCurrencies.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("BundledVirtualCurrencies"));
        for (TMap<FString, uint32>::TConstIterator It(BundledVirtualCurrencies); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue(static_cast<int64>((*It).Value));
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCatalogItemBundleInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("BundledItems"), BundledItems);

    obj->TryGetStringArrayField(TEXT("BundledResultTables"), BundledResultTables);

    const TSharedPtr<FJsonObject>* BundledVirtualCurrenciesObject;
    if (obj->TryGetObjectField(TEXT("BundledVirtualCurrencies"), BundledVirtualCurrenciesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*BundledVirtualCurrenciesObject)->Values); It; ++It)
        {
            uint32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            BundledVirtualCurrencies.Add(It.Key(), TmpValue);
        }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCatalogItemConsumableInfo::~FCatalogItemConsumableInfo()
{

}

void PlayFab::AdminModels::FCatalogItemConsumableInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (UsageCount.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("UsageCount"));
        writer->WriteValue(static_cast<int64>(UsageCount));
    }

    if (UsagePeriod.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("UsagePeriod"));
        writer->WriteValue(static_cast<int64>(UsagePeriod));
    }

    if (UsagePeriodGroup.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("UsagePeriodGroup"));
        writer->WriteValue(UsagePeriodGroup);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCatalogItemConsumableInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> UsageCountValue = obj->TryGetField(TEXT("UsageCount"));
    if (UsageCountValue.IsValid() && !UsageCountValue->IsNull())
    {
        uint32 TmpValue;
        if (UsageCountValue->TryGetNumber(TmpValue)) { UsageCount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsagePeriodValue = obj->TryGetField(TEXT("UsagePeriod"));
    if (UsagePeriodValue.IsValid() && !UsagePeriodValue->IsNull())
    {
        uint32 TmpValue;
        if (UsagePeriodValue->TryGetNumber(TmpValue)) { UsagePeriod = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsagePeriodGroupValue = obj->TryGetField(TEXT("UsagePeriodGroup"));
    if (UsagePeriodGroupValue.IsValid() && !UsagePeriodGroupValue->IsNull())
    {
        FString TmpValue;
        if (UsagePeriodGroupValue->TryGetString(TmpValue)) { UsagePeriodGroup = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCatalogItemContainerInfo::~FCatalogItemContainerInfo()
{

}

void PlayFab::AdminModels::FCatalogItemContainerInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ItemContents.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ItemContents"));
        for (const FString& item : ItemContents)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (KeyItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("KeyItemId"));
        writer->WriteValue(KeyItemId);
    }

    if (ResultTableContents.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ResultTableContents"));
        for (const FString& item : ResultTableContents)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (VirtualCurrencyContents.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("VirtualCurrencyContents"));
        for (TMap<FString, uint32>::TConstIterator It(VirtualCurrencyContents); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue(static_cast<int64>((*It).Value));
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCatalogItemContainerInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("ItemContents"), ItemContents);

    const TSharedPtr<FJsonValue> KeyItemIdValue = obj->TryGetField(TEXT("KeyItemId"));
    if (KeyItemIdValue.IsValid() && !KeyItemIdValue->IsNull())
    {
        FString TmpValue;
        if (KeyItemIdValue->TryGetString(TmpValue)) { KeyItemId = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("ResultTableContents"), ResultTableContents);

    const TSharedPtr<FJsonObject>* VirtualCurrencyContentsObject;
    if (obj->TryGetObjectField(TEXT("VirtualCurrencyContents"), VirtualCurrencyContentsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*VirtualCurrencyContentsObject)->Values); It; ++It)
        {
            uint32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            VirtualCurrencyContents.Add(It.Key(), TmpValue);
        }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCatalogItem::~FCatalogItem()
{
    //if (Bundle != nullptr) delete Bundle;
    //if (Consumable != nullptr) delete Consumable;
    //if (Container != nullptr) delete Container;

}

void PlayFab::AdminModels::FCatalogItem::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Bundle.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Bundle"));
        Bundle->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("CanBecomeCharacter"));
    writer->WriteValue(CanBecomeCharacter);

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (Consumable.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Consumable"));
        Consumable->writeJSON(writer);
    }

    if (Container.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Container"));
        Container->writeJSON(writer);
    }

    if (CustomData.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CustomData"));
        writer->WriteValue(CustomData);
    }

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    writer->WriteIdentifierPrefix(TEXT("InitialLimitedEditionCount"));
    writer->WriteValue(InitialLimitedEditionCount);

    writer->WriteIdentifierPrefix(TEXT("IsLimitedEdition"));
    writer->WriteValue(IsLimitedEdition);

    writer->WriteIdentifierPrefix(TEXT("IsStackable"));
    writer->WriteValue(IsStackable);

    writer->WriteIdentifierPrefix(TEXT("IsTradable"));
    writer->WriteValue(IsTradable);

    if (ItemClass.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemClass"));
        writer->WriteValue(ItemClass);
    }

    if (!ItemId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CatalogItem::ItemId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (ItemImageUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemImageUrl"));
        writer->WriteValue(ItemImageUrl);
    }

    if (RealCurrencyPrices.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("RealCurrencyPrices"));
        for (TMap<FString, uint32>::TConstIterator It(RealCurrencyPrices); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue(static_cast<int64>((*It).Value));
        }
        writer->WriteObjectEnd();
    }

    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (VirtualCurrencyPrices.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("VirtualCurrencyPrices"));
        for (TMap<FString, uint32>::TConstIterator It(VirtualCurrencyPrices); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue(static_cast<int64>((*It).Value));
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCatalogItem::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BundleValue = obj->TryGetField(TEXT("Bundle"));
    if (BundleValue.IsValid() && !BundleValue->IsNull())
    {
        Bundle = MakeShareable(new FCatalogItemBundleInfo(BundleValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> CanBecomeCharacterValue = obj->TryGetField(TEXT("CanBecomeCharacter"));
    if (CanBecomeCharacterValue.IsValid() && !CanBecomeCharacterValue->IsNull())
    {
        bool TmpValue;
        if (CanBecomeCharacterValue->TryGetBool(TmpValue)) { CanBecomeCharacter = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ConsumableValue = obj->TryGetField(TEXT("Consumable"));
    if (ConsumableValue.IsValid() && !ConsumableValue->IsNull())
    {
        Consumable = MakeShareable(new FCatalogItemConsumableInfo(ConsumableValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ContainerValue = obj->TryGetField(TEXT("Container"));
    if (ContainerValue.IsValid() && !ContainerValue->IsNull())
    {
        Container = MakeShareable(new FCatalogItemContainerInfo(ContainerValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> CustomDataValue = obj->TryGetField(TEXT("CustomData"));
    if (CustomDataValue.IsValid() && !CustomDataValue->IsNull())
    {
        FString TmpValue;
        if (CustomDataValue->TryGetString(TmpValue)) { CustomData = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> InitialLimitedEditionCountValue = obj->TryGetField(TEXT("InitialLimitedEditionCount"));
    if (InitialLimitedEditionCountValue.IsValid() && !InitialLimitedEditionCountValue->IsNull())
    {
        int32 TmpValue;
        if (InitialLimitedEditionCountValue->TryGetNumber(TmpValue)) { InitialLimitedEditionCount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IsLimitedEditionValue = obj->TryGetField(TEXT("IsLimitedEdition"));
    if (IsLimitedEditionValue.IsValid() && !IsLimitedEditionValue->IsNull())
    {
        bool TmpValue;
        if (IsLimitedEditionValue->TryGetBool(TmpValue)) { IsLimitedEdition = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IsStackableValue = obj->TryGetField(TEXT("IsStackable"));
    if (IsStackableValue.IsValid() && !IsStackableValue->IsNull())
    {
        bool TmpValue;
        if (IsStackableValue->TryGetBool(TmpValue)) { IsStackable = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IsTradableValue = obj->TryGetField(TEXT("IsTradable"));
    if (IsTradableValue.IsValid() && !IsTradableValue->IsNull())
    {
        bool TmpValue;
        if (IsTradableValue->TryGetBool(TmpValue)) { IsTradable = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemClassValue = obj->TryGetField(TEXT("ItemClass"));
    if (ItemClassValue.IsValid() && !ItemClassValue->IsNull())
    {
        FString TmpValue;
        if (ItemClassValue->TryGetString(TmpValue)) { ItemClass = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemImageUrlValue = obj->TryGetField(TEXT("ItemImageUrl"));
    if (ItemImageUrlValue.IsValid() && !ItemImageUrlValue->IsNull())
    {
        FString TmpValue;
        if (ItemImageUrlValue->TryGetString(TmpValue)) { ItemImageUrl = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* RealCurrencyPricesObject;
    if (obj->TryGetObjectField(TEXT("RealCurrencyPrices"), RealCurrencyPricesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*RealCurrencyPricesObject)->Values); It; ++It)
        {
            uint32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            RealCurrencyPrices.Add(It.Key(), TmpValue);
        }
    }

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    const TSharedPtr<FJsonObject>* VirtualCurrencyPricesObject;
    if (obj->TryGetObjectField(TEXT("VirtualCurrencyPrices"), VirtualCurrencyPricesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*VirtualCurrencyPricesObject)->Values); It; ++It)
        {
            uint32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            VirtualCurrencyPrices.Add(It.Key(), TmpValue);
        }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCheckLimitedEditionItemAvailabilityRequest::~FCheckLimitedEditionItemAvailabilityRequest()
{

}

void PlayFab::AdminModels::FCheckLimitedEditionItemAvailabilityRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (!ItemId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CheckLimitedEditionItemAvailabilityRequest::ItemId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCheckLimitedEditionItemAvailabilityRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCheckLimitedEditionItemAvailabilityResult::~FCheckLimitedEditionItemAvailabilityResult()
{

}

void PlayFab::AdminModels::FCheckLimitedEditionItemAvailabilityResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCheckLimitedEditionItemAvailabilityResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCloudScriptFile::~FCloudScriptFile()
{

}

void PlayFab::AdminModels::FCloudScriptFile::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!FileContents.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CloudScriptFile::FileContents, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("FileContents"));
        writer->WriteValue(FileContents);
    }

    if (!Filename.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CloudScriptFile::Filename, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Filename"));
        writer->WriteValue(Filename);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCloudScriptFile::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FileContentsValue = obj->TryGetField(TEXT("FileContents"));
    if (FileContentsValue.IsValid() && !FileContentsValue->IsNull())
    {
        FString TmpValue;
        if (FileContentsValue->TryGetString(TmpValue)) { FileContents = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FilenameValue = obj->TryGetField(TEXT("Filename"));
    if (FilenameValue.IsValid() && !FilenameValue->IsNull())
    {
        FString TmpValue;
        if (FilenameValue->TryGetString(TmpValue)) { Filename = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCloudScriptTaskParameter::~FCloudScriptTaskParameter()
{

}

void PlayFab::AdminModels::FCloudScriptTaskParameter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Argument.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Argument"));
        Argument.writeJSON(writer);
    }

    if (FunctionName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionName"));
        writer->WriteValue(FunctionName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCloudScriptTaskParameter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ArgumentValue = obj->TryGetField(TEXT("Argument"));
    if (ArgumentValue.IsValid() && !ArgumentValue->IsNull())
    {
        Argument = FJsonKeeper(ArgumentValue);
    }

    const TSharedPtr<FJsonValue> FunctionNameValue = obj->TryGetField(TEXT("FunctionName"));
    if (FunctionNameValue.IsValid() && !FunctionNameValue->IsNull())
    {
        FString TmpValue;
        if (FunctionNameValue->TryGetString(TmpValue)) { FunctionName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FScriptExecutionError::~FScriptExecutionError()
{

}

void PlayFab::AdminModels::FScriptExecutionError::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Error.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Error"));
        writer->WriteValue(Error);
    }

    if (Message.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Message"));
        writer->WriteValue(Message);
    }

    if (StackTrace.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StackTrace"));
        writer->WriteValue(StackTrace);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FScriptExecutionError::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ErrorValue = obj->TryGetField(TEXT("Error"));
    if (ErrorValue.IsValid() && !ErrorValue->IsNull())
    {
        FString TmpValue;
        if (ErrorValue->TryGetString(TmpValue)) { Error = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MessageValue = obj->TryGetField(TEXT("Message"));
    if (MessageValue.IsValid() && !MessageValue->IsNull())
    {
        FString TmpValue;
        if (MessageValue->TryGetString(TmpValue)) { Message = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StackTraceValue = obj->TryGetField(TEXT("StackTrace"));
    if (StackTraceValue.IsValid() && !StackTraceValue->IsNull())
    {
        FString TmpValue;
        if (StackTraceValue->TryGetString(TmpValue)) { StackTrace = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FLogStatement::~FLogStatement()
{

}

void PlayFab::AdminModels::FLogStatement::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Data"));
        Data.writeJSON(writer);
    }

    if (Level.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Level"));
        writer->WriteValue(Level);
    }

    if (Message.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Message"));
        writer->WriteValue(Message);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FLogStatement::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataValue = obj->TryGetField(TEXT("Data"));
    if (DataValue.IsValid() && !DataValue->IsNull())
    {
        Data = FJsonKeeper(DataValue);
    }

    const TSharedPtr<FJsonValue> LevelValue = obj->TryGetField(TEXT("Level"));
    if (LevelValue.IsValid() && !LevelValue->IsNull())
    {
        FString TmpValue;
        if (LevelValue->TryGetString(TmpValue)) { Level = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MessageValue = obj->TryGetField(TEXT("Message"));
    if (MessageValue.IsValid() && !MessageValue->IsNull())
    {
        FString TmpValue;
        if (MessageValue->TryGetString(TmpValue)) { Message = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FExecuteCloudScriptResult::~FExecuteCloudScriptResult()
{
    //if (Error != nullptr) delete Error;

}

void PlayFab::AdminModels::FExecuteCloudScriptResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("APIRequestsIssued"));
    writer->WriteValue(APIRequestsIssued);

    if (Error.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Error"));
        Error->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("ExecutionTimeSeconds"));
    writer->WriteValue(ExecutionTimeSeconds);

    if (FunctionName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionName"));
        writer->WriteValue(FunctionName);
    }

    if (FunctionResult.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionResult"));
        FunctionResult.writeJSON(writer);
    }

    if (FunctionResultTooLarge.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionResultTooLarge"));
        writer->WriteValue(FunctionResultTooLarge);
    }

    writer->WriteIdentifierPrefix(TEXT("HttpRequestsIssued"));
    writer->WriteValue(HttpRequestsIssued);

    if (Logs.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Logs"));
        for (const FLogStatement& item : Logs)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (LogsTooLarge.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LogsTooLarge"));
        writer->WriteValue(LogsTooLarge);
    }

    writer->WriteIdentifierPrefix(TEXT("MemoryConsumedBytes"));
    writer->WriteValue(static_cast<int64>(MemoryConsumedBytes));

    writer->WriteIdentifierPrefix(TEXT("ProcessorTimeSeconds"));
    writer->WriteValue(ProcessorTimeSeconds);

    writer->WriteIdentifierPrefix(TEXT("Revision"));
    writer->WriteValue(Revision);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FExecuteCloudScriptResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> APIRequestsIssuedValue = obj->TryGetField(TEXT("APIRequestsIssued"));
    if (APIRequestsIssuedValue.IsValid() && !APIRequestsIssuedValue->IsNull())
    {
        int32 TmpValue;
        if (APIRequestsIssuedValue->TryGetNumber(TmpValue)) { APIRequestsIssued = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ErrorValue = obj->TryGetField(TEXT("Error"));
    if (ErrorValue.IsValid() && !ErrorValue->IsNull())
    {
        Error = MakeShareable(new FScriptExecutionError(ErrorValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ExecutionTimeSecondsValue = obj->TryGetField(TEXT("ExecutionTimeSeconds"));
    if (ExecutionTimeSecondsValue.IsValid() && !ExecutionTimeSecondsValue->IsNull())
    {
        double TmpValue;
        if (ExecutionTimeSecondsValue->TryGetNumber(TmpValue)) { ExecutionTimeSeconds = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionNameValue = obj->TryGetField(TEXT("FunctionName"));
    if (FunctionNameValue.IsValid() && !FunctionNameValue->IsNull())
    {
        FString TmpValue;
        if (FunctionNameValue->TryGetString(TmpValue)) { FunctionName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionResultValue = obj->TryGetField(TEXT("FunctionResult"));
    if (FunctionResultValue.IsValid() && !FunctionResultValue->IsNull())
    {
        FunctionResult = FJsonKeeper(FunctionResultValue);
    }

    const TSharedPtr<FJsonValue> FunctionResultTooLargeValue = obj->TryGetField(TEXT("FunctionResultTooLarge"));
    if (FunctionResultTooLargeValue.IsValid() && !FunctionResultTooLargeValue->IsNull())
    {
        bool TmpValue;
        if (FunctionResultTooLargeValue->TryGetBool(TmpValue)) { FunctionResultTooLarge = TmpValue; }
    }

    const TSharedPtr<FJsonValue> HttpRequestsIssuedValue = obj->TryGetField(TEXT("HttpRequestsIssued"));
    if (HttpRequestsIssuedValue.IsValid() && !HttpRequestsIssuedValue->IsNull())
    {
        int32 TmpValue;
        if (HttpRequestsIssuedValue->TryGetNumber(TmpValue)) { HttpRequestsIssued = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&LogsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Logs"));
    for (int32 Idx = 0; Idx < LogsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LogsArray[Idx];
        Logs.Add(FLogStatement(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> LogsTooLargeValue = obj->TryGetField(TEXT("LogsTooLarge"));
    if (LogsTooLargeValue.IsValid() && !LogsTooLargeValue->IsNull())
    {
        bool TmpValue;
        if (LogsTooLargeValue->TryGetBool(TmpValue)) { LogsTooLarge = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MemoryConsumedBytesValue = obj->TryGetField(TEXT("MemoryConsumedBytes"));
    if (MemoryConsumedBytesValue.IsValid() && !MemoryConsumedBytesValue->IsNull())
    {
        uint32 TmpValue;
        if (MemoryConsumedBytesValue->TryGetNumber(TmpValue)) { MemoryConsumedBytes = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProcessorTimeSecondsValue = obj->TryGetField(TEXT("ProcessorTimeSeconds"));
    if (ProcessorTimeSecondsValue.IsValid() && !ProcessorTimeSecondsValue->IsNull())
    {
        double TmpValue;
        if (ProcessorTimeSecondsValue->TryGetNumber(TmpValue)) { ProcessorTimeSeconds = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RevisionValue = obj->TryGetField(TEXT("Revision"));
    if (RevisionValue.IsValid() && !RevisionValue->IsNull())
    {
        int32 TmpValue;
        if (RevisionValue->TryGetNumber(TmpValue)) { Revision = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCloudScriptTaskSummary::~FCloudScriptTaskSummary()
{
    //if (Result != nullptr) delete Result;
    //if (TaskIdentifier != nullptr) delete TaskIdentifier;

}

void PlayFab::AdminModels::FCloudScriptTaskSummary::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CompletedAt.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("CompletedAt"));
        writeDatetime(CompletedAt, writer);
    }

    if (EstimatedSecondsRemaining.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("EstimatedSecondsRemaining"));
        writer->WriteValue(EstimatedSecondsRemaining);
    }

    if (PercentComplete.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("PercentComplete"));
        writer->WriteValue(PercentComplete);
    }

    if (Result.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Result"));
        Result->writeJSON(writer);
    }

    if (ScheduledByUserId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ScheduledByUserId"));
        writer->WriteValue(ScheduledByUserId);
    }

    writer->WriteIdentifierPrefix(TEXT("StartedAt"));
    writeDatetime(StartedAt, writer);

    if (Status.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        writeTaskInstanceStatusEnumJSON(Status, writer);
    }

    if (TaskIdentifier.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("TaskIdentifier"));
        TaskIdentifier->writeJSON(writer);
    }

    if (TaskInstanceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TaskInstanceId"));
        writer->WriteValue(TaskInstanceId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCloudScriptTaskSummary::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CompletedAtValue = obj->TryGetField(TEXT("CompletedAt"));
    if (CompletedAtValue.IsValid())
        CompletedAt = readDatetime(CompletedAtValue);


    const TSharedPtr<FJsonValue> EstimatedSecondsRemainingValue = obj->TryGetField(TEXT("EstimatedSecondsRemaining"));
    if (EstimatedSecondsRemainingValue.IsValid() && !EstimatedSecondsRemainingValue->IsNull())
    {
        double TmpValue;
        if (EstimatedSecondsRemainingValue->TryGetNumber(TmpValue)) { EstimatedSecondsRemaining = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PercentCompleteValue = obj->TryGetField(TEXT("PercentComplete"));
    if (PercentCompleteValue.IsValid() && !PercentCompleteValue->IsNull())
    {
        double TmpValue;
        if (PercentCompleteValue->TryGetNumber(TmpValue)) { PercentComplete = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ResultValue = obj->TryGetField(TEXT("Result"));
    if (ResultValue.IsValid() && !ResultValue->IsNull())
    {
        Result = MakeShareable(new FExecuteCloudScriptResult(ResultValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ScheduledByUserIdValue = obj->TryGetField(TEXT("ScheduledByUserId"));
    if (ScheduledByUserIdValue.IsValid() && !ScheduledByUserIdValue->IsNull())
    {
        FString TmpValue;
        if (ScheduledByUserIdValue->TryGetString(TmpValue)) { ScheduledByUserId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StartedAtValue = obj->TryGetField(TEXT("StartedAt"));
    if (StartedAtValue.IsValid())
        StartedAt = readDatetime(StartedAtValue);


    Status = readTaskInstanceStatusFromValue(obj->TryGetField(TEXT("Status")));

    const TSharedPtr<FJsonValue> TaskIdentifierValue = obj->TryGetField(TEXT("TaskIdentifier"));
    if (TaskIdentifierValue.IsValid() && !TaskIdentifierValue->IsNull())
    {
        TaskIdentifier = MakeShareable(new FNameIdentifier(TaskIdentifierValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> TaskInstanceIdValue = obj->TryGetField(TEXT("TaskInstanceId"));
    if (TaskInstanceIdValue.IsValid() && !TaskInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (TaskInstanceIdValue->TryGetString(TmpValue)) { TaskInstanceId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCloudScriptVersionStatus::~FCloudScriptVersionStatus()
{

}

void PlayFab::AdminModels::FCloudScriptVersionStatus::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("LatestRevision"));
    writer->WriteValue(LatestRevision);

    writer->WriteIdentifierPrefix(TEXT("PublishedRevision"));
    writer->WriteValue(PublishedRevision);

    writer->WriteIdentifierPrefix(TEXT("Version"));
    writer->WriteValue(Version);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCloudScriptVersionStatus::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> LatestRevisionValue = obj->TryGetField(TEXT("LatestRevision"));
    if (LatestRevisionValue.IsValid() && !LatestRevisionValue->IsNull())
    {
        int32 TmpValue;
        if (LatestRevisionValue->TryGetNumber(TmpValue)) { LatestRevision = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PublishedRevisionValue = obj->TryGetField(TEXT("PublishedRevision"));
    if (PublishedRevisionValue.IsValid() && !PublishedRevisionValue->IsNull())
    {
        int32 TmpValue;
        if (PublishedRevisionValue->TryGetNumber(TmpValue)) { PublishedRevision = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        int32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeEmailVerificationStatusEnumJSON(EmailVerificationStatus enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case EmailVerificationStatusUnverified: writer->WriteValue(TEXT("Unverified")); break;
    case EmailVerificationStatusPending: writer->WriteValue(TEXT("Pending")); break;
    case EmailVerificationStatusConfirmed: writer->WriteValue(TEXT("Confirmed")); break;
    }
}

AdminModels::EmailVerificationStatus PlayFab::AdminModels::readEmailVerificationStatusFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readEmailVerificationStatusFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::EmailVerificationStatus PlayFab::AdminModels::readEmailVerificationStatusFromValue(const FString& value)
{
    static TMap<FString, EmailVerificationStatus> _EmailVerificationStatusMap;
    if (_EmailVerificationStatusMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _EmailVerificationStatusMap.Add(TEXT("Unverified"), EmailVerificationStatusUnverified);
        _EmailVerificationStatusMap.Add(TEXT("Pending"), EmailVerificationStatusPending);
        _EmailVerificationStatusMap.Add(TEXT("Confirmed"), EmailVerificationStatusConfirmed);

    }

    if (!value.IsEmpty())
    {
        auto output = _EmailVerificationStatusMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return EmailVerificationStatusUnverified; // Basically critical fail
}

PlayFab::AdminModels::FContactEmailInfo::~FContactEmailInfo()
{

}

void PlayFab::AdminModels::FContactEmailInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (EmailAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EmailAddress"));
        writer->WriteValue(EmailAddress);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (VerificationStatus.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("VerificationStatus"));
        writeEmailVerificationStatusEnumJSON(VerificationStatus, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FContactEmailInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EmailAddressValue = obj->TryGetField(TEXT("EmailAddress"));
    if (EmailAddressValue.IsValid() && !EmailAddressValue->IsNull())
    {
        FString TmpValue;
        if (EmailAddressValue->TryGetString(TmpValue)) { EmailAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    VerificationStatus = readEmailVerificationStatusFromValue(obj->TryGetField(TEXT("VerificationStatus")));

    return HasSucceeded;
}

PlayFab::AdminModels::FContactEmailInfoModel::~FContactEmailInfoModel()
{

}

void PlayFab::AdminModels::FContactEmailInfoModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (EmailAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EmailAddress"));
        writer->WriteValue(EmailAddress);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (VerificationStatus.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("VerificationStatus"));
        writeEmailVerificationStatusEnumJSON(VerificationStatus, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FContactEmailInfoModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EmailAddressValue = obj->TryGetField(TEXT("EmailAddress"));
    if (EmailAddressValue.IsValid() && !EmailAddressValue->IsNull())
    {
        FString TmpValue;
        if (EmailAddressValue->TryGetString(TmpValue)) { EmailAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    VerificationStatus = readEmailVerificationStatusFromValue(obj->TryGetField(TEXT("VerificationStatus")));

    return HasSucceeded;
}

PlayFab::AdminModels::FContentInfo::~FContentInfo()
{

}

void PlayFab::AdminModels::FContentInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Key.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Key"));
        writer->WriteValue(Key);
    }

    writer->WriteIdentifierPrefix(TEXT("LastModified"));
    writeDatetime(LastModified, writer);

    writer->WriteIdentifierPrefix(TEXT("Size"));
    writer->WriteValue(static_cast<int64>(Size));

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FContentInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> KeyValue = obj->TryGetField(TEXT("Key"));
    if (KeyValue.IsValid() && !KeyValue->IsNull())
    {
        FString TmpValue;
        if (KeyValue->TryGetString(TmpValue)) { Key = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LastModifiedValue = obj->TryGetField(TEXT("LastModified"));
    if (LastModifiedValue.IsValid())
        LastModified = readDatetime(LastModifiedValue);


    const TSharedPtr<FJsonValue> SizeValue = obj->TryGetField(TEXT("Size"));
    if (SizeValue.IsValid() && !SizeValue->IsNull())
    {
        uint32 TmpValue;
        if (SizeValue->TryGetNumber(TmpValue)) { Size = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeContinentCodeEnumJSON(ContinentCode enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case ContinentCodeAF: writer->WriteValue(TEXT("AF")); break;
    case ContinentCodeAN: writer->WriteValue(TEXT("AN")); break;
    case ContinentCodeAS: writer->WriteValue(TEXT("AS")); break;
    case ContinentCodeEU: writer->WriteValue(TEXT("EU")); break;
    case ContinentCodeNA: writer->WriteValue(TEXT("NA")); break;
    case ContinentCodeOC: writer->WriteValue(TEXT("OC")); break;
    case ContinentCodeSA: writer->WriteValue(TEXT("SA")); break;
    }
}

AdminModels::ContinentCode PlayFab::AdminModels::readContinentCodeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readContinentCodeFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::ContinentCode PlayFab::AdminModels::readContinentCodeFromValue(const FString& value)
{
    static TMap<FString, ContinentCode> _ContinentCodeMap;
    if (_ContinentCodeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _ContinentCodeMap.Add(TEXT("AF"), ContinentCodeAF);
        _ContinentCodeMap.Add(TEXT("AN"), ContinentCodeAN);
        _ContinentCodeMap.Add(TEXT("AS"), ContinentCodeAS);
        _ContinentCodeMap.Add(TEXT("EU"), ContinentCodeEU);
        _ContinentCodeMap.Add(TEXT("NA"), ContinentCodeNA);
        _ContinentCodeMap.Add(TEXT("OC"), ContinentCodeOC);
        _ContinentCodeMap.Add(TEXT("SA"), ContinentCodeSA);

    }

    if (!value.IsEmpty())
    {
        auto output = _ContinentCodeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return ContinentCodeAF; // Basically critical fail
}

void PlayFab::AdminModels::writeCountryCodeEnumJSON(CountryCode enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case CountryCodeAF: writer->WriteValue(TEXT("AF")); break;
    case CountryCodeAX: writer->WriteValue(TEXT("AX")); break;
    case CountryCodeAL: writer->WriteValue(TEXT("AL")); break;
    case CountryCodeDZ: writer->WriteValue(TEXT("DZ")); break;
    case CountryCodeAS: writer->WriteValue(TEXT("AS")); break;
    case CountryCodeAD: writer->WriteValue(TEXT("AD")); break;
    case CountryCodeAO: writer->WriteValue(TEXT("AO")); break;
    case CountryCodeAI: writer->WriteValue(TEXT("AI")); break;
    case CountryCodeAQ: writer->WriteValue(TEXT("AQ")); break;
    case CountryCodeAG: writer->WriteValue(TEXT("AG")); break;
    case CountryCodeAR: writer->WriteValue(TEXT("AR")); break;
    case CountryCodeAM: writer->WriteValue(TEXT("AM")); break;
    case CountryCodeAW: writer->WriteValue(TEXT("AW")); break;
    case CountryCodeAU: writer->WriteValue(TEXT("AU")); break;
    case CountryCodeAT: writer->WriteValue(TEXT("AT")); break;
    case CountryCodeAZ: writer->WriteValue(TEXT("AZ")); break;
    case CountryCodeBS: writer->WriteValue(TEXT("BS")); break;
    case CountryCodeBH: writer->WriteValue(TEXT("BH")); break;
    case CountryCodeBD: writer->WriteValue(TEXT("BD")); break;
    case CountryCodeBB: writer->WriteValue(TEXT("BB")); break;
    case CountryCodeBY: writer->WriteValue(TEXT("BY")); break;
    case CountryCodeBE: writer->WriteValue(TEXT("BE")); break;
    case CountryCodeBZ: writer->WriteValue(TEXT("BZ")); break;
    case CountryCodeBJ: writer->WriteValue(TEXT("BJ")); break;
    case CountryCodeBM: writer->WriteValue(TEXT("BM")); break;
    case CountryCodeBT: writer->WriteValue(TEXT("BT")); break;
    case CountryCodeBO: writer->WriteValue(TEXT("BO")); break;
    case CountryCodeBQ: writer->WriteValue(TEXT("BQ")); break;
    case CountryCodeBA: writer->WriteValue(TEXT("BA")); break;
    case CountryCodeBW: writer->WriteValue(TEXT("BW")); break;
    case CountryCodeBV: writer->WriteValue(TEXT("BV")); break;
    case CountryCodeBR: writer->WriteValue(TEXT("BR")); break;
    case CountryCodeIO: writer->WriteValue(TEXT("IO")); break;
    case CountryCodeBN: writer->WriteValue(TEXT("BN")); break;
    case CountryCodeBG: writer->WriteValue(TEXT("BG")); break;
    case CountryCodeBF: writer->WriteValue(TEXT("BF")); break;
    case CountryCodeBI: writer->WriteValue(TEXT("BI")); break;
    case CountryCodeKH: writer->WriteValue(TEXT("KH")); break;
    case CountryCodeCM: writer->WriteValue(TEXT("CM")); break;
    case CountryCodeCA: writer->WriteValue(TEXT("CA")); break;
    case CountryCodeCV: writer->WriteValue(TEXT("CV")); break;
    case CountryCodeKY: writer->WriteValue(TEXT("KY")); break;
    case CountryCodeCF: writer->WriteValue(TEXT("CF")); break;
    case CountryCodeTD: writer->WriteValue(TEXT("TD")); break;
    case CountryCodeCL: writer->WriteValue(TEXT("CL")); break;
    case CountryCodeCN: writer->WriteValue(TEXT("CN")); break;
    case CountryCodeCX: writer->WriteValue(TEXT("CX")); break;
    case CountryCodeCC: writer->WriteValue(TEXT("CC")); break;
    case CountryCodeCO: writer->WriteValue(TEXT("CO")); break;
    case CountryCodeKM: writer->WriteValue(TEXT("KM")); break;
    case CountryCodeCG: writer->WriteValue(TEXT("CG")); break;
    case CountryCodeCD: writer->WriteValue(TEXT("CD")); break;
    case CountryCodeCK: writer->WriteValue(TEXT("CK")); break;
    case CountryCodeCR: writer->WriteValue(TEXT("CR")); break;
    case CountryCodeCI: writer->WriteValue(TEXT("CI")); break;
    case CountryCodeHR: writer->WriteValue(TEXT("HR")); break;
    case CountryCodeCU: writer->WriteValue(TEXT("CU")); break;
    case CountryCodeCW: writer->WriteValue(TEXT("CW")); break;
    case CountryCodeCY: writer->WriteValue(TEXT("CY")); break;
    case CountryCodeCZ: writer->WriteValue(TEXT("CZ")); break;
    case CountryCodeDK: writer->WriteValue(TEXT("DK")); break;
    case CountryCodeDJ: writer->WriteValue(TEXT("DJ")); break;
    case CountryCodeDM: writer->WriteValue(TEXT("DM")); break;
    case CountryCodeDO: writer->WriteValue(TEXT("DO")); break;
    case CountryCodeEC: writer->WriteValue(TEXT("EC")); break;
    case CountryCodeEG: writer->WriteValue(TEXT("EG")); break;
    case CountryCodeSV: writer->WriteValue(TEXT("SV")); break;
    case CountryCodeGQ: writer->WriteValue(TEXT("GQ")); break;
    case CountryCodeER: writer->WriteValue(TEXT("ER")); break;
    case CountryCodeEE: writer->WriteValue(TEXT("EE")); break;
    case CountryCodeET: writer->WriteValue(TEXT("ET")); break;
    case CountryCodeFK: writer->WriteValue(TEXT("FK")); break;
    case CountryCodeFO: writer->WriteValue(TEXT("FO")); break;
    case CountryCodeFJ: writer->WriteValue(TEXT("FJ")); break;
    case CountryCodeFI: writer->WriteValue(TEXT("FI")); break;
    case CountryCodeFR: writer->WriteValue(TEXT("FR")); break;
    case CountryCodeGF: writer->WriteValue(TEXT("GF")); break;
    case CountryCodePF: writer->WriteValue(TEXT("PF")); break;
    case CountryCodeTF: writer->WriteValue(TEXT("TF")); break;
    case CountryCodeGA: writer->WriteValue(TEXT("GA")); break;
    case CountryCodeGM: writer->WriteValue(TEXT("GM")); break;
    case CountryCodeGE: writer->WriteValue(TEXT("GE")); break;
    case CountryCodeDE: writer->WriteValue(TEXT("DE")); break;
    case CountryCodeGH: writer->WriteValue(TEXT("GH")); break;
    case CountryCodeGI: writer->WriteValue(TEXT("GI")); break;
    case CountryCodeGR: writer->WriteValue(TEXT("GR")); break;
    case CountryCodeGL: writer->WriteValue(TEXT("GL")); break;
    case CountryCodeGD: writer->WriteValue(TEXT("GD")); break;
    case CountryCodeGP: writer->WriteValue(TEXT("GP")); break;
    case CountryCodeGU: writer->WriteValue(TEXT("GU")); break;
    case CountryCodeGT: writer->WriteValue(TEXT("GT")); break;
    case CountryCodeGG: writer->WriteValue(TEXT("GG")); break;
    case CountryCodeGN: writer->WriteValue(TEXT("GN")); break;
    case CountryCodeGW: writer->WriteValue(TEXT("GW")); break;
    case CountryCodeGY: writer->WriteValue(TEXT("GY")); break;
    case CountryCodeHT: writer->WriteValue(TEXT("HT")); break;
    case CountryCodeHM: writer->WriteValue(TEXT("HM")); break;
    case CountryCodeVA: writer->WriteValue(TEXT("VA")); break;
    case CountryCodeHN: writer->WriteValue(TEXT("HN")); break;
    case CountryCodeHK: writer->WriteValue(TEXT("HK")); break;
    case CountryCodeHU: writer->WriteValue(TEXT("HU")); break;
    case CountryCodeIS: writer->WriteValue(TEXT("IS")); break;
    case CountryCodeIN: writer->WriteValue(TEXT("IN")); break;
    case CountryCodeID: writer->WriteValue(TEXT("ID")); break;
    case CountryCodeIR: writer->WriteValue(TEXT("IR")); break;
    case CountryCodeIQ: writer->WriteValue(TEXT("IQ")); break;
    case CountryCodeIE: writer->WriteValue(TEXT("IE")); break;
    case CountryCodeIM: writer->WriteValue(TEXT("IM")); break;
    case CountryCodeIL: writer->WriteValue(TEXT("IL")); break;
    case CountryCodeIT: writer->WriteValue(TEXT("IT")); break;
    case CountryCodeJM: writer->WriteValue(TEXT("JM")); break;
    case CountryCodeJP: writer->WriteValue(TEXT("JP")); break;
    case CountryCodeJE: writer->WriteValue(TEXT("JE")); break;
    case CountryCodeJO: writer->WriteValue(TEXT("JO")); break;
    case CountryCodeKZ: writer->WriteValue(TEXT("KZ")); break;
    case CountryCodeKE: writer->WriteValue(TEXT("KE")); break;
    case CountryCodeKI: writer->WriteValue(TEXT("KI")); break;
    case CountryCodeKP: writer->WriteValue(TEXT("KP")); break;
    case CountryCodeKR: writer->WriteValue(TEXT("KR")); break;
    case CountryCodeKW: writer->WriteValue(TEXT("KW")); break;
    case CountryCodeKG: writer->WriteValue(TEXT("KG")); break;
    case CountryCodeLA: writer->WriteValue(TEXT("LA")); break;
    case CountryCodeLV: writer->WriteValue(TEXT("LV")); break;
    case CountryCodeLB: writer->WriteValue(TEXT("LB")); break;
    case CountryCodeLS: writer->WriteValue(TEXT("LS")); break;
    case CountryCodeLR: writer->WriteValue(TEXT("LR")); break;
    case CountryCodeLY: writer->WriteValue(TEXT("LY")); break;
    case CountryCodeLI: writer->WriteValue(TEXT("LI")); break;
    case CountryCodeLT: writer->WriteValue(TEXT("LT")); break;
    case CountryCodeLU: writer->WriteValue(TEXT("LU")); break;
    case CountryCodeMO: writer->WriteValue(TEXT("MO")); break;
    case CountryCodeMK: writer->WriteValue(TEXT("MK")); break;
    case CountryCodeMG: writer->WriteValue(TEXT("MG")); break;
    case CountryCodeMW: writer->WriteValue(TEXT("MW")); break;
    case CountryCodeMY: writer->WriteValue(TEXT("MY")); break;
    case CountryCodeMV: writer->WriteValue(TEXT("MV")); break;
    case CountryCodeML: writer->WriteValue(TEXT("ML")); break;
    case CountryCodeMT: writer->WriteValue(TEXT("MT")); break;
    case CountryCodeMH: writer->WriteValue(TEXT("MH")); break;
    case CountryCodeMQ: writer->WriteValue(TEXT("MQ")); break;
    case CountryCodeMR: writer->WriteValue(TEXT("MR")); break;
    case CountryCodeMU: writer->WriteValue(TEXT("MU")); break;
    case CountryCodeYT: writer->WriteValue(TEXT("YT")); break;
    case CountryCodeMX: writer->WriteValue(TEXT("MX")); break;
    case CountryCodeFM: writer->WriteValue(TEXT("FM")); break;
    case CountryCodeMD: writer->WriteValue(TEXT("MD")); break;
    case CountryCodeMC: writer->WriteValue(TEXT("MC")); break;
    case CountryCodeMN: writer->WriteValue(TEXT("MN")); break;
    case CountryCodeME: writer->WriteValue(TEXT("ME")); break;
    case CountryCodeMS: writer->WriteValue(TEXT("MS")); break;
    case CountryCodeMA: writer->WriteValue(TEXT("MA")); break;
    case CountryCodeMZ: writer->WriteValue(TEXT("MZ")); break;
    case CountryCodeMM: writer->WriteValue(TEXT("MM")); break;
    case CountryCodeNA: writer->WriteValue(TEXT("NA")); break;
    case CountryCodeNR: writer->WriteValue(TEXT("NR")); break;
    case CountryCodeNP: writer->WriteValue(TEXT("NP")); break;
    case CountryCodeNL: writer->WriteValue(TEXT("NL")); break;
    case CountryCodeNC: writer->WriteValue(TEXT("NC")); break;
    case CountryCodeNZ: writer->WriteValue(TEXT("NZ")); break;
    case CountryCodeNI: writer->WriteValue(TEXT("NI")); break;
    case CountryCodeNE: writer->WriteValue(TEXT("NE")); break;
    case CountryCodeNG: writer->WriteValue(TEXT("NG")); break;
    case CountryCodeNU: writer->WriteValue(TEXT("NU")); break;
    case CountryCodeNF: writer->WriteValue(TEXT("NF")); break;
    case CountryCodeMP: writer->WriteValue(TEXT("MP")); break;
    case CountryCodeNO: writer->WriteValue(TEXT("NO")); break;
    case CountryCodeOM: writer->WriteValue(TEXT("OM")); break;
    case CountryCodePK: writer->WriteValue(TEXT("PK")); break;
    case CountryCodePW: writer->WriteValue(TEXT("PW")); break;
    case CountryCodePS: writer->WriteValue(TEXT("PS")); break;
    case CountryCodePA: writer->WriteValue(TEXT("PA")); break;
    case CountryCodePG: writer->WriteValue(TEXT("PG")); break;
    case CountryCodePY: writer->WriteValue(TEXT("PY")); break;
    case CountryCodePE: writer->WriteValue(TEXT("PE")); break;
    case CountryCodePH: writer->WriteValue(TEXT("PH")); break;
    case CountryCodePN: writer->WriteValue(TEXT("PN")); break;
    case CountryCodePL: writer->WriteValue(TEXT("PL")); break;
    case CountryCodePT: writer->WriteValue(TEXT("PT")); break;
    case CountryCodePR: writer->WriteValue(TEXT("PR")); break;
    case CountryCodeQA: writer->WriteValue(TEXT("QA")); break;
    case CountryCodeRE: writer->WriteValue(TEXT("RE")); break;
    case CountryCodeRO: writer->WriteValue(TEXT("RO")); break;
    case CountryCodeRU: writer->WriteValue(TEXT("RU")); break;
    case CountryCodeRW: writer->WriteValue(TEXT("RW")); break;
    case CountryCodeBL: writer->WriteValue(TEXT("BL")); break;
    case CountryCodeSH: writer->WriteValue(TEXT("SH")); break;
    case CountryCodeKN: writer->WriteValue(TEXT("KN")); break;
    case CountryCodeLC: writer->WriteValue(TEXT("LC")); break;
    case CountryCodeMF: writer->WriteValue(TEXT("MF")); break;
    case CountryCodePM: writer->WriteValue(TEXT("PM")); break;
    case CountryCodeVC: writer->WriteValue(TEXT("VC")); break;
    case CountryCodeWS: writer->WriteValue(TEXT("WS")); break;
    case CountryCodeSM: writer->WriteValue(TEXT("SM")); break;
    case CountryCodeST: writer->WriteValue(TEXT("ST")); break;
    case CountryCodeSA: writer->WriteValue(TEXT("SA")); break;
    case CountryCodeSN: writer->WriteValue(TEXT("SN")); break;
    case CountryCodeRS: writer->WriteValue(TEXT("RS")); break;
    case CountryCodeSC: writer->WriteValue(TEXT("SC")); break;
    case CountryCodeSL: writer->WriteValue(TEXT("SL")); break;
    case CountryCodeSG: writer->WriteValue(TEXT("SG")); break;
    case CountryCodeSX: writer->WriteValue(TEXT("SX")); break;
    case CountryCodeSK: writer->WriteValue(TEXT("SK")); break;
    case CountryCodeSI: writer->WriteValue(TEXT("SI")); break;
    case CountryCodeSB: writer->WriteValue(TEXT("SB")); break;
    case CountryCodeSO: writer->WriteValue(TEXT("SO")); break;
    case CountryCodeZA: writer->WriteValue(TEXT("ZA")); break;
    case CountryCodeGS: writer->WriteValue(TEXT("GS")); break;
    case CountryCodeSS: writer->WriteValue(TEXT("SS")); break;
    case CountryCodeES: writer->WriteValue(TEXT("ES")); break;
    case CountryCodeLK: writer->WriteValue(TEXT("LK")); break;
    case CountryCodeSD: writer->WriteValue(TEXT("SD")); break;
    case CountryCodeSR: writer->WriteValue(TEXT("SR")); break;
    case CountryCodeSJ: writer->WriteValue(TEXT("SJ")); break;
    case CountryCodeSZ: writer->WriteValue(TEXT("SZ")); break;
    case CountryCodeSE: writer->WriteValue(TEXT("SE")); break;
    case CountryCodeCH: writer->WriteValue(TEXT("CH")); break;
    case CountryCodeSY: writer->WriteValue(TEXT("SY")); break;
    case CountryCodeTW: writer->WriteValue(TEXT("TW")); break;
    case CountryCodeTJ: writer->WriteValue(TEXT("TJ")); break;
    case CountryCodeTZ: writer->WriteValue(TEXT("TZ")); break;
    case CountryCodeTH: writer->WriteValue(TEXT("TH")); break;
    case CountryCodeTL: writer->WriteValue(TEXT("TL")); break;
    case CountryCodeTG: writer->WriteValue(TEXT("TG")); break;
    case CountryCodeTK: writer->WriteValue(TEXT("TK")); break;
    case CountryCodeTO: writer->WriteValue(TEXT("TO")); break;
    case CountryCodeTT: writer->WriteValue(TEXT("TT")); break;
    case CountryCodeTN: writer->WriteValue(TEXT("TN")); break;
    case CountryCodeTR: writer->WriteValue(TEXT("TR")); break;
    case CountryCodeTM: writer->WriteValue(TEXT("TM")); break;
    case CountryCodeTC: writer->WriteValue(TEXT("TC")); break;
    case CountryCodeTV: writer->WriteValue(TEXT("TV")); break;
    case CountryCodeUG: writer->WriteValue(TEXT("UG")); break;
    case CountryCodeUA: writer->WriteValue(TEXT("UA")); break;
    case CountryCodeAE: writer->WriteValue(TEXT("AE")); break;
    case CountryCodeGB: writer->WriteValue(TEXT("GB")); break;
    case CountryCodeUS: writer->WriteValue(TEXT("US")); break;
    case CountryCodeUM: writer->WriteValue(TEXT("UM")); break;
    case CountryCodeUY: writer->WriteValue(TEXT("UY")); break;
    case CountryCodeUZ: writer->WriteValue(TEXT("UZ")); break;
    case CountryCodeVU: writer->WriteValue(TEXT("VU")); break;
    case CountryCodeVE: writer->WriteValue(TEXT("VE")); break;
    case CountryCodeVN: writer->WriteValue(TEXT("VN")); break;
    case CountryCodeVG: writer->WriteValue(TEXT("VG")); break;
    case CountryCodeVI: writer->WriteValue(TEXT("VI")); break;
    case CountryCodeWF: writer->WriteValue(TEXT("WF")); break;
    case CountryCodeEH: writer->WriteValue(TEXT("EH")); break;
    case CountryCodeYE: writer->WriteValue(TEXT("YE")); break;
    case CountryCodeZM: writer->WriteValue(TEXT("ZM")); break;
    case CountryCodeZW: writer->WriteValue(TEXT("ZW")); break;
    }
}

AdminModels::CountryCode PlayFab::AdminModels::readCountryCodeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readCountryCodeFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::CountryCode PlayFab::AdminModels::readCountryCodeFromValue(const FString& value)
{
    static TMap<FString, CountryCode> _CountryCodeMap;
    if (_CountryCodeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _CountryCodeMap.Add(TEXT("AF"), CountryCodeAF);
        _CountryCodeMap.Add(TEXT("AX"), CountryCodeAX);
        _CountryCodeMap.Add(TEXT("AL"), CountryCodeAL);
        _CountryCodeMap.Add(TEXT("DZ"), CountryCodeDZ);
        _CountryCodeMap.Add(TEXT("AS"), CountryCodeAS);
        _CountryCodeMap.Add(TEXT("AD"), CountryCodeAD);
        _CountryCodeMap.Add(TEXT("AO"), CountryCodeAO);
        _CountryCodeMap.Add(TEXT("AI"), CountryCodeAI);
        _CountryCodeMap.Add(TEXT("AQ"), CountryCodeAQ);
        _CountryCodeMap.Add(TEXT("AG"), CountryCodeAG);
        _CountryCodeMap.Add(TEXT("AR"), CountryCodeAR);
        _CountryCodeMap.Add(TEXT("AM"), CountryCodeAM);
        _CountryCodeMap.Add(TEXT("AW"), CountryCodeAW);
        _CountryCodeMap.Add(TEXT("AU"), CountryCodeAU);
        _CountryCodeMap.Add(TEXT("AT"), CountryCodeAT);
        _CountryCodeMap.Add(TEXT("AZ"), CountryCodeAZ);
        _CountryCodeMap.Add(TEXT("BS"), CountryCodeBS);
        _CountryCodeMap.Add(TEXT("BH"), CountryCodeBH);
        _CountryCodeMap.Add(TEXT("BD"), CountryCodeBD);
        _CountryCodeMap.Add(TEXT("BB"), CountryCodeBB);
        _CountryCodeMap.Add(TEXT("BY"), CountryCodeBY);
        _CountryCodeMap.Add(TEXT("BE"), CountryCodeBE);
        _CountryCodeMap.Add(TEXT("BZ"), CountryCodeBZ);
        _CountryCodeMap.Add(TEXT("BJ"), CountryCodeBJ);
        _CountryCodeMap.Add(TEXT("BM"), CountryCodeBM);
        _CountryCodeMap.Add(TEXT("BT"), CountryCodeBT);
        _CountryCodeMap.Add(TEXT("BO"), CountryCodeBO);
        _CountryCodeMap.Add(TEXT("BQ"), CountryCodeBQ);
        _CountryCodeMap.Add(TEXT("BA"), CountryCodeBA);
        _CountryCodeMap.Add(TEXT("BW"), CountryCodeBW);
        _CountryCodeMap.Add(TEXT("BV"), CountryCodeBV);
        _CountryCodeMap.Add(TEXT("BR"), CountryCodeBR);
        _CountryCodeMap.Add(TEXT("IO"), CountryCodeIO);
        _CountryCodeMap.Add(TEXT("BN"), CountryCodeBN);
        _CountryCodeMap.Add(TEXT("BG"), CountryCodeBG);
        _CountryCodeMap.Add(TEXT("BF"), CountryCodeBF);
        _CountryCodeMap.Add(TEXT("BI"), CountryCodeBI);
        _CountryCodeMap.Add(TEXT("KH"), CountryCodeKH);
        _CountryCodeMap.Add(TEXT("CM"), CountryCodeCM);
        _CountryCodeMap.Add(TEXT("CA"), CountryCodeCA);
        _CountryCodeMap.Add(TEXT("CV"), CountryCodeCV);
        _CountryCodeMap.Add(TEXT("KY"), CountryCodeKY);
        _CountryCodeMap.Add(TEXT("CF"), CountryCodeCF);
        _CountryCodeMap.Add(TEXT("TD"), CountryCodeTD);
        _CountryCodeMap.Add(TEXT("CL"), CountryCodeCL);
        _CountryCodeMap.Add(TEXT("CN"), CountryCodeCN);
        _CountryCodeMap.Add(TEXT("CX"), CountryCodeCX);
        _CountryCodeMap.Add(TEXT("CC"), CountryCodeCC);
        _CountryCodeMap.Add(TEXT("CO"), CountryCodeCO);
        _CountryCodeMap.Add(TEXT("KM"), CountryCodeKM);
        _CountryCodeMap.Add(TEXT("CG"), CountryCodeCG);
        _CountryCodeMap.Add(TEXT("CD"), CountryCodeCD);
        _CountryCodeMap.Add(TEXT("CK"), CountryCodeCK);
        _CountryCodeMap.Add(TEXT("CR"), CountryCodeCR);
        _CountryCodeMap.Add(TEXT("CI"), CountryCodeCI);
        _CountryCodeMap.Add(TEXT("HR"), CountryCodeHR);
        _CountryCodeMap.Add(TEXT("CU"), CountryCodeCU);
        _CountryCodeMap.Add(TEXT("CW"), CountryCodeCW);
        _CountryCodeMap.Add(TEXT("CY"), CountryCodeCY);
        _CountryCodeMap.Add(TEXT("CZ"), CountryCodeCZ);
        _CountryCodeMap.Add(TEXT("DK"), CountryCodeDK);
        _CountryCodeMap.Add(TEXT("DJ"), CountryCodeDJ);
        _CountryCodeMap.Add(TEXT("DM"), CountryCodeDM);
        _CountryCodeMap.Add(TEXT("DO"), CountryCodeDO);
        _CountryCodeMap.Add(TEXT("EC"), CountryCodeEC);
        _CountryCodeMap.Add(TEXT("EG"), CountryCodeEG);
        _CountryCodeMap.Add(TEXT("SV"), CountryCodeSV);
        _CountryCodeMap.Add(TEXT("GQ"), CountryCodeGQ);
        _CountryCodeMap.Add(TEXT("ER"), CountryCodeER);
        _CountryCodeMap.Add(TEXT("EE"), CountryCodeEE);
        _CountryCodeMap.Add(TEXT("ET"), CountryCodeET);
        _CountryCodeMap.Add(TEXT("FK"), CountryCodeFK);
        _CountryCodeMap.Add(TEXT("FO"), CountryCodeFO);
        _CountryCodeMap.Add(TEXT("FJ"), CountryCodeFJ);
        _CountryCodeMap.Add(TEXT("FI"), CountryCodeFI);
        _CountryCodeMap.Add(TEXT("FR"), CountryCodeFR);
        _CountryCodeMap.Add(TEXT("GF"), CountryCodeGF);
        _CountryCodeMap.Add(TEXT("PF"), CountryCodePF);
        _CountryCodeMap.Add(TEXT("TF"), CountryCodeTF);
        _CountryCodeMap.Add(TEXT("GA"), CountryCodeGA);
        _CountryCodeMap.Add(TEXT("GM"), CountryCodeGM);
        _CountryCodeMap.Add(TEXT("GE"), CountryCodeGE);
        _CountryCodeMap.Add(TEXT("DE"), CountryCodeDE);
        _CountryCodeMap.Add(TEXT("GH"), CountryCodeGH);
        _CountryCodeMap.Add(TEXT("GI"), CountryCodeGI);
        _CountryCodeMap.Add(TEXT("GR"), CountryCodeGR);
        _CountryCodeMap.Add(TEXT("GL"), CountryCodeGL);
        _CountryCodeMap.Add(TEXT("GD"), CountryCodeGD);
        _CountryCodeMap.Add(TEXT("GP"), CountryCodeGP);
        _CountryCodeMap.Add(TEXT("GU"), CountryCodeGU);
        _CountryCodeMap.Add(TEXT("GT"), CountryCodeGT);
        _CountryCodeMap.Add(TEXT("GG"), CountryCodeGG);
        _CountryCodeMap.Add(TEXT("GN"), CountryCodeGN);
        _CountryCodeMap.Add(TEXT("GW"), CountryCodeGW);
        _CountryCodeMap.Add(TEXT("GY"), CountryCodeGY);
        _CountryCodeMap.Add(TEXT("HT"), CountryCodeHT);
        _CountryCodeMap.Add(TEXT("HM"), CountryCodeHM);
        _CountryCodeMap.Add(TEXT("VA"), CountryCodeVA);
        _CountryCodeMap.Add(TEXT("HN"), CountryCodeHN);
        _CountryCodeMap.Add(TEXT("HK"), CountryCodeHK);
        _CountryCodeMap.Add(TEXT("HU"), CountryCodeHU);
        _CountryCodeMap.Add(TEXT("IS"), CountryCodeIS);
        _CountryCodeMap.Add(TEXT("IN"), CountryCodeIN);
        _CountryCodeMap.Add(TEXT("ID"), CountryCodeID);
        _CountryCodeMap.Add(TEXT("IR"), CountryCodeIR);
        _CountryCodeMap.Add(TEXT("IQ"), CountryCodeIQ);
        _CountryCodeMap.Add(TEXT("IE"), CountryCodeIE);
        _CountryCodeMap.Add(TEXT("IM"), CountryCodeIM);
        _CountryCodeMap.Add(TEXT("IL"), CountryCodeIL);
        _CountryCodeMap.Add(TEXT("IT"), CountryCodeIT);
        _CountryCodeMap.Add(TEXT("JM"), CountryCodeJM);
        _CountryCodeMap.Add(TEXT("JP"), CountryCodeJP);
        _CountryCodeMap.Add(TEXT("JE"), CountryCodeJE);
        _CountryCodeMap.Add(TEXT("JO"), CountryCodeJO);
        _CountryCodeMap.Add(TEXT("KZ"), CountryCodeKZ);
        _CountryCodeMap.Add(TEXT("KE"), CountryCodeKE);
        _CountryCodeMap.Add(TEXT("KI"), CountryCodeKI);
        _CountryCodeMap.Add(TEXT("KP"), CountryCodeKP);
        _CountryCodeMap.Add(TEXT("KR"), CountryCodeKR);
        _CountryCodeMap.Add(TEXT("KW"), CountryCodeKW);
        _CountryCodeMap.Add(TEXT("KG"), CountryCodeKG);
        _CountryCodeMap.Add(TEXT("LA"), CountryCodeLA);
        _CountryCodeMap.Add(TEXT("LV"), CountryCodeLV);
        _CountryCodeMap.Add(TEXT("LB"), CountryCodeLB);
        _CountryCodeMap.Add(TEXT("LS"), CountryCodeLS);
        _CountryCodeMap.Add(TEXT("LR"), CountryCodeLR);
        _CountryCodeMap.Add(TEXT("LY"), CountryCodeLY);
        _CountryCodeMap.Add(TEXT("LI"), CountryCodeLI);
        _CountryCodeMap.Add(TEXT("LT"), CountryCodeLT);
        _CountryCodeMap.Add(TEXT("LU"), CountryCodeLU);
        _CountryCodeMap.Add(TEXT("MO"), CountryCodeMO);
        _CountryCodeMap.Add(TEXT("MK"), CountryCodeMK);
        _CountryCodeMap.Add(TEXT("MG"), CountryCodeMG);
        _CountryCodeMap.Add(TEXT("MW"), CountryCodeMW);
        _CountryCodeMap.Add(TEXT("MY"), CountryCodeMY);
        _CountryCodeMap.Add(TEXT("MV"), CountryCodeMV);
        _CountryCodeMap.Add(TEXT("ML"), CountryCodeML);
        _CountryCodeMap.Add(TEXT("MT"), CountryCodeMT);
        _CountryCodeMap.Add(TEXT("MH"), CountryCodeMH);
        _CountryCodeMap.Add(TEXT("MQ"), CountryCodeMQ);
        _CountryCodeMap.Add(TEXT("MR"), CountryCodeMR);
        _CountryCodeMap.Add(TEXT("MU"), CountryCodeMU);
        _CountryCodeMap.Add(TEXT("YT"), CountryCodeYT);
        _CountryCodeMap.Add(TEXT("MX"), CountryCodeMX);
        _CountryCodeMap.Add(TEXT("FM"), CountryCodeFM);
        _CountryCodeMap.Add(TEXT("MD"), CountryCodeMD);
        _CountryCodeMap.Add(TEXT("MC"), CountryCodeMC);
        _CountryCodeMap.Add(TEXT("MN"), CountryCodeMN);
        _CountryCodeMap.Add(TEXT("ME"), CountryCodeME);
        _CountryCodeMap.Add(TEXT("MS"), CountryCodeMS);
        _CountryCodeMap.Add(TEXT("MA"), CountryCodeMA);
        _CountryCodeMap.Add(TEXT("MZ"), CountryCodeMZ);
        _CountryCodeMap.Add(TEXT("MM"), CountryCodeMM);
        _CountryCodeMap.Add(TEXT("NA"), CountryCodeNA);
        _CountryCodeMap.Add(TEXT("NR"), CountryCodeNR);
        _CountryCodeMap.Add(TEXT("NP"), CountryCodeNP);
        _CountryCodeMap.Add(TEXT("NL"), CountryCodeNL);
        _CountryCodeMap.Add(TEXT("NC"), CountryCodeNC);
        _CountryCodeMap.Add(TEXT("NZ"), CountryCodeNZ);
        _CountryCodeMap.Add(TEXT("NI"), CountryCodeNI);
        _CountryCodeMap.Add(TEXT("NE"), CountryCodeNE);
        _CountryCodeMap.Add(TEXT("NG"), CountryCodeNG);
        _CountryCodeMap.Add(TEXT("NU"), CountryCodeNU);
        _CountryCodeMap.Add(TEXT("NF"), CountryCodeNF);
        _CountryCodeMap.Add(TEXT("MP"), CountryCodeMP);
        _CountryCodeMap.Add(TEXT("NO"), CountryCodeNO);
        _CountryCodeMap.Add(TEXT("OM"), CountryCodeOM);
        _CountryCodeMap.Add(TEXT("PK"), CountryCodePK);
        _CountryCodeMap.Add(TEXT("PW"), CountryCodePW);
        _CountryCodeMap.Add(TEXT("PS"), CountryCodePS);
        _CountryCodeMap.Add(TEXT("PA"), CountryCodePA);
        _CountryCodeMap.Add(TEXT("PG"), CountryCodePG);
        _CountryCodeMap.Add(TEXT("PY"), CountryCodePY);
        _CountryCodeMap.Add(TEXT("PE"), CountryCodePE);
        _CountryCodeMap.Add(TEXT("PH"), CountryCodePH);
        _CountryCodeMap.Add(TEXT("PN"), CountryCodePN);
        _CountryCodeMap.Add(TEXT("PL"), CountryCodePL);
        _CountryCodeMap.Add(TEXT("PT"), CountryCodePT);
        _CountryCodeMap.Add(TEXT("PR"), CountryCodePR);
        _CountryCodeMap.Add(TEXT("QA"), CountryCodeQA);
        _CountryCodeMap.Add(TEXT("RE"), CountryCodeRE);
        _CountryCodeMap.Add(TEXT("RO"), CountryCodeRO);
        _CountryCodeMap.Add(TEXT("RU"), CountryCodeRU);
        _CountryCodeMap.Add(TEXT("RW"), CountryCodeRW);
        _CountryCodeMap.Add(TEXT("BL"), CountryCodeBL);
        _CountryCodeMap.Add(TEXT("SH"), CountryCodeSH);
        _CountryCodeMap.Add(TEXT("KN"), CountryCodeKN);
        _CountryCodeMap.Add(TEXT("LC"), CountryCodeLC);
        _CountryCodeMap.Add(TEXT("MF"), CountryCodeMF);
        _CountryCodeMap.Add(TEXT("PM"), CountryCodePM);
        _CountryCodeMap.Add(TEXT("VC"), CountryCodeVC);
        _CountryCodeMap.Add(TEXT("WS"), CountryCodeWS);
        _CountryCodeMap.Add(TEXT("SM"), CountryCodeSM);
        _CountryCodeMap.Add(TEXT("ST"), CountryCodeST);
        _CountryCodeMap.Add(TEXT("SA"), CountryCodeSA);
        _CountryCodeMap.Add(TEXT("SN"), CountryCodeSN);
        _CountryCodeMap.Add(TEXT("RS"), CountryCodeRS);
        _CountryCodeMap.Add(TEXT("SC"), CountryCodeSC);
        _CountryCodeMap.Add(TEXT("SL"), CountryCodeSL);
        _CountryCodeMap.Add(TEXT("SG"), CountryCodeSG);
        _CountryCodeMap.Add(TEXT("SX"), CountryCodeSX);
        _CountryCodeMap.Add(TEXT("SK"), CountryCodeSK);
        _CountryCodeMap.Add(TEXT("SI"), CountryCodeSI);
        _CountryCodeMap.Add(TEXT("SB"), CountryCodeSB);
        _CountryCodeMap.Add(TEXT("SO"), CountryCodeSO);
        _CountryCodeMap.Add(TEXT("ZA"), CountryCodeZA);
        _CountryCodeMap.Add(TEXT("GS"), CountryCodeGS);
        _CountryCodeMap.Add(TEXT("SS"), CountryCodeSS);
        _CountryCodeMap.Add(TEXT("ES"), CountryCodeES);
        _CountryCodeMap.Add(TEXT("LK"), CountryCodeLK);
        _CountryCodeMap.Add(TEXT("SD"), CountryCodeSD);
        _CountryCodeMap.Add(TEXT("SR"), CountryCodeSR);
        _CountryCodeMap.Add(TEXT("SJ"), CountryCodeSJ);
        _CountryCodeMap.Add(TEXT("SZ"), CountryCodeSZ);
        _CountryCodeMap.Add(TEXT("SE"), CountryCodeSE);
        _CountryCodeMap.Add(TEXT("CH"), CountryCodeCH);
        _CountryCodeMap.Add(TEXT("SY"), CountryCodeSY);
        _CountryCodeMap.Add(TEXT("TW"), CountryCodeTW);
        _CountryCodeMap.Add(TEXT("TJ"), CountryCodeTJ);
        _CountryCodeMap.Add(TEXT("TZ"), CountryCodeTZ);
        _CountryCodeMap.Add(TEXT("TH"), CountryCodeTH);
        _CountryCodeMap.Add(TEXT("TL"), CountryCodeTL);
        _CountryCodeMap.Add(TEXT("TG"), CountryCodeTG);
        _CountryCodeMap.Add(TEXT("TK"), CountryCodeTK);
        _CountryCodeMap.Add(TEXT("TO"), CountryCodeTO);
        _CountryCodeMap.Add(TEXT("TT"), CountryCodeTT);
        _CountryCodeMap.Add(TEXT("TN"), CountryCodeTN);
        _CountryCodeMap.Add(TEXT("TR"), CountryCodeTR);
        _CountryCodeMap.Add(TEXT("TM"), CountryCodeTM);
        _CountryCodeMap.Add(TEXT("TC"), CountryCodeTC);
        _CountryCodeMap.Add(TEXT("TV"), CountryCodeTV);
        _CountryCodeMap.Add(TEXT("UG"), CountryCodeUG);
        _CountryCodeMap.Add(TEXT("UA"), CountryCodeUA);
        _CountryCodeMap.Add(TEXT("AE"), CountryCodeAE);
        _CountryCodeMap.Add(TEXT("GB"), CountryCodeGB);
        _CountryCodeMap.Add(TEXT("US"), CountryCodeUS);
        _CountryCodeMap.Add(TEXT("UM"), CountryCodeUM);
        _CountryCodeMap.Add(TEXT("UY"), CountryCodeUY);
        _CountryCodeMap.Add(TEXT("UZ"), CountryCodeUZ);
        _CountryCodeMap.Add(TEXT("VU"), CountryCodeVU);
        _CountryCodeMap.Add(TEXT("VE"), CountryCodeVE);
        _CountryCodeMap.Add(TEXT("VN"), CountryCodeVN);
        _CountryCodeMap.Add(TEXT("VG"), CountryCodeVG);
        _CountryCodeMap.Add(TEXT("VI"), CountryCodeVI);
        _CountryCodeMap.Add(TEXT("WF"), CountryCodeWF);
        _CountryCodeMap.Add(TEXT("EH"), CountryCodeEH);
        _CountryCodeMap.Add(TEXT("YE"), CountryCodeYE);
        _CountryCodeMap.Add(TEXT("ZM"), CountryCodeZM);
        _CountryCodeMap.Add(TEXT("ZW"), CountryCodeZW);

    }

    if (!value.IsEmpty())
    {
        auto output = _CountryCodeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return CountryCodeAF; // Basically critical fail
}

PlayFab::AdminModels::FCreateActionsOnPlayerSegmentTaskRequest::~FCreateActionsOnPlayerSegmentTaskRequest()
{

}

void PlayFab::AdminModels::FCreateActionsOnPlayerSegmentTaskRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    writer->WriteIdentifierPrefix(TEXT("IsActive"));
    writer->WriteValue(IsActive);

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateActionsOnPlayerSegmentTaskRequest::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteIdentifierPrefix(TEXT("Parameter"));
    Parameter.writeJSON(writer);

    if (Schedule.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Schedule"));
        writer->WriteValue(Schedule);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCreateActionsOnPlayerSegmentTaskRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IsActiveValue = obj->TryGetField(TEXT("IsActive"));
    if (IsActiveValue.IsValid() && !IsActiveValue->IsNull())
    {
        bool TmpValue;
        if (IsActiveValue->TryGetBool(TmpValue)) { IsActive = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ParameterValue = obj->TryGetField(TEXT("Parameter"));
    if (ParameterValue.IsValid() && !ParameterValue->IsNull())
    {
        Parameter = FActionsOnPlayersInSegmentTaskParameter(ParameterValue->AsObject());
    }

    const TSharedPtr<FJsonValue> ScheduleValue = obj->TryGetField(TEXT("Schedule"));
    if (ScheduleValue.IsValid() && !ScheduleValue->IsNull())
    {
        FString TmpValue;
        if (ScheduleValue->TryGetString(TmpValue)) { Schedule = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCreateCloudScriptTaskRequest::~FCreateCloudScriptTaskRequest()
{

}

void PlayFab::AdminModels::FCreateCloudScriptTaskRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    writer->WriteIdentifierPrefix(TEXT("IsActive"));
    writer->WriteValue(IsActive);

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateCloudScriptTaskRequest::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteIdentifierPrefix(TEXT("Parameter"));
    Parameter.writeJSON(writer);

    if (Schedule.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Schedule"));
        writer->WriteValue(Schedule);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCreateCloudScriptTaskRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IsActiveValue = obj->TryGetField(TEXT("IsActive"));
    if (IsActiveValue.IsValid() && !IsActiveValue->IsNull())
    {
        bool TmpValue;
        if (IsActiveValue->TryGetBool(TmpValue)) { IsActive = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ParameterValue = obj->TryGetField(TEXT("Parameter"));
    if (ParameterValue.IsValid() && !ParameterValue->IsNull())
    {
        Parameter = FCloudScriptTaskParameter(ParameterValue->AsObject());
    }

    const TSharedPtr<FJsonValue> ScheduleValue = obj->TryGetField(TEXT("Schedule"));
    if (ScheduleValue.IsValid() && !ScheduleValue->IsNull())
    {
        FString TmpValue;
        if (ScheduleValue->TryGetString(TmpValue)) { Schedule = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FInsightsScalingTaskParameter::~FInsightsScalingTaskParameter()
{

}

void PlayFab::AdminModels::FInsightsScalingTaskParameter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Level"));
    writer->WriteValue(Level);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FInsightsScalingTaskParameter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> LevelValue = obj->TryGetField(TEXT("Level"));
    if (LevelValue.IsValid() && !LevelValue->IsNull())
    {
        int32 TmpValue;
        if (LevelValue->TryGetNumber(TmpValue)) { Level = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCreateInsightsScheduledScalingTaskRequest::~FCreateInsightsScheduledScalingTaskRequest()
{

}

void PlayFab::AdminModels::FCreateInsightsScheduledScalingTaskRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    writer->WriteIdentifierPrefix(TEXT("IsActive"));
    writer->WriteValue(IsActive);

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateInsightsScheduledScalingTaskRequest::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteIdentifierPrefix(TEXT("Parameter"));
    Parameter.writeJSON(writer);

    if (Schedule.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Schedule"));
        writer->WriteValue(Schedule);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCreateInsightsScheduledScalingTaskRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IsActiveValue = obj->TryGetField(TEXT("IsActive"));
    if (IsActiveValue.IsValid() && !IsActiveValue->IsNull())
    {
        bool TmpValue;
        if (IsActiveValue->TryGetBool(TmpValue)) { IsActive = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ParameterValue = obj->TryGetField(TEXT("Parameter"));
    if (ParameterValue.IsValid() && !ParameterValue->IsNull())
    {
        Parameter = FInsightsScalingTaskParameter(ParameterValue->AsObject());
    }

    const TSharedPtr<FJsonValue> ScheduleValue = obj->TryGetField(TEXT("Schedule"));
    if (ScheduleValue.IsValid() && !ScheduleValue->IsNull())
    {
        FString TmpValue;
        if (ScheduleValue->TryGetString(TmpValue)) { Schedule = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FOpenIdIssuerInformation::~FOpenIdIssuerInformation()
{

}

void PlayFab::AdminModels::FOpenIdIssuerInformation::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!AuthorizationUrl.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: OpenIdIssuerInformation::AuthorizationUrl, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("AuthorizationUrl"));
        writer->WriteValue(AuthorizationUrl);
    }

    if (!Issuer.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: OpenIdIssuerInformation::Issuer, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Issuer"));
        writer->WriteValue(Issuer);
    }

    writer->WriteIdentifierPrefix(TEXT("JsonWebKeySet"));
    JsonWebKeySet.writeJSON(writer);

    if (!TokenUrl.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: OpenIdIssuerInformation::TokenUrl, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("TokenUrl"));
        writer->WriteValue(TokenUrl);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FOpenIdIssuerInformation::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AuthorizationUrlValue = obj->TryGetField(TEXT("AuthorizationUrl"));
    if (AuthorizationUrlValue.IsValid() && !AuthorizationUrlValue->IsNull())
    {
        FString TmpValue;
        if (AuthorizationUrlValue->TryGetString(TmpValue)) { AuthorizationUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IssuerValue = obj->TryGetField(TEXT("Issuer"));
    if (IssuerValue.IsValid() && !IssuerValue->IsNull())
    {
        FString TmpValue;
        if (IssuerValue->TryGetString(TmpValue)) { Issuer = TmpValue; }
    }

    const TSharedPtr<FJsonValue> JsonWebKeySetValue = obj->TryGetField(TEXT("JsonWebKeySet"));
    if (JsonWebKeySetValue.IsValid() && !JsonWebKeySetValue->IsNull())
    {
        JsonWebKeySet = FJsonKeeper(JsonWebKeySetValue);
    }

    const TSharedPtr<FJsonValue> TokenUrlValue = obj->TryGetField(TEXT("TokenUrl"));
    if (TokenUrlValue.IsValid() && !TokenUrlValue->IsNull())
    {
        FString TmpValue;
        if (TokenUrlValue->TryGetString(TmpValue)) { TokenUrl = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCreateOpenIdConnectionRequest::~FCreateOpenIdConnectionRequest()
{
    //if (IssuerInformation != nullptr) delete IssuerInformation;

}

void PlayFab::AdminModels::FCreateOpenIdConnectionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!ClientId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateOpenIdConnectionRequest::ClientId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ClientId"));
        writer->WriteValue(ClientId);
    }

    if (!ClientSecret.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateOpenIdConnectionRequest::ClientSecret, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ClientSecret"));
        writer->WriteValue(ClientSecret);
    }

    if (!ConnectionId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateOpenIdConnectionRequest::ConnectionId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ConnectionId"));
        writer->WriteValue(ConnectionId);
    }

    if (IgnoreNonce.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IgnoreNonce"));
        writer->WriteValue(IgnoreNonce);
    }

    if (IssuerDiscoveryUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IssuerDiscoveryUrl"));
        writer->WriteValue(IssuerDiscoveryUrl);
    }

    if (IssuerInformation.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("IssuerInformation"));
        IssuerInformation->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCreateOpenIdConnectionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ClientIdValue = obj->TryGetField(TEXT("ClientId"));
    if (ClientIdValue.IsValid() && !ClientIdValue->IsNull())
    {
        FString TmpValue;
        if (ClientIdValue->TryGetString(TmpValue)) { ClientId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ClientSecretValue = obj->TryGetField(TEXT("ClientSecret"));
    if (ClientSecretValue.IsValid() && !ClientSecretValue->IsNull())
    {
        FString TmpValue;
        if (ClientSecretValue->TryGetString(TmpValue)) { ClientSecret = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ConnectionIdValue = obj->TryGetField(TEXT("ConnectionId"));
    if (ConnectionIdValue.IsValid() && !ConnectionIdValue->IsNull())
    {
        FString TmpValue;
        if (ConnectionIdValue->TryGetString(TmpValue)) { ConnectionId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IgnoreNonceValue = obj->TryGetField(TEXT("IgnoreNonce"));
    if (IgnoreNonceValue.IsValid() && !IgnoreNonceValue->IsNull())
    {
        bool TmpValue;
        if (IgnoreNonceValue->TryGetBool(TmpValue)) { IgnoreNonce = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IssuerDiscoveryUrlValue = obj->TryGetField(TEXT("IssuerDiscoveryUrl"));
    if (IssuerDiscoveryUrlValue.IsValid() && !IssuerDiscoveryUrlValue->IsNull())
    {
        FString TmpValue;
        if (IssuerDiscoveryUrlValue->TryGetString(TmpValue)) { IssuerDiscoveryUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IssuerInformationValue = obj->TryGetField(TEXT("IssuerInformation"));
    if (IssuerInformationValue.IsValid() && !IssuerInformationValue->IsNull())
    {
        IssuerInformation = MakeShareable(new FOpenIdIssuerInformation(IssuerInformationValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCreatePlayerSharedSecretRequest::~FCreatePlayerSharedSecretRequest()
{

}

void PlayFab::AdminModels::FCreatePlayerSharedSecretRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FriendlyName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FriendlyName"));
        writer->WriteValue(FriendlyName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCreatePlayerSharedSecretRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FriendlyNameValue = obj->TryGetField(TEXT("FriendlyName"));
    if (FriendlyNameValue.IsValid() && !FriendlyNameValue->IsNull())
    {
        FString TmpValue;
        if (FriendlyNameValue->TryGetString(TmpValue)) { FriendlyName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCreatePlayerSharedSecretResult::~FCreatePlayerSharedSecretResult()
{

}

void PlayFab::AdminModels::FCreatePlayerSharedSecretResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (SecretKey.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SecretKey"));
        writer->WriteValue(SecretKey);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCreatePlayerSharedSecretResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> SecretKeyValue = obj->TryGetField(TEXT("SecretKey"));
    if (SecretKeyValue.IsValid() && !SecretKeyValue->IsNull())
    {
        FString TmpValue;
        if (SecretKeyValue->TryGetString(TmpValue)) { SecretKey = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeStatisticAggregationMethodEnumJSON(StatisticAggregationMethod enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case StatisticAggregationMethodLast: writer->WriteValue(TEXT("Last")); break;
    case StatisticAggregationMethodMin: writer->WriteValue(TEXT("Min")); break;
    case StatisticAggregationMethodMax: writer->WriteValue(TEXT("Max")); break;
    case StatisticAggregationMethodSum: writer->WriteValue(TEXT("Sum")); break;
    }
}

AdminModels::StatisticAggregationMethod PlayFab::AdminModels::readStatisticAggregationMethodFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readStatisticAggregationMethodFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::StatisticAggregationMethod PlayFab::AdminModels::readStatisticAggregationMethodFromValue(const FString& value)
{
    static TMap<FString, StatisticAggregationMethod> _StatisticAggregationMethodMap;
    if (_StatisticAggregationMethodMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _StatisticAggregationMethodMap.Add(TEXT("Last"), StatisticAggregationMethodLast);
        _StatisticAggregationMethodMap.Add(TEXT("Min"), StatisticAggregationMethodMin);
        _StatisticAggregationMethodMap.Add(TEXT("Max"), StatisticAggregationMethodMax);
        _StatisticAggregationMethodMap.Add(TEXT("Sum"), StatisticAggregationMethodSum);

    }

    if (!value.IsEmpty())
    {
        auto output = _StatisticAggregationMethodMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return StatisticAggregationMethodLast; // Basically critical fail
}

void PlayFab::AdminModels::writeStatisticResetIntervalOptionEnumJSON(StatisticResetIntervalOption enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case StatisticResetIntervalOptionNever: writer->WriteValue(TEXT("Never")); break;
    case StatisticResetIntervalOptionHour: writer->WriteValue(TEXT("Hour")); break;
    case StatisticResetIntervalOptionDay: writer->WriteValue(TEXT("Day")); break;
    case StatisticResetIntervalOptionWeek: writer->WriteValue(TEXT("Week")); break;
    case StatisticResetIntervalOptionMonth: writer->WriteValue(TEXT("Month")); break;
    }
}

AdminModels::StatisticResetIntervalOption PlayFab::AdminModels::readStatisticResetIntervalOptionFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readStatisticResetIntervalOptionFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::StatisticResetIntervalOption PlayFab::AdminModels::readStatisticResetIntervalOptionFromValue(const FString& value)
{
    static TMap<FString, StatisticResetIntervalOption> _StatisticResetIntervalOptionMap;
    if (_StatisticResetIntervalOptionMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _StatisticResetIntervalOptionMap.Add(TEXT("Never"), StatisticResetIntervalOptionNever);
        _StatisticResetIntervalOptionMap.Add(TEXT("Hour"), StatisticResetIntervalOptionHour);
        _StatisticResetIntervalOptionMap.Add(TEXT("Day"), StatisticResetIntervalOptionDay);
        _StatisticResetIntervalOptionMap.Add(TEXT("Week"), StatisticResetIntervalOptionWeek);
        _StatisticResetIntervalOptionMap.Add(TEXT("Month"), StatisticResetIntervalOptionMonth);

    }

    if (!value.IsEmpty())
    {
        auto output = _StatisticResetIntervalOptionMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return StatisticResetIntervalOptionNever; // Basically critical fail
}

PlayFab::AdminModels::FCreatePlayerStatisticDefinitionRequest::~FCreatePlayerStatisticDefinitionRequest()
{

}

void PlayFab::AdminModels::FCreatePlayerStatisticDefinitionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AggregationMethod.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("AggregationMethod"));
        writeStatisticAggregationMethodEnumJSON(AggregationMethod, writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!StatisticName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreatePlayerStatisticDefinitionRequest::StatisticName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    if (VersionChangeInterval.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("VersionChangeInterval"));
        writeStatisticResetIntervalOptionEnumJSON(VersionChangeInterval, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCreatePlayerStatisticDefinitionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    AggregationMethod = readStatisticAggregationMethodFromValue(obj->TryGetField(TEXT("AggregationMethod")));

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    VersionChangeInterval = readStatisticResetIntervalOptionFromValue(obj->TryGetField(TEXT("VersionChangeInterval")));

    return HasSucceeded;
}

PlayFab::AdminModels::FPlayerStatisticDefinition::~FPlayerStatisticDefinition()
{

}

void PlayFab::AdminModels::FPlayerStatisticDefinition::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AggregationMethod.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("AggregationMethod"));
        writeStatisticAggregationMethodEnumJSON(AggregationMethod, writer);
    }

    writer->WriteIdentifierPrefix(TEXT("CurrentVersion"));
    writer->WriteValue(static_cast<int64>(CurrentVersion));

    if (StatisticName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    if (VersionChangeInterval.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("VersionChangeInterval"));
        writeStatisticResetIntervalOptionEnumJSON(VersionChangeInterval, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FPlayerStatisticDefinition::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    AggregationMethod = readStatisticAggregationMethodFromValue(obj->TryGetField(TEXT("AggregationMethod")));

    const TSharedPtr<FJsonValue> CurrentVersionValue = obj->TryGetField(TEXT("CurrentVersion"));
    if (CurrentVersionValue.IsValid() && !CurrentVersionValue->IsNull())
    {
        uint32 TmpValue;
        if (CurrentVersionValue->TryGetNumber(TmpValue)) { CurrentVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    VersionChangeInterval = readStatisticResetIntervalOptionFromValue(obj->TryGetField(TEXT("VersionChangeInterval")));

    return HasSucceeded;
}

PlayFab::AdminModels::FCreatePlayerStatisticDefinitionResult::~FCreatePlayerStatisticDefinitionResult()
{
    //if (Statistic != nullptr) delete Statistic;

}

void PlayFab::AdminModels::FCreatePlayerStatisticDefinitionResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Statistic.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Statistic"));
        Statistic->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCreatePlayerStatisticDefinitionResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> StatisticValue = obj->TryGetField(TEXT("Statistic"));
    if (StatisticValue.IsValid() && !StatisticValue->IsNull())
    {
        Statistic = MakeShareable(new FPlayerStatisticDefinition(StatisticValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FDeletePlayerSegmentAction::~FDeletePlayerSegmentAction()
{

}

void PlayFab::AdminModels::FDeletePlayerSegmentAction::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeletePlayerSegmentAction::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FDeletePlayerStatisticSegmentAction::~FDeletePlayerStatisticSegmentAction()
{

}

void PlayFab::AdminModels::FDeletePlayerStatisticSegmentAction::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (StatisticName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeletePlayerStatisticSegmentAction::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FEmailNotificationSegmentAction::~FEmailNotificationSegmentAction()
{

}

void PlayFab::AdminModels::FEmailNotificationSegmentAction::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (EmailTemplateId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EmailTemplateId"));
        writer->WriteValue(EmailTemplateId);
    }

    if (EmailTemplateName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EmailTemplateName"));
        writer->WriteValue(EmailTemplateName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FEmailNotificationSegmentAction::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EmailTemplateIdValue = obj->TryGetField(TEXT("EmailTemplateId"));
    if (EmailTemplateIdValue.IsValid() && !EmailTemplateIdValue->IsNull())
    {
        FString TmpValue;
        if (EmailTemplateIdValue->TryGetString(TmpValue)) { EmailTemplateId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EmailTemplateNameValue = obj->TryGetField(TEXT("EmailTemplateName"));
    if (EmailTemplateNameValue.IsValid() && !EmailTemplateNameValue->IsNull())
    {
        FString TmpValue;
        if (EmailTemplateNameValue->TryGetString(TmpValue)) { EmailTemplateName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FExecuteAzureFunctionSegmentAction::~FExecuteAzureFunctionSegmentAction()
{

}

void PlayFab::AdminModels::FExecuteAzureFunctionSegmentAction::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AzureFunction.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AzureFunction"));
        writer->WriteValue(AzureFunction);
    }

    if (FunctionParameter.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionParameter"));
        FunctionParameter.writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("GenerateFunctionExecutedEvents"));
    writer->WriteValue(GenerateFunctionExecutedEvents);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FExecuteAzureFunctionSegmentAction::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AzureFunctionValue = obj->TryGetField(TEXT("AzureFunction"));
    if (AzureFunctionValue.IsValid() && !AzureFunctionValue->IsNull())
    {
        FString TmpValue;
        if (AzureFunctionValue->TryGetString(TmpValue)) { AzureFunction = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionParameterValue = obj->TryGetField(TEXT("FunctionParameter"));
    if (FunctionParameterValue.IsValid() && !FunctionParameterValue->IsNull())
    {
        FunctionParameter = FJsonKeeper(FunctionParameterValue);
    }

    const TSharedPtr<FJsonValue> GenerateFunctionExecutedEventsValue = obj->TryGetField(TEXT("GenerateFunctionExecutedEvents"));
    if (GenerateFunctionExecutedEventsValue.IsValid() && !GenerateFunctionExecutedEventsValue->IsNull())
    {
        bool TmpValue;
        if (GenerateFunctionExecutedEventsValue->TryGetBool(TmpValue)) { GenerateFunctionExecutedEvents = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FExecuteCloudScriptSegmentAction::~FExecuteCloudScriptSegmentAction()
{

}

void PlayFab::AdminModels::FExecuteCloudScriptSegmentAction::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CloudScriptFunction.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CloudScriptFunction"));
        writer->WriteValue(CloudScriptFunction);
    }

    writer->WriteIdentifierPrefix(TEXT("CloudScriptPublishResultsToPlayStream"));
    writer->WriteValue(CloudScriptPublishResultsToPlayStream);

    if (FunctionParameter.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionParameter"));
        FunctionParameter.writeJSON(writer);
    }

    if (FunctionParameterJson.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionParameterJson"));
        writer->WriteValue(FunctionParameterJson);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FExecuteCloudScriptSegmentAction::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CloudScriptFunctionValue = obj->TryGetField(TEXT("CloudScriptFunction"));
    if (CloudScriptFunctionValue.IsValid() && !CloudScriptFunctionValue->IsNull())
    {
        FString TmpValue;
        if (CloudScriptFunctionValue->TryGetString(TmpValue)) { CloudScriptFunction = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CloudScriptPublishResultsToPlayStreamValue = obj->TryGetField(TEXT("CloudScriptPublishResultsToPlayStream"));
    if (CloudScriptPublishResultsToPlayStreamValue.IsValid() && !CloudScriptPublishResultsToPlayStreamValue->IsNull())
    {
        bool TmpValue;
        if (CloudScriptPublishResultsToPlayStreamValue->TryGetBool(TmpValue)) { CloudScriptPublishResultsToPlayStream = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionParameterValue = obj->TryGetField(TEXT("FunctionParameter"));
    if (FunctionParameterValue.IsValid() && !FunctionParameterValue->IsNull())
    {
        FunctionParameter = FJsonKeeper(FunctionParameterValue);
    }

    const TSharedPtr<FJsonValue> FunctionParameterJsonValue = obj->TryGetField(TEXT("FunctionParameterJson"));
    if (FunctionParameterJsonValue.IsValid() && !FunctionParameterJsonValue->IsNull())
    {
        FString TmpValue;
        if (FunctionParameterJsonValue->TryGetString(TmpValue)) { FunctionParameterJson = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGrantItemSegmentAction::~FGrantItemSegmentAction()
{

}

void PlayFab::AdminModels::FGrantItemSegmentAction::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatelogId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatelogId"));
        writer->WriteValue(CatelogId);
    }

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    writer->WriteIdentifierPrefix(TEXT("Quantity"));
    writer->WriteValue(static_cast<int64>(Quantity));

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGrantItemSegmentAction::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatelogIdValue = obj->TryGetField(TEXT("CatelogId"));
    if (CatelogIdValue.IsValid() && !CatelogIdValue->IsNull())
    {
        FString TmpValue;
        if (CatelogIdValue->TryGetString(TmpValue)) { CatelogId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> QuantityValue = obj->TryGetField(TEXT("Quantity"));
    if (QuantityValue.IsValid() && !QuantityValue->IsNull())
    {
        uint32 TmpValue;
        if (QuantityValue->TryGetNumber(TmpValue)) { Quantity = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGrantVirtualCurrencySegmentAction::~FGrantVirtualCurrencySegmentAction()
{

}

void PlayFab::AdminModels::FGrantVirtualCurrencySegmentAction::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (CurrencyCode.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CurrencyCode"));
        writer->WriteValue(CurrencyCode);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGrantVirtualCurrencySegmentAction::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CurrencyCodeValue = obj->TryGetField(TEXT("CurrencyCode"));
    if (CurrencyCodeValue.IsValid() && !CurrencyCodeValue->IsNull())
    {
        FString TmpValue;
        if (CurrencyCodeValue->TryGetString(TmpValue)) { CurrencyCode = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FIncrementPlayerStatisticSegmentAction::~FIncrementPlayerStatisticSegmentAction()
{

}

void PlayFab::AdminModels::FIncrementPlayerStatisticSegmentAction::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("IncrementValue"));
    writer->WriteValue(IncrementValue);

    if (StatisticName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FIncrementPlayerStatisticSegmentAction::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IncrementValueValue = obj->TryGetField(TEXT("IncrementValue"));
    if (IncrementValueValue.IsValid() && !IncrementValueValue->IsNull())
    {
        int32 TmpValue;
        if (IncrementValueValue->TryGetNumber(TmpValue)) { IncrementValue = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FPushNotificationSegmentAction::~FPushNotificationSegmentAction()
{

}

void PlayFab::AdminModels::FPushNotificationSegmentAction::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PushNotificationTemplateId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PushNotificationTemplateId"));
        writer->WriteValue(PushNotificationTemplateId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FPushNotificationSegmentAction::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PushNotificationTemplateIdValue = obj->TryGetField(TEXT("PushNotificationTemplateId"));
    if (PushNotificationTemplateIdValue.IsValid() && !PushNotificationTemplateIdValue->IsNull())
    {
        FString TmpValue;
        if (PushNotificationTemplateIdValue->TryGetString(TmpValue)) { PushNotificationTemplateId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FSegmentTrigger::~FSegmentTrigger()
{
    //if (BanPlayerAction != nullptr) delete BanPlayerAction;
    //if (DeletePlayerAction != nullptr) delete DeletePlayerAction;
    //if (DeletePlayerStatisticAction != nullptr) delete DeletePlayerStatisticAction;
    //if (EmailNotificationAction != nullptr) delete EmailNotificationAction;
    //if (ExecuteAzureFunctionAction != nullptr) delete ExecuteAzureFunctionAction;
    //if (ExecuteCloudScriptAction != nullptr) delete ExecuteCloudScriptAction;
    //if (GrantItemAction != nullptr) delete GrantItemAction;
    //if (GrantVirtualCurrencyAction != nullptr) delete GrantVirtualCurrencyAction;
    //if (IncrementPlayerStatisticAction != nullptr) delete IncrementPlayerStatisticAction;
    //if (PushNotificationAction != nullptr) delete PushNotificationAction;

}

void PlayFab::AdminModels::FSegmentTrigger::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BanPlayerAction.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("BanPlayerAction"));
        BanPlayerAction->writeJSON(writer);
    }

    if (DeletePlayerAction.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("DeletePlayerAction"));
        DeletePlayerAction->writeJSON(writer);
    }

    if (DeletePlayerStatisticAction.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("DeletePlayerStatisticAction"));
        DeletePlayerStatisticAction->writeJSON(writer);
    }

    if (EmailNotificationAction.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("EmailNotificationAction"));
        EmailNotificationAction->writeJSON(writer);
    }

    if (ExecuteAzureFunctionAction.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("ExecuteAzureFunctionAction"));
        ExecuteAzureFunctionAction->writeJSON(writer);
    }

    if (ExecuteCloudScriptAction.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("ExecuteCloudScriptAction"));
        ExecuteCloudScriptAction->writeJSON(writer);
    }

    if (GrantItemAction.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("GrantItemAction"));
        GrantItemAction->writeJSON(writer);
    }

    if (GrantVirtualCurrencyAction.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("GrantVirtualCurrencyAction"));
        GrantVirtualCurrencyAction->writeJSON(writer);
    }

    if (IncrementPlayerStatisticAction.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("IncrementPlayerStatisticAction"));
        IncrementPlayerStatisticAction->writeJSON(writer);
    }

    if (PushNotificationAction.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("PushNotificationAction"));
        PushNotificationAction->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSegmentTrigger::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BanPlayerActionValue = obj->TryGetField(TEXT("BanPlayerAction"));
    if (BanPlayerActionValue.IsValid() && !BanPlayerActionValue->IsNull())
    {
        BanPlayerAction = MakeShareable(new FBanPlayerSegmentAction(BanPlayerActionValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> DeletePlayerActionValue = obj->TryGetField(TEXT("DeletePlayerAction"));
    if (DeletePlayerActionValue.IsValid() && !DeletePlayerActionValue->IsNull())
    {
        DeletePlayerAction = MakeShareable(new FDeletePlayerSegmentAction(DeletePlayerActionValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> DeletePlayerStatisticActionValue = obj->TryGetField(TEXT("DeletePlayerStatisticAction"));
    if (DeletePlayerStatisticActionValue.IsValid() && !DeletePlayerStatisticActionValue->IsNull())
    {
        DeletePlayerStatisticAction = MakeShareable(new FDeletePlayerStatisticSegmentAction(DeletePlayerStatisticActionValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> EmailNotificationActionValue = obj->TryGetField(TEXT("EmailNotificationAction"));
    if (EmailNotificationActionValue.IsValid() && !EmailNotificationActionValue->IsNull())
    {
        EmailNotificationAction = MakeShareable(new FEmailNotificationSegmentAction(EmailNotificationActionValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ExecuteAzureFunctionActionValue = obj->TryGetField(TEXT("ExecuteAzureFunctionAction"));
    if (ExecuteAzureFunctionActionValue.IsValid() && !ExecuteAzureFunctionActionValue->IsNull())
    {
        ExecuteAzureFunctionAction = MakeShareable(new FExecuteAzureFunctionSegmentAction(ExecuteAzureFunctionActionValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ExecuteCloudScriptActionValue = obj->TryGetField(TEXT("ExecuteCloudScriptAction"));
    if (ExecuteCloudScriptActionValue.IsValid() && !ExecuteCloudScriptActionValue->IsNull())
    {
        ExecuteCloudScriptAction = MakeShareable(new FExecuteCloudScriptSegmentAction(ExecuteCloudScriptActionValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GrantItemActionValue = obj->TryGetField(TEXT("GrantItemAction"));
    if (GrantItemActionValue.IsValid() && !GrantItemActionValue->IsNull())
    {
        GrantItemAction = MakeShareable(new FGrantItemSegmentAction(GrantItemActionValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GrantVirtualCurrencyActionValue = obj->TryGetField(TEXT("GrantVirtualCurrencyAction"));
    if (GrantVirtualCurrencyActionValue.IsValid() && !GrantVirtualCurrencyActionValue->IsNull())
    {
        GrantVirtualCurrencyAction = MakeShareable(new FGrantVirtualCurrencySegmentAction(GrantVirtualCurrencyActionValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IncrementPlayerStatisticActionValue = obj->TryGetField(TEXT("IncrementPlayerStatisticAction"));
    if (IncrementPlayerStatisticActionValue.IsValid() && !IncrementPlayerStatisticActionValue->IsNull())
    {
        IncrementPlayerStatisticAction = MakeShareable(new FIncrementPlayerStatisticSegmentAction(IncrementPlayerStatisticActionValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> PushNotificationActionValue = obj->TryGetField(TEXT("PushNotificationAction"));
    if (PushNotificationActionValue.IsValid() && !PushNotificationActionValue->IsNull())
    {
        PushNotificationAction = MakeShareable(new FPushNotificationSegmentAction(PushNotificationActionValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FFirstLoginDateSegmentFilter::~FFirstLoginDateSegmentFilter()
{

}

void PlayFab::AdminModels::FFirstLoginDateSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Comparison.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Comparison"));
        writeSegmentFilterComparisonEnumJSON(Comparison, writer);
    }

    writer->WriteIdentifierPrefix(TEXT("LogInDate"));
    writeDatetime(LogInDate, writer);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FFirstLoginDateSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    Comparison = readSegmentFilterComparisonFromValue(obj->TryGetField(TEXT("Comparison")));

    const TSharedPtr<FJsonValue> LogInDateValue = obj->TryGetField(TEXT("LogInDate"));
    if (LogInDateValue.IsValid())
        LogInDate = readDatetime(LogInDateValue);


    return HasSucceeded;
}

PlayFab::AdminModels::FFirstLoginTimespanSegmentFilter::~FFirstLoginTimespanSegmentFilter()
{

}

void PlayFab::AdminModels::FFirstLoginTimespanSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Comparison.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Comparison"));
        writeSegmentFilterComparisonEnumJSON(Comparison, writer);
    }

    writer->WriteIdentifierPrefix(TEXT("DurationInMinutes"));
    writer->WriteValue(DurationInMinutes);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FFirstLoginTimespanSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    Comparison = readSegmentFilterComparisonFromValue(obj->TryGetField(TEXT("Comparison")));

    const TSharedPtr<FJsonValue> DurationInMinutesValue = obj->TryGetField(TEXT("DurationInMinutes"));
    if (DurationInMinutesValue.IsValid() && !DurationInMinutesValue->IsNull())
    {
        double TmpValue;
        if (DurationInMinutesValue->TryGetNumber(TmpValue)) { DurationInMinutes = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FLastLoginDateSegmentFilter::~FLastLoginDateSegmentFilter()
{

}

void PlayFab::AdminModels::FLastLoginDateSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Comparison.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Comparison"));
        writeSegmentFilterComparisonEnumJSON(Comparison, writer);
    }

    writer->WriteIdentifierPrefix(TEXT("LogInDate"));
    writeDatetime(LogInDate, writer);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FLastLoginDateSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    Comparison = readSegmentFilterComparisonFromValue(obj->TryGetField(TEXT("Comparison")));

    const TSharedPtr<FJsonValue> LogInDateValue = obj->TryGetField(TEXT("LogInDate"));
    if (LogInDateValue.IsValid())
        LogInDate = readDatetime(LogInDateValue);


    return HasSucceeded;
}

PlayFab::AdminModels::FLastLoginTimespanSegmentFilter::~FLastLoginTimespanSegmentFilter()
{

}

void PlayFab::AdminModels::FLastLoginTimespanSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Comparison.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Comparison"));
        writeSegmentFilterComparisonEnumJSON(Comparison, writer);
    }

    writer->WriteIdentifierPrefix(TEXT("DurationInMinutes"));
    writer->WriteValue(DurationInMinutes);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FLastLoginTimespanSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    Comparison = readSegmentFilterComparisonFromValue(obj->TryGetField(TEXT("Comparison")));

    const TSharedPtr<FJsonValue> DurationInMinutesValue = obj->TryGetField(TEXT("DurationInMinutes"));
    if (DurationInMinutesValue.IsValid() && !DurationInMinutesValue->IsNull())
    {
        double TmpValue;
        if (DurationInMinutesValue->TryGetNumber(TmpValue)) { DurationInMinutes = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeSegmentLoginIdentityProviderEnumJSON(SegmentLoginIdentityProvider enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case SegmentLoginIdentityProviderUnknown: writer->WriteValue(TEXT("Unknown")); break;
    case SegmentLoginIdentityProviderPlayFab: writer->WriteValue(TEXT("PlayFab")); break;
    case SegmentLoginIdentityProviderCustom: writer->WriteValue(TEXT("Custom")); break;
    case SegmentLoginIdentityProviderGameCenter: writer->WriteValue(TEXT("GameCenter")); break;
    case SegmentLoginIdentityProviderGooglePlay: writer->WriteValue(TEXT("GooglePlay")); break;
    case SegmentLoginIdentityProviderSteam: writer->WriteValue(TEXT("Steam")); break;
    case SegmentLoginIdentityProviderXBoxLive: writer->WriteValue(TEXT("XBoxLive")); break;
    case SegmentLoginIdentityProviderPSN: writer->WriteValue(TEXT("PSN")); break;
    case SegmentLoginIdentityProviderKongregate: writer->WriteValue(TEXT("Kongregate")); break;
    case SegmentLoginIdentityProviderFacebook: writer->WriteValue(TEXT("Facebook")); break;
    case SegmentLoginIdentityProviderIOSDevice: writer->WriteValue(TEXT("IOSDevice")); break;
    case SegmentLoginIdentityProviderAndroidDevice: writer->WriteValue(TEXT("AndroidDevice")); break;
    case SegmentLoginIdentityProviderTwitch: writer->WriteValue(TEXT("Twitch")); break;
    case SegmentLoginIdentityProviderWindowsHello: writer->WriteValue(TEXT("WindowsHello")); break;
    case SegmentLoginIdentityProviderGameServer: writer->WriteValue(TEXT("GameServer")); break;
    case SegmentLoginIdentityProviderCustomServer: writer->WriteValue(TEXT("CustomServer")); break;
    case SegmentLoginIdentityProviderNintendoSwitch: writer->WriteValue(TEXT("NintendoSwitch")); break;
    case SegmentLoginIdentityProviderFacebookInstantGames: writer->WriteValue(TEXT("FacebookInstantGames")); break;
    case SegmentLoginIdentityProviderOpenIdConnect: writer->WriteValue(TEXT("OpenIdConnect")); break;
    case SegmentLoginIdentityProviderApple: writer->WriteValue(TEXT("Apple")); break;
    case SegmentLoginIdentityProviderNintendoSwitchAccount: writer->WriteValue(TEXT("NintendoSwitchAccount")); break;
    }
}

AdminModels::SegmentLoginIdentityProvider PlayFab::AdminModels::readSegmentLoginIdentityProviderFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readSegmentLoginIdentityProviderFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::SegmentLoginIdentityProvider PlayFab::AdminModels::readSegmentLoginIdentityProviderFromValue(const FString& value)
{
    static TMap<FString, SegmentLoginIdentityProvider> _SegmentLoginIdentityProviderMap;
    if (_SegmentLoginIdentityProviderMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _SegmentLoginIdentityProviderMap.Add(TEXT("Unknown"), SegmentLoginIdentityProviderUnknown);
        _SegmentLoginIdentityProviderMap.Add(TEXT("PlayFab"), SegmentLoginIdentityProviderPlayFab);
        _SegmentLoginIdentityProviderMap.Add(TEXT("Custom"), SegmentLoginIdentityProviderCustom);
        _SegmentLoginIdentityProviderMap.Add(TEXT("GameCenter"), SegmentLoginIdentityProviderGameCenter);
        _SegmentLoginIdentityProviderMap.Add(TEXT("GooglePlay"), SegmentLoginIdentityProviderGooglePlay);
        _SegmentLoginIdentityProviderMap.Add(TEXT("Steam"), SegmentLoginIdentityProviderSteam);
        _SegmentLoginIdentityProviderMap.Add(TEXT("XBoxLive"), SegmentLoginIdentityProviderXBoxLive);
        _SegmentLoginIdentityProviderMap.Add(TEXT("PSN"), SegmentLoginIdentityProviderPSN);
        _SegmentLoginIdentityProviderMap.Add(TEXT("Kongregate"), SegmentLoginIdentityProviderKongregate);
        _SegmentLoginIdentityProviderMap.Add(TEXT("Facebook"), SegmentLoginIdentityProviderFacebook);
        _SegmentLoginIdentityProviderMap.Add(TEXT("IOSDevice"), SegmentLoginIdentityProviderIOSDevice);
        _SegmentLoginIdentityProviderMap.Add(TEXT("AndroidDevice"), SegmentLoginIdentityProviderAndroidDevice);
        _SegmentLoginIdentityProviderMap.Add(TEXT("Twitch"), SegmentLoginIdentityProviderTwitch);
        _SegmentLoginIdentityProviderMap.Add(TEXT("WindowsHello"), SegmentLoginIdentityProviderWindowsHello);
        _SegmentLoginIdentityProviderMap.Add(TEXT("GameServer"), SegmentLoginIdentityProviderGameServer);
        _SegmentLoginIdentityProviderMap.Add(TEXT("CustomServer"), SegmentLoginIdentityProviderCustomServer);
        _SegmentLoginIdentityProviderMap.Add(TEXT("NintendoSwitch"), SegmentLoginIdentityProviderNintendoSwitch);
        _SegmentLoginIdentityProviderMap.Add(TEXT("FacebookInstantGames"), SegmentLoginIdentityProviderFacebookInstantGames);
        _SegmentLoginIdentityProviderMap.Add(TEXT("OpenIdConnect"), SegmentLoginIdentityProviderOpenIdConnect);
        _SegmentLoginIdentityProviderMap.Add(TEXT("Apple"), SegmentLoginIdentityProviderApple);
        _SegmentLoginIdentityProviderMap.Add(TEXT("NintendoSwitchAccount"), SegmentLoginIdentityProviderNintendoSwitchAccount);

    }

    if (!value.IsEmpty())
    {
        auto output = _SegmentLoginIdentityProviderMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return SegmentLoginIdentityProviderUnknown; // Basically critical fail
}

PlayFab::AdminModels::FLinkedUserAccountSegmentFilter::~FLinkedUserAccountSegmentFilter()
{

}

void PlayFab::AdminModels::FLinkedUserAccountSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (LoginProvider.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LoginProvider"));
        writeSegmentLoginIdentityProviderEnumJSON(LoginProvider, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FLinkedUserAccountSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    LoginProvider = readSegmentLoginIdentityProviderFromValue(obj->TryGetField(TEXT("LoginProvider")));

    return HasSucceeded;
}

PlayFab::AdminModels::FLinkedUserAccountHasEmailSegmentFilter::~FLinkedUserAccountHasEmailSegmentFilter()
{

}

void PlayFab::AdminModels::FLinkedUserAccountHasEmailSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Comparison.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Comparison"));
        writeSegmentFilterComparisonEnumJSON(Comparison, writer);
    }

    if (LoginProvider.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LoginProvider"));
        writeSegmentLoginIdentityProviderEnumJSON(LoginProvider, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FLinkedUserAccountHasEmailSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    Comparison = readSegmentFilterComparisonFromValue(obj->TryGetField(TEXT("Comparison")));

    LoginProvider = readSegmentLoginIdentityProviderFromValue(obj->TryGetField(TEXT("LoginProvider")));

    return HasSucceeded;
}

void PlayFab::AdminModels::writeSegmentCountryCodeEnumJSON(SegmentCountryCode enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case SegmentCountryCodeAF: writer->WriteValue(TEXT("AF")); break;
    case SegmentCountryCodeAX: writer->WriteValue(TEXT("AX")); break;
    case SegmentCountryCodeAL: writer->WriteValue(TEXT("AL")); break;
    case SegmentCountryCodeDZ: writer->WriteValue(TEXT("DZ")); break;
    case SegmentCountryCodeAS: writer->WriteValue(TEXT("AS")); break;
    case SegmentCountryCodeAD: writer->WriteValue(TEXT("AD")); break;
    case SegmentCountryCodeAO: writer->WriteValue(TEXT("AO")); break;
    case SegmentCountryCodeAI: writer->WriteValue(TEXT("AI")); break;
    case SegmentCountryCodeAQ: writer->WriteValue(TEXT("AQ")); break;
    case SegmentCountryCodeAG: writer->WriteValue(TEXT("AG")); break;
    case SegmentCountryCodeAR: writer->WriteValue(TEXT("AR")); break;
    case SegmentCountryCodeAM: writer->WriteValue(TEXT("AM")); break;
    case SegmentCountryCodeAW: writer->WriteValue(TEXT("AW")); break;
    case SegmentCountryCodeAU: writer->WriteValue(TEXT("AU")); break;
    case SegmentCountryCodeAT: writer->WriteValue(TEXT("AT")); break;
    case SegmentCountryCodeAZ: writer->WriteValue(TEXT("AZ")); break;
    case SegmentCountryCodeBS: writer->WriteValue(TEXT("BS")); break;
    case SegmentCountryCodeBH: writer->WriteValue(TEXT("BH")); break;
    case SegmentCountryCodeBD: writer->WriteValue(TEXT("BD")); break;
    case SegmentCountryCodeBB: writer->WriteValue(TEXT("BB")); break;
    case SegmentCountryCodeBY: writer->WriteValue(TEXT("BY")); break;
    case SegmentCountryCodeBE: writer->WriteValue(TEXT("BE")); break;
    case SegmentCountryCodeBZ: writer->WriteValue(TEXT("BZ")); break;
    case SegmentCountryCodeBJ: writer->WriteValue(TEXT("BJ")); break;
    case SegmentCountryCodeBM: writer->WriteValue(TEXT("BM")); break;
    case SegmentCountryCodeBT: writer->WriteValue(TEXT("BT")); break;
    case SegmentCountryCodeBO: writer->WriteValue(TEXT("BO")); break;
    case SegmentCountryCodeBQ: writer->WriteValue(TEXT("BQ")); break;
    case SegmentCountryCodeBA: writer->WriteValue(TEXT("BA")); break;
    case SegmentCountryCodeBW: writer->WriteValue(TEXT("BW")); break;
    case SegmentCountryCodeBV: writer->WriteValue(TEXT("BV")); break;
    case SegmentCountryCodeBR: writer->WriteValue(TEXT("BR")); break;
    case SegmentCountryCodeIO: writer->WriteValue(TEXT("IO")); break;
    case SegmentCountryCodeBN: writer->WriteValue(TEXT("BN")); break;
    case SegmentCountryCodeBG: writer->WriteValue(TEXT("BG")); break;
    case SegmentCountryCodeBF: writer->WriteValue(TEXT("BF")); break;
    case SegmentCountryCodeBI: writer->WriteValue(TEXT("BI")); break;
    case SegmentCountryCodeKH: writer->WriteValue(TEXT("KH")); break;
    case SegmentCountryCodeCM: writer->WriteValue(TEXT("CM")); break;
    case SegmentCountryCodeCA: writer->WriteValue(TEXT("CA")); break;
    case SegmentCountryCodeCV: writer->WriteValue(TEXT("CV")); break;
    case SegmentCountryCodeKY: writer->WriteValue(TEXT("KY")); break;
    case SegmentCountryCodeCF: writer->WriteValue(TEXT("CF")); break;
    case SegmentCountryCodeTD: writer->WriteValue(TEXT("TD")); break;
    case SegmentCountryCodeCL: writer->WriteValue(TEXT("CL")); break;
    case SegmentCountryCodeCN: writer->WriteValue(TEXT("CN")); break;
    case SegmentCountryCodeCX: writer->WriteValue(TEXT("CX")); break;
    case SegmentCountryCodeCC: writer->WriteValue(TEXT("CC")); break;
    case SegmentCountryCodeCO: writer->WriteValue(TEXT("CO")); break;
    case SegmentCountryCodeKM: writer->WriteValue(TEXT("KM")); break;
    case SegmentCountryCodeCG: writer->WriteValue(TEXT("CG")); break;
    case SegmentCountryCodeCD: writer->WriteValue(TEXT("CD")); break;
    case SegmentCountryCodeCK: writer->WriteValue(TEXT("CK")); break;
    case SegmentCountryCodeCR: writer->WriteValue(TEXT("CR")); break;
    case SegmentCountryCodeCI: writer->WriteValue(TEXT("CI")); break;
    case SegmentCountryCodeHR: writer->WriteValue(TEXT("HR")); break;
    case SegmentCountryCodeCU: writer->WriteValue(TEXT("CU")); break;
    case SegmentCountryCodeCW: writer->WriteValue(TEXT("CW")); break;
    case SegmentCountryCodeCY: writer->WriteValue(TEXT("CY")); break;
    case SegmentCountryCodeCZ: writer->WriteValue(TEXT("CZ")); break;
    case SegmentCountryCodeDK: writer->WriteValue(TEXT("DK")); break;
    case SegmentCountryCodeDJ: writer->WriteValue(TEXT("DJ")); break;
    case SegmentCountryCodeDM: writer->WriteValue(TEXT("DM")); break;
    case SegmentCountryCodeDO: writer->WriteValue(TEXT("DO")); break;
    case SegmentCountryCodeEC: writer->WriteValue(TEXT("EC")); break;
    case SegmentCountryCodeEG: writer->WriteValue(TEXT("EG")); break;
    case SegmentCountryCodeSV: writer->WriteValue(TEXT("SV")); break;
    case SegmentCountryCodeGQ: writer->WriteValue(TEXT("GQ")); break;
    case SegmentCountryCodeER: writer->WriteValue(TEXT("ER")); break;
    case SegmentCountryCodeEE: writer->WriteValue(TEXT("EE")); break;
    case SegmentCountryCodeET: writer->WriteValue(TEXT("ET")); break;
    case SegmentCountryCodeFK: writer->WriteValue(TEXT("FK")); break;
    case SegmentCountryCodeFO: writer->WriteValue(TEXT("FO")); break;
    case SegmentCountryCodeFJ: writer->WriteValue(TEXT("FJ")); break;
    case SegmentCountryCodeFI: writer->WriteValue(TEXT("FI")); break;
    case SegmentCountryCodeFR: writer->WriteValue(TEXT("FR")); break;
    case SegmentCountryCodeGF: writer->WriteValue(TEXT("GF")); break;
    case SegmentCountryCodePF: writer->WriteValue(TEXT("PF")); break;
    case SegmentCountryCodeTF: writer->WriteValue(TEXT("TF")); break;
    case SegmentCountryCodeGA: writer->WriteValue(TEXT("GA")); break;
    case SegmentCountryCodeGM: writer->WriteValue(TEXT("GM")); break;
    case SegmentCountryCodeGE: writer->WriteValue(TEXT("GE")); break;
    case SegmentCountryCodeDE: writer->WriteValue(TEXT("DE")); break;
    case SegmentCountryCodeGH: writer->WriteValue(TEXT("GH")); break;
    case SegmentCountryCodeGI: writer->WriteValue(TEXT("GI")); break;
    case SegmentCountryCodeGR: writer->WriteValue(TEXT("GR")); break;
    case SegmentCountryCodeGL: writer->WriteValue(TEXT("GL")); break;
    case SegmentCountryCodeGD: writer->WriteValue(TEXT("GD")); break;
    case SegmentCountryCodeGP: writer->WriteValue(TEXT("GP")); break;
    case SegmentCountryCodeGU: writer->WriteValue(TEXT("GU")); break;
    case SegmentCountryCodeGT: writer->WriteValue(TEXT("GT")); break;
    case SegmentCountryCodeGG: writer->WriteValue(TEXT("GG")); break;
    case SegmentCountryCodeGN: writer->WriteValue(TEXT("GN")); break;
    case SegmentCountryCodeGW: writer->WriteValue(TEXT("GW")); break;
    case SegmentCountryCodeGY: writer->WriteValue(TEXT("GY")); break;
    case SegmentCountryCodeHT: writer->WriteValue(TEXT("HT")); break;
    case SegmentCountryCodeHM: writer->WriteValue(TEXT("HM")); break;
    case SegmentCountryCodeVA: writer->WriteValue(TEXT("VA")); break;
    case SegmentCountryCodeHN: writer->WriteValue(TEXT("HN")); break;
    case SegmentCountryCodeHK: writer->WriteValue(TEXT("HK")); break;
    case SegmentCountryCodeHU: writer->WriteValue(TEXT("HU")); break;
    case SegmentCountryCodeIS: writer->WriteValue(TEXT("IS")); break;
    case SegmentCountryCodeIN: writer->WriteValue(TEXT("IN")); break;
    case SegmentCountryCodeID: writer->WriteValue(TEXT("ID")); break;
    case SegmentCountryCodeIR: writer->WriteValue(TEXT("IR")); break;
    case SegmentCountryCodeIQ: writer->WriteValue(TEXT("IQ")); break;
    case SegmentCountryCodeIE: writer->WriteValue(TEXT("IE")); break;
    case SegmentCountryCodeIM: writer->WriteValue(TEXT("IM")); break;
    case SegmentCountryCodeIL: writer->WriteValue(TEXT("IL")); break;
    case SegmentCountryCodeIT: writer->WriteValue(TEXT("IT")); break;
    case SegmentCountryCodeJM: writer->WriteValue(TEXT("JM")); break;
    case SegmentCountryCodeJP: writer->WriteValue(TEXT("JP")); break;
    case SegmentCountryCodeJE: writer->WriteValue(TEXT("JE")); break;
    case SegmentCountryCodeJO: writer->WriteValue(TEXT("JO")); break;
    case SegmentCountryCodeKZ: writer->WriteValue(TEXT("KZ")); break;
    case SegmentCountryCodeKE: writer->WriteValue(TEXT("KE")); break;
    case SegmentCountryCodeKI: writer->WriteValue(TEXT("KI")); break;
    case SegmentCountryCodeKP: writer->WriteValue(TEXT("KP")); break;
    case SegmentCountryCodeKR: writer->WriteValue(TEXT("KR")); break;
    case SegmentCountryCodeKW: writer->WriteValue(TEXT("KW")); break;
    case SegmentCountryCodeKG: writer->WriteValue(TEXT("KG")); break;
    case SegmentCountryCodeLA: writer->WriteValue(TEXT("LA")); break;
    case SegmentCountryCodeLV: writer->WriteValue(TEXT("LV")); break;
    case SegmentCountryCodeLB: writer->WriteValue(TEXT("LB")); break;
    case SegmentCountryCodeLS: writer->WriteValue(TEXT("LS")); break;
    case SegmentCountryCodeLR: writer->WriteValue(TEXT("LR")); break;
    case SegmentCountryCodeLY: writer->WriteValue(TEXT("LY")); break;
    case SegmentCountryCodeLI: writer->WriteValue(TEXT("LI")); break;
    case SegmentCountryCodeLT: writer->WriteValue(TEXT("LT")); break;
    case SegmentCountryCodeLU: writer->WriteValue(TEXT("LU")); break;
    case SegmentCountryCodeMO: writer->WriteValue(TEXT("MO")); break;
    case SegmentCountryCodeMK: writer->WriteValue(TEXT("MK")); break;
    case SegmentCountryCodeMG: writer->WriteValue(TEXT("MG")); break;
    case SegmentCountryCodeMW: writer->WriteValue(TEXT("MW")); break;
    case SegmentCountryCodeMY: writer->WriteValue(TEXT("MY")); break;
    case SegmentCountryCodeMV: writer->WriteValue(TEXT("MV")); break;
    case SegmentCountryCodeML: writer->WriteValue(TEXT("ML")); break;
    case SegmentCountryCodeMT: writer->WriteValue(TEXT("MT")); break;
    case SegmentCountryCodeMH: writer->WriteValue(TEXT("MH")); break;
    case SegmentCountryCodeMQ: writer->WriteValue(TEXT("MQ")); break;
    case SegmentCountryCodeMR: writer->WriteValue(TEXT("MR")); break;
    case SegmentCountryCodeMU: writer->WriteValue(TEXT("MU")); break;
    case SegmentCountryCodeYT: writer->WriteValue(TEXT("YT")); break;
    case SegmentCountryCodeMX: writer->WriteValue(TEXT("MX")); break;
    case SegmentCountryCodeFM: writer->WriteValue(TEXT("FM")); break;
    case SegmentCountryCodeMD: writer->WriteValue(TEXT("MD")); break;
    case SegmentCountryCodeMC: writer->WriteValue(TEXT("MC")); break;
    case SegmentCountryCodeMN: writer->WriteValue(TEXT("MN")); break;
    case SegmentCountryCodeME: writer->WriteValue(TEXT("ME")); break;
    case SegmentCountryCodeMS: writer->WriteValue(TEXT("MS")); break;
    case SegmentCountryCodeMA: writer->WriteValue(TEXT("MA")); break;
    case SegmentCountryCodeMZ: writer->WriteValue(TEXT("MZ")); break;
    case SegmentCountryCodeMM: writer->WriteValue(TEXT("MM")); break;
    case SegmentCountryCodeNA: writer->WriteValue(TEXT("NA")); break;
    case SegmentCountryCodeNR: writer->WriteValue(TEXT("NR")); break;
    case SegmentCountryCodeNP: writer->WriteValue(TEXT("NP")); break;
    case SegmentCountryCodeNL: writer->WriteValue(TEXT("NL")); break;
    case SegmentCountryCodeNC: writer->WriteValue(TEXT("NC")); break;
    case SegmentCountryCodeNZ: writer->WriteValue(TEXT("NZ")); break;
    case SegmentCountryCodeNI: writer->WriteValue(TEXT("NI")); break;
    case SegmentCountryCodeNE: writer->WriteValue(TEXT("NE")); break;
    case SegmentCountryCodeNG: writer->WriteValue(TEXT("NG")); break;
    case SegmentCountryCodeNU: writer->WriteValue(TEXT("NU")); break;
    case SegmentCountryCodeNF: writer->WriteValue(TEXT("NF")); break;
    case SegmentCountryCodeMP: writer->WriteValue(TEXT("MP")); break;
    case SegmentCountryCodeNO: writer->WriteValue(TEXT("NO")); break;
    case SegmentCountryCodeOM: writer->WriteValue(TEXT("OM")); break;
    case SegmentCountryCodePK: writer->WriteValue(TEXT("PK")); break;
    case SegmentCountryCodePW: writer->WriteValue(TEXT("PW")); break;
    case SegmentCountryCodePS: writer->WriteValue(TEXT("PS")); break;
    case SegmentCountryCodePA: writer->WriteValue(TEXT("PA")); break;
    case SegmentCountryCodePG: writer->WriteValue(TEXT("PG")); break;
    case SegmentCountryCodePY: writer->WriteValue(TEXT("PY")); break;
    case SegmentCountryCodePE: writer->WriteValue(TEXT("PE")); break;
    case SegmentCountryCodePH: writer->WriteValue(TEXT("PH")); break;
    case SegmentCountryCodePN: writer->WriteValue(TEXT("PN")); break;
    case SegmentCountryCodePL: writer->WriteValue(TEXT("PL")); break;
    case SegmentCountryCodePT: writer->WriteValue(TEXT("PT")); break;
    case SegmentCountryCodePR: writer->WriteValue(TEXT("PR")); break;
    case SegmentCountryCodeQA: writer->WriteValue(TEXT("QA")); break;
    case SegmentCountryCodeRE: writer->WriteValue(TEXT("RE")); break;
    case SegmentCountryCodeRO: writer->WriteValue(TEXT("RO")); break;
    case SegmentCountryCodeRU: writer->WriteValue(TEXT("RU")); break;
    case SegmentCountryCodeRW: writer->WriteValue(TEXT("RW")); break;
    case SegmentCountryCodeBL: writer->WriteValue(TEXT("BL")); break;
    case SegmentCountryCodeSH: writer->WriteValue(TEXT("SH")); break;
    case SegmentCountryCodeKN: writer->WriteValue(TEXT("KN")); break;
    case SegmentCountryCodeLC: writer->WriteValue(TEXT("LC")); break;
    case SegmentCountryCodeMF: writer->WriteValue(TEXT("MF")); break;
    case SegmentCountryCodePM: writer->WriteValue(TEXT("PM")); break;
    case SegmentCountryCodeVC: writer->WriteValue(TEXT("VC")); break;
    case SegmentCountryCodeWS: writer->WriteValue(TEXT("WS")); break;
    case SegmentCountryCodeSM: writer->WriteValue(TEXT("SM")); break;
    case SegmentCountryCodeST: writer->WriteValue(TEXT("ST")); break;
    case SegmentCountryCodeSA: writer->WriteValue(TEXT("SA")); break;
    case SegmentCountryCodeSN: writer->WriteValue(TEXT("SN")); break;
    case SegmentCountryCodeRS: writer->WriteValue(TEXT("RS")); break;
    case SegmentCountryCodeSC: writer->WriteValue(TEXT("SC")); break;
    case SegmentCountryCodeSL: writer->WriteValue(TEXT("SL")); break;
    case SegmentCountryCodeSG: writer->WriteValue(TEXT("SG")); break;
    case SegmentCountryCodeSX: writer->WriteValue(TEXT("SX")); break;
    case SegmentCountryCodeSK: writer->WriteValue(TEXT("SK")); break;
    case SegmentCountryCodeSI: writer->WriteValue(TEXT("SI")); break;
    case SegmentCountryCodeSB: writer->WriteValue(TEXT("SB")); break;
    case SegmentCountryCodeSO: writer->WriteValue(TEXT("SO")); break;
    case SegmentCountryCodeZA: writer->WriteValue(TEXT("ZA")); break;
    case SegmentCountryCodeGS: writer->WriteValue(TEXT("GS")); break;
    case SegmentCountryCodeSS: writer->WriteValue(TEXT("SS")); break;
    case SegmentCountryCodeES: writer->WriteValue(TEXT("ES")); break;
    case SegmentCountryCodeLK: writer->WriteValue(TEXT("LK")); break;
    case SegmentCountryCodeSD: writer->WriteValue(TEXT("SD")); break;
    case SegmentCountryCodeSR: writer->WriteValue(TEXT("SR")); break;
    case SegmentCountryCodeSJ: writer->WriteValue(TEXT("SJ")); break;
    case SegmentCountryCodeSZ: writer->WriteValue(TEXT("SZ")); break;
    case SegmentCountryCodeSE: writer->WriteValue(TEXT("SE")); break;
    case SegmentCountryCodeCH: writer->WriteValue(TEXT("CH")); break;
    case SegmentCountryCodeSY: writer->WriteValue(TEXT("SY")); break;
    case SegmentCountryCodeTW: writer->WriteValue(TEXT("TW")); break;
    case SegmentCountryCodeTJ: writer->WriteValue(TEXT("TJ")); break;
    case SegmentCountryCodeTZ: writer->WriteValue(TEXT("TZ")); break;
    case SegmentCountryCodeTH: writer->WriteValue(TEXT("TH")); break;
    case SegmentCountryCodeTL: writer->WriteValue(TEXT("TL")); break;
    case SegmentCountryCodeTG: writer->WriteValue(TEXT("TG")); break;
    case SegmentCountryCodeTK: writer->WriteValue(TEXT("TK")); break;
    case SegmentCountryCodeTO: writer->WriteValue(TEXT("TO")); break;
    case SegmentCountryCodeTT: writer->WriteValue(TEXT("TT")); break;
    case SegmentCountryCodeTN: writer->WriteValue(TEXT("TN")); break;
    case SegmentCountryCodeTR: writer->WriteValue(TEXT("TR")); break;
    case SegmentCountryCodeTM: writer->WriteValue(TEXT("TM")); break;
    case SegmentCountryCodeTC: writer->WriteValue(TEXT("TC")); break;
    case SegmentCountryCodeTV: writer->WriteValue(TEXT("TV")); break;
    case SegmentCountryCodeUG: writer->WriteValue(TEXT("UG")); break;
    case SegmentCountryCodeUA: writer->WriteValue(TEXT("UA")); break;
    case SegmentCountryCodeAE: writer->WriteValue(TEXT("AE")); break;
    case SegmentCountryCodeGB: writer->WriteValue(TEXT("GB")); break;
    case SegmentCountryCodeUS: writer->WriteValue(TEXT("US")); break;
    case SegmentCountryCodeUM: writer->WriteValue(TEXT("UM")); break;
    case SegmentCountryCodeUY: writer->WriteValue(TEXT("UY")); break;
    case SegmentCountryCodeUZ: writer->WriteValue(TEXT("UZ")); break;
    case SegmentCountryCodeVU: writer->WriteValue(TEXT("VU")); break;
    case SegmentCountryCodeVE: writer->WriteValue(TEXT("VE")); break;
    case SegmentCountryCodeVN: writer->WriteValue(TEXT("VN")); break;
    case SegmentCountryCodeVG: writer->WriteValue(TEXT("VG")); break;
    case SegmentCountryCodeVI: writer->WriteValue(TEXT("VI")); break;
    case SegmentCountryCodeWF: writer->WriteValue(TEXT("WF")); break;
    case SegmentCountryCodeEH: writer->WriteValue(TEXT("EH")); break;
    case SegmentCountryCodeYE: writer->WriteValue(TEXT("YE")); break;
    case SegmentCountryCodeZM: writer->WriteValue(TEXT("ZM")); break;
    case SegmentCountryCodeZW: writer->WriteValue(TEXT("ZW")); break;
    }
}

AdminModels::SegmentCountryCode PlayFab::AdminModels::readSegmentCountryCodeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readSegmentCountryCodeFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::SegmentCountryCode PlayFab::AdminModels::readSegmentCountryCodeFromValue(const FString& value)
{
    static TMap<FString, SegmentCountryCode> _SegmentCountryCodeMap;
    if (_SegmentCountryCodeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _SegmentCountryCodeMap.Add(TEXT("AF"), SegmentCountryCodeAF);
        _SegmentCountryCodeMap.Add(TEXT("AX"), SegmentCountryCodeAX);
        _SegmentCountryCodeMap.Add(TEXT("AL"), SegmentCountryCodeAL);
        _SegmentCountryCodeMap.Add(TEXT("DZ"), SegmentCountryCodeDZ);
        _SegmentCountryCodeMap.Add(TEXT("AS"), SegmentCountryCodeAS);
        _SegmentCountryCodeMap.Add(TEXT("AD"), SegmentCountryCodeAD);
        _SegmentCountryCodeMap.Add(TEXT("AO"), SegmentCountryCodeAO);
        _SegmentCountryCodeMap.Add(TEXT("AI"), SegmentCountryCodeAI);
        _SegmentCountryCodeMap.Add(TEXT("AQ"), SegmentCountryCodeAQ);
        _SegmentCountryCodeMap.Add(TEXT("AG"), SegmentCountryCodeAG);
        _SegmentCountryCodeMap.Add(TEXT("AR"), SegmentCountryCodeAR);
        _SegmentCountryCodeMap.Add(TEXT("AM"), SegmentCountryCodeAM);
        _SegmentCountryCodeMap.Add(TEXT("AW"), SegmentCountryCodeAW);
        _SegmentCountryCodeMap.Add(TEXT("AU"), SegmentCountryCodeAU);
        _SegmentCountryCodeMap.Add(TEXT("AT"), SegmentCountryCodeAT);
        _SegmentCountryCodeMap.Add(TEXT("AZ"), SegmentCountryCodeAZ);
        _SegmentCountryCodeMap.Add(TEXT("BS"), SegmentCountryCodeBS);
        _SegmentCountryCodeMap.Add(TEXT("BH"), SegmentCountryCodeBH);
        _SegmentCountryCodeMap.Add(TEXT("BD"), SegmentCountryCodeBD);
        _SegmentCountryCodeMap.Add(TEXT("BB"), SegmentCountryCodeBB);
        _SegmentCountryCodeMap.Add(TEXT("BY"), SegmentCountryCodeBY);
        _SegmentCountryCodeMap.Add(TEXT("BE"), SegmentCountryCodeBE);
        _SegmentCountryCodeMap.Add(TEXT("BZ"), SegmentCountryCodeBZ);
        _SegmentCountryCodeMap.Add(TEXT("BJ"), SegmentCountryCodeBJ);
        _SegmentCountryCodeMap.Add(TEXT("BM"), SegmentCountryCodeBM);
        _SegmentCountryCodeMap.Add(TEXT("BT"), SegmentCountryCodeBT);
        _SegmentCountryCodeMap.Add(TEXT("BO"), SegmentCountryCodeBO);
        _SegmentCountryCodeMap.Add(TEXT("BQ"), SegmentCountryCodeBQ);
        _SegmentCountryCodeMap.Add(TEXT("BA"), SegmentCountryCodeBA);
        _SegmentCountryCodeMap.Add(TEXT("BW"), SegmentCountryCodeBW);
        _SegmentCountryCodeMap.Add(TEXT("BV"), SegmentCountryCodeBV);
        _SegmentCountryCodeMap.Add(TEXT("BR"), SegmentCountryCodeBR);
        _SegmentCountryCodeMap.Add(TEXT("IO"), SegmentCountryCodeIO);
        _SegmentCountryCodeMap.Add(TEXT("BN"), SegmentCountryCodeBN);
        _SegmentCountryCodeMap.Add(TEXT("BG"), SegmentCountryCodeBG);
        _SegmentCountryCodeMap.Add(TEXT("BF"), SegmentCountryCodeBF);
        _SegmentCountryCodeMap.Add(TEXT("BI"), SegmentCountryCodeBI);
        _SegmentCountryCodeMap.Add(TEXT("KH"), SegmentCountryCodeKH);
        _SegmentCountryCodeMap.Add(TEXT("CM"), SegmentCountryCodeCM);
        _SegmentCountryCodeMap.Add(TEXT("CA"), SegmentCountryCodeCA);
        _SegmentCountryCodeMap.Add(TEXT("CV"), SegmentCountryCodeCV);
        _SegmentCountryCodeMap.Add(TEXT("KY"), SegmentCountryCodeKY);
        _SegmentCountryCodeMap.Add(TEXT("CF"), SegmentCountryCodeCF);
        _SegmentCountryCodeMap.Add(TEXT("TD"), SegmentCountryCodeTD);
        _SegmentCountryCodeMap.Add(TEXT("CL"), SegmentCountryCodeCL);
        _SegmentCountryCodeMap.Add(TEXT("CN"), SegmentCountryCodeCN);
        _SegmentCountryCodeMap.Add(TEXT("CX"), SegmentCountryCodeCX);
        _SegmentCountryCodeMap.Add(TEXT("CC"), SegmentCountryCodeCC);
        _SegmentCountryCodeMap.Add(TEXT("CO"), SegmentCountryCodeCO);
        _SegmentCountryCodeMap.Add(TEXT("KM"), SegmentCountryCodeKM);
        _SegmentCountryCodeMap.Add(TEXT("CG"), SegmentCountryCodeCG);
        _SegmentCountryCodeMap.Add(TEXT("CD"), SegmentCountryCodeCD);
        _SegmentCountryCodeMap.Add(TEXT("CK"), SegmentCountryCodeCK);
        _SegmentCountryCodeMap.Add(TEXT("CR"), SegmentCountryCodeCR);
        _SegmentCountryCodeMap.Add(TEXT("CI"), SegmentCountryCodeCI);
        _SegmentCountryCodeMap.Add(TEXT("HR"), SegmentCountryCodeHR);
        _SegmentCountryCodeMap.Add(TEXT("CU"), SegmentCountryCodeCU);
        _SegmentCountryCodeMap.Add(TEXT("CW"), SegmentCountryCodeCW);
        _SegmentCountryCodeMap.Add(TEXT("CY"), SegmentCountryCodeCY);
        _SegmentCountryCodeMap.Add(TEXT("CZ"), SegmentCountryCodeCZ);
        _SegmentCountryCodeMap.Add(TEXT("DK"), SegmentCountryCodeDK);
        _SegmentCountryCodeMap.Add(TEXT("DJ"), SegmentCountryCodeDJ);
        _SegmentCountryCodeMap.Add(TEXT("DM"), SegmentCountryCodeDM);
        _SegmentCountryCodeMap.Add(TEXT("DO"), SegmentCountryCodeDO);
        _SegmentCountryCodeMap.Add(TEXT("EC"), SegmentCountryCodeEC);
        _SegmentCountryCodeMap.Add(TEXT("EG"), SegmentCountryCodeEG);
        _SegmentCountryCodeMap.Add(TEXT("SV"), SegmentCountryCodeSV);
        _SegmentCountryCodeMap.Add(TEXT("GQ"), SegmentCountryCodeGQ);
        _SegmentCountryCodeMap.Add(TEXT("ER"), SegmentCountryCodeER);
        _SegmentCountryCodeMap.Add(TEXT("EE"), SegmentCountryCodeEE);
        _SegmentCountryCodeMap.Add(TEXT("ET"), SegmentCountryCodeET);
        _SegmentCountryCodeMap.Add(TEXT("FK"), SegmentCountryCodeFK);
        _SegmentCountryCodeMap.Add(TEXT("FO"), SegmentCountryCodeFO);
        _SegmentCountryCodeMap.Add(TEXT("FJ"), SegmentCountryCodeFJ);
        _SegmentCountryCodeMap.Add(TEXT("FI"), SegmentCountryCodeFI);
        _SegmentCountryCodeMap.Add(TEXT("FR"), SegmentCountryCodeFR);
        _SegmentCountryCodeMap.Add(TEXT("GF"), SegmentCountryCodeGF);
        _SegmentCountryCodeMap.Add(TEXT("PF"), SegmentCountryCodePF);
        _SegmentCountryCodeMap.Add(TEXT("TF"), SegmentCountryCodeTF);
        _SegmentCountryCodeMap.Add(TEXT("GA"), SegmentCountryCodeGA);
        _SegmentCountryCodeMap.Add(TEXT("GM"), SegmentCountryCodeGM);
        _SegmentCountryCodeMap.Add(TEXT("GE"), SegmentCountryCodeGE);
        _SegmentCountryCodeMap.Add(TEXT("DE"), SegmentCountryCodeDE);
        _SegmentCountryCodeMap.Add(TEXT("GH"), SegmentCountryCodeGH);
        _SegmentCountryCodeMap.Add(TEXT("GI"), SegmentCountryCodeGI);
        _SegmentCountryCodeMap.Add(TEXT("GR"), SegmentCountryCodeGR);
        _SegmentCountryCodeMap.Add(TEXT("GL"), SegmentCountryCodeGL);
        _SegmentCountryCodeMap.Add(TEXT("GD"), SegmentCountryCodeGD);
        _SegmentCountryCodeMap.Add(TEXT("GP"), SegmentCountryCodeGP);
        _SegmentCountryCodeMap.Add(TEXT("GU"), SegmentCountryCodeGU);
        _SegmentCountryCodeMap.Add(TEXT("GT"), SegmentCountryCodeGT);
        _SegmentCountryCodeMap.Add(TEXT("GG"), SegmentCountryCodeGG);
        _SegmentCountryCodeMap.Add(TEXT("GN"), SegmentCountryCodeGN);
        _SegmentCountryCodeMap.Add(TEXT("GW"), SegmentCountryCodeGW);
        _SegmentCountryCodeMap.Add(TEXT("GY"), SegmentCountryCodeGY);
        _SegmentCountryCodeMap.Add(TEXT("HT"), SegmentCountryCodeHT);
        _SegmentCountryCodeMap.Add(TEXT("HM"), SegmentCountryCodeHM);
        _SegmentCountryCodeMap.Add(TEXT("VA"), SegmentCountryCodeVA);
        _SegmentCountryCodeMap.Add(TEXT("HN"), SegmentCountryCodeHN);
        _SegmentCountryCodeMap.Add(TEXT("HK"), SegmentCountryCodeHK);
        _SegmentCountryCodeMap.Add(TEXT("HU"), SegmentCountryCodeHU);
        _SegmentCountryCodeMap.Add(TEXT("IS"), SegmentCountryCodeIS);
        _SegmentCountryCodeMap.Add(TEXT("IN"), SegmentCountryCodeIN);
        _SegmentCountryCodeMap.Add(TEXT("ID"), SegmentCountryCodeID);
        _SegmentCountryCodeMap.Add(TEXT("IR"), SegmentCountryCodeIR);
        _SegmentCountryCodeMap.Add(TEXT("IQ"), SegmentCountryCodeIQ);
        _SegmentCountryCodeMap.Add(TEXT("IE"), SegmentCountryCodeIE);
        _SegmentCountryCodeMap.Add(TEXT("IM"), SegmentCountryCodeIM);
        _SegmentCountryCodeMap.Add(TEXT("IL"), SegmentCountryCodeIL);
        _SegmentCountryCodeMap.Add(TEXT("IT"), SegmentCountryCodeIT);
        _SegmentCountryCodeMap.Add(TEXT("JM"), SegmentCountryCodeJM);
        _SegmentCountryCodeMap.Add(TEXT("JP"), SegmentCountryCodeJP);
        _SegmentCountryCodeMap.Add(TEXT("JE"), SegmentCountryCodeJE);
        _SegmentCountryCodeMap.Add(TEXT("JO"), SegmentCountryCodeJO);
        _SegmentCountryCodeMap.Add(TEXT("KZ"), SegmentCountryCodeKZ);
        _SegmentCountryCodeMap.Add(TEXT("KE"), SegmentCountryCodeKE);
        _SegmentCountryCodeMap.Add(TEXT("KI"), SegmentCountryCodeKI);
        _SegmentCountryCodeMap.Add(TEXT("KP"), SegmentCountryCodeKP);
        _SegmentCountryCodeMap.Add(TEXT("KR"), SegmentCountryCodeKR);
        _SegmentCountryCodeMap.Add(TEXT("KW"), SegmentCountryCodeKW);
        _SegmentCountryCodeMap.Add(TEXT("KG"), SegmentCountryCodeKG);
        _SegmentCountryCodeMap.Add(TEXT("LA"), SegmentCountryCodeLA);
        _SegmentCountryCodeMap.Add(TEXT("LV"), SegmentCountryCodeLV);
        _SegmentCountryCodeMap.Add(TEXT("LB"), SegmentCountryCodeLB);
        _SegmentCountryCodeMap.Add(TEXT("LS"), SegmentCountryCodeLS);
        _SegmentCountryCodeMap.Add(TEXT("LR"), SegmentCountryCodeLR);
        _SegmentCountryCodeMap.Add(TEXT("LY"), SegmentCountryCodeLY);
        _SegmentCountryCodeMap.Add(TEXT("LI"), SegmentCountryCodeLI);
        _SegmentCountryCodeMap.Add(TEXT("LT"), SegmentCountryCodeLT);
        _SegmentCountryCodeMap.Add(TEXT("LU"), SegmentCountryCodeLU);
        _SegmentCountryCodeMap.Add(TEXT("MO"), SegmentCountryCodeMO);
        _SegmentCountryCodeMap.Add(TEXT("MK"), SegmentCountryCodeMK);
        _SegmentCountryCodeMap.Add(TEXT("MG"), SegmentCountryCodeMG);
        _SegmentCountryCodeMap.Add(TEXT("MW"), SegmentCountryCodeMW);
        _SegmentCountryCodeMap.Add(TEXT("MY"), SegmentCountryCodeMY);
        _SegmentCountryCodeMap.Add(TEXT("MV"), SegmentCountryCodeMV);
        _SegmentCountryCodeMap.Add(TEXT("ML"), SegmentCountryCodeML);
        _SegmentCountryCodeMap.Add(TEXT("MT"), SegmentCountryCodeMT);
        _SegmentCountryCodeMap.Add(TEXT("MH"), SegmentCountryCodeMH);
        _SegmentCountryCodeMap.Add(TEXT("MQ"), SegmentCountryCodeMQ);
        _SegmentCountryCodeMap.Add(TEXT("MR"), SegmentCountryCodeMR);
        _SegmentCountryCodeMap.Add(TEXT("MU"), SegmentCountryCodeMU);
        _SegmentCountryCodeMap.Add(TEXT("YT"), SegmentCountryCodeYT);
        _SegmentCountryCodeMap.Add(TEXT("MX"), SegmentCountryCodeMX);
        _SegmentCountryCodeMap.Add(TEXT("FM"), SegmentCountryCodeFM);
        _SegmentCountryCodeMap.Add(TEXT("MD"), SegmentCountryCodeMD);
        _SegmentCountryCodeMap.Add(TEXT("MC"), SegmentCountryCodeMC);
        _SegmentCountryCodeMap.Add(TEXT("MN"), SegmentCountryCodeMN);
        _SegmentCountryCodeMap.Add(TEXT("ME"), SegmentCountryCodeME);
        _SegmentCountryCodeMap.Add(TEXT("MS"), SegmentCountryCodeMS);
        _SegmentCountryCodeMap.Add(TEXT("MA"), SegmentCountryCodeMA);
        _SegmentCountryCodeMap.Add(TEXT("MZ"), SegmentCountryCodeMZ);
        _SegmentCountryCodeMap.Add(TEXT("MM"), SegmentCountryCodeMM);
        _SegmentCountryCodeMap.Add(TEXT("NA"), SegmentCountryCodeNA);
        _SegmentCountryCodeMap.Add(TEXT("NR"), SegmentCountryCodeNR);
        _SegmentCountryCodeMap.Add(TEXT("NP"), SegmentCountryCodeNP);
        _SegmentCountryCodeMap.Add(TEXT("NL"), SegmentCountryCodeNL);
        _SegmentCountryCodeMap.Add(TEXT("NC"), SegmentCountryCodeNC);
        _SegmentCountryCodeMap.Add(TEXT("NZ"), SegmentCountryCodeNZ);
        _SegmentCountryCodeMap.Add(TEXT("NI"), SegmentCountryCodeNI);
        _SegmentCountryCodeMap.Add(TEXT("NE"), SegmentCountryCodeNE);
        _SegmentCountryCodeMap.Add(TEXT("NG"), SegmentCountryCodeNG);
        _SegmentCountryCodeMap.Add(TEXT("NU"), SegmentCountryCodeNU);
        _SegmentCountryCodeMap.Add(TEXT("NF"), SegmentCountryCodeNF);
        _SegmentCountryCodeMap.Add(TEXT("MP"), SegmentCountryCodeMP);
        _SegmentCountryCodeMap.Add(TEXT("NO"), SegmentCountryCodeNO);
        _SegmentCountryCodeMap.Add(TEXT("OM"), SegmentCountryCodeOM);
        _SegmentCountryCodeMap.Add(TEXT("PK"), SegmentCountryCodePK);
        _SegmentCountryCodeMap.Add(TEXT("PW"), SegmentCountryCodePW);
        _SegmentCountryCodeMap.Add(TEXT("PS"), SegmentCountryCodePS);
        _SegmentCountryCodeMap.Add(TEXT("PA"), SegmentCountryCodePA);
        _SegmentCountryCodeMap.Add(TEXT("PG"), SegmentCountryCodePG);
        _SegmentCountryCodeMap.Add(TEXT("PY"), SegmentCountryCodePY);
        _SegmentCountryCodeMap.Add(TEXT("PE"), SegmentCountryCodePE);
        _SegmentCountryCodeMap.Add(TEXT("PH"), SegmentCountryCodePH);
        _SegmentCountryCodeMap.Add(TEXT("PN"), SegmentCountryCodePN);
        _SegmentCountryCodeMap.Add(TEXT("PL"), SegmentCountryCodePL);
        _SegmentCountryCodeMap.Add(TEXT("PT"), SegmentCountryCodePT);
        _SegmentCountryCodeMap.Add(TEXT("PR"), SegmentCountryCodePR);
        _SegmentCountryCodeMap.Add(TEXT("QA"), SegmentCountryCodeQA);
        _SegmentCountryCodeMap.Add(TEXT("RE"), SegmentCountryCodeRE);
        _SegmentCountryCodeMap.Add(TEXT("RO"), SegmentCountryCodeRO);
        _SegmentCountryCodeMap.Add(TEXT("RU"), SegmentCountryCodeRU);
        _SegmentCountryCodeMap.Add(TEXT("RW"), SegmentCountryCodeRW);
        _SegmentCountryCodeMap.Add(TEXT("BL"), SegmentCountryCodeBL);
        _SegmentCountryCodeMap.Add(TEXT("SH"), SegmentCountryCodeSH);
        _SegmentCountryCodeMap.Add(TEXT("KN"), SegmentCountryCodeKN);
        _SegmentCountryCodeMap.Add(TEXT("LC"), SegmentCountryCodeLC);
        _SegmentCountryCodeMap.Add(TEXT("MF"), SegmentCountryCodeMF);
        _SegmentCountryCodeMap.Add(TEXT("PM"), SegmentCountryCodePM);
        _SegmentCountryCodeMap.Add(TEXT("VC"), SegmentCountryCodeVC);
        _SegmentCountryCodeMap.Add(TEXT("WS"), SegmentCountryCodeWS);
        _SegmentCountryCodeMap.Add(TEXT("SM"), SegmentCountryCodeSM);
        _SegmentCountryCodeMap.Add(TEXT("ST"), SegmentCountryCodeST);
        _SegmentCountryCodeMap.Add(TEXT("SA"), SegmentCountryCodeSA);
        _SegmentCountryCodeMap.Add(TEXT("SN"), SegmentCountryCodeSN);
        _SegmentCountryCodeMap.Add(TEXT("RS"), SegmentCountryCodeRS);
        _SegmentCountryCodeMap.Add(TEXT("SC"), SegmentCountryCodeSC);
        _SegmentCountryCodeMap.Add(TEXT("SL"), SegmentCountryCodeSL);
        _SegmentCountryCodeMap.Add(TEXT("SG"), SegmentCountryCodeSG);
        _SegmentCountryCodeMap.Add(TEXT("SX"), SegmentCountryCodeSX);
        _SegmentCountryCodeMap.Add(TEXT("SK"), SegmentCountryCodeSK);
        _SegmentCountryCodeMap.Add(TEXT("SI"), SegmentCountryCodeSI);
        _SegmentCountryCodeMap.Add(TEXT("SB"), SegmentCountryCodeSB);
        _SegmentCountryCodeMap.Add(TEXT("SO"), SegmentCountryCodeSO);
        _SegmentCountryCodeMap.Add(TEXT("ZA"), SegmentCountryCodeZA);
        _SegmentCountryCodeMap.Add(TEXT("GS"), SegmentCountryCodeGS);
        _SegmentCountryCodeMap.Add(TEXT("SS"), SegmentCountryCodeSS);
        _SegmentCountryCodeMap.Add(TEXT("ES"), SegmentCountryCodeES);
        _SegmentCountryCodeMap.Add(TEXT("LK"), SegmentCountryCodeLK);
        _SegmentCountryCodeMap.Add(TEXT("SD"), SegmentCountryCodeSD);
        _SegmentCountryCodeMap.Add(TEXT("SR"), SegmentCountryCodeSR);
        _SegmentCountryCodeMap.Add(TEXT("SJ"), SegmentCountryCodeSJ);
        _SegmentCountryCodeMap.Add(TEXT("SZ"), SegmentCountryCodeSZ);
        _SegmentCountryCodeMap.Add(TEXT("SE"), SegmentCountryCodeSE);
        _SegmentCountryCodeMap.Add(TEXT("CH"), SegmentCountryCodeCH);
        _SegmentCountryCodeMap.Add(TEXT("SY"), SegmentCountryCodeSY);
        _SegmentCountryCodeMap.Add(TEXT("TW"), SegmentCountryCodeTW);
        _SegmentCountryCodeMap.Add(TEXT("TJ"), SegmentCountryCodeTJ);
        _SegmentCountryCodeMap.Add(TEXT("TZ"), SegmentCountryCodeTZ);
        _SegmentCountryCodeMap.Add(TEXT("TH"), SegmentCountryCodeTH);
        _SegmentCountryCodeMap.Add(TEXT("TL"), SegmentCountryCodeTL);
        _SegmentCountryCodeMap.Add(TEXT("TG"), SegmentCountryCodeTG);
        _SegmentCountryCodeMap.Add(TEXT("TK"), SegmentCountryCodeTK);
        _SegmentCountryCodeMap.Add(TEXT("TO"), SegmentCountryCodeTO);
        _SegmentCountryCodeMap.Add(TEXT("TT"), SegmentCountryCodeTT);
        _SegmentCountryCodeMap.Add(TEXT("TN"), SegmentCountryCodeTN);
        _SegmentCountryCodeMap.Add(TEXT("TR"), SegmentCountryCodeTR);
        _SegmentCountryCodeMap.Add(TEXT("TM"), SegmentCountryCodeTM);
        _SegmentCountryCodeMap.Add(TEXT("TC"), SegmentCountryCodeTC);
        _SegmentCountryCodeMap.Add(TEXT("TV"), SegmentCountryCodeTV);
        _SegmentCountryCodeMap.Add(TEXT("UG"), SegmentCountryCodeUG);
        _SegmentCountryCodeMap.Add(TEXT("UA"), SegmentCountryCodeUA);
        _SegmentCountryCodeMap.Add(TEXT("AE"), SegmentCountryCodeAE);
        _SegmentCountryCodeMap.Add(TEXT("GB"), SegmentCountryCodeGB);
        _SegmentCountryCodeMap.Add(TEXT("US"), SegmentCountryCodeUS);
        _SegmentCountryCodeMap.Add(TEXT("UM"), SegmentCountryCodeUM);
        _SegmentCountryCodeMap.Add(TEXT("UY"), SegmentCountryCodeUY);
        _SegmentCountryCodeMap.Add(TEXT("UZ"), SegmentCountryCodeUZ);
        _SegmentCountryCodeMap.Add(TEXT("VU"), SegmentCountryCodeVU);
        _SegmentCountryCodeMap.Add(TEXT("VE"), SegmentCountryCodeVE);
        _SegmentCountryCodeMap.Add(TEXT("VN"), SegmentCountryCodeVN);
        _SegmentCountryCodeMap.Add(TEXT("VG"), SegmentCountryCodeVG);
        _SegmentCountryCodeMap.Add(TEXT("VI"), SegmentCountryCodeVI);
        _SegmentCountryCodeMap.Add(TEXT("WF"), SegmentCountryCodeWF);
        _SegmentCountryCodeMap.Add(TEXT("EH"), SegmentCountryCodeEH);
        _SegmentCountryCodeMap.Add(TEXT("YE"), SegmentCountryCodeYE);
        _SegmentCountryCodeMap.Add(TEXT("ZM"), SegmentCountryCodeZM);
        _SegmentCountryCodeMap.Add(TEXT("ZW"), SegmentCountryCodeZW);

    }

    if (!value.IsEmpty())
    {
        auto output = _SegmentCountryCodeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return SegmentCountryCodeAF; // Basically critical fail
}

PlayFab::AdminModels::FLocationSegmentFilter::~FLocationSegmentFilter()
{

}

void PlayFab::AdminModels::FLocationSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CountryCode.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("CountryCode"));
        writeSegmentCountryCodeEnumJSON(CountryCode, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FLocationSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    CountryCode = readSegmentCountryCodeFromValue(obj->TryGetField(TEXT("CountryCode")));

    return HasSucceeded;
}

void PlayFab::AdminModels::writeSegmentPushNotificationDevicePlatformEnumJSON(SegmentPushNotificationDevicePlatform enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case SegmentPushNotificationDevicePlatformApplePushNotificationService: writer->WriteValue(TEXT("ApplePushNotificationService")); break;
    case SegmentPushNotificationDevicePlatformGoogleCloudMessaging: writer->WriteValue(TEXT("GoogleCloudMessaging")); break;
    }
}

AdminModels::SegmentPushNotificationDevicePlatform PlayFab::AdminModels::readSegmentPushNotificationDevicePlatformFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readSegmentPushNotificationDevicePlatformFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::SegmentPushNotificationDevicePlatform PlayFab::AdminModels::readSegmentPushNotificationDevicePlatformFromValue(const FString& value)
{
    static TMap<FString, SegmentPushNotificationDevicePlatform> _SegmentPushNotificationDevicePlatformMap;
    if (_SegmentPushNotificationDevicePlatformMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _SegmentPushNotificationDevicePlatformMap.Add(TEXT("ApplePushNotificationService"), SegmentPushNotificationDevicePlatformApplePushNotificationService);
        _SegmentPushNotificationDevicePlatformMap.Add(TEXT("GoogleCloudMessaging"), SegmentPushNotificationDevicePlatformGoogleCloudMessaging);

    }

    if (!value.IsEmpty())
    {
        auto output = _SegmentPushNotificationDevicePlatformMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return SegmentPushNotificationDevicePlatformApplePushNotificationService; // Basically critical fail
}

PlayFab::AdminModels::FPushNotificationSegmentFilter::~FPushNotificationSegmentFilter()
{

}

void PlayFab::AdminModels::FPushNotificationSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PushNotificationDevicePlatform.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("PushNotificationDevicePlatform"));
        writeSegmentPushNotificationDevicePlatformEnumJSON(PushNotificationDevicePlatform, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FPushNotificationSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    PushNotificationDevicePlatform = readSegmentPushNotificationDevicePlatformFromValue(obj->TryGetField(TEXT("PushNotificationDevicePlatform")));

    return HasSucceeded;
}

PlayFab::AdminModels::FStatisticSegmentFilter::~FStatisticSegmentFilter()
{

}

void PlayFab::AdminModels::FStatisticSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Comparison.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Comparison"));
        writeSegmentFilterComparisonEnumJSON(Comparison, writer);
    }

    if (FilterValue.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FilterValue"));
        writer->WriteValue(FilterValue);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (UseCurrentVersion.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("UseCurrentVersion"));
        writer->WriteValue(UseCurrentVersion);
    }

    if (Version.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Version"));
        writer->WriteValue(Version);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FStatisticSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    Comparison = readSegmentFilterComparisonFromValue(obj->TryGetField(TEXT("Comparison")));

    const TSharedPtr<FJsonValue> FilterValueValue = obj->TryGetField(TEXT("FilterValue"));
    if (FilterValueValue.IsValid() && !FilterValueValue->IsNull())
    {
        FString TmpValue;
        if (FilterValueValue->TryGetString(TmpValue)) { FilterValue = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UseCurrentVersionValue = obj->TryGetField(TEXT("UseCurrentVersion"));
    if (UseCurrentVersionValue.IsValid() && !UseCurrentVersionValue->IsNull())
    {
        bool TmpValue;
        if (UseCurrentVersionValue->TryGetBool(TmpValue)) { UseCurrentVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        int32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FTagSegmentFilter::~FTagSegmentFilter()
{

}

void PlayFab::AdminModels::FTagSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Comparison.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Comparison"));
        writeSegmentFilterComparisonEnumJSON(Comparison, writer);
    }

    if (TagValue.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TagValue"));
        writer->WriteValue(TagValue);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FTagSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    Comparison = readSegmentFilterComparisonFromValue(obj->TryGetField(TEXT("Comparison")));

    const TSharedPtr<FJsonValue> TagValueValue = obj->TryGetField(TEXT("TagValue"));
    if (TagValueValue.IsValid() && !TagValueValue->IsNull())
    {
        FString TmpValue;
        if (TagValueValue->TryGetString(TmpValue)) { TagValue = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FTotalValueToDateInUSDSegmentFilter::~FTotalValueToDateInUSDSegmentFilter()
{

}

void PlayFab::AdminModels::FTotalValueToDateInUSDSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Amount.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Amount"));
        writer->WriteValue(Amount);
    }

    if (Comparison.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Comparison"));
        writeSegmentFilterComparisonEnumJSON(Comparison, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FTotalValueToDateInUSDSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        FString TmpValue;
        if (AmountValue->TryGetString(TmpValue)) { Amount = TmpValue; }
    }

    Comparison = readSegmentFilterComparisonFromValue(obj->TryGetField(TEXT("Comparison")));

    return HasSucceeded;
}

PlayFab::AdminModels::FUserOriginationSegmentFilter::~FUserOriginationSegmentFilter()
{

}

void PlayFab::AdminModels::FUserOriginationSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (LoginProvider.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LoginProvider"));
        writeSegmentLoginIdentityProviderEnumJSON(LoginProvider, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserOriginationSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    LoginProvider = readSegmentLoginIdentityProviderFromValue(obj->TryGetField(TEXT("LoginProvider")));

    return HasSucceeded;
}

void PlayFab::AdminModels::writeSegmentCurrencyEnumJSON(SegmentCurrency enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case SegmentCurrencyAED: writer->WriteValue(TEXT("AED")); break;
    case SegmentCurrencyAFN: writer->WriteValue(TEXT("AFN")); break;
    case SegmentCurrencyALL: writer->WriteValue(TEXT("ALL")); break;
    case SegmentCurrencyAMD: writer->WriteValue(TEXT("AMD")); break;
    case SegmentCurrencyANG: writer->WriteValue(TEXT("ANG")); break;
    case SegmentCurrencyAOA: writer->WriteValue(TEXT("AOA")); break;
    case SegmentCurrencyARS: writer->WriteValue(TEXT("ARS")); break;
    case SegmentCurrencyAUD: writer->WriteValue(TEXT("AUD")); break;
    case SegmentCurrencyAWG: writer->WriteValue(TEXT("AWG")); break;
    case SegmentCurrencyAZN: writer->WriteValue(TEXT("AZN")); break;
    case SegmentCurrencyBAM: writer->WriteValue(TEXT("BAM")); break;
    case SegmentCurrencyBBD: writer->WriteValue(TEXT("BBD")); break;
    case SegmentCurrencyBDT: writer->WriteValue(TEXT("BDT")); break;
    case SegmentCurrencyBGN: writer->WriteValue(TEXT("BGN")); break;
    case SegmentCurrencyBHD: writer->WriteValue(TEXT("BHD")); break;
    case SegmentCurrencyBIF: writer->WriteValue(TEXT("BIF")); break;
    case SegmentCurrencyBMD: writer->WriteValue(TEXT("BMD")); break;
    case SegmentCurrencyBND: writer->WriteValue(TEXT("BND")); break;
    case SegmentCurrencyBOB: writer->WriteValue(TEXT("BOB")); break;
    case SegmentCurrencyBRL: writer->WriteValue(TEXT("BRL")); break;
    case SegmentCurrencyBSD: writer->WriteValue(TEXT("BSD")); break;
    case SegmentCurrencyBTN: writer->WriteValue(TEXT("BTN")); break;
    case SegmentCurrencyBWP: writer->WriteValue(TEXT("BWP")); break;
    case SegmentCurrencyBYR: writer->WriteValue(TEXT("BYR")); break;
    case SegmentCurrencyBZD: writer->WriteValue(TEXT("BZD")); break;
    case SegmentCurrencyCAD: writer->WriteValue(TEXT("CAD")); break;
    case SegmentCurrencyCDF: writer->WriteValue(TEXT("CDF")); break;
    case SegmentCurrencyCHF: writer->WriteValue(TEXT("CHF")); break;
    case SegmentCurrencyCLP: writer->WriteValue(TEXT("CLP")); break;
    case SegmentCurrencyCNY: writer->WriteValue(TEXT("CNY")); break;
    case SegmentCurrencyCOP: writer->WriteValue(TEXT("COP")); break;
    case SegmentCurrencyCRC: writer->WriteValue(TEXT("CRC")); break;
    case SegmentCurrencyCUC: writer->WriteValue(TEXT("CUC")); break;
    case SegmentCurrencyCUP: writer->WriteValue(TEXT("CUP")); break;
    case SegmentCurrencyCVE: writer->WriteValue(TEXT("CVE")); break;
    case SegmentCurrencyCZK: writer->WriteValue(TEXT("CZK")); break;
    case SegmentCurrencyDJF: writer->WriteValue(TEXT("DJF")); break;
    case SegmentCurrencyDKK: writer->WriteValue(TEXT("DKK")); break;
    case SegmentCurrencyDOP: writer->WriteValue(TEXT("DOP")); break;
    case SegmentCurrencyDZD: writer->WriteValue(TEXT("DZD")); break;
    case SegmentCurrencyEGP: writer->WriteValue(TEXT("EGP")); break;
    case SegmentCurrencyERN: writer->WriteValue(TEXT("ERN")); break;
    case SegmentCurrencyETB: writer->WriteValue(TEXT("ETB")); break;
    case SegmentCurrencyEUR: writer->WriteValue(TEXT("EUR")); break;
    case SegmentCurrencyFJD: writer->WriteValue(TEXT("FJD")); break;
    case SegmentCurrencyFKP: writer->WriteValue(TEXT("FKP")); break;
    case SegmentCurrencyGBP: writer->WriteValue(TEXT("GBP")); break;
    case SegmentCurrencyGEL: writer->WriteValue(TEXT("GEL")); break;
    case SegmentCurrencyGGP: writer->WriteValue(TEXT("GGP")); break;
    case SegmentCurrencyGHS: writer->WriteValue(TEXT("GHS")); break;
    case SegmentCurrencyGIP: writer->WriteValue(TEXT("GIP")); break;
    case SegmentCurrencyGMD: writer->WriteValue(TEXT("GMD")); break;
    case SegmentCurrencyGNF: writer->WriteValue(TEXT("GNF")); break;
    case SegmentCurrencyGTQ: writer->WriteValue(TEXT("GTQ")); break;
    case SegmentCurrencyGYD: writer->WriteValue(TEXT("GYD")); break;
    case SegmentCurrencyHKD: writer->WriteValue(TEXT("HKD")); break;
    case SegmentCurrencyHNL: writer->WriteValue(TEXT("HNL")); break;
    case SegmentCurrencyHRK: writer->WriteValue(TEXT("HRK")); break;
    case SegmentCurrencyHTG: writer->WriteValue(TEXT("HTG")); break;
    case SegmentCurrencyHUF: writer->WriteValue(TEXT("HUF")); break;
    case SegmentCurrencyIDR: writer->WriteValue(TEXT("IDR")); break;
    case SegmentCurrencyILS: writer->WriteValue(TEXT("ILS")); break;
    case SegmentCurrencyIMP: writer->WriteValue(TEXT("IMP")); break;
    case SegmentCurrencyINR: writer->WriteValue(TEXT("INR")); break;
    case SegmentCurrencyIQD: writer->WriteValue(TEXT("IQD")); break;
    case SegmentCurrencyIRR: writer->WriteValue(TEXT("IRR")); break;
    case SegmentCurrencyISK: writer->WriteValue(TEXT("ISK")); break;
    case SegmentCurrencyJEP: writer->WriteValue(TEXT("JEP")); break;
    case SegmentCurrencyJMD: writer->WriteValue(TEXT("JMD")); break;
    case SegmentCurrencyJOD: writer->WriteValue(TEXT("JOD")); break;
    case SegmentCurrencyJPY: writer->WriteValue(TEXT("JPY")); break;
    case SegmentCurrencyKES: writer->WriteValue(TEXT("KES")); break;
    case SegmentCurrencyKGS: writer->WriteValue(TEXT("KGS")); break;
    case SegmentCurrencyKHR: writer->WriteValue(TEXT("KHR")); break;
    case SegmentCurrencyKMF: writer->WriteValue(TEXT("KMF")); break;
    case SegmentCurrencyKPW: writer->WriteValue(TEXT("KPW")); break;
    case SegmentCurrencyKRW: writer->WriteValue(TEXT("KRW")); break;
    case SegmentCurrencyKWD: writer->WriteValue(TEXT("KWD")); break;
    case SegmentCurrencyKYD: writer->WriteValue(TEXT("KYD")); break;
    case SegmentCurrencyKZT: writer->WriteValue(TEXT("KZT")); break;
    case SegmentCurrencyLAK: writer->WriteValue(TEXT("LAK")); break;
    case SegmentCurrencyLBP: writer->WriteValue(TEXT("LBP")); break;
    case SegmentCurrencyLKR: writer->WriteValue(TEXT("LKR")); break;
    case SegmentCurrencyLRD: writer->WriteValue(TEXT("LRD")); break;
    case SegmentCurrencyLSL: writer->WriteValue(TEXT("LSL")); break;
    case SegmentCurrencyLYD: writer->WriteValue(TEXT("LYD")); break;
    case SegmentCurrencyMAD: writer->WriteValue(TEXT("MAD")); break;
    case SegmentCurrencyMDL: writer->WriteValue(TEXT("MDL")); break;
    case SegmentCurrencyMGA: writer->WriteValue(TEXT("MGA")); break;
    case SegmentCurrencyMKD: writer->WriteValue(TEXT("MKD")); break;
    case SegmentCurrencyMMK: writer->WriteValue(TEXT("MMK")); break;
    case SegmentCurrencyMNT: writer->WriteValue(TEXT("MNT")); break;
    case SegmentCurrencyMOP: writer->WriteValue(TEXT("MOP")); break;
    case SegmentCurrencyMRO: writer->WriteValue(TEXT("MRO")); break;
    case SegmentCurrencyMUR: writer->WriteValue(TEXT("MUR")); break;
    case SegmentCurrencyMVR: writer->WriteValue(TEXT("MVR")); break;
    case SegmentCurrencyMWK: writer->WriteValue(TEXT("MWK")); break;
    case SegmentCurrencyMXN: writer->WriteValue(TEXT("MXN")); break;
    case SegmentCurrencyMYR: writer->WriteValue(TEXT("MYR")); break;
    case SegmentCurrencyMZN: writer->WriteValue(TEXT("MZN")); break;
    case SegmentCurrencyNAD: writer->WriteValue(TEXT("NAD")); break;
    case SegmentCurrencyNGN: writer->WriteValue(TEXT("NGN")); break;
    case SegmentCurrencyNIO: writer->WriteValue(TEXT("NIO")); break;
    case SegmentCurrencyNOK: writer->WriteValue(TEXT("NOK")); break;
    case SegmentCurrencyNPR: writer->WriteValue(TEXT("NPR")); break;
    case SegmentCurrencyNZD: writer->WriteValue(TEXT("NZD")); break;
    case SegmentCurrencyOMR: writer->WriteValue(TEXT("OMR")); break;
    case SegmentCurrencyPAB: writer->WriteValue(TEXT("PAB")); break;
    case SegmentCurrencyPEN: writer->WriteValue(TEXT("PEN")); break;
    case SegmentCurrencyPGK: writer->WriteValue(TEXT("PGK")); break;
    case SegmentCurrencyPHP: writer->WriteValue(TEXT("PHP")); break;
    case SegmentCurrencyPKR: writer->WriteValue(TEXT("PKR")); break;
    case SegmentCurrencyPLN: writer->WriteValue(TEXT("PLN")); break;
    case SegmentCurrencyPYG: writer->WriteValue(TEXT("PYG")); break;
    case SegmentCurrencyQAR: writer->WriteValue(TEXT("QAR")); break;
    case SegmentCurrencyRON: writer->WriteValue(TEXT("RON")); break;
    case SegmentCurrencyRSD: writer->WriteValue(TEXT("RSD")); break;
    case SegmentCurrencyRUB: writer->WriteValue(TEXT("RUB")); break;
    case SegmentCurrencyRWF: writer->WriteValue(TEXT("RWF")); break;
    case SegmentCurrencySAR: writer->WriteValue(TEXT("SAR")); break;
    case SegmentCurrencySBD: writer->WriteValue(TEXT("SBD")); break;
    case SegmentCurrencySCR: writer->WriteValue(TEXT("SCR")); break;
    case SegmentCurrencySDG: writer->WriteValue(TEXT("SDG")); break;
    case SegmentCurrencySEK: writer->WriteValue(TEXT("SEK")); break;
    case SegmentCurrencySGD: writer->WriteValue(TEXT("SGD")); break;
    case SegmentCurrencySHP: writer->WriteValue(TEXT("SHP")); break;
    case SegmentCurrencySLL: writer->WriteValue(TEXT("SLL")); break;
    case SegmentCurrencySOS: writer->WriteValue(TEXT("SOS")); break;
    case SegmentCurrencySPL: writer->WriteValue(TEXT("SPL")); break;
    case SegmentCurrencySRD: writer->WriteValue(TEXT("SRD")); break;
    case SegmentCurrencySTD: writer->WriteValue(TEXT("STD")); break;
    case SegmentCurrencySVC: writer->WriteValue(TEXT("SVC")); break;
    case SegmentCurrencySYP: writer->WriteValue(TEXT("SYP")); break;
    case SegmentCurrencySZL: writer->WriteValue(TEXT("SZL")); break;
    case SegmentCurrencyTHB: writer->WriteValue(TEXT("THB")); break;
    case SegmentCurrencyTJS: writer->WriteValue(TEXT("TJS")); break;
    case SegmentCurrencyTMT: writer->WriteValue(TEXT("TMT")); break;
    case SegmentCurrencyTND: writer->WriteValue(TEXT("TND")); break;
    case SegmentCurrencyTOP: writer->WriteValue(TEXT("TOP")); break;
    case SegmentCurrencyTRY: writer->WriteValue(TEXT("TRY")); break;
    case SegmentCurrencyTTD: writer->WriteValue(TEXT("TTD")); break;
    case SegmentCurrencyTVD: writer->WriteValue(TEXT("TVD")); break;
    case SegmentCurrencyTWD: writer->WriteValue(TEXT("TWD")); break;
    case SegmentCurrencyTZS: writer->WriteValue(TEXT("TZS")); break;
    case SegmentCurrencyUAH: writer->WriteValue(TEXT("UAH")); break;
    case SegmentCurrencyUGX: writer->WriteValue(TEXT("UGX")); break;
    case SegmentCurrencyUSD: writer->WriteValue(TEXT("USD")); break;
    case SegmentCurrencyUYU: writer->WriteValue(TEXT("UYU")); break;
    case SegmentCurrencyUZS: writer->WriteValue(TEXT("UZS")); break;
    case SegmentCurrencyVEF: writer->WriteValue(TEXT("VEF")); break;
    case SegmentCurrencyVND: writer->WriteValue(TEXT("VND")); break;
    case SegmentCurrencyVUV: writer->WriteValue(TEXT("VUV")); break;
    case SegmentCurrencyWST: writer->WriteValue(TEXT("WST")); break;
    case SegmentCurrencyXAF: writer->WriteValue(TEXT("XAF")); break;
    case SegmentCurrencyXCD: writer->WriteValue(TEXT("XCD")); break;
    case SegmentCurrencyXDR: writer->WriteValue(TEXT("XDR")); break;
    case SegmentCurrencyXOF: writer->WriteValue(TEXT("XOF")); break;
    case SegmentCurrencyXPF: writer->WriteValue(TEXT("XPF")); break;
    case SegmentCurrencyYER: writer->WriteValue(TEXT("YER")); break;
    case SegmentCurrencyZAR: writer->WriteValue(TEXT("ZAR")); break;
    case SegmentCurrencyZMW: writer->WriteValue(TEXT("ZMW")); break;
    case SegmentCurrencyZWD: writer->WriteValue(TEXT("ZWD")); break;
    }
}

AdminModels::SegmentCurrency PlayFab::AdminModels::readSegmentCurrencyFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readSegmentCurrencyFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::SegmentCurrency PlayFab::AdminModels::readSegmentCurrencyFromValue(const FString& value)
{
    static TMap<FString, SegmentCurrency> _SegmentCurrencyMap;
    if (_SegmentCurrencyMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _SegmentCurrencyMap.Add(TEXT("AED"), SegmentCurrencyAED);
        _SegmentCurrencyMap.Add(TEXT("AFN"), SegmentCurrencyAFN);
        _SegmentCurrencyMap.Add(TEXT("ALL"), SegmentCurrencyALL);
        _SegmentCurrencyMap.Add(TEXT("AMD"), SegmentCurrencyAMD);
        _SegmentCurrencyMap.Add(TEXT("ANG"), SegmentCurrencyANG);
        _SegmentCurrencyMap.Add(TEXT("AOA"), SegmentCurrencyAOA);
        _SegmentCurrencyMap.Add(TEXT("ARS"), SegmentCurrencyARS);
        _SegmentCurrencyMap.Add(TEXT("AUD"), SegmentCurrencyAUD);
        _SegmentCurrencyMap.Add(TEXT("AWG"), SegmentCurrencyAWG);
        _SegmentCurrencyMap.Add(TEXT("AZN"), SegmentCurrencyAZN);
        _SegmentCurrencyMap.Add(TEXT("BAM"), SegmentCurrencyBAM);
        _SegmentCurrencyMap.Add(TEXT("BBD"), SegmentCurrencyBBD);
        _SegmentCurrencyMap.Add(TEXT("BDT"), SegmentCurrencyBDT);
        _SegmentCurrencyMap.Add(TEXT("BGN"), SegmentCurrencyBGN);
        _SegmentCurrencyMap.Add(TEXT("BHD"), SegmentCurrencyBHD);
        _SegmentCurrencyMap.Add(TEXT("BIF"), SegmentCurrencyBIF);
        _SegmentCurrencyMap.Add(TEXT("BMD"), SegmentCurrencyBMD);
        _SegmentCurrencyMap.Add(TEXT("BND"), SegmentCurrencyBND);
        _SegmentCurrencyMap.Add(TEXT("BOB"), SegmentCurrencyBOB);
        _SegmentCurrencyMap.Add(TEXT("BRL"), SegmentCurrencyBRL);
        _SegmentCurrencyMap.Add(TEXT("BSD"), SegmentCurrencyBSD);
        _SegmentCurrencyMap.Add(TEXT("BTN"), SegmentCurrencyBTN);
        _SegmentCurrencyMap.Add(TEXT("BWP"), SegmentCurrencyBWP);
        _SegmentCurrencyMap.Add(TEXT("BYR"), SegmentCurrencyBYR);
        _SegmentCurrencyMap.Add(TEXT("BZD"), SegmentCurrencyBZD);
        _SegmentCurrencyMap.Add(TEXT("CAD"), SegmentCurrencyCAD);
        _SegmentCurrencyMap.Add(TEXT("CDF"), SegmentCurrencyCDF);
        _SegmentCurrencyMap.Add(TEXT("CHF"), SegmentCurrencyCHF);
        _SegmentCurrencyMap.Add(TEXT("CLP"), SegmentCurrencyCLP);
        _SegmentCurrencyMap.Add(TEXT("CNY"), SegmentCurrencyCNY);
        _SegmentCurrencyMap.Add(TEXT("COP"), SegmentCurrencyCOP);
        _SegmentCurrencyMap.Add(TEXT("CRC"), SegmentCurrencyCRC);
        _SegmentCurrencyMap.Add(TEXT("CUC"), SegmentCurrencyCUC);
        _SegmentCurrencyMap.Add(TEXT("CUP"), SegmentCurrencyCUP);
        _SegmentCurrencyMap.Add(TEXT("CVE"), SegmentCurrencyCVE);
        _SegmentCurrencyMap.Add(TEXT("CZK"), SegmentCurrencyCZK);
        _SegmentCurrencyMap.Add(TEXT("DJF"), SegmentCurrencyDJF);
        _SegmentCurrencyMap.Add(TEXT("DKK"), SegmentCurrencyDKK);
        _SegmentCurrencyMap.Add(TEXT("DOP"), SegmentCurrencyDOP);
        _SegmentCurrencyMap.Add(TEXT("DZD"), SegmentCurrencyDZD);
        _SegmentCurrencyMap.Add(TEXT("EGP"), SegmentCurrencyEGP);
        _SegmentCurrencyMap.Add(TEXT("ERN"), SegmentCurrencyERN);
        _SegmentCurrencyMap.Add(TEXT("ETB"), SegmentCurrencyETB);
        _SegmentCurrencyMap.Add(TEXT("EUR"), SegmentCurrencyEUR);
        _SegmentCurrencyMap.Add(TEXT("FJD"), SegmentCurrencyFJD);
        _SegmentCurrencyMap.Add(TEXT("FKP"), SegmentCurrencyFKP);
        _SegmentCurrencyMap.Add(TEXT("GBP"), SegmentCurrencyGBP);
        _SegmentCurrencyMap.Add(TEXT("GEL"), SegmentCurrencyGEL);
        _SegmentCurrencyMap.Add(TEXT("GGP"), SegmentCurrencyGGP);
        _SegmentCurrencyMap.Add(TEXT("GHS"), SegmentCurrencyGHS);
        _SegmentCurrencyMap.Add(TEXT("GIP"), SegmentCurrencyGIP);
        _SegmentCurrencyMap.Add(TEXT("GMD"), SegmentCurrencyGMD);
        _SegmentCurrencyMap.Add(TEXT("GNF"), SegmentCurrencyGNF);
        _SegmentCurrencyMap.Add(TEXT("GTQ"), SegmentCurrencyGTQ);
        _SegmentCurrencyMap.Add(TEXT("GYD"), SegmentCurrencyGYD);
        _SegmentCurrencyMap.Add(TEXT("HKD"), SegmentCurrencyHKD);
        _SegmentCurrencyMap.Add(TEXT("HNL"), SegmentCurrencyHNL);
        _SegmentCurrencyMap.Add(TEXT("HRK"), SegmentCurrencyHRK);
        _SegmentCurrencyMap.Add(TEXT("HTG"), SegmentCurrencyHTG);
        _SegmentCurrencyMap.Add(TEXT("HUF"), SegmentCurrencyHUF);
        _SegmentCurrencyMap.Add(TEXT("IDR"), SegmentCurrencyIDR);
        _SegmentCurrencyMap.Add(TEXT("ILS"), SegmentCurrencyILS);
        _SegmentCurrencyMap.Add(TEXT("IMP"), SegmentCurrencyIMP);
        _SegmentCurrencyMap.Add(TEXT("INR"), SegmentCurrencyINR);
        _SegmentCurrencyMap.Add(TEXT("IQD"), SegmentCurrencyIQD);
        _SegmentCurrencyMap.Add(TEXT("IRR"), SegmentCurrencyIRR);
        _SegmentCurrencyMap.Add(TEXT("ISK"), SegmentCurrencyISK);
        _SegmentCurrencyMap.Add(TEXT("JEP"), SegmentCurrencyJEP);
        _SegmentCurrencyMap.Add(TEXT("JMD"), SegmentCurrencyJMD);
        _SegmentCurrencyMap.Add(TEXT("JOD"), SegmentCurrencyJOD);
        _SegmentCurrencyMap.Add(TEXT("JPY"), SegmentCurrencyJPY);
        _SegmentCurrencyMap.Add(TEXT("KES"), SegmentCurrencyKES);
        _SegmentCurrencyMap.Add(TEXT("KGS"), SegmentCurrencyKGS);
        _SegmentCurrencyMap.Add(TEXT("KHR"), SegmentCurrencyKHR);
        _SegmentCurrencyMap.Add(TEXT("KMF"), SegmentCurrencyKMF);
        _SegmentCurrencyMap.Add(TEXT("KPW"), SegmentCurrencyKPW);
        _SegmentCurrencyMap.Add(TEXT("KRW"), SegmentCurrencyKRW);
        _SegmentCurrencyMap.Add(TEXT("KWD"), SegmentCurrencyKWD);
        _SegmentCurrencyMap.Add(TEXT("KYD"), SegmentCurrencyKYD);
        _SegmentCurrencyMap.Add(TEXT("KZT"), SegmentCurrencyKZT);
        _SegmentCurrencyMap.Add(TEXT("LAK"), SegmentCurrencyLAK);
        _SegmentCurrencyMap.Add(TEXT("LBP"), SegmentCurrencyLBP);
        _SegmentCurrencyMap.Add(TEXT("LKR"), SegmentCurrencyLKR);
        _SegmentCurrencyMap.Add(TEXT("LRD"), SegmentCurrencyLRD);
        _SegmentCurrencyMap.Add(TEXT("LSL"), SegmentCurrencyLSL);
        _SegmentCurrencyMap.Add(TEXT("LYD"), SegmentCurrencyLYD);
        _SegmentCurrencyMap.Add(TEXT("MAD"), SegmentCurrencyMAD);
        _SegmentCurrencyMap.Add(TEXT("MDL"), SegmentCurrencyMDL);
        _SegmentCurrencyMap.Add(TEXT("MGA"), SegmentCurrencyMGA);
        _SegmentCurrencyMap.Add(TEXT("MKD"), SegmentCurrencyMKD);
        _SegmentCurrencyMap.Add(TEXT("MMK"), SegmentCurrencyMMK);
        _SegmentCurrencyMap.Add(TEXT("MNT"), SegmentCurrencyMNT);
        _SegmentCurrencyMap.Add(TEXT("MOP"), SegmentCurrencyMOP);
        _SegmentCurrencyMap.Add(TEXT("MRO"), SegmentCurrencyMRO);
        _SegmentCurrencyMap.Add(TEXT("MUR"), SegmentCurrencyMUR);
        _SegmentCurrencyMap.Add(TEXT("MVR"), SegmentCurrencyMVR);
        _SegmentCurrencyMap.Add(TEXT("MWK"), SegmentCurrencyMWK);
        _SegmentCurrencyMap.Add(TEXT("MXN"), SegmentCurrencyMXN);
        _SegmentCurrencyMap.Add(TEXT("MYR"), SegmentCurrencyMYR);
        _SegmentCurrencyMap.Add(TEXT("MZN"), SegmentCurrencyMZN);
        _SegmentCurrencyMap.Add(TEXT("NAD"), SegmentCurrencyNAD);
        _SegmentCurrencyMap.Add(TEXT("NGN"), SegmentCurrencyNGN);
        _SegmentCurrencyMap.Add(TEXT("NIO"), SegmentCurrencyNIO);
        _SegmentCurrencyMap.Add(TEXT("NOK"), SegmentCurrencyNOK);
        _SegmentCurrencyMap.Add(TEXT("NPR"), SegmentCurrencyNPR);
        _SegmentCurrencyMap.Add(TEXT("NZD"), SegmentCurrencyNZD);
        _SegmentCurrencyMap.Add(TEXT("OMR"), SegmentCurrencyOMR);
        _SegmentCurrencyMap.Add(TEXT("PAB"), SegmentCurrencyPAB);
        _SegmentCurrencyMap.Add(TEXT("PEN"), SegmentCurrencyPEN);
        _SegmentCurrencyMap.Add(TEXT("PGK"), SegmentCurrencyPGK);
        _SegmentCurrencyMap.Add(TEXT("PHP"), SegmentCurrencyPHP);
        _SegmentCurrencyMap.Add(TEXT("PKR"), SegmentCurrencyPKR);
        _SegmentCurrencyMap.Add(TEXT("PLN"), SegmentCurrencyPLN);
        _SegmentCurrencyMap.Add(TEXT("PYG"), SegmentCurrencyPYG);
        _SegmentCurrencyMap.Add(TEXT("QAR"), SegmentCurrencyQAR);
        _SegmentCurrencyMap.Add(TEXT("RON"), SegmentCurrencyRON);
        _SegmentCurrencyMap.Add(TEXT("RSD"), SegmentCurrencyRSD);
        _SegmentCurrencyMap.Add(TEXT("RUB"), SegmentCurrencyRUB);
        _SegmentCurrencyMap.Add(TEXT("RWF"), SegmentCurrencyRWF);
        _SegmentCurrencyMap.Add(TEXT("SAR"), SegmentCurrencySAR);
        _SegmentCurrencyMap.Add(TEXT("SBD"), SegmentCurrencySBD);
        _SegmentCurrencyMap.Add(TEXT("SCR"), SegmentCurrencySCR);
        _SegmentCurrencyMap.Add(TEXT("SDG"), SegmentCurrencySDG);
        _SegmentCurrencyMap.Add(TEXT("SEK"), SegmentCurrencySEK);
        _SegmentCurrencyMap.Add(TEXT("SGD"), SegmentCurrencySGD);
        _SegmentCurrencyMap.Add(TEXT("SHP"), SegmentCurrencySHP);
        _SegmentCurrencyMap.Add(TEXT("SLL"), SegmentCurrencySLL);
        _SegmentCurrencyMap.Add(TEXT("SOS"), SegmentCurrencySOS);
        _SegmentCurrencyMap.Add(TEXT("SPL"), SegmentCurrencySPL);
        _SegmentCurrencyMap.Add(TEXT("SRD"), SegmentCurrencySRD);
        _SegmentCurrencyMap.Add(TEXT("STD"), SegmentCurrencySTD);
        _SegmentCurrencyMap.Add(TEXT("SVC"), SegmentCurrencySVC);
        _SegmentCurrencyMap.Add(TEXT("SYP"), SegmentCurrencySYP);
        _SegmentCurrencyMap.Add(TEXT("SZL"), SegmentCurrencySZL);
        _SegmentCurrencyMap.Add(TEXT("THB"), SegmentCurrencyTHB);
        _SegmentCurrencyMap.Add(TEXT("TJS"), SegmentCurrencyTJS);
        _SegmentCurrencyMap.Add(TEXT("TMT"), SegmentCurrencyTMT);
        _SegmentCurrencyMap.Add(TEXT("TND"), SegmentCurrencyTND);
        _SegmentCurrencyMap.Add(TEXT("TOP"), SegmentCurrencyTOP);
        _SegmentCurrencyMap.Add(TEXT("TRY"), SegmentCurrencyTRY);
        _SegmentCurrencyMap.Add(TEXT("TTD"), SegmentCurrencyTTD);
        _SegmentCurrencyMap.Add(TEXT("TVD"), SegmentCurrencyTVD);
        _SegmentCurrencyMap.Add(TEXT("TWD"), SegmentCurrencyTWD);
        _SegmentCurrencyMap.Add(TEXT("TZS"), SegmentCurrencyTZS);
        _SegmentCurrencyMap.Add(TEXT("UAH"), SegmentCurrencyUAH);
        _SegmentCurrencyMap.Add(TEXT("UGX"), SegmentCurrencyUGX);
        _SegmentCurrencyMap.Add(TEXT("USD"), SegmentCurrencyUSD);
        _SegmentCurrencyMap.Add(TEXT("UYU"), SegmentCurrencyUYU);
        _SegmentCurrencyMap.Add(TEXT("UZS"), SegmentCurrencyUZS);
        _SegmentCurrencyMap.Add(TEXT("VEF"), SegmentCurrencyVEF);
        _SegmentCurrencyMap.Add(TEXT("VND"), SegmentCurrencyVND);
        _SegmentCurrencyMap.Add(TEXT("VUV"), SegmentCurrencyVUV);
        _SegmentCurrencyMap.Add(TEXT("WST"), SegmentCurrencyWST);
        _SegmentCurrencyMap.Add(TEXT("XAF"), SegmentCurrencyXAF);
        _SegmentCurrencyMap.Add(TEXT("XCD"), SegmentCurrencyXCD);
        _SegmentCurrencyMap.Add(TEXT("XDR"), SegmentCurrencyXDR);
        _SegmentCurrencyMap.Add(TEXT("XOF"), SegmentCurrencyXOF);
        _SegmentCurrencyMap.Add(TEXT("XPF"), SegmentCurrencyXPF);
        _SegmentCurrencyMap.Add(TEXT("YER"), SegmentCurrencyYER);
        _SegmentCurrencyMap.Add(TEXT("ZAR"), SegmentCurrencyZAR);
        _SegmentCurrencyMap.Add(TEXT("ZMW"), SegmentCurrencyZMW);
        _SegmentCurrencyMap.Add(TEXT("ZWD"), SegmentCurrencyZWD);

    }

    if (!value.IsEmpty())
    {
        auto output = _SegmentCurrencyMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return SegmentCurrencyAED; // Basically critical fail
}

PlayFab::AdminModels::FValueToDateSegmentFilter::~FValueToDateSegmentFilter()
{

}

void PlayFab::AdminModels::FValueToDateSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Amount.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Amount"));
        writer->WriteValue(Amount);
    }

    if (Comparison.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Comparison"));
        writeSegmentFilterComparisonEnumJSON(Comparison, writer);
    }

    if (Currency.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Currency"));
        writeSegmentCurrencyEnumJSON(Currency, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FValueToDateSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        FString TmpValue;
        if (AmountValue->TryGetString(TmpValue)) { Amount = TmpValue; }
    }

    Comparison = readSegmentFilterComparisonFromValue(obj->TryGetField(TEXT("Comparison")));

    Currency = readSegmentCurrencyFromValue(obj->TryGetField(TEXT("Currency")));

    return HasSucceeded;
}

PlayFab::AdminModels::FVirtualCurrencyBalanceSegmentFilter::~FVirtualCurrencyBalanceSegmentFilter()
{

}

void PlayFab::AdminModels::FVirtualCurrencyBalanceSegmentFilter::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (Comparison.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Comparison"));
        writeSegmentFilterComparisonEnumJSON(Comparison, writer);
    }

    if (CurrencyCode.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CurrencyCode"));
        writer->WriteValue(CurrencyCode);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FVirtualCurrencyBalanceSegmentFilter::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    Comparison = readSegmentFilterComparisonFromValue(obj->TryGetField(TEXT("Comparison")));

    const TSharedPtr<FJsonValue> CurrencyCodeValue = obj->TryGetField(TEXT("CurrencyCode"));
    if (CurrencyCodeValue.IsValid() && !CurrencyCodeValue->IsNull())
    {
        FString TmpValue;
        if (CurrencyCodeValue->TryGetString(TmpValue)) { CurrencyCode = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FSegmentAndDefinition::~FSegmentAndDefinition()
{
    //if (AdCampaignFilter != nullptr) delete AdCampaignFilter;
    //if (AllPlayersFilter != nullptr) delete AllPlayersFilter;
    //if (FirstLoginDateFilter != nullptr) delete FirstLoginDateFilter;
    //if (FirstLoginFilter != nullptr) delete FirstLoginFilter;
    //if (LastLoginDateFilter != nullptr) delete LastLoginDateFilter;
    //if (LastLoginFilter != nullptr) delete LastLoginFilter;
    //if (LinkedUserAccountFilter != nullptr) delete LinkedUserAccountFilter;
    //if (LinkedUserAccountHasEmailFilter != nullptr) delete LinkedUserAccountHasEmailFilter;
    //if (LocationFilter != nullptr) delete LocationFilter;
    //if (PushNotificationFilter != nullptr) delete PushNotificationFilter;
    //if (StatisticFilter != nullptr) delete StatisticFilter;
    //if (TagFilter != nullptr) delete TagFilter;
    //if (TotalValueToDateInUSDFilter != nullptr) delete TotalValueToDateInUSDFilter;
    //if (UserOriginationFilter != nullptr) delete UserOriginationFilter;
    //if (ValueToDateFilter != nullptr) delete ValueToDateFilter;
    //if (VirtualCurrencyBalanceFilter != nullptr) delete VirtualCurrencyBalanceFilter;

}

void PlayFab::AdminModels::FSegmentAndDefinition::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AdCampaignFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AdCampaignFilter"));
        AdCampaignFilter->writeJSON(writer);
    }

    if (AllPlayersFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AllPlayersFilter"));
        AllPlayersFilter->writeJSON(writer);
    }

    if (FirstLoginDateFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("FirstLoginDateFilter"));
        FirstLoginDateFilter->writeJSON(writer);
    }

    if (FirstLoginFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("FirstLoginFilter"));
        FirstLoginFilter->writeJSON(writer);
    }

    if (LastLoginDateFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("LastLoginDateFilter"));
        LastLoginDateFilter->writeJSON(writer);
    }

    if (LastLoginFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("LastLoginFilter"));
        LastLoginFilter->writeJSON(writer);
    }

    if (LinkedUserAccountFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("LinkedUserAccountFilter"));
        LinkedUserAccountFilter->writeJSON(writer);
    }

    if (LinkedUserAccountHasEmailFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("LinkedUserAccountHasEmailFilter"));
        LinkedUserAccountHasEmailFilter->writeJSON(writer);
    }

    if (LocationFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("LocationFilter"));
        LocationFilter->writeJSON(writer);
    }

    if (PushNotificationFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("PushNotificationFilter"));
        PushNotificationFilter->writeJSON(writer);
    }

    if (StatisticFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticFilter"));
        StatisticFilter->writeJSON(writer);
    }

    if (TagFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("TagFilter"));
        TagFilter->writeJSON(writer);
    }

    if (TotalValueToDateInUSDFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("TotalValueToDateInUSDFilter"));
        TotalValueToDateInUSDFilter->writeJSON(writer);
    }

    if (UserOriginationFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("UserOriginationFilter"));
        UserOriginationFilter->writeJSON(writer);
    }

    if (ValueToDateFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("ValueToDateFilter"));
        ValueToDateFilter->writeJSON(writer);
    }

    if (VirtualCurrencyBalanceFilter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("VirtualCurrencyBalanceFilter"));
        VirtualCurrencyBalanceFilter->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSegmentAndDefinition::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AdCampaignFilterValue = obj->TryGetField(TEXT("AdCampaignFilter"));
    if (AdCampaignFilterValue.IsValid() && !AdCampaignFilterValue->IsNull())
    {
        AdCampaignFilter = MakeShareable(new FAdCampaignSegmentFilter(AdCampaignFilterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> AllPlayersFilterValue = obj->TryGetField(TEXT("AllPlayersFilter"));
    if (AllPlayersFilterValue.IsValid() && !AllPlayersFilterValue->IsNull())
    {
        AllPlayersFilter = MakeShareable(new FAllPlayersSegmentFilter(AllPlayersFilterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> FirstLoginDateFilterValue = obj->TryGetField(TEXT("FirstLoginDateFilter"));
    if (FirstLoginDateFilterValue.IsValid() && !FirstLoginDateFilterValue->IsNull())
    {
        FirstLoginDateFilter = MakeShareable(new FFirstLoginDateSegmentFilter(FirstLoginDateFilterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> FirstLoginFilterValue = obj->TryGetField(TEXT("FirstLoginFilter"));
    if (FirstLoginFilterValue.IsValid() && !FirstLoginFilterValue->IsNull())
    {
        FirstLoginFilter = MakeShareable(new FFirstLoginTimespanSegmentFilter(FirstLoginFilterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> LastLoginDateFilterValue = obj->TryGetField(TEXT("LastLoginDateFilter"));
    if (LastLoginDateFilterValue.IsValid() && !LastLoginDateFilterValue->IsNull())
    {
        LastLoginDateFilter = MakeShareable(new FLastLoginDateSegmentFilter(LastLoginDateFilterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> LastLoginFilterValue = obj->TryGetField(TEXT("LastLoginFilter"));
    if (LastLoginFilterValue.IsValid() && !LastLoginFilterValue->IsNull())
    {
        LastLoginFilter = MakeShareable(new FLastLoginTimespanSegmentFilter(LastLoginFilterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> LinkedUserAccountFilterValue = obj->TryGetField(TEXT("LinkedUserAccountFilter"));
    if (LinkedUserAccountFilterValue.IsValid() && !LinkedUserAccountFilterValue->IsNull())
    {
        LinkedUserAccountFilter = MakeShareable(new FLinkedUserAccountSegmentFilter(LinkedUserAccountFilterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> LinkedUserAccountHasEmailFilterValue = obj->TryGetField(TEXT("LinkedUserAccountHasEmailFilter"));
    if (LinkedUserAccountHasEmailFilterValue.IsValid() && !LinkedUserAccountHasEmailFilterValue->IsNull())
    {
        LinkedUserAccountHasEmailFilter = MakeShareable(new FLinkedUserAccountHasEmailSegmentFilter(LinkedUserAccountHasEmailFilterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> LocationFilterValue = obj->TryGetField(TEXT("LocationFilter"));
    if (LocationFilterValue.IsValid() && !LocationFilterValue->IsNull())
    {
        LocationFilter = MakeShareable(new FLocationSegmentFilter(LocationFilterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> PushNotificationFilterValue = obj->TryGetField(TEXT("PushNotificationFilter"));
    if (PushNotificationFilterValue.IsValid() && !PushNotificationFilterValue->IsNull())
    {
        PushNotificationFilter = MakeShareable(new FPushNotificationSegmentFilter(PushNotificationFilterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> StatisticFilterValue = obj->TryGetField(TEXT("StatisticFilter"));
    if (StatisticFilterValue.IsValid() && !StatisticFilterValue->IsNull())
    {
        StatisticFilter = MakeShareable(new FStatisticSegmentFilter(StatisticFilterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> TagFilterValue = obj->TryGetField(TEXT("TagFilter"));
    if (TagFilterValue.IsValid() && !TagFilterValue->IsNull())
    {
        TagFilter = MakeShareable(new FTagSegmentFilter(TagFilterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> TotalValueToDateInUSDFilterValue = obj->TryGetField(TEXT("TotalValueToDateInUSDFilter"));
    if (TotalValueToDateInUSDFilterValue.IsValid() && !TotalValueToDateInUSDFilterValue->IsNull())
    {
        TotalValueToDateInUSDFilter = MakeShareable(new FTotalValueToDateInUSDSegmentFilter(TotalValueToDateInUSDFilterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> UserOriginationFilterValue = obj->TryGetField(TEXT("UserOriginationFilter"));
    if (UserOriginationFilterValue.IsValid() && !UserOriginationFilterValue->IsNull())
    {
        UserOriginationFilter = MakeShareable(new FUserOriginationSegmentFilter(UserOriginationFilterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ValueToDateFilterValue = obj->TryGetField(TEXT("ValueToDateFilter"));
    if (ValueToDateFilterValue.IsValid() && !ValueToDateFilterValue->IsNull())
    {
        ValueToDateFilter = MakeShareable(new FValueToDateSegmentFilter(ValueToDateFilterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> VirtualCurrencyBalanceFilterValue = obj->TryGetField(TEXT("VirtualCurrencyBalanceFilter"));
    if (VirtualCurrencyBalanceFilterValue.IsValid() && !VirtualCurrencyBalanceFilterValue->IsNull())
    {
        VirtualCurrencyBalanceFilter = MakeShareable(new FVirtualCurrencyBalanceSegmentFilter(VirtualCurrencyBalanceFilterValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FSegmentOrDefinition::~FSegmentOrDefinition()
{

}

void PlayFab::AdminModels::FSegmentOrDefinition::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (SegmentAndDefinitions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("SegmentAndDefinitions"));
        for (const FSegmentAndDefinition& item : SegmentAndDefinitions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSegmentOrDefinition::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&SegmentAndDefinitionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("SegmentAndDefinitions"));
    for (int32 Idx = 0; Idx < SegmentAndDefinitionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SegmentAndDefinitionsArray[Idx];
        SegmentAndDefinitions.Add(FSegmentAndDefinition(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FSegmentModel::~FSegmentModel()
{

}

void PlayFab::AdminModels::FSegmentModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    if (EnteredSegmentActions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("EnteredSegmentActions"));
        for (const FSegmentTrigger& item : EnteredSegmentActions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteIdentifierPrefix(TEXT("LastUpdateTime"));
    writeDatetime(LastUpdateTime, writer);

    if (LeftSegmentActions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("LeftSegmentActions"));
        for (const FSegmentTrigger& item : LeftSegmentActions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (SegmentId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SegmentId"));
        writer->WriteValue(SegmentId);
    }

    if (SegmentOrDefinitions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("SegmentOrDefinitions"));
        for (const FSegmentOrDefinition& item : SegmentOrDefinitions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSegmentModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&EnteredSegmentActionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("EnteredSegmentActions"));
    for (int32 Idx = 0; Idx < EnteredSegmentActionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = EnteredSegmentActionsArray[Idx];
        EnteredSegmentActions.Add(FSegmentTrigger(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> LastUpdateTimeValue = obj->TryGetField(TEXT("LastUpdateTime"));
    if (LastUpdateTimeValue.IsValid())
        LastUpdateTime = readDatetime(LastUpdateTimeValue);


    const TArray<TSharedPtr<FJsonValue>>&LeftSegmentActionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("LeftSegmentActions"));
    for (int32 Idx = 0; Idx < LeftSegmentActionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LeftSegmentActionsArray[Idx];
        LeftSegmentActions.Add(FSegmentTrigger(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SegmentIdValue = obj->TryGetField(TEXT("SegmentId"));
    if (SegmentIdValue.IsValid() && !SegmentIdValue->IsNull())
    {
        FString TmpValue;
        if (SegmentIdValue->TryGetString(TmpValue)) { SegmentId = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&SegmentOrDefinitionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("SegmentOrDefinitions"));
    for (int32 Idx = 0; Idx < SegmentOrDefinitionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SegmentOrDefinitionsArray[Idx];
        SegmentOrDefinitions.Add(FSegmentOrDefinition(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FCreateSegmentRequest::~FCreateSegmentRequest()
{

}

void PlayFab::AdminModels::FCreateSegmentRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("SegmentModel"));
    pfSegmentModel.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCreateSegmentRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> SegmentModelValue = obj->TryGetField(TEXT("SegmentModel"));
    if (SegmentModelValue.IsValid() && !SegmentModelValue->IsNull())
    {
        pfSegmentModel = FSegmentModel(SegmentModelValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCreateSegmentResponse::~FCreateSegmentResponse()
{

}

void PlayFab::AdminModels::FCreateSegmentResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ErrorMessage.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorMessage"));
        writer->WriteValue(ErrorMessage);
    }

    if (SegmentId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SegmentId"));
        writer->WriteValue(SegmentId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCreateSegmentResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ErrorMessageValue = obj->TryGetField(TEXT("ErrorMessage"));
    if (ErrorMessageValue.IsValid() && !ErrorMessageValue->IsNull())
    {
        FString TmpValue;
        if (ErrorMessageValue->TryGetString(TmpValue)) { ErrorMessage = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SegmentIdValue = obj->TryGetField(TEXT("SegmentId"));
    if (SegmentIdValue.IsValid() && !SegmentIdValue->IsNull())
    {
        FString TmpValue;
        if (SegmentIdValue->TryGetString(TmpValue)) { SegmentId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FCreateTaskResult::~FCreateTaskResult()
{

}

void PlayFab::AdminModels::FCreateTaskResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (TaskId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TaskId"));
        writer->WriteValue(TaskId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FCreateTaskResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> TaskIdValue = obj->TryGetField(TEXT("TaskId"));
    if (TaskIdValue.IsValid() && !TaskIdValue->IsNull())
    {
        FString TmpValue;
        if (TaskIdValue->TryGetString(TmpValue)) { TaskId = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeCurrencyEnumJSON(Currency enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case CurrencyAED: writer->WriteValue(TEXT("AED")); break;
    case CurrencyAFN: writer->WriteValue(TEXT("AFN")); break;
    case CurrencyALL: writer->WriteValue(TEXT("ALL")); break;
    case CurrencyAMD: writer->WriteValue(TEXT("AMD")); break;
    case CurrencyANG: writer->WriteValue(TEXT("ANG")); break;
    case CurrencyAOA: writer->WriteValue(TEXT("AOA")); break;
    case CurrencyARS: writer->WriteValue(TEXT("ARS")); break;
    case CurrencyAUD: writer->WriteValue(TEXT("AUD")); break;
    case CurrencyAWG: writer->WriteValue(TEXT("AWG")); break;
    case CurrencyAZN: writer->WriteValue(TEXT("AZN")); break;
    case CurrencyBAM: writer->WriteValue(TEXT("BAM")); break;
    case CurrencyBBD: writer->WriteValue(TEXT("BBD")); break;
    case CurrencyBDT: writer->WriteValue(TEXT("BDT")); break;
    case CurrencyBGN: writer->WriteValue(TEXT("BGN")); break;
    case CurrencyBHD: writer->WriteValue(TEXT("BHD")); break;
    case CurrencyBIF: writer->WriteValue(TEXT("BIF")); break;
    case CurrencyBMD: writer->WriteValue(TEXT("BMD")); break;
    case CurrencyBND: writer->WriteValue(TEXT("BND")); break;
    case CurrencyBOB: writer->WriteValue(TEXT("BOB")); break;
    case CurrencyBRL: writer->WriteValue(TEXT("BRL")); break;
    case CurrencyBSD: writer->WriteValue(TEXT("BSD")); break;
    case CurrencyBTN: writer->WriteValue(TEXT("BTN")); break;
    case CurrencyBWP: writer->WriteValue(TEXT("BWP")); break;
    case CurrencyBYR: writer->WriteValue(TEXT("BYR")); break;
    case CurrencyBZD: writer->WriteValue(TEXT("BZD")); break;
    case CurrencyCAD: writer->WriteValue(TEXT("CAD")); break;
    case CurrencyCDF: writer->WriteValue(TEXT("CDF")); break;
    case CurrencyCHF: writer->WriteValue(TEXT("CHF")); break;
    case CurrencyCLP: writer->WriteValue(TEXT("CLP")); break;
    case CurrencyCNY: writer->WriteValue(TEXT("CNY")); break;
    case CurrencyCOP: writer->WriteValue(TEXT("COP")); break;
    case CurrencyCRC: writer->WriteValue(TEXT("CRC")); break;
    case CurrencyCUC: writer->WriteValue(TEXT("CUC")); break;
    case CurrencyCUP: writer->WriteValue(TEXT("CUP")); break;
    case CurrencyCVE: writer->WriteValue(TEXT("CVE")); break;
    case CurrencyCZK: writer->WriteValue(TEXT("CZK")); break;
    case CurrencyDJF: writer->WriteValue(TEXT("DJF")); break;
    case CurrencyDKK: writer->WriteValue(TEXT("DKK")); break;
    case CurrencyDOP: writer->WriteValue(TEXT("DOP")); break;
    case CurrencyDZD: writer->WriteValue(TEXT("DZD")); break;
    case CurrencyEGP: writer->WriteValue(TEXT("EGP")); break;
    case CurrencyERN: writer->WriteValue(TEXT("ERN")); break;
    case CurrencyETB: writer->WriteValue(TEXT("ETB")); break;
    case CurrencyEUR: writer->WriteValue(TEXT("EUR")); break;
    case CurrencyFJD: writer->WriteValue(TEXT("FJD")); break;
    case CurrencyFKP: writer->WriteValue(TEXT("FKP")); break;
    case CurrencyGBP: writer->WriteValue(TEXT("GBP")); break;
    case CurrencyGEL: writer->WriteValue(TEXT("GEL")); break;
    case CurrencyGGP: writer->WriteValue(TEXT("GGP")); break;
    case CurrencyGHS: writer->WriteValue(TEXT("GHS")); break;
    case CurrencyGIP: writer->WriteValue(TEXT("GIP")); break;
    case CurrencyGMD: writer->WriteValue(TEXT("GMD")); break;
    case CurrencyGNF: writer->WriteValue(TEXT("GNF")); break;
    case CurrencyGTQ: writer->WriteValue(TEXT("GTQ")); break;
    case CurrencyGYD: writer->WriteValue(TEXT("GYD")); break;
    case CurrencyHKD: writer->WriteValue(TEXT("HKD")); break;
    case CurrencyHNL: writer->WriteValue(TEXT("HNL")); break;
    case CurrencyHRK: writer->WriteValue(TEXT("HRK")); break;
    case CurrencyHTG: writer->WriteValue(TEXT("HTG")); break;
    case CurrencyHUF: writer->WriteValue(TEXT("HUF")); break;
    case CurrencyIDR: writer->WriteValue(TEXT("IDR")); break;
    case CurrencyILS: writer->WriteValue(TEXT("ILS")); break;
    case CurrencyIMP: writer->WriteValue(TEXT("IMP")); break;
    case CurrencyINR: writer->WriteValue(TEXT("INR")); break;
    case CurrencyIQD: writer->WriteValue(TEXT("IQD")); break;
    case CurrencyIRR: writer->WriteValue(TEXT("IRR")); break;
    case CurrencyISK: writer->WriteValue(TEXT("ISK")); break;
    case CurrencyJEP: writer->WriteValue(TEXT("JEP")); break;
    case CurrencyJMD: writer->WriteValue(TEXT("JMD")); break;
    case CurrencyJOD: writer->WriteValue(TEXT("JOD")); break;
    case CurrencyJPY: writer->WriteValue(TEXT("JPY")); break;
    case CurrencyKES: writer->WriteValue(TEXT("KES")); break;
    case CurrencyKGS: writer->WriteValue(TEXT("KGS")); break;
    case CurrencyKHR: writer->WriteValue(TEXT("KHR")); break;
    case CurrencyKMF: writer->WriteValue(TEXT("KMF")); break;
    case CurrencyKPW: writer->WriteValue(TEXT("KPW")); break;
    case CurrencyKRW: writer->WriteValue(TEXT("KRW")); break;
    case CurrencyKWD: writer->WriteValue(TEXT("KWD")); break;
    case CurrencyKYD: writer->WriteValue(TEXT("KYD")); break;
    case CurrencyKZT: writer->WriteValue(TEXT("KZT")); break;
    case CurrencyLAK: writer->WriteValue(TEXT("LAK")); break;
    case CurrencyLBP: writer->WriteValue(TEXT("LBP")); break;
    case CurrencyLKR: writer->WriteValue(TEXT("LKR")); break;
    case CurrencyLRD: writer->WriteValue(TEXT("LRD")); break;
    case CurrencyLSL: writer->WriteValue(TEXT("LSL")); break;
    case CurrencyLYD: writer->WriteValue(TEXT("LYD")); break;
    case CurrencyMAD: writer->WriteValue(TEXT("MAD")); break;
    case CurrencyMDL: writer->WriteValue(TEXT("MDL")); break;
    case CurrencyMGA: writer->WriteValue(TEXT("MGA")); break;
    case CurrencyMKD: writer->WriteValue(TEXT("MKD")); break;
    case CurrencyMMK: writer->WriteValue(TEXT("MMK")); break;
    case CurrencyMNT: writer->WriteValue(TEXT("MNT")); break;
    case CurrencyMOP: writer->WriteValue(TEXT("MOP")); break;
    case CurrencyMRO: writer->WriteValue(TEXT("MRO")); break;
    case CurrencyMUR: writer->WriteValue(TEXT("MUR")); break;
    case CurrencyMVR: writer->WriteValue(TEXT("MVR")); break;
    case CurrencyMWK: writer->WriteValue(TEXT("MWK")); break;
    case CurrencyMXN: writer->WriteValue(TEXT("MXN")); break;
    case CurrencyMYR: writer->WriteValue(TEXT("MYR")); break;
    case CurrencyMZN: writer->WriteValue(TEXT("MZN")); break;
    case CurrencyNAD: writer->WriteValue(TEXT("NAD")); break;
    case CurrencyNGN: writer->WriteValue(TEXT("NGN")); break;
    case CurrencyNIO: writer->WriteValue(TEXT("NIO")); break;
    case CurrencyNOK: writer->WriteValue(TEXT("NOK")); break;
    case CurrencyNPR: writer->WriteValue(TEXT("NPR")); break;
    case CurrencyNZD: writer->WriteValue(TEXT("NZD")); break;
    case CurrencyOMR: writer->WriteValue(TEXT("OMR")); break;
    case CurrencyPAB: writer->WriteValue(TEXT("PAB")); break;
    case CurrencyPEN: writer->WriteValue(TEXT("PEN")); break;
    case CurrencyPGK: writer->WriteValue(TEXT("PGK")); break;
    case CurrencyPHP: writer->WriteValue(TEXT("PHP")); break;
    case CurrencyPKR: writer->WriteValue(TEXT("PKR")); break;
    case CurrencyPLN: writer->WriteValue(TEXT("PLN")); break;
    case CurrencyPYG: writer->WriteValue(TEXT("PYG")); break;
    case CurrencyQAR: writer->WriteValue(TEXT("QAR")); break;
    case CurrencyRON: writer->WriteValue(TEXT("RON")); break;
    case CurrencyRSD: writer->WriteValue(TEXT("RSD")); break;
    case CurrencyRUB: writer->WriteValue(TEXT("RUB")); break;
    case CurrencyRWF: writer->WriteValue(TEXT("RWF")); break;
    case CurrencySAR: writer->WriteValue(TEXT("SAR")); break;
    case CurrencySBD: writer->WriteValue(TEXT("SBD")); break;
    case CurrencySCR: writer->WriteValue(TEXT("SCR")); break;
    case CurrencySDG: writer->WriteValue(TEXT("SDG")); break;
    case CurrencySEK: writer->WriteValue(TEXT("SEK")); break;
    case CurrencySGD: writer->WriteValue(TEXT("SGD")); break;
    case CurrencySHP: writer->WriteValue(TEXT("SHP")); break;
    case CurrencySLL: writer->WriteValue(TEXT("SLL")); break;
    case CurrencySOS: writer->WriteValue(TEXT("SOS")); break;
    case CurrencySPL: writer->WriteValue(TEXT("SPL")); break;
    case CurrencySRD: writer->WriteValue(TEXT("SRD")); break;
    case CurrencySTD: writer->WriteValue(TEXT("STD")); break;
    case CurrencySVC: writer->WriteValue(TEXT("SVC")); break;
    case CurrencySYP: writer->WriteValue(TEXT("SYP")); break;
    case CurrencySZL: writer->WriteValue(TEXT("SZL")); break;
    case CurrencyTHB: writer->WriteValue(TEXT("THB")); break;
    case CurrencyTJS: writer->WriteValue(TEXT("TJS")); break;
    case CurrencyTMT: writer->WriteValue(TEXT("TMT")); break;
    case CurrencyTND: writer->WriteValue(TEXT("TND")); break;
    case CurrencyTOP: writer->WriteValue(TEXT("TOP")); break;
    case CurrencyTRY: writer->WriteValue(TEXT("TRY")); break;
    case CurrencyTTD: writer->WriteValue(TEXT("TTD")); break;
    case CurrencyTVD: writer->WriteValue(TEXT("TVD")); break;
    case CurrencyTWD: writer->WriteValue(TEXT("TWD")); break;
    case CurrencyTZS: writer->WriteValue(TEXT("TZS")); break;
    case CurrencyUAH: writer->WriteValue(TEXT("UAH")); break;
    case CurrencyUGX: writer->WriteValue(TEXT("UGX")); break;
    case CurrencyUSD: writer->WriteValue(TEXT("USD")); break;
    case CurrencyUYU: writer->WriteValue(TEXT("UYU")); break;
    case CurrencyUZS: writer->WriteValue(TEXT("UZS")); break;
    case CurrencyVEF: writer->WriteValue(TEXT("VEF")); break;
    case CurrencyVND: writer->WriteValue(TEXT("VND")); break;
    case CurrencyVUV: writer->WriteValue(TEXT("VUV")); break;
    case CurrencyWST: writer->WriteValue(TEXT("WST")); break;
    case CurrencyXAF: writer->WriteValue(TEXT("XAF")); break;
    case CurrencyXCD: writer->WriteValue(TEXT("XCD")); break;
    case CurrencyXDR: writer->WriteValue(TEXT("XDR")); break;
    case CurrencyXOF: writer->WriteValue(TEXT("XOF")); break;
    case CurrencyXPF: writer->WriteValue(TEXT("XPF")); break;
    case CurrencyYER: writer->WriteValue(TEXT("YER")); break;
    case CurrencyZAR: writer->WriteValue(TEXT("ZAR")); break;
    case CurrencyZMW: writer->WriteValue(TEXT("ZMW")); break;
    case CurrencyZWD: writer->WriteValue(TEXT("ZWD")); break;
    }
}

AdminModels::Currency PlayFab::AdminModels::readCurrencyFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readCurrencyFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::Currency PlayFab::AdminModels::readCurrencyFromValue(const FString& value)
{
    static TMap<FString, Currency> _CurrencyMap;
    if (_CurrencyMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _CurrencyMap.Add(TEXT("AED"), CurrencyAED);
        _CurrencyMap.Add(TEXT("AFN"), CurrencyAFN);
        _CurrencyMap.Add(TEXT("ALL"), CurrencyALL);
        _CurrencyMap.Add(TEXT("AMD"), CurrencyAMD);
        _CurrencyMap.Add(TEXT("ANG"), CurrencyANG);
        _CurrencyMap.Add(TEXT("AOA"), CurrencyAOA);
        _CurrencyMap.Add(TEXT("ARS"), CurrencyARS);
        _CurrencyMap.Add(TEXT("AUD"), CurrencyAUD);
        _CurrencyMap.Add(TEXT("AWG"), CurrencyAWG);
        _CurrencyMap.Add(TEXT("AZN"), CurrencyAZN);
        _CurrencyMap.Add(TEXT("BAM"), CurrencyBAM);
        _CurrencyMap.Add(TEXT("BBD"), CurrencyBBD);
        _CurrencyMap.Add(TEXT("BDT"), CurrencyBDT);
        _CurrencyMap.Add(TEXT("BGN"), CurrencyBGN);
        _CurrencyMap.Add(TEXT("BHD"), CurrencyBHD);
        _CurrencyMap.Add(TEXT("BIF"), CurrencyBIF);
        _CurrencyMap.Add(TEXT("BMD"), CurrencyBMD);
        _CurrencyMap.Add(TEXT("BND"), CurrencyBND);
        _CurrencyMap.Add(TEXT("BOB"), CurrencyBOB);
        _CurrencyMap.Add(TEXT("BRL"), CurrencyBRL);
        _CurrencyMap.Add(TEXT("BSD"), CurrencyBSD);
        _CurrencyMap.Add(TEXT("BTN"), CurrencyBTN);
        _CurrencyMap.Add(TEXT("BWP"), CurrencyBWP);
        _CurrencyMap.Add(TEXT("BYR"), CurrencyBYR);
        _CurrencyMap.Add(TEXT("BZD"), CurrencyBZD);
        _CurrencyMap.Add(TEXT("CAD"), CurrencyCAD);
        _CurrencyMap.Add(TEXT("CDF"), CurrencyCDF);
        _CurrencyMap.Add(TEXT("CHF"), CurrencyCHF);
        _CurrencyMap.Add(TEXT("CLP"), CurrencyCLP);
        _CurrencyMap.Add(TEXT("CNY"), CurrencyCNY);
        _CurrencyMap.Add(TEXT("COP"), CurrencyCOP);
        _CurrencyMap.Add(TEXT("CRC"), CurrencyCRC);
        _CurrencyMap.Add(TEXT("CUC"), CurrencyCUC);
        _CurrencyMap.Add(TEXT("CUP"), CurrencyCUP);
        _CurrencyMap.Add(TEXT("CVE"), CurrencyCVE);
        _CurrencyMap.Add(TEXT("CZK"), CurrencyCZK);
        _CurrencyMap.Add(TEXT("DJF"), CurrencyDJF);
        _CurrencyMap.Add(TEXT("DKK"), CurrencyDKK);
        _CurrencyMap.Add(TEXT("DOP"), CurrencyDOP);
        _CurrencyMap.Add(TEXT("DZD"), CurrencyDZD);
        _CurrencyMap.Add(TEXT("EGP"), CurrencyEGP);
        _CurrencyMap.Add(TEXT("ERN"), CurrencyERN);
        _CurrencyMap.Add(TEXT("ETB"), CurrencyETB);
        _CurrencyMap.Add(TEXT("EUR"), CurrencyEUR);
        _CurrencyMap.Add(TEXT("FJD"), CurrencyFJD);
        _CurrencyMap.Add(TEXT("FKP"), CurrencyFKP);
        _CurrencyMap.Add(TEXT("GBP"), CurrencyGBP);
        _CurrencyMap.Add(TEXT("GEL"), CurrencyGEL);
        _CurrencyMap.Add(TEXT("GGP"), CurrencyGGP);
        _CurrencyMap.Add(TEXT("GHS"), CurrencyGHS);
        _CurrencyMap.Add(TEXT("GIP"), CurrencyGIP);
        _CurrencyMap.Add(TEXT("GMD"), CurrencyGMD);
        _CurrencyMap.Add(TEXT("GNF"), CurrencyGNF);
        _CurrencyMap.Add(TEXT("GTQ"), CurrencyGTQ);
        _CurrencyMap.Add(TEXT("GYD"), CurrencyGYD);
        _CurrencyMap.Add(TEXT("HKD"), CurrencyHKD);
        _CurrencyMap.Add(TEXT("HNL"), CurrencyHNL);
        _CurrencyMap.Add(TEXT("HRK"), CurrencyHRK);
        _CurrencyMap.Add(TEXT("HTG"), CurrencyHTG);
        _CurrencyMap.Add(TEXT("HUF"), CurrencyHUF);
        _CurrencyMap.Add(TEXT("IDR"), CurrencyIDR);
        _CurrencyMap.Add(TEXT("ILS"), CurrencyILS);
        _CurrencyMap.Add(TEXT("IMP"), CurrencyIMP);
        _CurrencyMap.Add(TEXT("INR"), CurrencyINR);
        _CurrencyMap.Add(TEXT("IQD"), CurrencyIQD);
        _CurrencyMap.Add(TEXT("IRR"), CurrencyIRR);
        _CurrencyMap.Add(TEXT("ISK"), CurrencyISK);
        _CurrencyMap.Add(TEXT("JEP"), CurrencyJEP);
        _CurrencyMap.Add(TEXT("JMD"), CurrencyJMD);
        _CurrencyMap.Add(TEXT("JOD"), CurrencyJOD);
        _CurrencyMap.Add(TEXT("JPY"), CurrencyJPY);
        _CurrencyMap.Add(TEXT("KES"), CurrencyKES);
        _CurrencyMap.Add(TEXT("KGS"), CurrencyKGS);
        _CurrencyMap.Add(TEXT("KHR"), CurrencyKHR);
        _CurrencyMap.Add(TEXT("KMF"), CurrencyKMF);
        _CurrencyMap.Add(TEXT("KPW"), CurrencyKPW);
        _CurrencyMap.Add(TEXT("KRW"), CurrencyKRW);
        _CurrencyMap.Add(TEXT("KWD"), CurrencyKWD);
        _CurrencyMap.Add(TEXT("KYD"), CurrencyKYD);
        _CurrencyMap.Add(TEXT("KZT"), CurrencyKZT);
        _CurrencyMap.Add(TEXT("LAK"), CurrencyLAK);
        _CurrencyMap.Add(TEXT("LBP"), CurrencyLBP);
        _CurrencyMap.Add(TEXT("LKR"), CurrencyLKR);
        _CurrencyMap.Add(TEXT("LRD"), CurrencyLRD);
        _CurrencyMap.Add(TEXT("LSL"), CurrencyLSL);
        _CurrencyMap.Add(TEXT("LYD"), CurrencyLYD);
        _CurrencyMap.Add(TEXT("MAD"), CurrencyMAD);
        _CurrencyMap.Add(TEXT("MDL"), CurrencyMDL);
        _CurrencyMap.Add(TEXT("MGA"), CurrencyMGA);
        _CurrencyMap.Add(TEXT("MKD"), CurrencyMKD);
        _CurrencyMap.Add(TEXT("MMK"), CurrencyMMK);
        _CurrencyMap.Add(TEXT("MNT"), CurrencyMNT);
        _CurrencyMap.Add(TEXT("MOP"), CurrencyMOP);
        _CurrencyMap.Add(TEXT("MRO"), CurrencyMRO);
        _CurrencyMap.Add(TEXT("MUR"), CurrencyMUR);
        _CurrencyMap.Add(TEXT("MVR"), CurrencyMVR);
        _CurrencyMap.Add(TEXT("MWK"), CurrencyMWK);
        _CurrencyMap.Add(TEXT("MXN"), CurrencyMXN);
        _CurrencyMap.Add(TEXT("MYR"), CurrencyMYR);
        _CurrencyMap.Add(TEXT("MZN"), CurrencyMZN);
        _CurrencyMap.Add(TEXT("NAD"), CurrencyNAD);
        _CurrencyMap.Add(TEXT("NGN"), CurrencyNGN);
        _CurrencyMap.Add(TEXT("NIO"), CurrencyNIO);
        _CurrencyMap.Add(TEXT("NOK"), CurrencyNOK);
        _CurrencyMap.Add(TEXT("NPR"), CurrencyNPR);
        _CurrencyMap.Add(TEXT("NZD"), CurrencyNZD);
        _CurrencyMap.Add(TEXT("OMR"), CurrencyOMR);
        _CurrencyMap.Add(TEXT("PAB"), CurrencyPAB);
        _CurrencyMap.Add(TEXT("PEN"), CurrencyPEN);
        _CurrencyMap.Add(TEXT("PGK"), CurrencyPGK);
        _CurrencyMap.Add(TEXT("PHP"), CurrencyPHP);
        _CurrencyMap.Add(TEXT("PKR"), CurrencyPKR);
        _CurrencyMap.Add(TEXT("PLN"), CurrencyPLN);
        _CurrencyMap.Add(TEXT("PYG"), CurrencyPYG);
        _CurrencyMap.Add(TEXT("QAR"), CurrencyQAR);
        _CurrencyMap.Add(TEXT("RON"), CurrencyRON);
        _CurrencyMap.Add(TEXT("RSD"), CurrencyRSD);
        _CurrencyMap.Add(TEXT("RUB"), CurrencyRUB);
        _CurrencyMap.Add(TEXT("RWF"), CurrencyRWF);
        _CurrencyMap.Add(TEXT("SAR"), CurrencySAR);
        _CurrencyMap.Add(TEXT("SBD"), CurrencySBD);
        _CurrencyMap.Add(TEXT("SCR"), CurrencySCR);
        _CurrencyMap.Add(TEXT("SDG"), CurrencySDG);
        _CurrencyMap.Add(TEXT("SEK"), CurrencySEK);
        _CurrencyMap.Add(TEXT("SGD"), CurrencySGD);
        _CurrencyMap.Add(TEXT("SHP"), CurrencySHP);
        _CurrencyMap.Add(TEXT("SLL"), CurrencySLL);
        _CurrencyMap.Add(TEXT("SOS"), CurrencySOS);
        _CurrencyMap.Add(TEXT("SPL"), CurrencySPL);
        _CurrencyMap.Add(TEXT("SRD"), CurrencySRD);
        _CurrencyMap.Add(TEXT("STD"), CurrencySTD);
        _CurrencyMap.Add(TEXT("SVC"), CurrencySVC);
        _CurrencyMap.Add(TEXT("SYP"), CurrencySYP);
        _CurrencyMap.Add(TEXT("SZL"), CurrencySZL);
        _CurrencyMap.Add(TEXT("THB"), CurrencyTHB);
        _CurrencyMap.Add(TEXT("TJS"), CurrencyTJS);
        _CurrencyMap.Add(TEXT("TMT"), CurrencyTMT);
        _CurrencyMap.Add(TEXT("TND"), CurrencyTND);
        _CurrencyMap.Add(TEXT("TOP"), CurrencyTOP);
        _CurrencyMap.Add(TEXT("TRY"), CurrencyTRY);
        _CurrencyMap.Add(TEXT("TTD"), CurrencyTTD);
        _CurrencyMap.Add(TEXT("TVD"), CurrencyTVD);
        _CurrencyMap.Add(TEXT("TWD"), CurrencyTWD);
        _CurrencyMap.Add(TEXT("TZS"), CurrencyTZS);
        _CurrencyMap.Add(TEXT("UAH"), CurrencyUAH);
        _CurrencyMap.Add(TEXT("UGX"), CurrencyUGX);
        _CurrencyMap.Add(TEXT("USD"), CurrencyUSD);
        _CurrencyMap.Add(TEXT("UYU"), CurrencyUYU);
        _CurrencyMap.Add(TEXT("UZS"), CurrencyUZS);
        _CurrencyMap.Add(TEXT("VEF"), CurrencyVEF);
        _CurrencyMap.Add(TEXT("VND"), CurrencyVND);
        _CurrencyMap.Add(TEXT("VUV"), CurrencyVUV);
        _CurrencyMap.Add(TEXT("WST"), CurrencyWST);
        _CurrencyMap.Add(TEXT("XAF"), CurrencyXAF);
        _CurrencyMap.Add(TEXT("XCD"), CurrencyXCD);
        _CurrencyMap.Add(TEXT("XDR"), CurrencyXDR);
        _CurrencyMap.Add(TEXT("XOF"), CurrencyXOF);
        _CurrencyMap.Add(TEXT("XPF"), CurrencyXPF);
        _CurrencyMap.Add(TEXT("YER"), CurrencyYER);
        _CurrencyMap.Add(TEXT("ZAR"), CurrencyZAR);
        _CurrencyMap.Add(TEXT("ZMW"), CurrencyZMW);
        _CurrencyMap.Add(TEXT("ZWD"), CurrencyZWD);

    }

    if (!value.IsEmpty())
    {
        auto output = _CurrencyMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return CurrencyAED; // Basically critical fail
}

PlayFab::AdminModels::FDeleteContentRequest::~FDeleteContentRequest()
{

}

void PlayFab::AdminModels::FDeleteContentRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Key.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeleteContentRequest::Key, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Key"));
        writer->WriteValue(Key);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeleteContentRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> KeyValue = obj->TryGetField(TEXT("Key"));
    if (KeyValue.IsValid() && !KeyValue->IsNull())
    {
        FString TmpValue;
        if (KeyValue->TryGetString(TmpValue)) { Key = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FDeleteMasterPlayerAccountRequest::~FDeleteMasterPlayerAccountRequest()
{

}

void PlayFab::AdminModels::FDeleteMasterPlayerAccountRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (MetaData.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MetaData"));
        writer->WriteValue(MetaData);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeleteMasterPlayerAccountRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeleteMasterPlayerAccountRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> MetaDataValue = obj->TryGetField(TEXT("MetaData"));
    if (MetaDataValue.IsValid() && !MetaDataValue->IsNull())
    {
        FString TmpValue;
        if (MetaDataValue->TryGetString(TmpValue)) { MetaData = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FDeleteMasterPlayerAccountResult::~FDeleteMasterPlayerAccountResult()
{

}

void PlayFab::AdminModels::FDeleteMasterPlayerAccountResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (JobReceiptId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("JobReceiptId"));
        writer->WriteValue(JobReceiptId);
    }

    if (TitleIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TitleIds"));
        for (const FString& item : TitleIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeleteMasterPlayerAccountResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> JobReceiptIdValue = obj->TryGetField(TEXT("JobReceiptId"));
    if (JobReceiptIdValue.IsValid() && !JobReceiptIdValue->IsNull())
    {
        FString TmpValue;
        if (JobReceiptIdValue->TryGetString(TmpValue)) { JobReceiptId = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("TitleIds"), TitleIds);

    return HasSucceeded;
}

PlayFab::AdminModels::FDeleteOpenIdConnectionRequest::~FDeleteOpenIdConnectionRequest()
{

}

void PlayFab::AdminModels::FDeleteOpenIdConnectionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!ConnectionId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeleteOpenIdConnectionRequest::ConnectionId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ConnectionId"));
        writer->WriteValue(ConnectionId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeleteOpenIdConnectionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ConnectionIdValue = obj->TryGetField(TEXT("ConnectionId"));
    if (ConnectionIdValue.IsValid() && !ConnectionIdValue->IsNull())
    {
        FString TmpValue;
        if (ConnectionIdValue->TryGetString(TmpValue)) { ConnectionId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FDeletePlayerRequest::~FDeletePlayerRequest()
{

}

void PlayFab::AdminModels::FDeletePlayerRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeletePlayerRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeletePlayerRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FDeletePlayerResult::~FDeletePlayerResult()
{

}

void PlayFab::AdminModels::FDeletePlayerResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeletePlayerResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FDeletePlayerSharedSecretRequest::~FDeletePlayerSharedSecretRequest()
{

}

void PlayFab::AdminModels::FDeletePlayerSharedSecretRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (SecretKey.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SecretKey"));
        writer->WriteValue(SecretKey);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeletePlayerSharedSecretRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> SecretKeyValue = obj->TryGetField(TEXT("SecretKey"));
    if (SecretKeyValue.IsValid() && !SecretKeyValue->IsNull())
    {
        FString TmpValue;
        if (SecretKeyValue->TryGetString(TmpValue)) { SecretKey = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FDeletePlayerSharedSecretResult::~FDeletePlayerSharedSecretResult()
{

}

void PlayFab::AdminModels::FDeletePlayerSharedSecretResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeletePlayerSharedSecretResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FDeleteSegmentRequest::~FDeleteSegmentRequest()
{

}

void PlayFab::AdminModels::FDeleteSegmentRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!SegmentId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeleteSegmentRequest::SegmentId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("SegmentId"));
        writer->WriteValue(SegmentId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeleteSegmentRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> SegmentIdValue = obj->TryGetField(TEXT("SegmentId"));
    if (SegmentIdValue.IsValid() && !SegmentIdValue->IsNull())
    {
        FString TmpValue;
        if (SegmentIdValue->TryGetString(TmpValue)) { SegmentId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FDeleteSegmentsResponse::~FDeleteSegmentsResponse()
{

}

void PlayFab::AdminModels::FDeleteSegmentsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ErrorMessage.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorMessage"));
        writer->WriteValue(ErrorMessage);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeleteSegmentsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ErrorMessageValue = obj->TryGetField(TEXT("ErrorMessage"));
    if (ErrorMessageValue.IsValid() && !ErrorMessageValue->IsNull())
    {
        FString TmpValue;
        if (ErrorMessageValue->TryGetString(TmpValue)) { ErrorMessage = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FDeleteStoreRequest::~FDeleteStoreRequest()
{

}

void PlayFab::AdminModels::FDeleteStoreRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!StoreId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeleteStoreRequest::StoreId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("StoreId"));
        writer->WriteValue(StoreId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeleteStoreRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> StoreIdValue = obj->TryGetField(TEXT("StoreId"));
    if (StoreIdValue.IsValid() && !StoreIdValue->IsNull())
    {
        FString TmpValue;
        if (StoreIdValue->TryGetString(TmpValue)) { StoreId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FDeleteStoreResult::~FDeleteStoreResult()
{

}

void PlayFab::AdminModels::FDeleteStoreResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeleteStoreResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FDeleteTaskRequest::~FDeleteTaskRequest()
{
    //if (Identifier != nullptr) delete Identifier;

}

void PlayFab::AdminModels::FDeleteTaskRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Identifier.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Identifier"));
        Identifier->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeleteTaskRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdentifierValue = obj->TryGetField(TEXT("Identifier"));
    if (IdentifierValue.IsValid() && !IdentifierValue->IsNull())
    {
        Identifier = MakeShareable(new FNameIdentifier(IdentifierValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FDeleteTitleDataOverrideRequest::~FDeleteTitleDataOverrideRequest()
{

}

void PlayFab::AdminModels::FDeleteTitleDataOverrideRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!OverrideLabel.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeleteTitleDataOverrideRequest::OverrideLabel, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("OverrideLabel"));
        writer->WriteValue(OverrideLabel);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeleteTitleDataOverrideRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> OverrideLabelValue = obj->TryGetField(TEXT("OverrideLabel"));
    if (OverrideLabelValue.IsValid() && !OverrideLabelValue->IsNull())
    {
        FString TmpValue;
        if (OverrideLabelValue->TryGetString(TmpValue)) { OverrideLabel = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FDeleteTitleDataOverrideResult::~FDeleteTitleDataOverrideResult()
{

}

void PlayFab::AdminModels::FDeleteTitleDataOverrideResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeleteTitleDataOverrideResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FDeleteTitleRequest::~FDeleteTitleRequest()
{

}

void PlayFab::AdminModels::FDeleteTitleRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeleteTitleRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FDeleteTitleResult::~FDeleteTitleResult()
{

}

void PlayFab::AdminModels::FDeleteTitleResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FDeleteTitleResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

void PlayFab::AdminModels::writeEffectTypeEnumJSON(EffectType enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case EffectTypeAllow: writer->WriteValue(TEXT("Allow")); break;
    case EffectTypeDeny: writer->WriteValue(TEXT("Deny")); break;
    }
}

AdminModels::EffectType PlayFab::AdminModels::readEffectTypeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readEffectTypeFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::EffectType PlayFab::AdminModels::readEffectTypeFromValue(const FString& value)
{
    static TMap<FString, EffectType> _EffectTypeMap;
    if (_EffectTypeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _EffectTypeMap.Add(TEXT("Allow"), EffectTypeAllow);
        _EffectTypeMap.Add(TEXT("Deny"), EffectTypeDeny);

    }

    if (!value.IsEmpty())
    {
        auto output = _EffectTypeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return EffectTypeAllow; // Basically critical fail
}

PlayFab::AdminModels::FEmptyResponse::~FEmptyResponse()
{

}

void PlayFab::AdminModels::FEmptyResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FEmptyResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FEntityKey::~FEntityKey()
{

}

void PlayFab::AdminModels::FEntityKey::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Id.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EntityKey::Id, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FEntityKey::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FExportMasterPlayerDataRequest::~FExportMasterPlayerDataRequest()
{

}

void PlayFab::AdminModels::FExportMasterPlayerDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ExportMasterPlayerDataRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FExportMasterPlayerDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FExportMasterPlayerDataResult::~FExportMasterPlayerDataResult()
{

}

void PlayFab::AdminModels::FExportMasterPlayerDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (JobReceiptId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("JobReceiptId"));
        writer->WriteValue(JobReceiptId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FExportMasterPlayerDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> JobReceiptIdValue = obj->TryGetField(TEXT("JobReceiptId"));
    if (JobReceiptIdValue.IsValid() && !JobReceiptIdValue->IsNull())
    {
        FString TmpValue;
        if (JobReceiptIdValue->TryGetString(TmpValue)) { JobReceiptId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGameModeInfo::~FGameModeInfo()
{

}

void PlayFab::AdminModels::FGameModeInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Gamemode.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GameModeInfo::Gamemode, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Gamemode"));
        writer->WriteValue(Gamemode);
    }

    writer->WriteIdentifierPrefix(TEXT("MaxPlayerCount"));
    writer->WriteValue(static_cast<int64>(MaxPlayerCount));

    writer->WriteIdentifierPrefix(TEXT("MinPlayerCount"));
    writer->WriteValue(static_cast<int64>(MinPlayerCount));

    if (StartOpen.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("StartOpen"));
        writer->WriteValue(StartOpen);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGameModeInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GamemodeValue = obj->TryGetField(TEXT("Gamemode"));
    if (GamemodeValue.IsValid() && !GamemodeValue->IsNull())
    {
        FString TmpValue;
        if (GamemodeValue->TryGetString(TmpValue)) { Gamemode = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MaxPlayerCountValue = obj->TryGetField(TEXT("MaxPlayerCount"));
    if (MaxPlayerCountValue.IsValid() && !MaxPlayerCountValue->IsNull())
    {
        uint32 TmpValue;
        if (MaxPlayerCountValue->TryGetNumber(TmpValue)) { MaxPlayerCount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MinPlayerCountValue = obj->TryGetField(TEXT("MinPlayerCount"));
    if (MinPlayerCountValue.IsValid() && !MinPlayerCountValue->IsNull())
    {
        uint32 TmpValue;
        if (MinPlayerCountValue->TryGetNumber(TmpValue)) { MinPlayerCount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StartOpenValue = obj->TryGetField(TEXT("StartOpen"));
    if (StartOpenValue.IsValid() && !StartOpenValue->IsNull())
    {
        bool TmpValue;
        if (StartOpenValue->TryGetBool(TmpValue)) { StartOpen = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetActionsOnPlayersInSegmentTaskInstanceResult::~FGetActionsOnPlayersInSegmentTaskInstanceResult()
{
    //if (Parameter != nullptr) delete Parameter;
    //if (Summary != nullptr) delete Summary;

}

void PlayFab::AdminModels::FGetActionsOnPlayersInSegmentTaskInstanceResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Parameter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Parameter"));
        Parameter->writeJSON(writer);
    }

    if (Summary.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Summary"));
        Summary->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetActionsOnPlayersInSegmentTaskInstanceResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ParameterValue = obj->TryGetField(TEXT("Parameter"));
    if (ParameterValue.IsValid() && !ParameterValue->IsNull())
    {
        Parameter = MakeShareable(new FActionsOnPlayersInSegmentTaskParameter(ParameterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> SummaryValue = obj->TryGetField(TEXT("Summary"));
    if (SummaryValue.IsValid() && !SummaryValue->IsNull())
    {
        Summary = MakeShareable(new FActionsOnPlayersInSegmentTaskSummary(SummaryValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetAllSegmentsRequest::~FGetAllSegmentsRequest()
{

}

void PlayFab::AdminModels::FGetAllSegmentsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetAllSegmentsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FGetSegmentResult::~FGetSegmentResult()
{

}

void PlayFab::AdminModels::FGetSegmentResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ABTestParent.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ABTestParent"));
        writer->WriteValue(ABTestParent);
    }

    if (!Id.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetSegmentResult::Id, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetSegmentResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ABTestParentValue = obj->TryGetField(TEXT("ABTestParent"));
    if (ABTestParentValue.IsValid() && !ABTestParentValue->IsNull())
    {
        FString TmpValue;
        if (ABTestParentValue->TryGetString(TmpValue)) { ABTestParent = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetAllSegmentsResult::~FGetAllSegmentsResult()
{

}

void PlayFab::AdminModels::FGetAllSegmentsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Segments.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Segments"));
        for (const FGetSegmentResult& item : Segments)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetAllSegmentsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&SegmentsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Segments"));
    for (int32 Idx = 0; Idx < SegmentsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SegmentsArray[Idx];
        Segments.Add(FGetSegmentResult(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FGetCatalogItemsRequest::~FGetCatalogItemsRequest()
{

}

void PlayFab::AdminModels::FGetCatalogItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetCatalogItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetCatalogItemsResult::~FGetCatalogItemsResult()
{

}

void PlayFab::AdminModels::FGetCatalogItemsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Catalog.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Catalog"));
        for (const FCatalogItem& item : Catalog)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetCatalogItemsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&CatalogArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Catalog"));
    for (int32 Idx = 0; Idx < CatalogArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = CatalogArray[Idx];
        Catalog.Add(FCatalogItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FGetCloudScriptRevisionRequest::~FGetCloudScriptRevisionRequest()
{

}

void PlayFab::AdminModels::FGetCloudScriptRevisionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Revision.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Revision"));
        writer->WriteValue(Revision);
    }

    if (Version.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Version"));
        writer->WriteValue(Version);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetCloudScriptRevisionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> RevisionValue = obj->TryGetField(TEXT("Revision"));
    if (RevisionValue.IsValid() && !RevisionValue->IsNull())
    {
        int32 TmpValue;
        if (RevisionValue->TryGetNumber(TmpValue)) { Revision = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        int32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetCloudScriptRevisionResult::~FGetCloudScriptRevisionResult()
{

}

void PlayFab::AdminModels::FGetCloudScriptRevisionResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("CreatedAt"));
    writeDatetime(CreatedAt, writer);

    if (Files.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Files"));
        for (const FCloudScriptFile& item : Files)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteIdentifierPrefix(TEXT("IsPublished"));
    writer->WriteValue(IsPublished);

    writer->WriteIdentifierPrefix(TEXT("Revision"));
    writer->WriteValue(Revision);

    writer->WriteIdentifierPrefix(TEXT("Version"));
    writer->WriteValue(Version);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetCloudScriptRevisionResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CreatedAtValue = obj->TryGetField(TEXT("CreatedAt"));
    if (CreatedAtValue.IsValid())
        CreatedAt = readDatetime(CreatedAtValue);


    const TArray<TSharedPtr<FJsonValue>>&FilesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Files"));
    for (int32 Idx = 0; Idx < FilesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = FilesArray[Idx];
        Files.Add(FCloudScriptFile(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> IsPublishedValue = obj->TryGetField(TEXT("IsPublished"));
    if (IsPublishedValue.IsValid() && !IsPublishedValue->IsNull())
    {
        bool TmpValue;
        if (IsPublishedValue->TryGetBool(TmpValue)) { IsPublished = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RevisionValue = obj->TryGetField(TEXT("Revision"));
    if (RevisionValue.IsValid() && !RevisionValue->IsNull())
    {
        int32 TmpValue;
        if (RevisionValue->TryGetNumber(TmpValue)) { Revision = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        int32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetCloudScriptTaskInstanceResult::~FGetCloudScriptTaskInstanceResult()
{
    //if (Parameter != nullptr) delete Parameter;
    //if (Summary != nullptr) delete Summary;

}

void PlayFab::AdminModels::FGetCloudScriptTaskInstanceResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Parameter.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Parameter"));
        Parameter->writeJSON(writer);
    }

    if (Summary.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Summary"));
        Summary->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetCloudScriptTaskInstanceResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ParameterValue = obj->TryGetField(TEXT("Parameter"));
    if (ParameterValue.IsValid() && !ParameterValue->IsNull())
    {
        Parameter = MakeShareable(new FCloudScriptTaskParameter(ParameterValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> SummaryValue = obj->TryGetField(TEXT("Summary"));
    if (SummaryValue.IsValid() && !SummaryValue->IsNull())
    {
        Summary = MakeShareable(new FCloudScriptTaskSummary(SummaryValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetCloudScriptVersionsRequest::~FGetCloudScriptVersionsRequest()
{

}

void PlayFab::AdminModels::FGetCloudScriptVersionsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetCloudScriptVersionsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FGetCloudScriptVersionsResult::~FGetCloudScriptVersionsResult()
{

}

void PlayFab::AdminModels::FGetCloudScriptVersionsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Versions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Versions"));
        for (const FCloudScriptVersionStatus& item : Versions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetCloudScriptVersionsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&VersionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Versions"));
    for (int32 Idx = 0; Idx < VersionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = VersionsArray[Idx];
        Versions.Add(FCloudScriptVersionStatus(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FGetContentListRequest::~FGetContentListRequest()
{

}

void PlayFab::AdminModels::FGetContentListRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Prefix.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Prefix"));
        writer->WriteValue(Prefix);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetContentListRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PrefixValue = obj->TryGetField(TEXT("Prefix"));
    if (PrefixValue.IsValid() && !PrefixValue->IsNull())
    {
        FString TmpValue;
        if (PrefixValue->TryGetString(TmpValue)) { Prefix = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetContentListResult::~FGetContentListResult()
{

}

void PlayFab::AdminModels::FGetContentListResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Contents.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Contents"));
        for (const FContentInfo& item : Contents)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteIdentifierPrefix(TEXT("ItemCount"));
    writer->WriteValue(ItemCount);

    writer->WriteIdentifierPrefix(TEXT("TotalSize"));
    writer->WriteValue(static_cast<int64>(TotalSize));

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetContentListResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ContentsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Contents"));
    for (int32 Idx = 0; Idx < ContentsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ContentsArray[Idx];
        Contents.Add(FContentInfo(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> ItemCountValue = obj->TryGetField(TEXT("ItemCount"));
    if (ItemCountValue.IsValid() && !ItemCountValue->IsNull())
    {
        int32 TmpValue;
        if (ItemCountValue->TryGetNumber(TmpValue)) { ItemCount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalSizeValue = obj->TryGetField(TEXT("TotalSize"));
    if (TotalSizeValue.IsValid() && !TotalSizeValue->IsNull())
    {
        uint32 TmpValue;
        if (TotalSizeValue->TryGetNumber(TmpValue)) { TotalSize = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetContentUploadUrlRequest::~FGetContentUploadUrlRequest()
{

}

void PlayFab::AdminModels::FGetContentUploadUrlRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContentType.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContentType"));
        writer->WriteValue(ContentType);
    }

    if (!Key.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetContentUploadUrlRequest::Key, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Key"));
        writer->WriteValue(Key);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetContentUploadUrlRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContentTypeValue = obj->TryGetField(TEXT("ContentType"));
    if (ContentTypeValue.IsValid() && !ContentTypeValue->IsNull())
    {
        FString TmpValue;
        if (ContentTypeValue->TryGetString(TmpValue)) { ContentType = TmpValue; }
    }

    const TSharedPtr<FJsonValue> KeyValue = obj->TryGetField(TEXT("Key"));
    if (KeyValue.IsValid() && !KeyValue->IsNull())
    {
        FString TmpValue;
        if (KeyValue->TryGetString(TmpValue)) { Key = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetContentUploadUrlResult::~FGetContentUploadUrlResult()
{

}

void PlayFab::AdminModels::FGetContentUploadUrlResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (URL.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("URL"));
        writer->WriteValue(URL);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetContentUploadUrlResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> URLValue = obj->TryGetField(TEXT("URL"));
    if (URLValue.IsValid() && !URLValue->IsNull())
    {
        FString TmpValue;
        if (URLValue->TryGetString(TmpValue)) { URL = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetDataReportRequest::~FGetDataReportRequest()
{

}

void PlayFab::AdminModels::FGetDataReportRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Day"));
    writer->WriteValue(Day);

    writer->WriteIdentifierPrefix(TEXT("Month"));
    writer->WriteValue(Month);

    if (!ReportName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetDataReportRequest::ReportName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ReportName"));
        writer->WriteValue(ReportName);
    }

    writer->WriteIdentifierPrefix(TEXT("Year"));
    writer->WriteValue(Year);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetDataReportRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DayValue = obj->TryGetField(TEXT("Day"));
    if (DayValue.IsValid() && !DayValue->IsNull())
    {
        int32 TmpValue;
        if (DayValue->TryGetNumber(TmpValue)) { Day = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MonthValue = obj->TryGetField(TEXT("Month"));
    if (MonthValue.IsValid() && !MonthValue->IsNull())
    {
        int32 TmpValue;
        if (MonthValue->TryGetNumber(TmpValue)) { Month = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReportNameValue = obj->TryGetField(TEXT("ReportName"));
    if (ReportNameValue.IsValid() && !ReportNameValue->IsNull())
    {
        FString TmpValue;
        if (ReportNameValue->TryGetString(TmpValue)) { ReportName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> YearValue = obj->TryGetField(TEXT("Year"));
    if (YearValue.IsValid() && !YearValue->IsNull())
    {
        int32 TmpValue;
        if (YearValue->TryGetNumber(TmpValue)) { Year = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetDataReportResult::~FGetDataReportResult()
{

}

void PlayFab::AdminModels::FGetDataReportResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DownloadUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DownloadUrl"));
        writer->WriteValue(DownloadUrl);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetDataReportResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DownloadUrlValue = obj->TryGetField(TEXT("DownloadUrl"));
    if (DownloadUrlValue.IsValid() && !DownloadUrlValue->IsNull())
    {
        FString TmpValue;
        if (DownloadUrlValue->TryGetString(TmpValue)) { DownloadUrl = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetMatchmakerGameInfoRequest::~FGetMatchmakerGameInfoRequest()
{

}

void PlayFab::AdminModels::FGetMatchmakerGameInfoRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!LobbyId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetMatchmakerGameInfoRequest::LobbyId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("LobbyId"));
        writer->WriteValue(LobbyId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetMatchmakerGameInfoRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> LobbyIdValue = obj->TryGetField(TEXT("LobbyId"));
    if (LobbyIdValue.IsValid() && !LobbyIdValue->IsNull())
    {
        FString TmpValue;
        if (LobbyIdValue->TryGetString(TmpValue)) { LobbyId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetMatchmakerGameInfoResult::~FGetMatchmakerGameInfoResult()
{

}

void PlayFab::AdminModels::FGetMatchmakerGameInfoResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BuildVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("BuildVersion"));
        writer->WriteValue(BuildVersion);
    }

    if (EndTime.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("EndTime"));
        writeDatetime(EndTime, writer);
    }

    if (LobbyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("LobbyId"));
        writer->WriteValue(LobbyId);
    }

    if (Mode.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Mode"));
        writer->WriteValue(Mode);
    }

    if (Players.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Players"));
        for (const FString& item : Players)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (pfRegion.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Region"));
        writeRegionEnumJSON(pfRegion, writer);
    }

    if (ServerIPV4Address.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ServerIPV4Address"));
        writer->WriteValue(ServerIPV4Address);
    }

    if (ServerIPV6Address.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ServerIPV6Address"));
        writer->WriteValue(ServerIPV6Address);
    }

    writer->WriteIdentifierPrefix(TEXT("ServerPort"));
    writer->WriteValue(static_cast<int64>(ServerPort));

    if (ServerPublicDNSName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ServerPublicDNSName"));
        writer->WriteValue(ServerPublicDNSName);
    }

    writer->WriteIdentifierPrefix(TEXT("StartTime"));
    writeDatetime(StartTime, writer);

    if (TitleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitleId"));
        writer->WriteValue(TitleId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetMatchmakerGameInfoResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BuildVersionValue = obj->TryGetField(TEXT("BuildVersion"));
    if (BuildVersionValue.IsValid() && !BuildVersionValue->IsNull())
    {
        FString TmpValue;
        if (BuildVersionValue->TryGetString(TmpValue)) { BuildVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EndTimeValue = obj->TryGetField(TEXT("EndTime"));
    if (EndTimeValue.IsValid())
        EndTime = readDatetime(EndTimeValue);


    const TSharedPtr<FJsonValue> LobbyIdValue = obj->TryGetField(TEXT("LobbyId"));
    if (LobbyIdValue.IsValid() && !LobbyIdValue->IsNull())
    {
        FString TmpValue;
        if (LobbyIdValue->TryGetString(TmpValue)) { LobbyId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ModeValue = obj->TryGetField(TEXT("Mode"));
    if (ModeValue.IsValid() && !ModeValue->IsNull())
    {
        FString TmpValue;
        if (ModeValue->TryGetString(TmpValue)) { Mode = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("Players"), Players);

    pfRegion = readRegionFromValue(obj->TryGetField(TEXT("Region")));

    const TSharedPtr<FJsonValue> ServerIPV4AddressValue = obj->TryGetField(TEXT("ServerIPV4Address"));
    if (ServerIPV4AddressValue.IsValid() && !ServerIPV4AddressValue->IsNull())
    {
        FString TmpValue;
        if (ServerIPV4AddressValue->TryGetString(TmpValue)) { ServerIPV4Address = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ServerIPV6AddressValue = obj->TryGetField(TEXT("ServerIPV6Address"));
    if (ServerIPV6AddressValue.IsValid() && !ServerIPV6AddressValue->IsNull())
    {
        FString TmpValue;
        if (ServerIPV6AddressValue->TryGetString(TmpValue)) { ServerIPV6Address = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ServerPortValue = obj->TryGetField(TEXT("ServerPort"));
    if (ServerPortValue.IsValid() && !ServerPortValue->IsNull())
    {
        uint32 TmpValue;
        if (ServerPortValue->TryGetNumber(TmpValue)) { ServerPort = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ServerPublicDNSNameValue = obj->TryGetField(TEXT("ServerPublicDNSName"));
    if (ServerPublicDNSNameValue.IsValid() && !ServerPublicDNSNameValue->IsNull())
    {
        FString TmpValue;
        if (ServerPublicDNSNameValue->TryGetString(TmpValue)) { ServerPublicDNSName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StartTimeValue = obj->TryGetField(TEXT("StartTime"));
    if (StartTimeValue.IsValid())
        StartTime = readDatetime(StartTimeValue);


    const TSharedPtr<FJsonValue> TitleIdValue = obj->TryGetField(TEXT("TitleId"));
    if (TitleIdValue.IsValid() && !TitleIdValue->IsNull())
    {
        FString TmpValue;
        if (TitleIdValue->TryGetString(TmpValue)) { TitleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetMatchmakerGameModesRequest::~FGetMatchmakerGameModesRequest()
{

}

void PlayFab::AdminModels::FGetMatchmakerGameModesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!BuildVersion.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetMatchmakerGameModesRequest::BuildVersion, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("BuildVersion"));
        writer->WriteValue(BuildVersion);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetMatchmakerGameModesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BuildVersionValue = obj->TryGetField(TEXT("BuildVersion"));
    if (BuildVersionValue.IsValid() && !BuildVersionValue->IsNull())
    {
        FString TmpValue;
        if (BuildVersionValue->TryGetString(TmpValue)) { BuildVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetMatchmakerGameModesResult::~FGetMatchmakerGameModesResult()
{

}

void PlayFab::AdminModels::FGetMatchmakerGameModesResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (GameModes.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("GameModes"));
        for (const FGameModeInfo& item : GameModes)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetMatchmakerGameModesResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&GameModesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("GameModes"));
    for (int32 Idx = 0; Idx < GameModesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = GameModesArray[Idx];
        GameModes.Add(FGameModeInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayedTitleListRequest::~FGetPlayedTitleListRequest()
{

}

void PlayFab::AdminModels::FGetPlayedTitleListRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetPlayedTitleListRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayedTitleListRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayedTitleListResult::~FGetPlayedTitleListResult()
{

}

void PlayFab::AdminModels::FGetPlayedTitleListResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (TitleIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TitleIds"));
        for (const FString& item : TitleIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayedTitleListResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("TitleIds"), TitleIds);

    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayerIdFromAuthTokenRequest::~FGetPlayerIdFromAuthTokenRequest()
{

}

void PlayFab::AdminModels::FGetPlayerIdFromAuthTokenRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Token.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetPlayerIdFromAuthTokenRequest::Token, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Token"));
        writer->WriteValue(Token);
    }

    writer->WriteIdentifierPrefix(TEXT("TokenType"));
    writeAuthTokenTypeEnumJSON(TokenType, writer);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayerIdFromAuthTokenRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> TokenValue = obj->TryGetField(TEXT("Token"));
    if (TokenValue.IsValid() && !TokenValue->IsNull())
    {
        FString TmpValue;
        if (TokenValue->TryGetString(TmpValue)) { Token = TmpValue; }
    }

    TokenType = readAuthTokenTypeFromValue(obj->TryGetField(TEXT("TokenType")));

    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayerIdFromAuthTokenResult::~FGetPlayerIdFromAuthTokenResult()
{

}

void PlayFab::AdminModels::FGetPlayerIdFromAuthTokenResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayerIdFromAuthTokenResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FPlayerProfileViewConstraints::~FPlayerProfileViewConstraints()
{

}

void PlayFab::AdminModels::FPlayerProfileViewConstraints::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("ShowAvatarUrl"));
    writer->WriteValue(ShowAvatarUrl);

    writer->WriteIdentifierPrefix(TEXT("ShowBannedUntil"));
    writer->WriteValue(ShowBannedUntil);

    writer->WriteIdentifierPrefix(TEXT("ShowCampaignAttributions"));
    writer->WriteValue(ShowCampaignAttributions);

    writer->WriteIdentifierPrefix(TEXT("ShowContactEmailAddresses"));
    writer->WriteValue(ShowContactEmailAddresses);

    writer->WriteIdentifierPrefix(TEXT("ShowCreated"));
    writer->WriteValue(ShowCreated);

    writer->WriteIdentifierPrefix(TEXT("ShowDisplayName"));
    writer->WriteValue(ShowDisplayName);

    writer->WriteIdentifierPrefix(TEXT("ShowExperimentVariants"));
    writer->WriteValue(ShowExperimentVariants);

    writer->WriteIdentifierPrefix(TEXT("ShowLastLogin"));
    writer->WriteValue(ShowLastLogin);

    writer->WriteIdentifierPrefix(TEXT("ShowLinkedAccounts"));
    writer->WriteValue(ShowLinkedAccounts);

    writer->WriteIdentifierPrefix(TEXT("ShowLocations"));
    writer->WriteValue(ShowLocations);

    writer->WriteIdentifierPrefix(TEXT("ShowMemberships"));
    writer->WriteValue(ShowMemberships);

    writer->WriteIdentifierPrefix(TEXT("ShowOrigination"));
    writer->WriteValue(ShowOrigination);

    writer->WriteIdentifierPrefix(TEXT("ShowPushNotificationRegistrations"));
    writer->WriteValue(ShowPushNotificationRegistrations);

    writer->WriteIdentifierPrefix(TEXT("ShowStatistics"));
    writer->WriteValue(ShowStatistics);

    writer->WriteIdentifierPrefix(TEXT("ShowTags"));
    writer->WriteValue(ShowTags);

    writer->WriteIdentifierPrefix(TEXT("ShowTotalValueToDateInUsd"));
    writer->WriteValue(ShowTotalValueToDateInUsd);

    writer->WriteIdentifierPrefix(TEXT("ShowValuesToDate"));
    writer->WriteValue(ShowValuesToDate);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FPlayerProfileViewConstraints::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ShowAvatarUrlValue = obj->TryGetField(TEXT("ShowAvatarUrl"));
    if (ShowAvatarUrlValue.IsValid() && !ShowAvatarUrlValue->IsNull())
    {
        bool TmpValue;
        if (ShowAvatarUrlValue->TryGetBool(TmpValue)) { ShowAvatarUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowBannedUntilValue = obj->TryGetField(TEXT("ShowBannedUntil"));
    if (ShowBannedUntilValue.IsValid() && !ShowBannedUntilValue->IsNull())
    {
        bool TmpValue;
        if (ShowBannedUntilValue->TryGetBool(TmpValue)) { ShowBannedUntil = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowCampaignAttributionsValue = obj->TryGetField(TEXT("ShowCampaignAttributions"));
    if (ShowCampaignAttributionsValue.IsValid() && !ShowCampaignAttributionsValue->IsNull())
    {
        bool TmpValue;
        if (ShowCampaignAttributionsValue->TryGetBool(TmpValue)) { ShowCampaignAttributions = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowContactEmailAddressesValue = obj->TryGetField(TEXT("ShowContactEmailAddresses"));
    if (ShowContactEmailAddressesValue.IsValid() && !ShowContactEmailAddressesValue->IsNull())
    {
        bool TmpValue;
        if (ShowContactEmailAddressesValue->TryGetBool(TmpValue)) { ShowContactEmailAddresses = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowCreatedValue = obj->TryGetField(TEXT("ShowCreated"));
    if (ShowCreatedValue.IsValid() && !ShowCreatedValue->IsNull())
    {
        bool TmpValue;
        if (ShowCreatedValue->TryGetBool(TmpValue)) { ShowCreated = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowDisplayNameValue = obj->TryGetField(TEXT("ShowDisplayName"));
    if (ShowDisplayNameValue.IsValid() && !ShowDisplayNameValue->IsNull())
    {
        bool TmpValue;
        if (ShowDisplayNameValue->TryGetBool(TmpValue)) { ShowDisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowExperimentVariantsValue = obj->TryGetField(TEXT("ShowExperimentVariants"));
    if (ShowExperimentVariantsValue.IsValid() && !ShowExperimentVariantsValue->IsNull())
    {
        bool TmpValue;
        if (ShowExperimentVariantsValue->TryGetBool(TmpValue)) { ShowExperimentVariants = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowLastLoginValue = obj->TryGetField(TEXT("ShowLastLogin"));
    if (ShowLastLoginValue.IsValid() && !ShowLastLoginValue->IsNull())
    {
        bool TmpValue;
        if (ShowLastLoginValue->TryGetBool(TmpValue)) { ShowLastLogin = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowLinkedAccountsValue = obj->TryGetField(TEXT("ShowLinkedAccounts"));
    if (ShowLinkedAccountsValue.IsValid() && !ShowLinkedAccountsValue->IsNull())
    {
        bool TmpValue;
        if (ShowLinkedAccountsValue->TryGetBool(TmpValue)) { ShowLinkedAccounts = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowLocationsValue = obj->TryGetField(TEXT("ShowLocations"));
    if (ShowLocationsValue.IsValid() && !ShowLocationsValue->IsNull())
    {
        bool TmpValue;
        if (ShowLocationsValue->TryGetBool(TmpValue)) { ShowLocations = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowMembershipsValue = obj->TryGetField(TEXT("ShowMemberships"));
    if (ShowMembershipsValue.IsValid() && !ShowMembershipsValue->IsNull())
    {
        bool TmpValue;
        if (ShowMembershipsValue->TryGetBool(TmpValue)) { ShowMemberships = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowOriginationValue = obj->TryGetField(TEXT("ShowOrigination"));
    if (ShowOriginationValue.IsValid() && !ShowOriginationValue->IsNull())
    {
        bool TmpValue;
        if (ShowOriginationValue->TryGetBool(TmpValue)) { ShowOrigination = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowPushNotificationRegistrationsValue = obj->TryGetField(TEXT("ShowPushNotificationRegistrations"));
    if (ShowPushNotificationRegistrationsValue.IsValid() && !ShowPushNotificationRegistrationsValue->IsNull())
    {
        bool TmpValue;
        if (ShowPushNotificationRegistrationsValue->TryGetBool(TmpValue)) { ShowPushNotificationRegistrations = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowStatisticsValue = obj->TryGetField(TEXT("ShowStatistics"));
    if (ShowStatisticsValue.IsValid() && !ShowStatisticsValue->IsNull())
    {
        bool TmpValue;
        if (ShowStatisticsValue->TryGetBool(TmpValue)) { ShowStatistics = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowTagsValue = obj->TryGetField(TEXT("ShowTags"));
    if (ShowTagsValue.IsValid() && !ShowTagsValue->IsNull())
    {
        bool TmpValue;
        if (ShowTagsValue->TryGetBool(TmpValue)) { ShowTags = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowTotalValueToDateInUsdValue = obj->TryGetField(TEXT("ShowTotalValueToDateInUsd"));
    if (ShowTotalValueToDateInUsdValue.IsValid() && !ShowTotalValueToDateInUsdValue->IsNull())
    {
        bool TmpValue;
        if (ShowTotalValueToDateInUsdValue->TryGetBool(TmpValue)) { ShowTotalValueToDateInUsd = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowValuesToDateValue = obj->TryGetField(TEXT("ShowValuesToDate"));
    if (ShowValuesToDateValue.IsValid() && !ShowValuesToDateValue->IsNull())
    {
        bool TmpValue;
        if (ShowValuesToDateValue->TryGetBool(TmpValue)) { ShowValuesToDate = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayerProfileRequest::~FGetPlayerProfileRequest()
{
    //if (ProfileConstraints != nullptr) delete ProfileConstraints;

}

void PlayFab::AdminModels::FGetPlayerProfileRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetPlayerProfileRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (ProfileConstraints.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("ProfileConstraints"));
        ProfileConstraints->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayerProfileRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileConstraintsValue = obj->TryGetField(TEXT("ProfileConstraints"));
    if (ProfileConstraintsValue.IsValid() && !ProfileConstraintsValue->IsNull())
    {
        ProfileConstraints = MakeShareable(new FPlayerProfileViewConstraints(ProfileConstraintsValue->AsObject()));
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeLoginIdentityProviderEnumJSON(LoginIdentityProvider enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case LoginIdentityProviderUnknown: writer->WriteValue(TEXT("Unknown")); break;
    case LoginIdentityProviderPlayFab: writer->WriteValue(TEXT("PlayFab")); break;
    case LoginIdentityProviderCustom: writer->WriteValue(TEXT("Custom")); break;
    case LoginIdentityProviderGameCenter: writer->WriteValue(TEXT("GameCenter")); break;
    case LoginIdentityProviderGooglePlay: writer->WriteValue(TEXT("GooglePlay")); break;
    case LoginIdentityProviderSteam: writer->WriteValue(TEXT("Steam")); break;
    case LoginIdentityProviderXBoxLive: writer->WriteValue(TEXT("XBoxLive")); break;
    case LoginIdentityProviderPSN: writer->WriteValue(TEXT("PSN")); break;
    case LoginIdentityProviderKongregate: writer->WriteValue(TEXT("Kongregate")); break;
    case LoginIdentityProviderFacebook: writer->WriteValue(TEXT("Facebook")); break;
    case LoginIdentityProviderIOSDevice: writer->WriteValue(TEXT("IOSDevice")); break;
    case LoginIdentityProviderAndroidDevice: writer->WriteValue(TEXT("AndroidDevice")); break;
    case LoginIdentityProviderTwitch: writer->WriteValue(TEXT("Twitch")); break;
    case LoginIdentityProviderWindowsHello: writer->WriteValue(TEXT("WindowsHello")); break;
    case LoginIdentityProviderGameServer: writer->WriteValue(TEXT("GameServer")); break;
    case LoginIdentityProviderCustomServer: writer->WriteValue(TEXT("CustomServer")); break;
    case LoginIdentityProviderNintendoSwitch: writer->WriteValue(TEXT("NintendoSwitch")); break;
    case LoginIdentityProviderFacebookInstantGames: writer->WriteValue(TEXT("FacebookInstantGames")); break;
    case LoginIdentityProviderOpenIdConnect: writer->WriteValue(TEXT("OpenIdConnect")); break;
    case LoginIdentityProviderApple: writer->WriteValue(TEXT("Apple")); break;
    case LoginIdentityProviderNintendoSwitchAccount: writer->WriteValue(TEXT("NintendoSwitchAccount")); break;
    }
}

AdminModels::LoginIdentityProvider PlayFab::AdminModels::readLoginIdentityProviderFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readLoginIdentityProviderFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::LoginIdentityProvider PlayFab::AdminModels::readLoginIdentityProviderFromValue(const FString& value)
{
    static TMap<FString, LoginIdentityProvider> _LoginIdentityProviderMap;
    if (_LoginIdentityProviderMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _LoginIdentityProviderMap.Add(TEXT("Unknown"), LoginIdentityProviderUnknown);
        _LoginIdentityProviderMap.Add(TEXT("PlayFab"), LoginIdentityProviderPlayFab);
        _LoginIdentityProviderMap.Add(TEXT("Custom"), LoginIdentityProviderCustom);
        _LoginIdentityProviderMap.Add(TEXT("GameCenter"), LoginIdentityProviderGameCenter);
        _LoginIdentityProviderMap.Add(TEXT("GooglePlay"), LoginIdentityProviderGooglePlay);
        _LoginIdentityProviderMap.Add(TEXT("Steam"), LoginIdentityProviderSteam);
        _LoginIdentityProviderMap.Add(TEXT("XBoxLive"), LoginIdentityProviderXBoxLive);
        _LoginIdentityProviderMap.Add(TEXT("PSN"), LoginIdentityProviderPSN);
        _LoginIdentityProviderMap.Add(TEXT("Kongregate"), LoginIdentityProviderKongregate);
        _LoginIdentityProviderMap.Add(TEXT("Facebook"), LoginIdentityProviderFacebook);
        _LoginIdentityProviderMap.Add(TEXT("IOSDevice"), LoginIdentityProviderIOSDevice);
        _LoginIdentityProviderMap.Add(TEXT("AndroidDevice"), LoginIdentityProviderAndroidDevice);
        _LoginIdentityProviderMap.Add(TEXT("Twitch"), LoginIdentityProviderTwitch);
        _LoginIdentityProviderMap.Add(TEXT("WindowsHello"), LoginIdentityProviderWindowsHello);
        _LoginIdentityProviderMap.Add(TEXT("GameServer"), LoginIdentityProviderGameServer);
        _LoginIdentityProviderMap.Add(TEXT("CustomServer"), LoginIdentityProviderCustomServer);
        _LoginIdentityProviderMap.Add(TEXT("NintendoSwitch"), LoginIdentityProviderNintendoSwitch);
        _LoginIdentityProviderMap.Add(TEXT("FacebookInstantGames"), LoginIdentityProviderFacebookInstantGames);
        _LoginIdentityProviderMap.Add(TEXT("OpenIdConnect"), LoginIdentityProviderOpenIdConnect);
        _LoginIdentityProviderMap.Add(TEXT("Apple"), LoginIdentityProviderApple);
        _LoginIdentityProviderMap.Add(TEXT("NintendoSwitchAccount"), LoginIdentityProviderNintendoSwitchAccount);

    }

    if (!value.IsEmpty())
    {
        auto output = _LoginIdentityProviderMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return LoginIdentityProviderUnknown; // Basically critical fail
}

PlayFab::AdminModels::FLinkedPlatformAccountModel::~FLinkedPlatformAccountModel()
{

}

void PlayFab::AdminModels::FLinkedPlatformAccountModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Email.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Email"));
        writer->WriteValue(Email);
    }

    if (Platform.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writeLoginIdentityProviderEnumJSON(Platform, writer);
    }

    if (PlatformUserId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlatformUserId"));
        writer->WriteValue(PlatformUserId);
    }

    if (Username.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Username"));
        writer->WriteValue(Username);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FLinkedPlatformAccountModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EmailValue = obj->TryGetField(TEXT("Email"));
    if (EmailValue.IsValid() && !EmailValue->IsNull())
    {
        FString TmpValue;
        if (EmailValue->TryGetString(TmpValue)) { Email = TmpValue; }
    }

    Platform = readLoginIdentityProviderFromValue(obj->TryGetField(TEXT("Platform")));

    const TSharedPtr<FJsonValue> PlatformUserIdValue = obj->TryGetField(TEXT("PlatformUserId"));
    if (PlatformUserIdValue.IsValid() && !PlatformUserIdValue->IsNull())
    {
        FString TmpValue;
        if (PlatformUserIdValue->TryGetString(TmpValue)) { PlatformUserId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsernameValue = obj->TryGetField(TEXT("Username"));
    if (UsernameValue.IsValid() && !UsernameValue->IsNull())
    {
        FString TmpValue;
        if (UsernameValue->TryGetString(TmpValue)) { Username = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FLocationModel::~FLocationModel()
{

}

void PlayFab::AdminModels::FLocationModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (City.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("City"));
        writer->WriteValue(City);
    }

    if (pfContinentCode.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ContinentCode"));
        writeContinentCodeEnumJSON(pfContinentCode, writer);
    }

    if (pfCountryCode.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("CountryCode"));
        writeCountryCodeEnumJSON(pfCountryCode, writer);
    }

    if (Latitude.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Latitude"));
        writer->WriteValue(Latitude);
    }

    if (Longitude.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Longitude"));
        writer->WriteValue(Longitude);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FLocationModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CityValue = obj->TryGetField(TEXT("City"));
    if (CityValue.IsValid() && !CityValue->IsNull())
    {
        FString TmpValue;
        if (CityValue->TryGetString(TmpValue)) { City = TmpValue; }
    }

    pfContinentCode = readContinentCodeFromValue(obj->TryGetField(TEXT("ContinentCode")));

    pfCountryCode = readCountryCodeFromValue(obj->TryGetField(TEXT("CountryCode")));

    const TSharedPtr<FJsonValue> LatitudeValue = obj->TryGetField(TEXT("Latitude"));
    if (LatitudeValue.IsValid() && !LatitudeValue->IsNull())
    {
        double TmpValue;
        if (LatitudeValue->TryGetNumber(TmpValue)) { Latitude = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LongitudeValue = obj->TryGetField(TEXT("Longitude"));
    if (LongitudeValue.IsValid() && !LongitudeValue->IsNull())
    {
        double TmpValue;
        if (LongitudeValue->TryGetNumber(TmpValue)) { Longitude = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeSubscriptionProviderStatusEnumJSON(SubscriptionProviderStatus enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case SubscriptionProviderStatusNoError: writer->WriteValue(TEXT("NoError")); break;
    case SubscriptionProviderStatusCancelled: writer->WriteValue(TEXT("Cancelled")); break;
    case SubscriptionProviderStatusUnknownError: writer->WriteValue(TEXT("UnknownError")); break;
    case SubscriptionProviderStatusBillingError: writer->WriteValue(TEXT("BillingError")); break;
    case SubscriptionProviderStatusProductUnavailable: writer->WriteValue(TEXT("ProductUnavailable")); break;
    case SubscriptionProviderStatusCustomerDidNotAcceptPriceChange: writer->WriteValue(TEXT("CustomerDidNotAcceptPriceChange")); break;
    case SubscriptionProviderStatusFreeTrial: writer->WriteValue(TEXT("FreeTrial")); break;
    case SubscriptionProviderStatusPaymentPending: writer->WriteValue(TEXT("PaymentPending")); break;
    }
}

AdminModels::SubscriptionProviderStatus PlayFab::AdminModels::readSubscriptionProviderStatusFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readSubscriptionProviderStatusFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::SubscriptionProviderStatus PlayFab::AdminModels::readSubscriptionProviderStatusFromValue(const FString& value)
{
    static TMap<FString, SubscriptionProviderStatus> _SubscriptionProviderStatusMap;
    if (_SubscriptionProviderStatusMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _SubscriptionProviderStatusMap.Add(TEXT("NoError"), SubscriptionProviderStatusNoError);
        _SubscriptionProviderStatusMap.Add(TEXT("Cancelled"), SubscriptionProviderStatusCancelled);
        _SubscriptionProviderStatusMap.Add(TEXT("UnknownError"), SubscriptionProviderStatusUnknownError);
        _SubscriptionProviderStatusMap.Add(TEXT("BillingError"), SubscriptionProviderStatusBillingError);
        _SubscriptionProviderStatusMap.Add(TEXT("ProductUnavailable"), SubscriptionProviderStatusProductUnavailable);
        _SubscriptionProviderStatusMap.Add(TEXT("CustomerDidNotAcceptPriceChange"), SubscriptionProviderStatusCustomerDidNotAcceptPriceChange);
        _SubscriptionProviderStatusMap.Add(TEXT("FreeTrial"), SubscriptionProviderStatusFreeTrial);
        _SubscriptionProviderStatusMap.Add(TEXT("PaymentPending"), SubscriptionProviderStatusPaymentPending);

    }

    if (!value.IsEmpty())
    {
        auto output = _SubscriptionProviderStatusMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return SubscriptionProviderStatusNoError; // Basically critical fail
}

PlayFab::AdminModels::FSubscriptionModel::~FSubscriptionModel()
{

}

void PlayFab::AdminModels::FSubscriptionModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Expiration"));
    writeDatetime(Expiration, writer);

    writer->WriteIdentifierPrefix(TEXT("InitialSubscriptionTime"));
    writeDatetime(InitialSubscriptionTime, writer);

    writer->WriteIdentifierPrefix(TEXT("IsActive"));
    writer->WriteValue(IsActive);

    if (Status.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        writeSubscriptionProviderStatusEnumJSON(Status, writer);
    }

    if (SubscriptionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SubscriptionId"));
        writer->WriteValue(SubscriptionId);
    }

    if (SubscriptionItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SubscriptionItemId"));
        writer->WriteValue(SubscriptionItemId);
    }

    if (SubscriptionProvider.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SubscriptionProvider"));
        writer->WriteValue(SubscriptionProvider);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSubscriptionModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ExpirationValue = obj->TryGetField(TEXT("Expiration"));
    if (ExpirationValue.IsValid())
        Expiration = readDatetime(ExpirationValue);


    const TSharedPtr<FJsonValue> InitialSubscriptionTimeValue = obj->TryGetField(TEXT("InitialSubscriptionTime"));
    if (InitialSubscriptionTimeValue.IsValid())
        InitialSubscriptionTime = readDatetime(InitialSubscriptionTimeValue);


    const TSharedPtr<FJsonValue> IsActiveValue = obj->TryGetField(TEXT("IsActive"));
    if (IsActiveValue.IsValid() && !IsActiveValue->IsNull())
    {
        bool TmpValue;
        if (IsActiveValue->TryGetBool(TmpValue)) { IsActive = TmpValue; }
    }

    Status = readSubscriptionProviderStatusFromValue(obj->TryGetField(TEXT("Status")));

    const TSharedPtr<FJsonValue> SubscriptionIdValue = obj->TryGetField(TEXT("SubscriptionId"));
    if (SubscriptionIdValue.IsValid() && !SubscriptionIdValue->IsNull())
    {
        FString TmpValue;
        if (SubscriptionIdValue->TryGetString(TmpValue)) { SubscriptionId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SubscriptionItemIdValue = obj->TryGetField(TEXT("SubscriptionItemId"));
    if (SubscriptionItemIdValue.IsValid() && !SubscriptionItemIdValue->IsNull())
    {
        FString TmpValue;
        if (SubscriptionItemIdValue->TryGetString(TmpValue)) { SubscriptionItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SubscriptionProviderValue = obj->TryGetField(TEXT("SubscriptionProvider"));
    if (SubscriptionProviderValue.IsValid() && !SubscriptionProviderValue->IsNull())
    {
        FString TmpValue;
        if (SubscriptionProviderValue->TryGetString(TmpValue)) { SubscriptionProvider = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FMembershipModel::~FMembershipModel()
{

}

void PlayFab::AdminModels::FMembershipModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("IsActive"));
    writer->WriteValue(IsActive);

    writer->WriteIdentifierPrefix(TEXT("MembershipExpiration"));
    writeDatetime(MembershipExpiration, writer);

    if (MembershipId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MembershipId"));
        writer->WriteValue(MembershipId);
    }

    if (OverrideExpiration.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("OverrideExpiration"));
        writeDatetime(OverrideExpiration, writer);
    }

    if (OverrideIsSet.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("OverrideIsSet"));
        writer->WriteValue(OverrideIsSet);
    }

    if (Subscriptions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Subscriptions"));
        for (const FSubscriptionModel& item : Subscriptions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FMembershipModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IsActiveValue = obj->TryGetField(TEXT("IsActive"));
    if (IsActiveValue.IsValid() && !IsActiveValue->IsNull())
    {
        bool TmpValue;
        if (IsActiveValue->TryGetBool(TmpValue)) { IsActive = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MembershipExpirationValue = obj->TryGetField(TEXT("MembershipExpiration"));
    if (MembershipExpirationValue.IsValid())
        MembershipExpiration = readDatetime(MembershipExpirationValue);


    const TSharedPtr<FJsonValue> MembershipIdValue = obj->TryGetField(TEXT("MembershipId"));
    if (MembershipIdValue.IsValid() && !MembershipIdValue->IsNull())
    {
        FString TmpValue;
        if (MembershipIdValue->TryGetString(TmpValue)) { MembershipId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OverrideExpirationValue = obj->TryGetField(TEXT("OverrideExpiration"));
    if (OverrideExpirationValue.IsValid())
        OverrideExpiration = readDatetime(OverrideExpirationValue);


    const TSharedPtr<FJsonValue> OverrideIsSetValue = obj->TryGetField(TEXT("OverrideIsSet"));
    if (OverrideIsSetValue.IsValid() && !OverrideIsSetValue->IsNull())
    {
        bool TmpValue;
        if (OverrideIsSetValue->TryGetBool(TmpValue)) { OverrideIsSet = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&SubscriptionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Subscriptions"));
    for (int32 Idx = 0; Idx < SubscriptionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SubscriptionsArray[Idx];
        Subscriptions.Add(FSubscriptionModel(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

void PlayFab::AdminModels::writePushNotificationPlatformEnumJSON(PushNotificationPlatform enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case PushNotificationPlatformApplePushNotificationService: writer->WriteValue(TEXT("ApplePushNotificationService")); break;
    case PushNotificationPlatformGoogleCloudMessaging: writer->WriteValue(TEXT("GoogleCloudMessaging")); break;
    }
}

AdminModels::PushNotificationPlatform PlayFab::AdminModels::readPushNotificationPlatformFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readPushNotificationPlatformFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::PushNotificationPlatform PlayFab::AdminModels::readPushNotificationPlatformFromValue(const FString& value)
{
    static TMap<FString, PushNotificationPlatform> _PushNotificationPlatformMap;
    if (_PushNotificationPlatformMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _PushNotificationPlatformMap.Add(TEXT("ApplePushNotificationService"), PushNotificationPlatformApplePushNotificationService);
        _PushNotificationPlatformMap.Add(TEXT("GoogleCloudMessaging"), PushNotificationPlatformGoogleCloudMessaging);

    }

    if (!value.IsEmpty())
    {
        auto output = _PushNotificationPlatformMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return PushNotificationPlatformApplePushNotificationService; // Basically critical fail
}

PlayFab::AdminModels::FPushNotificationRegistrationModel::~FPushNotificationRegistrationModel()
{

}

void PlayFab::AdminModels::FPushNotificationRegistrationModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (NotificationEndpointARN.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NotificationEndpointARN"));
        writer->WriteValue(NotificationEndpointARN);
    }

    if (Platform.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writePushNotificationPlatformEnumJSON(Platform, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FPushNotificationRegistrationModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NotificationEndpointARNValue = obj->TryGetField(TEXT("NotificationEndpointARN"));
    if (NotificationEndpointARNValue.IsValid() && !NotificationEndpointARNValue->IsNull())
    {
        FString TmpValue;
        if (NotificationEndpointARNValue->TryGetString(TmpValue)) { NotificationEndpointARN = TmpValue; }
    }

    Platform = readPushNotificationPlatformFromValue(obj->TryGetField(TEXT("Platform")));

    return HasSucceeded;
}

PlayFab::AdminModels::FStatisticModel::~FStatisticModel()
{

}

void PlayFab::AdminModels::FStatisticModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteIdentifierPrefix(TEXT("Value"));
    writer->WriteValue(Value);

    writer->WriteIdentifierPrefix(TEXT("Version"));
    writer->WriteValue(Version);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FStatisticModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        int32 TmpValue;
        if (ValueValue->TryGetNumber(TmpValue)) { Value = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        int32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FTagModel::~FTagModel()
{

}

void PlayFab::AdminModels::FTagModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (TagValue.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TagValue"));
        writer->WriteValue(TagValue);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FTagModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> TagValueValue = obj->TryGetField(TEXT("TagValue"));
    if (TagValueValue.IsValid() && !TagValueValue->IsNull())
    {
        FString TmpValue;
        if (TagValueValue->TryGetString(TmpValue)) { TagValue = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FValueToDateModel::~FValueToDateModel()
{

}

void PlayFab::AdminModels::FValueToDateModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Currency.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Currency"));
        writer->WriteValue(Currency);
    }

    writer->WriteIdentifierPrefix(TEXT("TotalValue"));
    writer->WriteValue(static_cast<int64>(TotalValue));

    if (TotalValueAsDecimal.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TotalValueAsDecimal"));
        writer->WriteValue(TotalValueAsDecimal);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FValueToDateModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CurrencyValue = obj->TryGetField(TEXT("Currency"));
    if (CurrencyValue.IsValid() && !CurrencyValue->IsNull())
    {
        FString TmpValue;
        if (CurrencyValue->TryGetString(TmpValue)) { Currency = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalValueValue = obj->TryGetField(TEXT("TotalValue"));
    if (TotalValueValue.IsValid() && !TotalValueValue->IsNull())
    {
        uint32 TmpValue;
        if (TotalValueValue->TryGetNumber(TmpValue)) { TotalValue = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalValueAsDecimalValue = obj->TryGetField(TEXT("TotalValueAsDecimal"));
    if (TotalValueAsDecimalValue.IsValid() && !TotalValueAsDecimalValue->IsNull())
    {
        FString TmpValue;
        if (TotalValueAsDecimalValue->TryGetString(TmpValue)) { TotalValueAsDecimal = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FPlayerProfileModel::~FPlayerProfileModel()
{

}

void PlayFab::AdminModels::FPlayerProfileModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AdCampaignAttributions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AdCampaignAttributions"));
        for (const FAdCampaignAttributionModel& item : AdCampaignAttributions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (AvatarUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AvatarUrl"));
        writer->WriteValue(AvatarUrl);
    }

    if (BannedUntil.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("BannedUntil"));
        writeDatetime(BannedUntil, writer);
    }

    if (ContactEmailAddresses.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ContactEmailAddresses"));
        for (const FContactEmailInfoModel& item : ContactEmailAddresses)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Created.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Created"));
        writeDatetime(Created, writer);
    }

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (ExperimentVariants.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ExperimentVariants"));
        for (const FString& item : ExperimentVariants)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (LastLogin.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LastLogin"));
        writeDatetime(LastLogin, writer);
    }

    if (LinkedAccounts.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("LinkedAccounts"));
        for (const FLinkedPlatformAccountModel& item : LinkedAccounts)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Locations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Locations"));
        for (const FLocationModel& item : Locations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Memberships.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Memberships"));
        for (const FMembershipModel& item : Memberships)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Origination.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Origination"));
        writeLoginIdentityProviderEnumJSON(Origination, writer);
    }

    if (PlayerId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayerId"));
        writer->WriteValue(PlayerId);
    }

    if (PublisherId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PublisherId"));
        writer->WriteValue(PublisherId);
    }

    if (PushNotificationRegistrations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PushNotificationRegistrations"));
        for (const FPushNotificationRegistrationModel& item : PushNotificationRegistrations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Statistics.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Statistics"));
        for (const FStatisticModel& item : Statistics)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FTagModel& item : Tags)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (TitleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitleId"));
        writer->WriteValue(TitleId);
    }

    if (TotalValueToDateInUSD.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("TotalValueToDateInUSD"));
        writer->WriteValue(static_cast<int64>(TotalValueToDateInUSD));
    }

    if (ValuesToDate.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ValuesToDate"));
        for (const FValueToDateModel& item : ValuesToDate)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FPlayerProfileModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AdCampaignAttributionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("AdCampaignAttributions"));
    for (int32 Idx = 0; Idx < AdCampaignAttributionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AdCampaignAttributionsArray[Idx];
        AdCampaignAttributions.Add(FAdCampaignAttributionModel(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> AvatarUrlValue = obj->TryGetField(TEXT("AvatarUrl"));
    if (AvatarUrlValue.IsValid() && !AvatarUrlValue->IsNull())
    {
        FString TmpValue;
        if (AvatarUrlValue->TryGetString(TmpValue)) { AvatarUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> BannedUntilValue = obj->TryGetField(TEXT("BannedUntil"));
    if (BannedUntilValue.IsValid())
        BannedUntil = readDatetime(BannedUntilValue);


    const TArray<TSharedPtr<FJsonValue>>&ContactEmailAddressesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ContactEmailAddresses"));
    for (int32 Idx = 0; Idx < ContactEmailAddressesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ContactEmailAddressesArray[Idx];
        ContactEmailAddresses.Add(FContactEmailInfoModel(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("ExperimentVariants"), ExperimentVariants);

    const TSharedPtr<FJsonValue> LastLoginValue = obj->TryGetField(TEXT("LastLogin"));
    if (LastLoginValue.IsValid())
        LastLogin = readDatetime(LastLoginValue);


    const TArray<TSharedPtr<FJsonValue>>&LinkedAccountsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("LinkedAccounts"));
    for (int32 Idx = 0; Idx < LinkedAccountsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LinkedAccountsArray[Idx];
        LinkedAccounts.Add(FLinkedPlatformAccountModel(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&LocationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Locations"));
    for (int32 Idx = 0; Idx < LocationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LocationsArray[Idx];
        Locations.Add(FLocationModel(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&MembershipsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Memberships"));
    for (int32 Idx = 0; Idx < MembershipsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = MembershipsArray[Idx];
        Memberships.Add(FMembershipModel(CurrentItem->AsObject()));
    }


    Origination = readLoginIdentityProviderFromValue(obj->TryGetField(TEXT("Origination")));

    const TSharedPtr<FJsonValue> PlayerIdValue = obj->TryGetField(TEXT("PlayerId"));
    if (PlayerIdValue.IsValid() && !PlayerIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayerIdValue->TryGetString(TmpValue)) { PlayerId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PublisherIdValue = obj->TryGetField(TEXT("PublisherId"));
    if (PublisherIdValue.IsValid() && !PublisherIdValue->IsNull())
    {
        FString TmpValue;
        if (PublisherIdValue->TryGetString(TmpValue)) { PublisherId = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&PushNotificationRegistrationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("PushNotificationRegistrations"));
    for (int32 Idx = 0; Idx < PushNotificationRegistrationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PushNotificationRegistrationsArray[Idx];
        PushNotificationRegistrations.Add(FPushNotificationRegistrationModel(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&StatisticsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Statistics"));
    for (int32 Idx = 0; Idx < StatisticsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StatisticsArray[Idx];
        Statistics.Add(FStatisticModel(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&TagsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Tags"));
    for (int32 Idx = 0; Idx < TagsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = TagsArray[Idx];
        Tags.Add(FTagModel(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> TitleIdValue = obj->TryGetField(TEXT("TitleId"));
    if (TitleIdValue.IsValid() && !TitleIdValue->IsNull())
    {
        FString TmpValue;
        if (TitleIdValue->TryGetString(TmpValue)) { TitleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalValueToDateInUSDValue = obj->TryGetField(TEXT("TotalValueToDateInUSD"));
    if (TotalValueToDateInUSDValue.IsValid() && !TotalValueToDateInUSDValue->IsNull())
    {
        uint32 TmpValue;
        if (TotalValueToDateInUSDValue->TryGetNumber(TmpValue)) { TotalValueToDateInUSD = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ValuesToDateArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ValuesToDate"));
    for (int32 Idx = 0; Idx < ValuesToDateArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ValuesToDateArray[Idx];
        ValuesToDate.Add(FValueToDateModel(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayerProfileResult::~FGetPlayerProfileResult()
{
    //if (PlayerProfile != nullptr) delete PlayerProfile;

}

void PlayFab::AdminModels::FGetPlayerProfileResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PlayerProfile.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("PlayerProfile"));
        PlayerProfile->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayerProfileResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayerProfileValue = obj->TryGetField(TEXT("PlayerProfile"));
    if (PlayerProfileValue.IsValid() && !PlayerProfileValue->IsNull())
    {
        PlayerProfile = MakeShareable(new FPlayerProfileModel(PlayerProfileValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayerSegmentsResult::~FGetPlayerSegmentsResult()
{

}

void PlayFab::AdminModels::FGetPlayerSegmentsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Segments.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Segments"));
        for (const FGetSegmentResult& item : Segments)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayerSegmentsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&SegmentsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Segments"));
    for (int32 Idx = 0; Idx < SegmentsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SegmentsArray[Idx];
        Segments.Add(FGetSegmentResult(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayerSharedSecretsRequest::~FGetPlayerSharedSecretsRequest()
{

}

void PlayFab::AdminModels::FGetPlayerSharedSecretsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayerSharedSecretsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FSharedSecret::~FSharedSecret()
{

}

void PlayFab::AdminModels::FSharedSecret::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Disabled"));
    writer->WriteValue(Disabled);

    if (FriendlyName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FriendlyName"));
        writer->WriteValue(FriendlyName);
    }

    if (SecretKey.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SecretKey"));
        writer->WriteValue(SecretKey);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSharedSecret::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DisabledValue = obj->TryGetField(TEXT("Disabled"));
    if (DisabledValue.IsValid() && !DisabledValue->IsNull())
    {
        bool TmpValue;
        if (DisabledValue->TryGetBool(TmpValue)) { Disabled = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FriendlyNameValue = obj->TryGetField(TEXT("FriendlyName"));
    if (FriendlyNameValue.IsValid() && !FriendlyNameValue->IsNull())
    {
        FString TmpValue;
        if (FriendlyNameValue->TryGetString(TmpValue)) { FriendlyName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SecretKeyValue = obj->TryGetField(TEXT("SecretKey"));
    if (SecretKeyValue.IsValid() && !SecretKeyValue->IsNull())
    {
        FString TmpValue;
        if (SecretKeyValue->TryGetString(TmpValue)) { SecretKey = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayerSharedSecretsResult::~FGetPlayerSharedSecretsResult()
{

}

void PlayFab::AdminModels::FGetPlayerSharedSecretsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (SharedSecrets.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("SharedSecrets"));
        for (const FSharedSecret& item : SharedSecrets)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayerSharedSecretsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&SharedSecretsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("SharedSecrets"));
    for (int32 Idx = 0; Idx < SharedSecretsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SharedSecretsArray[Idx];
        SharedSecrets.Add(FSharedSecret(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayersInSegmentRequest::~FGetPlayersInSegmentRequest()
{

}

void PlayFab::AdminModels::FGetPlayersInSegmentRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (MaxBatchSize.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("MaxBatchSize"));
        writer->WriteValue(static_cast<int64>(MaxBatchSize));
    }

    if (SecondsToLive.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("SecondsToLive"));
        writer->WriteValue(static_cast<int64>(SecondsToLive));
    }

    if (!SegmentId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetPlayersInSegmentRequest::SegmentId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("SegmentId"));
        writer->WriteValue(SegmentId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayersInSegmentRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> MaxBatchSizeValue = obj->TryGetField(TEXT("MaxBatchSize"));
    if (MaxBatchSizeValue.IsValid() && !MaxBatchSizeValue->IsNull())
    {
        uint32 TmpValue;
        if (MaxBatchSizeValue->TryGetNumber(TmpValue)) { MaxBatchSize = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SecondsToLiveValue = obj->TryGetField(TEXT("SecondsToLive"));
    if (SecondsToLiveValue.IsValid() && !SecondsToLiveValue->IsNull())
    {
        uint32 TmpValue;
        if (SecondsToLiveValue->TryGetNumber(TmpValue)) { SecondsToLive = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SegmentIdValue = obj->TryGetField(TEXT("SegmentId"));
    if (SegmentIdValue.IsValid() && !SegmentIdValue->IsNull())
    {
        FString TmpValue;
        if (SegmentIdValue->TryGetString(TmpValue)) { SegmentId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FPlayerLinkedAccount::~FPlayerLinkedAccount()
{

}

void PlayFab::AdminModels::FPlayerLinkedAccount::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Email.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Email"));
        writer->WriteValue(Email);
    }

    if (Platform.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writeLoginIdentityProviderEnumJSON(Platform, writer);
    }

    if (PlatformUserId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlatformUserId"));
        writer->WriteValue(PlatformUserId);
    }

    if (Username.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Username"));
        writer->WriteValue(Username);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FPlayerLinkedAccount::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EmailValue = obj->TryGetField(TEXT("Email"));
    if (EmailValue.IsValid() && !EmailValue->IsNull())
    {
        FString TmpValue;
        if (EmailValue->TryGetString(TmpValue)) { Email = TmpValue; }
    }

    Platform = readLoginIdentityProviderFromValue(obj->TryGetField(TEXT("Platform")));

    const TSharedPtr<FJsonValue> PlatformUserIdValue = obj->TryGetField(TEXT("PlatformUserId"));
    if (PlatformUserIdValue.IsValid() && !PlatformUserIdValue->IsNull())
    {
        FString TmpValue;
        if (PlatformUserIdValue->TryGetString(TmpValue)) { PlatformUserId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsernameValue = obj->TryGetField(TEXT("Username"));
    if (UsernameValue.IsValid() && !UsernameValue->IsNull())
    {
        FString TmpValue;
        if (UsernameValue->TryGetString(TmpValue)) { Username = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FPlayerLocation::~FPlayerLocation()
{

}

void PlayFab::AdminModels::FPlayerLocation::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (City.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("City"));
        writer->WriteValue(City);
    }

    writer->WriteIdentifierPrefix(TEXT("ContinentCode"));
    writeContinentCodeEnumJSON(pfContinentCode, writer);

    writer->WriteIdentifierPrefix(TEXT("CountryCode"));
    writeCountryCodeEnumJSON(pfCountryCode, writer);

    if (Latitude.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Latitude"));
        writer->WriteValue(Latitude);
    }

    if (Longitude.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Longitude"));
        writer->WriteValue(Longitude);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FPlayerLocation::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CityValue = obj->TryGetField(TEXT("City"));
    if (CityValue.IsValid() && !CityValue->IsNull())
    {
        FString TmpValue;
        if (CityValue->TryGetString(TmpValue)) { City = TmpValue; }
    }

    pfContinentCode = readContinentCodeFromValue(obj->TryGetField(TEXT("ContinentCode")));

    pfCountryCode = readCountryCodeFromValue(obj->TryGetField(TEXT("CountryCode")));

    const TSharedPtr<FJsonValue> LatitudeValue = obj->TryGetField(TEXT("Latitude"));
    if (LatitudeValue.IsValid() && !LatitudeValue->IsNull())
    {
        double TmpValue;
        if (LatitudeValue->TryGetNumber(TmpValue)) { Latitude = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LongitudeValue = obj->TryGetField(TEXT("Longitude"));
    if (LongitudeValue.IsValid() && !LongitudeValue->IsNull())
    {
        double TmpValue;
        if (LongitudeValue->TryGetNumber(TmpValue)) { Longitude = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FPlayerStatistic::~FPlayerStatistic()
{

}

void PlayFab::AdminModels::FPlayerStatistic::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteIdentifierPrefix(TEXT("StatisticValue"));
    writer->WriteValue(StatisticValue);

    writer->WriteIdentifierPrefix(TEXT("StatisticVersion"));
    writer->WriteValue(StatisticVersion);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FPlayerStatistic::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StatisticValueValue = obj->TryGetField(TEXT("StatisticValue"));
    if (StatisticValueValue.IsValid() && !StatisticValueValue->IsNull())
    {
        int32 TmpValue;
        if (StatisticValueValue->TryGetNumber(TmpValue)) { StatisticValue = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StatisticVersionValue = obj->TryGetField(TEXT("StatisticVersion"));
    if (StatisticVersionValue.IsValid() && !StatisticVersionValue->IsNull())
    {
        int32 TmpValue;
        if (StatisticVersionValue->TryGetNumber(TmpValue)) { StatisticVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FPushNotificationRegistration::~FPushNotificationRegistration()
{

}

void PlayFab::AdminModels::FPushNotificationRegistration::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (NotificationEndpointARN.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NotificationEndpointARN"));
        writer->WriteValue(NotificationEndpointARN);
    }

    if (Platform.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writePushNotificationPlatformEnumJSON(Platform, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FPushNotificationRegistration::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NotificationEndpointARNValue = obj->TryGetField(TEXT("NotificationEndpointARN"));
    if (NotificationEndpointARNValue.IsValid() && !NotificationEndpointARNValue->IsNull())
    {
        FString TmpValue;
        if (NotificationEndpointARNValue->TryGetString(TmpValue)) { NotificationEndpointARN = TmpValue; }
    }

    Platform = readPushNotificationPlatformFromValue(obj->TryGetField(TEXT("Platform")));

    return HasSucceeded;
}

PlayFab::AdminModels::FPlayerProfile::~FPlayerProfile()
{

}

void PlayFab::AdminModels::FPlayerProfile::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AdCampaignAttributions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AdCampaignAttributions"));
        for (const FAdCampaignAttribution& item : AdCampaignAttributions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (AvatarUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AvatarUrl"));
        writer->WriteValue(AvatarUrl);
    }

    if (BannedUntil.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("BannedUntil"));
        writeDatetime(BannedUntil, writer);
    }

    if (ContactEmailAddresses.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ContactEmailAddresses"));
        for (const FContactEmailInfo& item : ContactEmailAddresses)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Created.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Created"));
        writeDatetime(Created, writer);
    }

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (LastLogin.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LastLogin"));
        writeDatetime(LastLogin, writer);
    }

    if (LinkedAccounts.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("LinkedAccounts"));
        for (const FPlayerLinkedAccount& item : LinkedAccounts)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Locations.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Locations"));
        for (TMap<FString, FPlayerLocation>::TConstIterator It(Locations); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    if (Origination.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Origination"));
        writeLoginIdentityProviderEnumJSON(Origination, writer);
    }

    if (PlayerExperimentVariants.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PlayerExperimentVariants"));
        for (const FString& item : PlayerExperimentVariants)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (PlayerId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayerId"));
        writer->WriteValue(PlayerId);
    }

    if (PlayerStatistics.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PlayerStatistics"));
        for (const FPlayerStatistic& item : PlayerStatistics)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (PublisherId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PublisherId"));
        writer->WriteValue(PublisherId);
    }

    if (PushNotificationRegistrations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PushNotificationRegistrations"));
        for (const FPushNotificationRegistration& item : PushNotificationRegistrations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Statistics.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Statistics"));
        for (TMap<FString, int32>::TConstIterator It(Statistics); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (TitleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitleId"));
        writer->WriteValue(TitleId);
    }

    if (TotalValueToDateInUSD.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("TotalValueToDateInUSD"));
        writer->WriteValue(static_cast<int64>(TotalValueToDateInUSD));
    }

    if (ValuesToDate.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("ValuesToDate"));
        for (TMap<FString, uint32>::TConstIterator It(ValuesToDate); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue(static_cast<int64>((*It).Value));
        }
        writer->WriteObjectEnd();
    }

    if (VirtualCurrencyBalances.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("VirtualCurrencyBalances"));
        for (TMap<FString, int32>::TConstIterator It(VirtualCurrencyBalances); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FPlayerProfile::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AdCampaignAttributionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("AdCampaignAttributions"));
    for (int32 Idx = 0; Idx < AdCampaignAttributionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AdCampaignAttributionsArray[Idx];
        AdCampaignAttributions.Add(FAdCampaignAttribution(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> AvatarUrlValue = obj->TryGetField(TEXT("AvatarUrl"));
    if (AvatarUrlValue.IsValid() && !AvatarUrlValue->IsNull())
    {
        FString TmpValue;
        if (AvatarUrlValue->TryGetString(TmpValue)) { AvatarUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> BannedUntilValue = obj->TryGetField(TEXT("BannedUntil"));
    if (BannedUntilValue.IsValid())
        BannedUntil = readDatetime(BannedUntilValue);


    const TArray<TSharedPtr<FJsonValue>>&ContactEmailAddressesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ContactEmailAddresses"));
    for (int32 Idx = 0; Idx < ContactEmailAddressesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ContactEmailAddressesArray[Idx];
        ContactEmailAddresses.Add(FContactEmailInfo(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LastLoginValue = obj->TryGetField(TEXT("LastLogin"));
    if (LastLoginValue.IsValid())
        LastLogin = readDatetime(LastLoginValue);


    const TArray<TSharedPtr<FJsonValue>>&LinkedAccountsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("LinkedAccounts"));
    for (int32 Idx = 0; Idx < LinkedAccountsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LinkedAccountsArray[Idx];
        LinkedAccounts.Add(FPlayerLinkedAccount(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* LocationsObject;
    if (obj->TryGetObjectField(TEXT("Locations"), LocationsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*LocationsObject)->Values); It; ++It)
        {
            Locations.Add(It.Key(), FPlayerLocation(It.Value()->AsObject()));
        }
    }

    Origination = readLoginIdentityProviderFromValue(obj->TryGetField(TEXT("Origination")));

    obj->TryGetStringArrayField(TEXT("PlayerExperimentVariants"), PlayerExperimentVariants);

    const TSharedPtr<FJsonValue> PlayerIdValue = obj->TryGetField(TEXT("PlayerId"));
    if (PlayerIdValue.IsValid() && !PlayerIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayerIdValue->TryGetString(TmpValue)) { PlayerId = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&PlayerStatisticsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("PlayerStatistics"));
    for (int32 Idx = 0; Idx < PlayerStatisticsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PlayerStatisticsArray[Idx];
        PlayerStatistics.Add(FPlayerStatistic(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> PublisherIdValue = obj->TryGetField(TEXT("PublisherId"));
    if (PublisherIdValue.IsValid() && !PublisherIdValue->IsNull())
    {
        FString TmpValue;
        if (PublisherIdValue->TryGetString(TmpValue)) { PublisherId = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&PushNotificationRegistrationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("PushNotificationRegistrations"));
    for (int32 Idx = 0; Idx < PushNotificationRegistrationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PushNotificationRegistrationsArray[Idx];
        PushNotificationRegistrations.Add(FPushNotificationRegistration(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* StatisticsObject;
    if (obj->TryGetObjectField(TEXT("Statistics"), StatisticsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*StatisticsObject)->Values); It; ++It)
        {
            int32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            Statistics.Add(It.Key(), TmpValue);
        }
    }

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    const TSharedPtr<FJsonValue> TitleIdValue = obj->TryGetField(TEXT("TitleId"));
    if (TitleIdValue.IsValid() && !TitleIdValue->IsNull())
    {
        FString TmpValue;
        if (TitleIdValue->TryGetString(TmpValue)) { TitleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalValueToDateInUSDValue = obj->TryGetField(TEXT("TotalValueToDateInUSD"));
    if (TotalValueToDateInUSDValue.IsValid() && !TotalValueToDateInUSDValue->IsNull())
    {
        uint32 TmpValue;
        if (TotalValueToDateInUSDValue->TryGetNumber(TmpValue)) { TotalValueToDateInUSD = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* ValuesToDateObject;
    if (obj->TryGetObjectField(TEXT("ValuesToDate"), ValuesToDateObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*ValuesToDateObject)->Values); It; ++It)
        {
            uint32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            ValuesToDate.Add(It.Key(), TmpValue);
        }
    }

    const TSharedPtr<FJsonObject>* VirtualCurrencyBalancesObject;
    if (obj->TryGetObjectField(TEXT("VirtualCurrencyBalances"), VirtualCurrencyBalancesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*VirtualCurrencyBalancesObject)->Values); It; ++It)
        {
            int32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            VirtualCurrencyBalances.Add(It.Key(), TmpValue);
        }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayersInSegmentResult::~FGetPlayersInSegmentResult()
{

}

void PlayFab::AdminModels::FGetPlayersInSegmentResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    if (PlayerProfiles.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PlayerProfiles"));
        for (const FPlayerProfile& item : PlayerProfiles)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteIdentifierPrefix(TEXT("ProfilesInSegment"));
    writer->WriteValue(ProfilesInSegment);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayersInSegmentResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&PlayerProfilesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("PlayerProfiles"));
    for (int32 Idx = 0; Idx < PlayerProfilesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PlayerProfilesArray[Idx];
        PlayerProfiles.Add(FPlayerProfile(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> ProfilesInSegmentValue = obj->TryGetField(TEXT("ProfilesInSegment"));
    if (ProfilesInSegmentValue.IsValid() && !ProfilesInSegmentValue->IsNull())
    {
        int32 TmpValue;
        if (ProfilesInSegmentValue->TryGetNumber(TmpValue)) { ProfilesInSegment = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayersSegmentsRequest::~FGetPlayersSegmentsRequest()
{

}

void PlayFab::AdminModels::FGetPlayersSegmentsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetPlayersSegmentsRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayersSegmentsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayerStatisticDefinitionsRequest::~FGetPlayerStatisticDefinitionsRequest()
{

}

void PlayFab::AdminModels::FGetPlayerStatisticDefinitionsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayerStatisticDefinitionsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayerStatisticDefinitionsResult::~FGetPlayerStatisticDefinitionsResult()
{

}

void PlayFab::AdminModels::FGetPlayerStatisticDefinitionsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Statistics.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Statistics"));
        for (const FPlayerStatisticDefinition& item : Statistics)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayerStatisticDefinitionsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&StatisticsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Statistics"));
    for (int32 Idx = 0; Idx < StatisticsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StatisticsArray[Idx];
        Statistics.Add(FPlayerStatisticDefinition(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayerStatisticVersionsRequest::~FGetPlayerStatisticVersionsRequest()
{

}

void PlayFab::AdminModels::FGetPlayerStatisticVersionsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (StatisticName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayerStatisticVersionsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeStatisticVersionStatusEnumJSON(StatisticVersionStatus enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case StatisticVersionStatusActive: writer->WriteValue(TEXT("Active")); break;
    case StatisticVersionStatusSnapshotPending: writer->WriteValue(TEXT("SnapshotPending")); break;
    case StatisticVersionStatusSnapshot: writer->WriteValue(TEXT("Snapshot")); break;
    case StatisticVersionStatusArchivalPending: writer->WriteValue(TEXT("ArchivalPending")); break;
    case StatisticVersionStatusArchived: writer->WriteValue(TEXT("Archived")); break;
    }
}

AdminModels::StatisticVersionStatus PlayFab::AdminModels::readStatisticVersionStatusFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readStatisticVersionStatusFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::StatisticVersionStatus PlayFab::AdminModels::readStatisticVersionStatusFromValue(const FString& value)
{
    static TMap<FString, StatisticVersionStatus> _StatisticVersionStatusMap;
    if (_StatisticVersionStatusMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _StatisticVersionStatusMap.Add(TEXT("Active"), StatisticVersionStatusActive);
        _StatisticVersionStatusMap.Add(TEXT("SnapshotPending"), StatisticVersionStatusSnapshotPending);
        _StatisticVersionStatusMap.Add(TEXT("Snapshot"), StatisticVersionStatusSnapshot);
        _StatisticVersionStatusMap.Add(TEXT("ArchivalPending"), StatisticVersionStatusArchivalPending);
        _StatisticVersionStatusMap.Add(TEXT("Archived"), StatisticVersionStatusArchived);

    }

    if (!value.IsEmpty())
    {
        auto output = _StatisticVersionStatusMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return StatisticVersionStatusActive; // Basically critical fail
}

PlayFab::AdminModels::FPlayerStatisticVersion::~FPlayerStatisticVersion()
{

}

void PlayFab::AdminModels::FPlayerStatisticVersion::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("ActivationTime"));
    writeDatetime(ActivationTime, writer);

    if (ArchiveDownloadUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ArchiveDownloadUrl"));
        writer->WriteValue(ArchiveDownloadUrl);
    }

    if (DeactivationTime.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("DeactivationTime"));
        writeDatetime(DeactivationTime, writer);
    }

    if (ScheduledActivationTime.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ScheduledActivationTime"));
        writeDatetime(ScheduledActivationTime, writer);
    }

    if (ScheduledDeactivationTime.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ScheduledDeactivationTime"));
        writeDatetime(ScheduledDeactivationTime, writer);
    }

    if (StatisticName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    if (Status.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        writeStatisticVersionStatusEnumJSON(Status, writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Version"));
    writer->WriteValue(static_cast<int64>(Version));

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FPlayerStatisticVersion::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ActivationTimeValue = obj->TryGetField(TEXT("ActivationTime"));
    if (ActivationTimeValue.IsValid())
        ActivationTime = readDatetime(ActivationTimeValue);


    const TSharedPtr<FJsonValue> ArchiveDownloadUrlValue = obj->TryGetField(TEXT("ArchiveDownloadUrl"));
    if (ArchiveDownloadUrlValue.IsValid() && !ArchiveDownloadUrlValue->IsNull())
    {
        FString TmpValue;
        if (ArchiveDownloadUrlValue->TryGetString(TmpValue)) { ArchiveDownloadUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DeactivationTimeValue = obj->TryGetField(TEXT("DeactivationTime"));
    if (DeactivationTimeValue.IsValid())
        DeactivationTime = readDatetime(DeactivationTimeValue);


    const TSharedPtr<FJsonValue> ScheduledActivationTimeValue = obj->TryGetField(TEXT("ScheduledActivationTime"));
    if (ScheduledActivationTimeValue.IsValid())
        ScheduledActivationTime = readDatetime(ScheduledActivationTimeValue);


    const TSharedPtr<FJsonValue> ScheduledDeactivationTimeValue = obj->TryGetField(TEXT("ScheduledDeactivationTime"));
    if (ScheduledDeactivationTimeValue.IsValid())
        ScheduledDeactivationTime = readDatetime(ScheduledDeactivationTimeValue);


    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    Status = readStatisticVersionStatusFromValue(obj->TryGetField(TEXT("Status")));

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        uint32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayerStatisticVersionsResult::~FGetPlayerStatisticVersionsResult()
{

}

void PlayFab::AdminModels::FGetPlayerStatisticVersionsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (StatisticVersions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("StatisticVersions"));
        for (const FPlayerStatisticVersion& item : StatisticVersions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayerStatisticVersionsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&StatisticVersionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("StatisticVersions"));
    for (int32 Idx = 0; Idx < StatisticVersionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StatisticVersionsArray[Idx];
        StatisticVersions.Add(FPlayerStatisticVersion(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayerTagsRequest::~FGetPlayerTagsRequest()
{

}

void PlayFab::AdminModels::FGetPlayerTagsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Namespace.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Namespace"));
        writer->WriteValue(Namespace);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetPlayerTagsRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayerTagsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> NamespaceValue = obj->TryGetField(TEXT("Namespace"));
    if (NamespaceValue.IsValid() && !NamespaceValue->IsNull())
    {
        FString TmpValue;
        if (NamespaceValue->TryGetString(TmpValue)) { Namespace = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetPlayerTagsResult::~FGetPlayerTagsResult()
{

}

void PlayFab::AdminModels::FGetPlayerTagsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetPlayerTagsResult::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteArrayStart(TEXT("Tags"));
    for (const FString& item : Tags)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPlayerTagsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    return HasSucceeded;
}

PlayFab::AdminModels::FGetPolicyRequest::~FGetPolicyRequest()
{

}

void PlayFab::AdminModels::FGetPolicyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PolicyName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PolicyName"));
        writer->WriteValue(PolicyName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPolicyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PolicyNameValue = obj->TryGetField(TEXT("PolicyName"));
    if (PolicyNameValue.IsValid() && !PolicyNameValue->IsNull())
    {
        FString TmpValue;
        if (PolicyNameValue->TryGetString(TmpValue)) { PolicyName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FPermissionStatement::~FPermissionStatement()
{
    //if (ApiConditions != nullptr) delete ApiConditions;

}

void PlayFab::AdminModels::FPermissionStatement::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Action.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: PermissionStatement::Action, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Action"));
        writer->WriteValue(Action);
    }

    if (ApiConditions.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("ApiConditions"));
        ApiConditions->writeJSON(writer);
    }

    if (Comment.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Comment"));
        writer->WriteValue(Comment);
    }

    writer->WriteIdentifierPrefix(TEXT("Effect"));
    writeEffectTypeEnumJSON(Effect, writer);

    if (!Principal.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: PermissionStatement::Principal, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Principal"));
        writer->WriteValue(Principal);
    }

    if (!Resource.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: PermissionStatement::Resource, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Resource"));
        writer->WriteValue(Resource);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FPermissionStatement::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ActionValue = obj->TryGetField(TEXT("Action"));
    if (ActionValue.IsValid() && !ActionValue->IsNull())
    {
        FString TmpValue;
        if (ActionValue->TryGetString(TmpValue)) { Action = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ApiConditionsValue = obj->TryGetField(TEXT("ApiConditions"));
    if (ApiConditionsValue.IsValid() && !ApiConditionsValue->IsNull())
    {
        ApiConditions = MakeShareable(new FApiCondition(ApiConditionsValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> CommentValue = obj->TryGetField(TEXT("Comment"));
    if (CommentValue.IsValid() && !CommentValue->IsNull())
    {
        FString TmpValue;
        if (CommentValue->TryGetString(TmpValue)) { Comment = TmpValue; }
    }

    Effect = readEffectTypeFromValue(obj->TryGetField(TEXT("Effect")));

    const TSharedPtr<FJsonValue> PrincipalValue = obj->TryGetField(TEXT("Principal"));
    if (PrincipalValue.IsValid() && !PrincipalValue->IsNull())
    {
        FString TmpValue;
        if (PrincipalValue->TryGetString(TmpValue)) { Principal = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ResourceValue = obj->TryGetField(TEXT("Resource"));
    if (ResourceValue.IsValid() && !ResourceValue->IsNull())
    {
        FString TmpValue;
        if (ResourceValue->TryGetString(TmpValue)) { Resource = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetPolicyResponse::~FGetPolicyResponse()
{

}

void PlayFab::AdminModels::FGetPolicyResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PolicyName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PolicyName"));
        writer->WriteValue(PolicyName);
    }

    if (Statements.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Statements"));
        for (const FPermissionStatement& item : Statements)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPolicyResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PolicyNameValue = obj->TryGetField(TEXT("PolicyName"));
    if (PolicyNameValue.IsValid() && !PolicyNameValue->IsNull())
    {
        FString TmpValue;
        if (PolicyNameValue->TryGetString(TmpValue)) { PolicyName = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&StatementsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Statements"));
    for (int32 Idx = 0; Idx < StatementsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StatementsArray[Idx];
        Statements.Add(FPermissionStatement(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FGetPublisherDataRequest::~FGetPublisherDataRequest()
{

}

void PlayFab::AdminModels::FGetPublisherDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("Keys"));
    for (const FString& item : Keys)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPublisherDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("Keys"), Keys);

    return HasSucceeded;
}

PlayFab::AdminModels::FGetPublisherDataResult::~FGetPublisherDataResult()
{

}

void PlayFab::AdminModels::FGetPublisherDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FString>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetPublisherDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetRandomResultTablesRequest::~FGetRandomResultTablesRequest()
{

}

void PlayFab::AdminModels::FGetRandomResultTablesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetRandomResultTablesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeResultTableNodeTypeEnumJSON(ResultTableNodeType enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case ResultTableNodeTypeItemId: writer->WriteValue(TEXT("ItemId")); break;
    case ResultTableNodeTypeTableId: writer->WriteValue(TEXT("TableId")); break;
    }
}

AdminModels::ResultTableNodeType PlayFab::AdminModels::readResultTableNodeTypeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readResultTableNodeTypeFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::ResultTableNodeType PlayFab::AdminModels::readResultTableNodeTypeFromValue(const FString& value)
{
    static TMap<FString, ResultTableNodeType> _ResultTableNodeTypeMap;
    if (_ResultTableNodeTypeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _ResultTableNodeTypeMap.Add(TEXT("ItemId"), ResultTableNodeTypeItemId);
        _ResultTableNodeTypeMap.Add(TEXT("TableId"), ResultTableNodeTypeTableId);

    }

    if (!value.IsEmpty())
    {
        auto output = _ResultTableNodeTypeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return ResultTableNodeTypeItemId; // Basically critical fail
}

PlayFab::AdminModels::FResultTableNode::~FResultTableNode()
{

}

void PlayFab::AdminModels::FResultTableNode::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!ResultItem.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ResultTableNode::ResultItem, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ResultItem"));
        writer->WriteValue(ResultItem);
    }

    writer->WriteIdentifierPrefix(TEXT("ResultItemType"));
    writeResultTableNodeTypeEnumJSON(ResultItemType, writer);

    writer->WriteIdentifierPrefix(TEXT("Weight"));
    writer->WriteValue(Weight);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FResultTableNode::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ResultItemValue = obj->TryGetField(TEXT("ResultItem"));
    if (ResultItemValue.IsValid() && !ResultItemValue->IsNull())
    {
        FString TmpValue;
        if (ResultItemValue->TryGetString(TmpValue)) { ResultItem = TmpValue; }
    }

    ResultItemType = readResultTableNodeTypeFromValue(obj->TryGetField(TEXT("ResultItemType")));

    const TSharedPtr<FJsonValue> WeightValue = obj->TryGetField(TEXT("Weight"));
    if (WeightValue.IsValid() && !WeightValue->IsNull())
    {
        int32 TmpValue;
        if (WeightValue->TryGetNumber(TmpValue)) { Weight = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FRandomResultTableListing::~FRandomResultTableListing()
{

}

void PlayFab::AdminModels::FRandomResultTableListing::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    writer->WriteArrayStart(TEXT("Nodes"));
    for (const FResultTableNode& item : Nodes)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    if (!TableId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RandomResultTableListing::TableId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("TableId"));
        writer->WriteValue(TableId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRandomResultTableListing::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&NodesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Nodes"));
    for (int32 Idx = 0; Idx < NodesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = NodesArray[Idx];
        Nodes.Add(FResultTableNode(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> TableIdValue = obj->TryGetField(TEXT("TableId"));
    if (TableIdValue.IsValid() && !TableIdValue->IsNull())
    {
        FString TmpValue;
        if (TableIdValue->TryGetString(TmpValue)) { TableId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetRandomResultTablesResult::~FGetRandomResultTablesResult()
{

}

void PlayFab::AdminModels::FGetRandomResultTablesResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Tables.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Tables"));
        for (TMap<FString, FRandomResultTableListing>::TConstIterator It(Tables); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetRandomResultTablesResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* TablesObject;
    if (obj->TryGetObjectField(TEXT("Tables"), TablesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*TablesObject)->Values); It; ++It)
        {
            Tables.Add(It.Key(), FRandomResultTableListing(It.Value()->AsObject()));
        }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetSegmentsRequest::~FGetSegmentsRequest()
{

}

void PlayFab::AdminModels::FGetSegmentsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("SegmentIds"));
    for (const FString& item : SegmentIds)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetSegmentsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("SegmentIds"), SegmentIds);

    return HasSucceeded;
}

PlayFab::AdminModels::FGetSegmentsResponse::~FGetSegmentsResponse()
{

}

void PlayFab::AdminModels::FGetSegmentsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ErrorMessage.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorMessage"));
        writer->WriteValue(ErrorMessage);
    }

    if (Segments.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Segments"));
        for (const FSegmentModel& item : Segments)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetSegmentsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ErrorMessageValue = obj->TryGetField(TEXT("ErrorMessage"));
    if (ErrorMessageValue.IsValid() && !ErrorMessageValue->IsNull())
    {
        FString TmpValue;
        if (ErrorMessageValue->TryGetString(TmpValue)) { ErrorMessage = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&SegmentsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Segments"));
    for (int32 Idx = 0; Idx < SegmentsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SegmentsArray[Idx];
        Segments.Add(FSegmentModel(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FGetServerBuildInfoRequest::~FGetServerBuildInfoRequest()
{

}

void PlayFab::AdminModels::FGetServerBuildInfoRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!BuildId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetServerBuildInfoRequest::BuildId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("BuildId"));
        writer->WriteValue(BuildId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetServerBuildInfoRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BuildIdValue = obj->TryGetField(TEXT("BuildId"));
    if (BuildIdValue.IsValid() && !BuildIdValue->IsNull())
    {
        FString TmpValue;
        if (BuildIdValue->TryGetString(TmpValue)) { BuildId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetServerBuildInfoResult::~FGetServerBuildInfoResult()
{

}

void PlayFab::AdminModels::FGetServerBuildInfoResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ActiveRegions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ActiveRegions"));
        for (const Region& item : ActiveRegions)
            writeRegionEnumJSON(item, writer);
        writer->WriteArrayEnd();
    }


    if (BuildId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("BuildId"));
        writer->WriteValue(BuildId);
    }

    if (Comment.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Comment"));
        writer->WriteValue(Comment);
    }

    if (ErrorMessage.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorMessage"));
        writer->WriteValue(ErrorMessage);
    }

    writer->WriteIdentifierPrefix(TEXT("MaxGamesPerHost"));
    writer->WriteValue(MaxGamesPerHost);

    writer->WriteIdentifierPrefix(TEXT("MinFreeGameSlots"));
    writer->WriteValue(MinFreeGameSlots);

    if (Status.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        writeGameBuildStatusEnumJSON(Status, writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Timestamp"));
    writeDatetime(Timestamp, writer);

    if (TitleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitleId"));
        writer->WriteValue(TitleId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetServerBuildInfoResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ActiveRegionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ActiveRegions"));
    for (int32 Idx = 0; Idx < ActiveRegionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ActiveRegionsArray[Idx];
        ActiveRegions.Add(readRegionFromValue(CurrentItem));
    }


    const TSharedPtr<FJsonValue> BuildIdValue = obj->TryGetField(TEXT("BuildId"));
    if (BuildIdValue.IsValid() && !BuildIdValue->IsNull())
    {
        FString TmpValue;
        if (BuildIdValue->TryGetString(TmpValue)) { BuildId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CommentValue = obj->TryGetField(TEXT("Comment"));
    if (CommentValue.IsValid() && !CommentValue->IsNull())
    {
        FString TmpValue;
        if (CommentValue->TryGetString(TmpValue)) { Comment = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ErrorMessageValue = obj->TryGetField(TEXT("ErrorMessage"));
    if (ErrorMessageValue.IsValid() && !ErrorMessageValue->IsNull())
    {
        FString TmpValue;
        if (ErrorMessageValue->TryGetString(TmpValue)) { ErrorMessage = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MaxGamesPerHostValue = obj->TryGetField(TEXT("MaxGamesPerHost"));
    if (MaxGamesPerHostValue.IsValid() && !MaxGamesPerHostValue->IsNull())
    {
        int32 TmpValue;
        if (MaxGamesPerHostValue->TryGetNumber(TmpValue)) { MaxGamesPerHost = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MinFreeGameSlotsValue = obj->TryGetField(TEXT("MinFreeGameSlots"));
    if (MinFreeGameSlotsValue.IsValid() && !MinFreeGameSlotsValue->IsNull())
    {
        int32 TmpValue;
        if (MinFreeGameSlotsValue->TryGetNumber(TmpValue)) { MinFreeGameSlots = TmpValue; }
    }

    Status = readGameBuildStatusFromValue(obj->TryGetField(TEXT("Status")));

    const TSharedPtr<FJsonValue> TimestampValue = obj->TryGetField(TEXT("Timestamp"));
    if (TimestampValue.IsValid())
        Timestamp = readDatetime(TimestampValue);


    const TSharedPtr<FJsonValue> TitleIdValue = obj->TryGetField(TEXT("TitleId"));
    if (TitleIdValue.IsValid() && !TitleIdValue->IsNull())
    {
        FString TmpValue;
        if (TitleIdValue->TryGetString(TmpValue)) { TitleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetServerBuildUploadURLRequest::~FGetServerBuildUploadURLRequest()
{

}

void PlayFab::AdminModels::FGetServerBuildUploadURLRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!BuildId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetServerBuildUploadURLRequest::BuildId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("BuildId"));
        writer->WriteValue(BuildId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetServerBuildUploadURLRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BuildIdValue = obj->TryGetField(TEXT("BuildId"));
    if (BuildIdValue.IsValid() && !BuildIdValue->IsNull())
    {
        FString TmpValue;
        if (BuildIdValue->TryGetString(TmpValue)) { BuildId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetServerBuildUploadURLResult::~FGetServerBuildUploadURLResult()
{

}

void PlayFab::AdminModels::FGetServerBuildUploadURLResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (URL.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("URL"));
        writer->WriteValue(URL);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetServerBuildUploadURLResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> URLValue = obj->TryGetField(TEXT("URL"));
    if (URLValue.IsValid() && !URLValue->IsNull())
    {
        FString TmpValue;
        if (URLValue->TryGetString(TmpValue)) { URL = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetStoreItemsRequest::~FGetStoreItemsRequest()
{

}

void PlayFab::AdminModels::FGetStoreItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (!StoreId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetStoreItemsRequest::StoreId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("StoreId"));
        writer->WriteValue(StoreId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetStoreItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StoreIdValue = obj->TryGetField(TEXT("StoreId"));
    if (StoreIdValue.IsValid() && !StoreIdValue->IsNull())
    {
        FString TmpValue;
        if (StoreIdValue->TryGetString(TmpValue)) { StoreId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FStoreMarketingModel::~FStoreMarketingModel()
{

}

void PlayFab::AdminModels::FStoreMarketingModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (Metadata.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Metadata"));
        Metadata.writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FStoreMarketingModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MetadataValue = obj->TryGetField(TEXT("Metadata"));
    if (MetadataValue.IsValid() && !MetadataValue->IsNull())
    {
        Metadata = FJsonKeeper(MetadataValue);
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeSourceTypeEnumJSON(SourceType enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case SourceTypeAdmin: writer->WriteValue(TEXT("Admin")); break;
    case SourceTypeBackEnd: writer->WriteValue(TEXT("BackEnd")); break;
    case SourceTypeGameClient: writer->WriteValue(TEXT("GameClient")); break;
    case SourceTypeGameServer: writer->WriteValue(TEXT("GameServer")); break;
    case SourceTypePartner: writer->WriteValue(TEXT("Partner")); break;
    case SourceTypeCustom: writer->WriteValue(TEXT("Custom")); break;
    case SourceTypeAPI: writer->WriteValue(TEXT("API")); break;
    }
}

AdminModels::SourceType PlayFab::AdminModels::readSourceTypeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readSourceTypeFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::SourceType PlayFab::AdminModels::readSourceTypeFromValue(const FString& value)
{
    static TMap<FString, SourceType> _SourceTypeMap;
    if (_SourceTypeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _SourceTypeMap.Add(TEXT("Admin"), SourceTypeAdmin);
        _SourceTypeMap.Add(TEXT("BackEnd"), SourceTypeBackEnd);
        _SourceTypeMap.Add(TEXT("GameClient"), SourceTypeGameClient);
        _SourceTypeMap.Add(TEXT("GameServer"), SourceTypeGameServer);
        _SourceTypeMap.Add(TEXT("Partner"), SourceTypePartner);
        _SourceTypeMap.Add(TEXT("Custom"), SourceTypeCustom);
        _SourceTypeMap.Add(TEXT("API"), SourceTypeAPI);

    }

    if (!value.IsEmpty())
    {
        auto output = _SourceTypeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return SourceTypeAdmin; // Basically critical fail
}

PlayFab::AdminModels::FStoreItem::~FStoreItem()
{

}

void PlayFab::AdminModels::FStoreItem::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomData.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("CustomData"));
        CustomData.writeJSON(writer);
    }

    if (DisplayPosition.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayPosition"));
        writer->WriteValue(static_cast<int64>(DisplayPosition));
    }

    if (!ItemId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: StoreItem::ItemId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (RealCurrencyPrices.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("RealCurrencyPrices"));
        for (TMap<FString, uint32>::TConstIterator It(RealCurrencyPrices); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue(static_cast<int64>((*It).Value));
        }
        writer->WriteObjectEnd();
    }

    if (VirtualCurrencyPrices.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("VirtualCurrencyPrices"));
        for (TMap<FString, uint32>::TConstIterator It(VirtualCurrencyPrices); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue(static_cast<int64>((*It).Value));
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FStoreItem::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CustomDataValue = obj->TryGetField(TEXT("CustomData"));
    if (CustomDataValue.IsValid() && !CustomDataValue->IsNull())
    {
        CustomData = FJsonKeeper(CustomDataValue);
    }

    const TSharedPtr<FJsonValue> DisplayPositionValue = obj->TryGetField(TEXT("DisplayPosition"));
    if (DisplayPositionValue.IsValid() && !DisplayPositionValue->IsNull())
    {
        uint32 TmpValue;
        if (DisplayPositionValue->TryGetNumber(TmpValue)) { DisplayPosition = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* RealCurrencyPricesObject;
    if (obj->TryGetObjectField(TEXT("RealCurrencyPrices"), RealCurrencyPricesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*RealCurrencyPricesObject)->Values); It; ++It)
        {
            uint32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            RealCurrencyPrices.Add(It.Key(), TmpValue);
        }
    }

    const TSharedPtr<FJsonObject>* VirtualCurrencyPricesObject;
    if (obj->TryGetObjectField(TEXT("VirtualCurrencyPrices"), VirtualCurrencyPricesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*VirtualCurrencyPricesObject)->Values); It; ++It)
        {
            uint32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            VirtualCurrencyPrices.Add(It.Key(), TmpValue);
        }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetStoreItemsResult::~FGetStoreItemsResult()
{
    //if (MarketingData != nullptr) delete MarketingData;

}

void PlayFab::AdminModels::FGetStoreItemsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (MarketingData.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("MarketingData"));
        MarketingData->writeJSON(writer);
    }

    if (Source.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Source"));
        writeSourceTypeEnumJSON(Source, writer);
    }

    if (Store.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Store"));
        for (const FStoreItem& item : Store)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (StoreId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StoreId"));
        writer->WriteValue(StoreId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetStoreItemsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MarketingDataValue = obj->TryGetField(TEXT("MarketingData"));
    if (MarketingDataValue.IsValid() && !MarketingDataValue->IsNull())
    {
        MarketingData = MakeShareable(new FStoreMarketingModel(MarketingDataValue->AsObject()));
    }

    Source = readSourceTypeFromValue(obj->TryGetField(TEXT("Source")));

    const TArray<TSharedPtr<FJsonValue>>&StoreArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Store"));
    for (int32 Idx = 0; Idx < StoreArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StoreArray[Idx];
        Store.Add(FStoreItem(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> StoreIdValue = obj->TryGetField(TEXT("StoreId"));
    if (StoreIdValue.IsValid() && !StoreIdValue->IsNull())
    {
        FString TmpValue;
        if (StoreIdValue->TryGetString(TmpValue)) { StoreId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetTaskInstanceRequest::~FGetTaskInstanceRequest()
{

}

void PlayFab::AdminModels::FGetTaskInstanceRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!TaskInstanceId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetTaskInstanceRequest::TaskInstanceId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("TaskInstanceId"));
        writer->WriteValue(TaskInstanceId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetTaskInstanceRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> TaskInstanceIdValue = obj->TryGetField(TEXT("TaskInstanceId"));
    if (TaskInstanceIdValue.IsValid() && !TaskInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (TaskInstanceIdValue->TryGetString(TmpValue)) { TaskInstanceId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetTaskInstancesRequest::~FGetTaskInstancesRequest()
{
    //if (TaskIdentifier != nullptr) delete TaskIdentifier;

}

void PlayFab::AdminModels::FGetTaskInstancesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (StartedAtRangeFrom.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("StartedAtRangeFrom"));
        writeDatetime(StartedAtRangeFrom, writer);
    }

    if (StartedAtRangeTo.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("StartedAtRangeTo"));
        writeDatetime(StartedAtRangeTo, writer);
    }

    if (StatusFilter.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("StatusFilter"));
        writeTaskInstanceStatusEnumJSON(StatusFilter, writer);
    }

    if (TaskIdentifier.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("TaskIdentifier"));
        TaskIdentifier->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetTaskInstancesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> StartedAtRangeFromValue = obj->TryGetField(TEXT("StartedAtRangeFrom"));
    if (StartedAtRangeFromValue.IsValid())
        StartedAtRangeFrom = readDatetime(StartedAtRangeFromValue);


    const TSharedPtr<FJsonValue> StartedAtRangeToValue = obj->TryGetField(TEXT("StartedAtRangeTo"));
    if (StartedAtRangeToValue.IsValid())
        StartedAtRangeTo = readDatetime(StartedAtRangeToValue);


    StatusFilter = readTaskInstanceStatusFromValue(obj->TryGetField(TEXT("StatusFilter")));

    const TSharedPtr<FJsonValue> TaskIdentifierValue = obj->TryGetField(TEXT("TaskIdentifier"));
    if (TaskIdentifierValue.IsValid() && !TaskIdentifierValue->IsNull())
    {
        TaskIdentifier = MakeShareable(new FNameIdentifier(TaskIdentifierValue->AsObject()));
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeScheduledTaskTypeEnumJSON(ScheduledTaskType enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case ScheduledTaskTypeCloudScript: writer->WriteValue(TEXT("CloudScript")); break;
    case ScheduledTaskTypeActionsOnPlayerSegment: writer->WriteValue(TEXT("ActionsOnPlayerSegment")); break;
    case ScheduledTaskTypeCloudScriptAzureFunctions: writer->WriteValue(TEXT("CloudScriptAzureFunctions")); break;
    case ScheduledTaskTypeInsightsScheduledScaling: writer->WriteValue(TEXT("InsightsScheduledScaling")); break;
    }
}

AdminModels::ScheduledTaskType PlayFab::AdminModels::readScheduledTaskTypeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readScheduledTaskTypeFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::ScheduledTaskType PlayFab::AdminModels::readScheduledTaskTypeFromValue(const FString& value)
{
    static TMap<FString, ScheduledTaskType> _ScheduledTaskTypeMap;
    if (_ScheduledTaskTypeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _ScheduledTaskTypeMap.Add(TEXT("CloudScript"), ScheduledTaskTypeCloudScript);
        _ScheduledTaskTypeMap.Add(TEXT("ActionsOnPlayerSegment"), ScheduledTaskTypeActionsOnPlayerSegment);
        _ScheduledTaskTypeMap.Add(TEXT("CloudScriptAzureFunctions"), ScheduledTaskTypeCloudScriptAzureFunctions);
        _ScheduledTaskTypeMap.Add(TEXT("InsightsScheduledScaling"), ScheduledTaskTypeInsightsScheduledScaling);

    }

    if (!value.IsEmpty())
    {
        auto output = _ScheduledTaskTypeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return ScheduledTaskTypeCloudScript; // Basically critical fail
}

PlayFab::AdminModels::FTaskInstanceBasicSummary::~FTaskInstanceBasicSummary()
{
    //if (TaskIdentifier != nullptr) delete TaskIdentifier;

}

void PlayFab::AdminModels::FTaskInstanceBasicSummary::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CompletedAt.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("CompletedAt"));
        writeDatetime(CompletedAt, writer);
    }

    if (ErrorMessage.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorMessage"));
        writer->WriteValue(ErrorMessage);
    }

    if (EstimatedSecondsRemaining.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("EstimatedSecondsRemaining"));
        writer->WriteValue(EstimatedSecondsRemaining);
    }

    if (PercentComplete.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("PercentComplete"));
        writer->WriteValue(PercentComplete);
    }

    if (ScheduledByUserId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ScheduledByUserId"));
        writer->WriteValue(ScheduledByUserId);
    }

    writer->WriteIdentifierPrefix(TEXT("StartedAt"));
    writeDatetime(StartedAt, writer);

    if (Status.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        writeTaskInstanceStatusEnumJSON(Status, writer);
    }

    if (TaskIdentifier.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("TaskIdentifier"));
        TaskIdentifier->writeJSON(writer);
    }

    if (TaskInstanceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TaskInstanceId"));
        writer->WriteValue(TaskInstanceId);
    }

    if (Type.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writeScheduledTaskTypeEnumJSON(Type, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FTaskInstanceBasicSummary::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CompletedAtValue = obj->TryGetField(TEXT("CompletedAt"));
    if (CompletedAtValue.IsValid())
        CompletedAt = readDatetime(CompletedAtValue);


    const TSharedPtr<FJsonValue> ErrorMessageValue = obj->TryGetField(TEXT("ErrorMessage"));
    if (ErrorMessageValue.IsValid() && !ErrorMessageValue->IsNull())
    {
        FString TmpValue;
        if (ErrorMessageValue->TryGetString(TmpValue)) { ErrorMessage = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EstimatedSecondsRemainingValue = obj->TryGetField(TEXT("EstimatedSecondsRemaining"));
    if (EstimatedSecondsRemainingValue.IsValid() && !EstimatedSecondsRemainingValue->IsNull())
    {
        double TmpValue;
        if (EstimatedSecondsRemainingValue->TryGetNumber(TmpValue)) { EstimatedSecondsRemaining = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PercentCompleteValue = obj->TryGetField(TEXT("PercentComplete"));
    if (PercentCompleteValue.IsValid() && !PercentCompleteValue->IsNull())
    {
        double TmpValue;
        if (PercentCompleteValue->TryGetNumber(TmpValue)) { PercentComplete = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ScheduledByUserIdValue = obj->TryGetField(TEXT("ScheduledByUserId"));
    if (ScheduledByUserIdValue.IsValid() && !ScheduledByUserIdValue->IsNull())
    {
        FString TmpValue;
        if (ScheduledByUserIdValue->TryGetString(TmpValue)) { ScheduledByUserId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StartedAtValue = obj->TryGetField(TEXT("StartedAt"));
    if (StartedAtValue.IsValid())
        StartedAt = readDatetime(StartedAtValue);


    Status = readTaskInstanceStatusFromValue(obj->TryGetField(TEXT("Status")));

    const TSharedPtr<FJsonValue> TaskIdentifierValue = obj->TryGetField(TEXT("TaskIdentifier"));
    if (TaskIdentifierValue.IsValid() && !TaskIdentifierValue->IsNull())
    {
        TaskIdentifier = MakeShareable(new FNameIdentifier(TaskIdentifierValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> TaskInstanceIdValue = obj->TryGetField(TEXT("TaskInstanceId"));
    if (TaskInstanceIdValue.IsValid() && !TaskInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (TaskInstanceIdValue->TryGetString(TmpValue)) { TaskInstanceId = TmpValue; }
    }

    Type = readScheduledTaskTypeFromValue(obj->TryGetField(TEXT("Type")));

    return HasSucceeded;
}

PlayFab::AdminModels::FGetTaskInstancesResult::~FGetTaskInstancesResult()
{

}

void PlayFab::AdminModels::FGetTaskInstancesResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Summaries.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Summaries"));
        for (const FTaskInstanceBasicSummary& item : Summaries)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetTaskInstancesResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&SummariesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Summaries"));
    for (int32 Idx = 0; Idx < SummariesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SummariesArray[Idx];
        Summaries.Add(FTaskInstanceBasicSummary(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FGetTasksRequest::~FGetTasksRequest()
{
    //if (Identifier != nullptr) delete Identifier;

}

void PlayFab::AdminModels::FGetTasksRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Identifier.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Identifier"));
        Identifier->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetTasksRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdentifierValue = obj->TryGetField(TEXT("Identifier"));
    if (IdentifierValue.IsValid() && !IdentifierValue->IsNull())
    {
        Identifier = MakeShareable(new FNameIdentifier(IdentifierValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FScheduledTask::~FScheduledTask()
{

}

void PlayFab::AdminModels::FScheduledTask::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    writer->WriteIdentifierPrefix(TEXT("IsActive"));
    writer->WriteValue(IsActive);

    if (LastRunTime.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LastRunTime"));
        writeDatetime(LastRunTime, writer);
    }

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ScheduledTask::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (NextRunTime.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("NextRunTime"));
        writeDatetime(NextRunTime, writer);
    }

    if (Parameter.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Parameter"));
        Parameter.writeJSON(writer);
    }

    if (Schedule.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Schedule"));
        writer->WriteValue(Schedule);
    }

    if (TaskId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TaskId"));
        writer->WriteValue(TaskId);
    }

    if (Type.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writeScheduledTaskTypeEnumJSON(Type, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FScheduledTask::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IsActiveValue = obj->TryGetField(TEXT("IsActive"));
    if (IsActiveValue.IsValid() && !IsActiveValue->IsNull())
    {
        bool TmpValue;
        if (IsActiveValue->TryGetBool(TmpValue)) { IsActive = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LastRunTimeValue = obj->TryGetField(TEXT("LastRunTime"));
    if (LastRunTimeValue.IsValid())
        LastRunTime = readDatetime(LastRunTimeValue);


    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NextRunTimeValue = obj->TryGetField(TEXT("NextRunTime"));
    if (NextRunTimeValue.IsValid())
        NextRunTime = readDatetime(NextRunTimeValue);


    const TSharedPtr<FJsonValue> ParameterValue = obj->TryGetField(TEXT("Parameter"));
    if (ParameterValue.IsValid() && !ParameterValue->IsNull())
    {
        Parameter = FJsonKeeper(ParameterValue);
    }

    const TSharedPtr<FJsonValue> ScheduleValue = obj->TryGetField(TEXT("Schedule"));
    if (ScheduleValue.IsValid() && !ScheduleValue->IsNull())
    {
        FString TmpValue;
        if (ScheduleValue->TryGetString(TmpValue)) { Schedule = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TaskIdValue = obj->TryGetField(TEXT("TaskId"));
    if (TaskIdValue.IsValid() && !TaskIdValue->IsNull())
    {
        FString TmpValue;
        if (TaskIdValue->TryGetString(TmpValue)) { TaskId = TmpValue; }
    }

    Type = readScheduledTaskTypeFromValue(obj->TryGetField(TEXT("Type")));

    return HasSucceeded;
}

PlayFab::AdminModels::FGetTasksResult::~FGetTasksResult()
{

}

void PlayFab::AdminModels::FGetTasksResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Tasks.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tasks"));
        for (const FScheduledTask& item : Tasks)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetTasksResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&TasksArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Tasks"));
    for (int32 Idx = 0; Idx < TasksArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = TasksArray[Idx];
        Tasks.Add(FScheduledTask(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FGetTitleDataRequest::~FGetTitleDataRequest()
{

}

void PlayFab::AdminModels::FGetTitleDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Keys.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Keys"));
        for (const FString& item : Keys)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (OverrideLabel.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OverrideLabel"));
        writer->WriteValue(OverrideLabel);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetTitleDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("Keys"), Keys);

    const TSharedPtr<FJsonValue> OverrideLabelValue = obj->TryGetField(TEXT("OverrideLabel"));
    if (OverrideLabelValue.IsValid() && !OverrideLabelValue->IsNull())
    {
        FString TmpValue;
        if (OverrideLabelValue->TryGetString(TmpValue)) { OverrideLabel = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetTitleDataResult::~FGetTitleDataResult()
{

}

void PlayFab::AdminModels::FGetTitleDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FString>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetTitleDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetUserBansRequest::~FGetUserBansRequest()
{

}

void PlayFab::AdminModels::FGetUserBansRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetUserBansRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetUserBansRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetUserBansResult::~FGetUserBansResult()
{

}

void PlayFab::AdminModels::FGetUserBansResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BanData.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BanData"));
        for (const FBanInfo& item : BanData)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetUserBansResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BanDataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("BanData"));
    for (int32 Idx = 0; Idx < BanDataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BanDataArray[Idx];
        BanData.Add(FBanInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FGetUserDataRequest::~FGetUserDataRequest()
{

}

void PlayFab::AdminModels::FGetUserDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (IfChangedFromDataVersion.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IfChangedFromDataVersion"));
        writer->WriteValue(static_cast<int64>(IfChangedFromDataVersion));
    }

    if (Keys.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Keys"));
        for (const FString& item : Keys)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetUserDataRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetUserDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IfChangedFromDataVersionValue = obj->TryGetField(TEXT("IfChangedFromDataVersion"));
    if (IfChangedFromDataVersionValue.IsValid() && !IfChangedFromDataVersionValue->IsNull())
    {
        uint32 TmpValue;
        if (IfChangedFromDataVersionValue->TryGetNumber(TmpValue)) { IfChangedFromDataVersion = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("Keys"), Keys);

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeUserDataPermissionEnumJSON(UserDataPermission enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case UserDataPermissionPrivate: writer->WriteValue(TEXT("Private")); break;
    case UserDataPermissionPublic: writer->WriteValue(TEXT("Public")); break;
    }
}

AdminModels::UserDataPermission PlayFab::AdminModels::readUserDataPermissionFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readUserDataPermissionFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::UserDataPermission PlayFab::AdminModels::readUserDataPermissionFromValue(const FString& value)
{
    static TMap<FString, UserDataPermission> _UserDataPermissionMap;
    if (_UserDataPermissionMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _UserDataPermissionMap.Add(TEXT("Private"), UserDataPermissionPrivate);
        _UserDataPermissionMap.Add(TEXT("Public"), UserDataPermissionPublic);

    }

    if (!value.IsEmpty())
    {
        auto output = _UserDataPermissionMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return UserDataPermissionPrivate; // Basically critical fail
}

PlayFab::AdminModels::FUserDataRecord::~FUserDataRecord()
{

}

void PlayFab::AdminModels::FUserDataRecord::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("LastUpdated"));
    writeDatetime(LastUpdated, writer);

    if (Permission.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Permission"));
        writeUserDataPermissionEnumJSON(Permission, writer);
    }

    if (Value.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Value"));
        writer->WriteValue(Value);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserDataRecord::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> LastUpdatedValue = obj->TryGetField(TEXT("LastUpdated"));
    if (LastUpdatedValue.IsValid())
        LastUpdated = readDatetime(LastUpdatedValue);


    Permission = readUserDataPermissionFromValue(obj->TryGetField(TEXT("Permission")));

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        FString TmpValue;
        if (ValueValue->TryGetString(TmpValue)) { Value = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetUserDataResult::~FGetUserDataResult()
{

}

void PlayFab::AdminModels::FGetUserDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FUserDataRecord>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("DataVersion"));
    writer->WriteValue(static_cast<int64>(DataVersion));

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetUserDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), FUserDataRecord(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> DataVersionValue = obj->TryGetField(TEXT("DataVersion"));
    if (DataVersionValue.IsValid() && !DataVersionValue->IsNull())
    {
        uint32 TmpValue;
        if (DataVersionValue->TryGetNumber(TmpValue)) { DataVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetUserInventoryRequest::~FGetUserInventoryRequest()
{

}

void PlayFab::AdminModels::FGetUserInventoryRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetUserInventoryRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetUserInventoryRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FItemInstance::~FItemInstance()
{

}

void PlayFab::AdminModels::FItemInstance::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Annotation.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Annotation"));
        writer->WriteValue(Annotation);
    }

    if (BundleContents.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BundleContents"));
        for (const FString& item : BundleContents)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (BundleParent.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("BundleParent"));
        writer->WriteValue(BundleParent);
    }

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CustomData.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomData"));
        for (TMap<FString, FString>::TConstIterator It(CustomData); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (Expiration.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Expiration"));
        writeDatetime(Expiration, writer);
    }

    if (ItemClass.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemClass"));
        writer->WriteValue(ItemClass);
    }

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (ItemInstanceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    if (PurchaseDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("PurchaseDate"));
        writeDatetime(PurchaseDate, writer);
    }

    if (RemainingUses.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("RemainingUses"));
        writer->WriteValue(RemainingUses);
    }

    if (UnitCurrency.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("UnitCurrency"));
        writer->WriteValue(UnitCurrency);
    }

    writer->WriteIdentifierPrefix(TEXT("UnitPrice"));
    writer->WriteValue(static_cast<int64>(UnitPrice));

    if (UsesIncrementedBy.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("UsesIncrementedBy"));
        writer->WriteValue(UsesIncrementedBy);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FItemInstance::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AnnotationValue = obj->TryGetField(TEXT("Annotation"));
    if (AnnotationValue.IsValid() && !AnnotationValue->IsNull())
    {
        FString TmpValue;
        if (AnnotationValue->TryGetString(TmpValue)) { Annotation = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("BundleContents"), BundleContents);

    const TSharedPtr<FJsonValue> BundleParentValue = obj->TryGetField(TEXT("BundleParent"));
    if (BundleParentValue.IsValid() && !BundleParentValue->IsNull())
    {
        FString TmpValue;
        if (BundleParentValue->TryGetString(TmpValue)) { BundleParent = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomDataObject;
    if (obj->TryGetObjectField(TEXT("CustomData"), CustomDataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomDataObject)->Values); It; ++It)
        {
            CustomData.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExpirationValue = obj->TryGetField(TEXT("Expiration"));
    if (ExpirationValue.IsValid())
        Expiration = readDatetime(ExpirationValue);


    const TSharedPtr<FJsonValue> ItemClassValue = obj->TryGetField(TEXT("ItemClass"));
    if (ItemClassValue.IsValid() && !ItemClassValue->IsNull())
    {
        FString TmpValue;
        if (ItemClassValue->TryGetString(TmpValue)) { ItemClass = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PurchaseDateValue = obj->TryGetField(TEXT("PurchaseDate"));
    if (PurchaseDateValue.IsValid())
        PurchaseDate = readDatetime(PurchaseDateValue);


    const TSharedPtr<FJsonValue> RemainingUsesValue = obj->TryGetField(TEXT("RemainingUses"));
    if (RemainingUsesValue.IsValid() && !RemainingUsesValue->IsNull())
    {
        int32 TmpValue;
        if (RemainingUsesValue->TryGetNumber(TmpValue)) { RemainingUses = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UnitCurrencyValue = obj->TryGetField(TEXT("UnitCurrency"));
    if (UnitCurrencyValue.IsValid() && !UnitCurrencyValue->IsNull())
    {
        FString TmpValue;
        if (UnitCurrencyValue->TryGetString(TmpValue)) { UnitCurrency = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UnitPriceValue = obj->TryGetField(TEXT("UnitPrice"));
    if (UnitPriceValue.IsValid() && !UnitPriceValue->IsNull())
    {
        uint32 TmpValue;
        if (UnitPriceValue->TryGetNumber(TmpValue)) { UnitPrice = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsesIncrementedByValue = obj->TryGetField(TEXT("UsesIncrementedBy"));
    if (UsesIncrementedByValue.IsValid() && !UsesIncrementedByValue->IsNull())
    {
        int32 TmpValue;
        if (UsesIncrementedByValue->TryGetNumber(TmpValue)) { UsesIncrementedBy = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FVirtualCurrencyRechargeTime::~FVirtualCurrencyRechargeTime()
{

}

void PlayFab::AdminModels::FVirtualCurrencyRechargeTime::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("RechargeMax"));
    writer->WriteValue(RechargeMax);

    writer->WriteIdentifierPrefix(TEXT("RechargeTime"));
    writeDatetime(RechargeTime, writer);

    writer->WriteIdentifierPrefix(TEXT("SecondsToRecharge"));
    writer->WriteValue(SecondsToRecharge);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FVirtualCurrencyRechargeTime::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> RechargeMaxValue = obj->TryGetField(TEXT("RechargeMax"));
    if (RechargeMaxValue.IsValid() && !RechargeMaxValue->IsNull())
    {
        int32 TmpValue;
        if (RechargeMaxValue->TryGetNumber(TmpValue)) { RechargeMax = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RechargeTimeValue = obj->TryGetField(TEXT("RechargeTime"));
    if (RechargeTimeValue.IsValid())
        RechargeTime = readDatetime(RechargeTimeValue);


    const TSharedPtr<FJsonValue> SecondsToRechargeValue = obj->TryGetField(TEXT("SecondsToRecharge"));
    if (SecondsToRechargeValue.IsValid() && !SecondsToRechargeValue->IsNull())
    {
        int32 TmpValue;
        if (SecondsToRechargeValue->TryGetNumber(TmpValue)) { SecondsToRecharge = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGetUserInventoryResult::~FGetUserInventoryResult()
{

}

void PlayFab::AdminModels::FGetUserInventoryResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Inventory.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Inventory"));
        for (const FItemInstance& item : Inventory)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (VirtualCurrency.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("VirtualCurrency"));
        for (TMap<FString, int32>::TConstIterator It(VirtualCurrency); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (VirtualCurrencyRechargeTimes.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("VirtualCurrencyRechargeTimes"));
        for (TMap<FString, FVirtualCurrencyRechargeTime>::TConstIterator It(VirtualCurrencyRechargeTimes); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGetUserInventoryResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&InventoryArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Inventory"));
    for (int32 Idx = 0; Idx < InventoryArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = InventoryArray[Idx];
        Inventory.Add(FItemInstance(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* VirtualCurrencyObject;
    if (obj->TryGetObjectField(TEXT("VirtualCurrency"), VirtualCurrencyObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*VirtualCurrencyObject)->Values); It; ++It)
        {
            int32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            VirtualCurrency.Add(It.Key(), TmpValue);
        }
    }

    const TSharedPtr<FJsonObject>* VirtualCurrencyRechargeTimesObject;
    if (obj->TryGetObjectField(TEXT("VirtualCurrencyRechargeTimes"), VirtualCurrencyRechargeTimesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*VirtualCurrencyRechargeTimesObject)->Values); It; ++It)
        {
            VirtualCurrencyRechargeTimes.Add(It.Key(), FVirtualCurrencyRechargeTime(It.Value()->AsObject()));
        }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGrantedItemInstance::~FGrantedItemInstance()
{

}

void PlayFab::AdminModels::FGrantedItemInstance::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Annotation.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Annotation"));
        writer->WriteValue(Annotation);
    }

    if (BundleContents.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BundleContents"));
        for (const FString& item : BundleContents)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (BundleParent.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("BundleParent"));
        writer->WriteValue(BundleParent);
    }

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CustomData.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomData"));
        for (TMap<FString, FString>::TConstIterator It(CustomData); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (Expiration.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Expiration"));
        writeDatetime(Expiration, writer);
    }

    if (ItemClass.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemClass"));
        writer->WriteValue(ItemClass);
    }

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (ItemInstanceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (PurchaseDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("PurchaseDate"));
        writeDatetime(PurchaseDate, writer);
    }

    if (RemainingUses.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("RemainingUses"));
        writer->WriteValue(RemainingUses);
    }

    writer->WriteIdentifierPrefix(TEXT("Result"));
    writer->WriteValue(Result);

    if (UnitCurrency.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("UnitCurrency"));
        writer->WriteValue(UnitCurrency);
    }

    writer->WriteIdentifierPrefix(TEXT("UnitPrice"));
    writer->WriteValue(static_cast<int64>(UnitPrice));

    if (UsesIncrementedBy.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("UsesIncrementedBy"));
        writer->WriteValue(UsesIncrementedBy);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGrantedItemInstance::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AnnotationValue = obj->TryGetField(TEXT("Annotation"));
    if (AnnotationValue.IsValid() && !AnnotationValue->IsNull())
    {
        FString TmpValue;
        if (AnnotationValue->TryGetString(TmpValue)) { Annotation = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("BundleContents"), BundleContents);

    const TSharedPtr<FJsonValue> BundleParentValue = obj->TryGetField(TEXT("BundleParent"));
    if (BundleParentValue.IsValid() && !BundleParentValue->IsNull())
    {
        FString TmpValue;
        if (BundleParentValue->TryGetString(TmpValue)) { BundleParent = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomDataObject;
    if (obj->TryGetObjectField(TEXT("CustomData"), CustomDataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomDataObject)->Values); It; ++It)
        {
            CustomData.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExpirationValue = obj->TryGetField(TEXT("Expiration"));
    if (ExpirationValue.IsValid())
        Expiration = readDatetime(ExpirationValue);


    const TSharedPtr<FJsonValue> ItemClassValue = obj->TryGetField(TEXT("ItemClass"));
    if (ItemClassValue.IsValid() && !ItemClassValue->IsNull())
    {
        FString TmpValue;
        if (ItemClassValue->TryGetString(TmpValue)) { ItemClass = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PurchaseDateValue = obj->TryGetField(TEXT("PurchaseDate"));
    if (PurchaseDateValue.IsValid())
        PurchaseDate = readDatetime(PurchaseDateValue);


    const TSharedPtr<FJsonValue> RemainingUsesValue = obj->TryGetField(TEXT("RemainingUses"));
    if (RemainingUsesValue.IsValid() && !RemainingUsesValue->IsNull())
    {
        int32 TmpValue;
        if (RemainingUsesValue->TryGetNumber(TmpValue)) { RemainingUses = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ResultValue = obj->TryGetField(TEXT("Result"));
    if (ResultValue.IsValid() && !ResultValue->IsNull())
    {
        bool TmpValue;
        if (ResultValue->TryGetBool(TmpValue)) { Result = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UnitCurrencyValue = obj->TryGetField(TEXT("UnitCurrency"));
    if (UnitCurrencyValue.IsValid() && !UnitCurrencyValue->IsNull())
    {
        FString TmpValue;
        if (UnitCurrencyValue->TryGetString(TmpValue)) { UnitCurrency = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UnitPriceValue = obj->TryGetField(TEXT("UnitPrice"));
    if (UnitPriceValue.IsValid() && !UnitPriceValue->IsNull())
    {
        uint32 TmpValue;
        if (UnitPriceValue->TryGetNumber(TmpValue)) { UnitPrice = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsesIncrementedByValue = obj->TryGetField(TEXT("UsesIncrementedBy"));
    if (UsesIncrementedByValue.IsValid() && !UsesIncrementedByValue->IsNull())
    {
        int32 TmpValue;
        if (UsesIncrementedByValue->TryGetNumber(TmpValue)) { UsesIncrementedBy = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FItemGrant::~FItemGrant()
{

}

void PlayFab::AdminModels::FItemGrant::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Annotation.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Annotation"));
        writer->WriteValue(Annotation);
    }

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FString>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!ItemId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ItemGrant::ItemId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (KeysToRemove.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("KeysToRemove"));
        for (const FString& item : KeysToRemove)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ItemGrant::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FItemGrant::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AnnotationValue = obj->TryGetField(TEXT("Annotation"));
    if (AnnotationValue.IsValid() && !AnnotationValue->IsNull())
    {
        FString TmpValue;
        if (AnnotationValue->TryGetString(TmpValue)) { Annotation = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("KeysToRemove"), KeysToRemove);

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FGrantItemsToUsersRequest::~FGrantItemsToUsersRequest()
{

}

void PlayFab::AdminModels::FGrantItemsToUsersRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteArrayStart(TEXT("ItemGrants"));
    for (const FItemGrant& item : ItemGrants)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGrantItemsToUsersRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TArray<TSharedPtr<FJsonValue>>&ItemGrantsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ItemGrants"));
    for (int32 Idx = 0; Idx < ItemGrantsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemGrantsArray[Idx];
        ItemGrants.Add(FItemGrant(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FGrantItemsToUsersResult::~FGrantItemsToUsersResult()
{

}

void PlayFab::AdminModels::FGrantItemsToUsersResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ItemGrantResults.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ItemGrantResults"));
        for (const FGrantedItemInstance& item : ItemGrantResults)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FGrantItemsToUsersResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ItemGrantResultsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ItemGrantResults"));
    for (int32 Idx = 0; Idx < ItemGrantResultsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemGrantResultsArray[Idx];
        ItemGrantResults.Add(FGrantedItemInstance(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FIncrementLimitedEditionItemAvailabilityRequest::~FIncrementLimitedEditionItemAvailabilityRequest()
{

}

void PlayFab::AdminModels::FIncrementLimitedEditionItemAvailabilityRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!ItemId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: IncrementLimitedEditionItemAvailabilityRequest::ItemId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FIncrementLimitedEditionItemAvailabilityRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FIncrementLimitedEditionItemAvailabilityResult::~FIncrementLimitedEditionItemAvailabilityResult()
{

}

void PlayFab::AdminModels::FIncrementLimitedEditionItemAvailabilityResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FIncrementLimitedEditionItemAvailabilityResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FIncrementPlayerStatisticVersionRequest::~FIncrementPlayerStatisticVersionRequest()
{

}

void PlayFab::AdminModels::FIncrementPlayerStatisticVersionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (StatisticName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FIncrementPlayerStatisticVersionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FIncrementPlayerStatisticVersionResult::~FIncrementPlayerStatisticVersionResult()
{
    //if (StatisticVersion != nullptr) delete StatisticVersion;

}

void PlayFab::AdminModels::FIncrementPlayerStatisticVersionResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (StatisticVersion.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticVersion"));
        StatisticVersion->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FIncrementPlayerStatisticVersionResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> StatisticVersionValue = obj->TryGetField(TEXT("StatisticVersion"));
    if (StatisticVersionValue.IsValid() && !StatisticVersionValue->IsNull())
    {
        StatisticVersion = MakeShareable(new FPlayerStatisticVersion(StatisticVersionValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FListBuildsRequest::~FListBuildsRequest()
{

}

void PlayFab::AdminModels::FListBuildsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FListBuildsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FListBuildsResult::~FListBuildsResult()
{

}

void PlayFab::AdminModels::FListBuildsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Builds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Builds"));
        for (const FGetServerBuildInfoResult& item : Builds)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FListBuildsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BuildsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Builds"));
    for (int32 Idx = 0; Idx < BuildsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BuildsArray[Idx];
        Builds.Add(FGetServerBuildInfoResult(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FListOpenIdConnectionRequest::~FListOpenIdConnectionRequest()
{

}

void PlayFab::AdminModels::FListOpenIdConnectionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FListOpenIdConnectionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FOpenIdConnection::~FOpenIdConnection()
{
    //if (IssuerInformation != nullptr) delete IssuerInformation;

}

void PlayFab::AdminModels::FOpenIdConnection::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ClientId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ClientId"));
        writer->WriteValue(ClientId);
    }

    if (ClientSecret.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ClientSecret"));
        writer->WriteValue(ClientSecret);
    }

    if (ConnectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ConnectionId"));
        writer->WriteValue(ConnectionId);
    }

    writer->WriteIdentifierPrefix(TEXT("DiscoverConfiguration"));
    writer->WriteValue(DiscoverConfiguration);

    if (IssuerInformation.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("IssuerInformation"));
        IssuerInformation->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FOpenIdConnection::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ClientIdValue = obj->TryGetField(TEXT("ClientId"));
    if (ClientIdValue.IsValid() && !ClientIdValue->IsNull())
    {
        FString TmpValue;
        if (ClientIdValue->TryGetString(TmpValue)) { ClientId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ClientSecretValue = obj->TryGetField(TEXT("ClientSecret"));
    if (ClientSecretValue.IsValid() && !ClientSecretValue->IsNull())
    {
        FString TmpValue;
        if (ClientSecretValue->TryGetString(TmpValue)) { ClientSecret = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ConnectionIdValue = obj->TryGetField(TEXT("ConnectionId"));
    if (ConnectionIdValue.IsValid() && !ConnectionIdValue->IsNull())
    {
        FString TmpValue;
        if (ConnectionIdValue->TryGetString(TmpValue)) { ConnectionId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DiscoverConfigurationValue = obj->TryGetField(TEXT("DiscoverConfiguration"));
    if (DiscoverConfigurationValue.IsValid() && !DiscoverConfigurationValue->IsNull())
    {
        bool TmpValue;
        if (DiscoverConfigurationValue->TryGetBool(TmpValue)) { DiscoverConfiguration = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IssuerInformationValue = obj->TryGetField(TEXT("IssuerInformation"));
    if (IssuerInformationValue.IsValid() && !IssuerInformationValue->IsNull())
    {
        IssuerInformation = MakeShareable(new FOpenIdIssuerInformation(IssuerInformationValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FListOpenIdConnectionResponse::~FListOpenIdConnectionResponse()
{

}

void PlayFab::AdminModels::FListOpenIdConnectionResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Connections.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Connections"));
        for (const FOpenIdConnection& item : Connections)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FListOpenIdConnectionResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ConnectionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Connections"));
    for (int32 Idx = 0; Idx < ConnectionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ConnectionsArray[Idx];
        Connections.Add(FOpenIdConnection(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FListVirtualCurrencyTypesRequest::~FListVirtualCurrencyTypesRequest()
{

}

void PlayFab::AdminModels::FListVirtualCurrencyTypesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FListVirtualCurrencyTypesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FListVirtualCurrencyTypesResult::~FListVirtualCurrencyTypesResult()
{

}

void PlayFab::AdminModels::FListVirtualCurrencyTypesResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (VirtualCurrencies.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("VirtualCurrencies"));
        for (const FVirtualCurrencyData& item : VirtualCurrencies)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FListVirtualCurrencyTypesResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&VirtualCurrenciesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("VirtualCurrencies"));
    for (int32 Idx = 0; Idx < VirtualCurrenciesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = VirtualCurrenciesArray[Idx];
        VirtualCurrencies.Add(FVirtualCurrencyData(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FLookupUserAccountInfoRequest::~FLookupUserAccountInfoRequest()
{

}

void PlayFab::AdminModels::FLookupUserAccountInfoRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Email.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Email"));
        writer->WriteValue(Email);
    }

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (TitleDisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitleDisplayName"));
        writer->WriteValue(TitleDisplayName);
    }

    if (Username.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Username"));
        writer->WriteValue(Username);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FLookupUserAccountInfoRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EmailValue = obj->TryGetField(TEXT("Email"));
    if (EmailValue.IsValid() && !EmailValue->IsNull())
    {
        FString TmpValue;
        if (EmailValue->TryGetString(TmpValue)) { Email = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TitleDisplayNameValue = obj->TryGetField(TEXT("TitleDisplayName"));
    if (TitleDisplayNameValue.IsValid() && !TitleDisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (TitleDisplayNameValue->TryGetString(TmpValue)) { TitleDisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsernameValue = obj->TryGetField(TEXT("Username"));
    if (UsernameValue.IsValid() && !UsernameValue->IsNull())
    {
        FString TmpValue;
        if (UsernameValue->TryGetString(TmpValue)) { Username = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserAndroidDeviceInfo::~FUserAndroidDeviceInfo()
{

}

void PlayFab::AdminModels::FUserAndroidDeviceInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AndroidDeviceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AndroidDeviceId"));
        writer->WriteValue(AndroidDeviceId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserAndroidDeviceInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AndroidDeviceIdValue = obj->TryGetField(TEXT("AndroidDeviceId"));
    if (AndroidDeviceIdValue.IsValid() && !AndroidDeviceIdValue->IsNull())
    {
        FString TmpValue;
        if (AndroidDeviceIdValue->TryGetString(TmpValue)) { AndroidDeviceId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserAppleIdInfo::~FUserAppleIdInfo()
{

}

void PlayFab::AdminModels::FUserAppleIdInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AppleSubjectId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AppleSubjectId"));
        writer->WriteValue(AppleSubjectId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserAppleIdInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AppleSubjectIdValue = obj->TryGetField(TEXT("AppleSubjectId"));
    if (AppleSubjectIdValue.IsValid() && !AppleSubjectIdValue->IsNull())
    {
        FString TmpValue;
        if (AppleSubjectIdValue->TryGetString(TmpValue)) { AppleSubjectId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserCustomIdInfo::~FUserCustomIdInfo()
{

}

void PlayFab::AdminModels::FUserCustomIdInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CustomId"));
        writer->WriteValue(CustomId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserCustomIdInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CustomIdValue = obj->TryGetField(TEXT("CustomId"));
    if (CustomIdValue.IsValid() && !CustomIdValue->IsNull())
    {
        FString TmpValue;
        if (CustomIdValue->TryGetString(TmpValue)) { CustomId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserFacebookInfo::~FUserFacebookInfo()
{

}

void PlayFab::AdminModels::FUserFacebookInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FacebookId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FacebookId"));
        writer->WriteValue(FacebookId);
    }

    if (FullName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FullName"));
        writer->WriteValue(FullName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserFacebookInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FacebookIdValue = obj->TryGetField(TEXT("FacebookId"));
    if (FacebookIdValue.IsValid() && !FacebookIdValue->IsNull())
    {
        FString TmpValue;
        if (FacebookIdValue->TryGetString(TmpValue)) { FacebookId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FullNameValue = obj->TryGetField(TEXT("FullName"));
    if (FullNameValue.IsValid() && !FullNameValue->IsNull())
    {
        FString TmpValue;
        if (FullNameValue->TryGetString(TmpValue)) { FullName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserFacebookInstantGamesIdInfo::~FUserFacebookInstantGamesIdInfo()
{

}

void PlayFab::AdminModels::FUserFacebookInstantGamesIdInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FacebookInstantGamesId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FacebookInstantGamesId"));
        writer->WriteValue(FacebookInstantGamesId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserFacebookInstantGamesIdInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FacebookInstantGamesIdValue = obj->TryGetField(TEXT("FacebookInstantGamesId"));
    if (FacebookInstantGamesIdValue.IsValid() && !FacebookInstantGamesIdValue->IsNull())
    {
        FString TmpValue;
        if (FacebookInstantGamesIdValue->TryGetString(TmpValue)) { FacebookInstantGamesId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserGameCenterInfo::~FUserGameCenterInfo()
{

}

void PlayFab::AdminModels::FUserGameCenterInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (GameCenterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GameCenterId"));
        writer->WriteValue(GameCenterId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserGameCenterInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GameCenterIdValue = obj->TryGetField(TEXT("GameCenterId"));
    if (GameCenterIdValue.IsValid() && !GameCenterIdValue->IsNull())
    {
        FString TmpValue;
        if (GameCenterIdValue->TryGetString(TmpValue)) { GameCenterId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserGoogleInfo::~FUserGoogleInfo()
{

}

void PlayFab::AdminModels::FUserGoogleInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (GoogleEmail.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GoogleEmail"));
        writer->WriteValue(GoogleEmail);
    }

    if (GoogleGender.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GoogleGender"));
        writer->WriteValue(GoogleGender);
    }

    if (GoogleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GoogleId"));
        writer->WriteValue(GoogleId);
    }

    if (GoogleLocale.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GoogleLocale"));
        writer->WriteValue(GoogleLocale);
    }

    if (GoogleName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GoogleName"));
        writer->WriteValue(GoogleName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserGoogleInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GoogleEmailValue = obj->TryGetField(TEXT("GoogleEmail"));
    if (GoogleEmailValue.IsValid() && !GoogleEmailValue->IsNull())
    {
        FString TmpValue;
        if (GoogleEmailValue->TryGetString(TmpValue)) { GoogleEmail = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GoogleGenderValue = obj->TryGetField(TEXT("GoogleGender"));
    if (GoogleGenderValue.IsValid() && !GoogleGenderValue->IsNull())
    {
        FString TmpValue;
        if (GoogleGenderValue->TryGetString(TmpValue)) { GoogleGender = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GoogleIdValue = obj->TryGetField(TEXT("GoogleId"));
    if (GoogleIdValue.IsValid() && !GoogleIdValue->IsNull())
    {
        FString TmpValue;
        if (GoogleIdValue->TryGetString(TmpValue)) { GoogleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GoogleLocaleValue = obj->TryGetField(TEXT("GoogleLocale"));
    if (GoogleLocaleValue.IsValid() && !GoogleLocaleValue->IsNull())
    {
        FString TmpValue;
        if (GoogleLocaleValue->TryGetString(TmpValue)) { GoogleLocale = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GoogleNameValue = obj->TryGetField(TEXT("GoogleName"));
    if (GoogleNameValue.IsValid() && !GoogleNameValue->IsNull())
    {
        FString TmpValue;
        if (GoogleNameValue->TryGetString(TmpValue)) { GoogleName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserIosDeviceInfo::~FUserIosDeviceInfo()
{

}

void PlayFab::AdminModels::FUserIosDeviceInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (IosDeviceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IosDeviceId"));
        writer->WriteValue(IosDeviceId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserIosDeviceInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IosDeviceIdValue = obj->TryGetField(TEXT("IosDeviceId"));
    if (IosDeviceIdValue.IsValid() && !IosDeviceIdValue->IsNull())
    {
        FString TmpValue;
        if (IosDeviceIdValue->TryGetString(TmpValue)) { IosDeviceId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserKongregateInfo::~FUserKongregateInfo()
{

}

void PlayFab::AdminModels::FUserKongregateInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (KongregateId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("KongregateId"));
        writer->WriteValue(KongregateId);
    }

    if (KongregateName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("KongregateName"));
        writer->WriteValue(KongregateName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserKongregateInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> KongregateIdValue = obj->TryGetField(TEXT("KongregateId"));
    if (KongregateIdValue.IsValid() && !KongregateIdValue->IsNull())
    {
        FString TmpValue;
        if (KongregateIdValue->TryGetString(TmpValue)) { KongregateId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> KongregateNameValue = obj->TryGetField(TEXT("KongregateName"));
    if (KongregateNameValue.IsValid() && !KongregateNameValue->IsNull())
    {
        FString TmpValue;
        if (KongregateNameValue->TryGetString(TmpValue)) { KongregateName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserNintendoSwitchAccountIdInfo::~FUserNintendoSwitchAccountIdInfo()
{

}

void PlayFab::AdminModels::FUserNintendoSwitchAccountIdInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (NintendoSwitchAccountSubjectId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NintendoSwitchAccountSubjectId"));
        writer->WriteValue(NintendoSwitchAccountSubjectId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserNintendoSwitchAccountIdInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NintendoSwitchAccountSubjectIdValue = obj->TryGetField(TEXT("NintendoSwitchAccountSubjectId"));
    if (NintendoSwitchAccountSubjectIdValue.IsValid() && !NintendoSwitchAccountSubjectIdValue->IsNull())
    {
        FString TmpValue;
        if (NintendoSwitchAccountSubjectIdValue->TryGetString(TmpValue)) { NintendoSwitchAccountSubjectId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserNintendoSwitchDeviceIdInfo::~FUserNintendoSwitchDeviceIdInfo()
{

}

void PlayFab::AdminModels::FUserNintendoSwitchDeviceIdInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (NintendoSwitchDeviceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NintendoSwitchDeviceId"));
        writer->WriteValue(NintendoSwitchDeviceId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserNintendoSwitchDeviceIdInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NintendoSwitchDeviceIdValue = obj->TryGetField(TEXT("NintendoSwitchDeviceId"));
    if (NintendoSwitchDeviceIdValue.IsValid() && !NintendoSwitchDeviceIdValue->IsNull())
    {
        FString TmpValue;
        if (NintendoSwitchDeviceIdValue->TryGetString(TmpValue)) { NintendoSwitchDeviceId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserOpenIdInfo::~FUserOpenIdInfo()
{

}

void PlayFab::AdminModels::FUserOpenIdInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ConnectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ConnectionId"));
        writer->WriteValue(ConnectionId);
    }

    if (Issuer.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Issuer"));
        writer->WriteValue(Issuer);
    }

    if (Subject.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Subject"));
        writer->WriteValue(Subject);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserOpenIdInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ConnectionIdValue = obj->TryGetField(TEXT("ConnectionId"));
    if (ConnectionIdValue.IsValid() && !ConnectionIdValue->IsNull())
    {
        FString TmpValue;
        if (ConnectionIdValue->TryGetString(TmpValue)) { ConnectionId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IssuerValue = obj->TryGetField(TEXT("Issuer"));
    if (IssuerValue.IsValid() && !IssuerValue->IsNull())
    {
        FString TmpValue;
        if (IssuerValue->TryGetString(TmpValue)) { Issuer = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SubjectValue = obj->TryGetField(TEXT("Subject"));
    if (SubjectValue.IsValid() && !SubjectValue->IsNull())
    {
        FString TmpValue;
        if (SubjectValue->TryGetString(TmpValue)) { Subject = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserPrivateAccountInfo::~FUserPrivateAccountInfo()
{

}

void PlayFab::AdminModels::FUserPrivateAccountInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Email.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Email"));
        writer->WriteValue(Email);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserPrivateAccountInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EmailValue = obj->TryGetField(TEXT("Email"));
    if (EmailValue.IsValid() && !EmailValue->IsNull())
    {
        FString TmpValue;
        if (EmailValue->TryGetString(TmpValue)) { Email = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserPsnInfo::~FUserPsnInfo()
{

}

void PlayFab::AdminModels::FUserPsnInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PsnAccountId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PsnAccountId"));
        writer->WriteValue(PsnAccountId);
    }

    if (PsnOnlineId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PsnOnlineId"));
        writer->WriteValue(PsnOnlineId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserPsnInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PsnAccountIdValue = obj->TryGetField(TEXT("PsnAccountId"));
    if (PsnAccountIdValue.IsValid() && !PsnAccountIdValue->IsNull())
    {
        FString TmpValue;
        if (PsnAccountIdValue->TryGetString(TmpValue)) { PsnAccountId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PsnOnlineIdValue = obj->TryGetField(TEXT("PsnOnlineId"));
    if (PsnOnlineIdValue.IsValid() && !PsnOnlineIdValue->IsNull())
    {
        FString TmpValue;
        if (PsnOnlineIdValue->TryGetString(TmpValue)) { PsnOnlineId = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeTitleActivationStatusEnumJSON(TitleActivationStatus enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case TitleActivationStatusNone: writer->WriteValue(TEXT("None")); break;
    case TitleActivationStatusActivatedTitleKey: writer->WriteValue(TEXT("ActivatedTitleKey")); break;
    case TitleActivationStatusPendingSteam: writer->WriteValue(TEXT("PendingSteam")); break;
    case TitleActivationStatusActivatedSteam: writer->WriteValue(TEXT("ActivatedSteam")); break;
    case TitleActivationStatusRevokedSteam: writer->WriteValue(TEXT("RevokedSteam")); break;
    }
}

AdminModels::TitleActivationStatus PlayFab::AdminModels::readTitleActivationStatusFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readTitleActivationStatusFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::TitleActivationStatus PlayFab::AdminModels::readTitleActivationStatusFromValue(const FString& value)
{
    static TMap<FString, TitleActivationStatus> _TitleActivationStatusMap;
    if (_TitleActivationStatusMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _TitleActivationStatusMap.Add(TEXT("None"), TitleActivationStatusNone);
        _TitleActivationStatusMap.Add(TEXT("ActivatedTitleKey"), TitleActivationStatusActivatedTitleKey);
        _TitleActivationStatusMap.Add(TEXT("PendingSteam"), TitleActivationStatusPendingSteam);
        _TitleActivationStatusMap.Add(TEXT("ActivatedSteam"), TitleActivationStatusActivatedSteam);
        _TitleActivationStatusMap.Add(TEXT("RevokedSteam"), TitleActivationStatusRevokedSteam);

    }

    if (!value.IsEmpty())
    {
        auto output = _TitleActivationStatusMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return TitleActivationStatusNone; // Basically critical fail
}

PlayFab::AdminModels::FUserSteamInfo::~FUserSteamInfo()
{

}

void PlayFab::AdminModels::FUserSteamInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (SteamActivationStatus.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("SteamActivationStatus"));
        writeTitleActivationStatusEnumJSON(SteamActivationStatus, writer);
    }

    if (SteamCountry.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SteamCountry"));
        writer->WriteValue(SteamCountry);
    }

    if (SteamCurrency.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("SteamCurrency"));
        writeCurrencyEnumJSON(SteamCurrency, writer);
    }

    if (SteamId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SteamId"));
        writer->WriteValue(SteamId);
    }

    if (SteamName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SteamName"));
        writer->WriteValue(SteamName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserSteamInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    SteamActivationStatus = readTitleActivationStatusFromValue(obj->TryGetField(TEXT("SteamActivationStatus")));

    const TSharedPtr<FJsonValue> SteamCountryValue = obj->TryGetField(TEXT("SteamCountry"));
    if (SteamCountryValue.IsValid() && !SteamCountryValue->IsNull())
    {
        FString TmpValue;
        if (SteamCountryValue->TryGetString(TmpValue)) { SteamCountry = TmpValue; }
    }

    SteamCurrency = readCurrencyFromValue(obj->TryGetField(TEXT("SteamCurrency")));

    const TSharedPtr<FJsonValue> SteamIdValue = obj->TryGetField(TEXT("SteamId"));
    if (SteamIdValue.IsValid() && !SteamIdValue->IsNull())
    {
        FString TmpValue;
        if (SteamIdValue->TryGetString(TmpValue)) { SteamId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SteamNameValue = obj->TryGetField(TEXT("SteamName"));
    if (SteamNameValue.IsValid() && !SteamNameValue->IsNull())
    {
        FString TmpValue;
        if (SteamNameValue->TryGetString(TmpValue)) { SteamName = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeUserOriginationEnumJSON(UserOrigination enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case UserOriginationOrganic: writer->WriteValue(TEXT("Organic")); break;
    case UserOriginationSteam: writer->WriteValue(TEXT("Steam")); break;
    case UserOriginationGoogle: writer->WriteValue(TEXT("Google")); break;
    case UserOriginationAmazon: writer->WriteValue(TEXT("Amazon")); break;
    case UserOriginationFacebook: writer->WriteValue(TEXT("Facebook")); break;
    case UserOriginationKongregate: writer->WriteValue(TEXT("Kongregate")); break;
    case UserOriginationGamersFirst: writer->WriteValue(TEXT("GamersFirst")); break;
    case UserOriginationUnknown: writer->WriteValue(TEXT("Unknown")); break;
    case UserOriginationIOS: writer->WriteValue(TEXT("IOS")); break;
    case UserOriginationLoadTest: writer->WriteValue(TEXT("LoadTest")); break;
    case UserOriginationAndroid: writer->WriteValue(TEXT("Android")); break;
    case UserOriginationPSN: writer->WriteValue(TEXT("PSN")); break;
    case UserOriginationGameCenter: writer->WriteValue(TEXT("GameCenter")); break;
    case UserOriginationCustomId: writer->WriteValue(TEXT("CustomId")); break;
    case UserOriginationXboxLive: writer->WriteValue(TEXT("XboxLive")); break;
    case UserOriginationParse: writer->WriteValue(TEXT("Parse")); break;
    case UserOriginationTwitch: writer->WriteValue(TEXT("Twitch")); break;
    case UserOriginationWindowsHello: writer->WriteValue(TEXT("WindowsHello")); break;
    case UserOriginationServerCustomId: writer->WriteValue(TEXT("ServerCustomId")); break;
    case UserOriginationNintendoSwitchDeviceId: writer->WriteValue(TEXT("NintendoSwitchDeviceId")); break;
    case UserOriginationFacebookInstantGamesId: writer->WriteValue(TEXT("FacebookInstantGamesId")); break;
    case UserOriginationOpenIdConnect: writer->WriteValue(TEXT("OpenIdConnect")); break;
    case UserOriginationApple: writer->WriteValue(TEXT("Apple")); break;
    case UserOriginationNintendoSwitchAccount: writer->WriteValue(TEXT("NintendoSwitchAccount")); break;
    }
}

AdminModels::UserOrigination PlayFab::AdminModels::readUserOriginationFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readUserOriginationFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::UserOrigination PlayFab::AdminModels::readUserOriginationFromValue(const FString& value)
{
    static TMap<FString, UserOrigination> _UserOriginationMap;
    if (_UserOriginationMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _UserOriginationMap.Add(TEXT("Organic"), UserOriginationOrganic);
        _UserOriginationMap.Add(TEXT("Steam"), UserOriginationSteam);
        _UserOriginationMap.Add(TEXT("Google"), UserOriginationGoogle);
        _UserOriginationMap.Add(TEXT("Amazon"), UserOriginationAmazon);
        _UserOriginationMap.Add(TEXT("Facebook"), UserOriginationFacebook);
        _UserOriginationMap.Add(TEXT("Kongregate"), UserOriginationKongregate);
        _UserOriginationMap.Add(TEXT("GamersFirst"), UserOriginationGamersFirst);
        _UserOriginationMap.Add(TEXT("Unknown"), UserOriginationUnknown);
        _UserOriginationMap.Add(TEXT("IOS"), UserOriginationIOS);
        _UserOriginationMap.Add(TEXT("LoadTest"), UserOriginationLoadTest);
        _UserOriginationMap.Add(TEXT("Android"), UserOriginationAndroid);
        _UserOriginationMap.Add(TEXT("PSN"), UserOriginationPSN);
        _UserOriginationMap.Add(TEXT("GameCenter"), UserOriginationGameCenter);
        _UserOriginationMap.Add(TEXT("CustomId"), UserOriginationCustomId);
        _UserOriginationMap.Add(TEXT("XboxLive"), UserOriginationXboxLive);
        _UserOriginationMap.Add(TEXT("Parse"), UserOriginationParse);
        _UserOriginationMap.Add(TEXT("Twitch"), UserOriginationTwitch);
        _UserOriginationMap.Add(TEXT("WindowsHello"), UserOriginationWindowsHello);
        _UserOriginationMap.Add(TEXT("ServerCustomId"), UserOriginationServerCustomId);
        _UserOriginationMap.Add(TEXT("NintendoSwitchDeviceId"), UserOriginationNintendoSwitchDeviceId);
        _UserOriginationMap.Add(TEXT("FacebookInstantGamesId"), UserOriginationFacebookInstantGamesId);
        _UserOriginationMap.Add(TEXT("OpenIdConnect"), UserOriginationOpenIdConnect);
        _UserOriginationMap.Add(TEXT("Apple"), UserOriginationApple);
        _UserOriginationMap.Add(TEXT("NintendoSwitchAccount"), UserOriginationNintendoSwitchAccount);

    }

    if (!value.IsEmpty())
    {
        auto output = _UserOriginationMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return UserOriginationOrganic; // Basically critical fail
}

PlayFab::AdminModels::FUserTitleInfo::~FUserTitleInfo()
{
    //if (TitlePlayerAccount != nullptr) delete TitlePlayerAccount;

}

void PlayFab::AdminModels::FUserTitleInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AvatarUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AvatarUrl"));
        writer->WriteValue(AvatarUrl);
    }

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writeDatetime(Created, writer);

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (FirstLogin.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FirstLogin"));
        writeDatetime(FirstLogin, writer);
    }

    if (isBanned.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("isBanned"));
        writer->WriteValue(isBanned);
    }

    if (LastLogin.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LastLogin"));
        writeDatetime(LastLogin, writer);
    }

    if (Origination.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Origination"));
        writeUserOriginationEnumJSON(Origination, writer);
    }

    if (TitlePlayerAccount.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("TitlePlayerAccount"));
        TitlePlayerAccount->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserTitleInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AvatarUrlValue = obj->TryGetField(TEXT("AvatarUrl"));
    if (AvatarUrlValue.IsValid() && !AvatarUrlValue->IsNull())
    {
        FString TmpValue;
        if (AvatarUrlValue->TryGetString(TmpValue)) { AvatarUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FirstLoginValue = obj->TryGetField(TEXT("FirstLogin"));
    if (FirstLoginValue.IsValid())
        FirstLogin = readDatetime(FirstLoginValue);


    const TSharedPtr<FJsonValue> isBannedValue = obj->TryGetField(TEXT("isBanned"));
    if (isBannedValue.IsValid() && !isBannedValue->IsNull())
    {
        bool TmpValue;
        if (isBannedValue->TryGetBool(TmpValue)) { isBanned = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LastLoginValue = obj->TryGetField(TEXT("LastLogin"));
    if (LastLoginValue.IsValid())
        LastLogin = readDatetime(LastLoginValue);


    Origination = readUserOriginationFromValue(obj->TryGetField(TEXT("Origination")));

    const TSharedPtr<FJsonValue> TitlePlayerAccountValue = obj->TryGetField(TEXT("TitlePlayerAccount"));
    if (TitlePlayerAccountValue.IsValid() && !TitlePlayerAccountValue->IsNull())
    {
        TitlePlayerAccount = MakeShareable(new FEntityKey(TitlePlayerAccountValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserTwitchInfo::~FUserTwitchInfo()
{

}

void PlayFab::AdminModels::FUserTwitchInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (TwitchId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TwitchId"));
        writer->WriteValue(TwitchId);
    }

    if (TwitchUserName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TwitchUserName"));
        writer->WriteValue(TwitchUserName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserTwitchInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> TwitchIdValue = obj->TryGetField(TEXT("TwitchId"));
    if (TwitchIdValue.IsValid() && !TwitchIdValue->IsNull())
    {
        FString TmpValue;
        if (TwitchIdValue->TryGetString(TmpValue)) { TwitchId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TwitchUserNameValue = obj->TryGetField(TEXT("TwitchUserName"));
    if (TwitchUserNameValue.IsValid() && !TwitchUserNameValue->IsNull())
    {
        FString TmpValue;
        if (TwitchUserNameValue->TryGetString(TmpValue)) { TwitchUserName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserWindowsHelloInfo::~FUserWindowsHelloInfo()
{

}

void PlayFab::AdminModels::FUserWindowsHelloInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (WindowsHelloDeviceName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("WindowsHelloDeviceName"));
        writer->WriteValue(WindowsHelloDeviceName);
    }

    if (WindowsHelloPublicKeyHash.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("WindowsHelloPublicKeyHash"));
        writer->WriteValue(WindowsHelloPublicKeyHash);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserWindowsHelloInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> WindowsHelloDeviceNameValue = obj->TryGetField(TEXT("WindowsHelloDeviceName"));
    if (WindowsHelloDeviceNameValue.IsValid() && !WindowsHelloDeviceNameValue->IsNull())
    {
        FString TmpValue;
        if (WindowsHelloDeviceNameValue->TryGetString(TmpValue)) { WindowsHelloDeviceName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> WindowsHelloPublicKeyHashValue = obj->TryGetField(TEXT("WindowsHelloPublicKeyHash"));
    if (WindowsHelloPublicKeyHashValue.IsValid() && !WindowsHelloPublicKeyHashValue->IsNull())
    {
        FString TmpValue;
        if (WindowsHelloPublicKeyHashValue->TryGetString(TmpValue)) { WindowsHelloPublicKeyHash = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserXboxInfo::~FUserXboxInfo()
{

}

void PlayFab::AdminModels::FUserXboxInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (XboxUserId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("XboxUserId"));
        writer->WriteValue(XboxUserId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserXboxInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> XboxUserIdValue = obj->TryGetField(TEXT("XboxUserId"));
    if (XboxUserIdValue.IsValid() && !XboxUserIdValue->IsNull())
    {
        FString TmpValue;
        if (XboxUserIdValue->TryGetString(TmpValue)) { XboxUserId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUserAccountInfo::~FUserAccountInfo()
{
    //if (AndroidDeviceInfo != nullptr) delete AndroidDeviceInfo;
    //if (AppleAccountInfo != nullptr) delete AppleAccountInfo;
    //if (CustomIdInfo != nullptr) delete CustomIdInfo;
    //if (FacebookInfo != nullptr) delete FacebookInfo;
    //if (FacebookInstantGamesIdInfo != nullptr) delete FacebookInstantGamesIdInfo;
    //if (GameCenterInfo != nullptr) delete GameCenterInfo;
    //if (GoogleInfo != nullptr) delete GoogleInfo;
    //if (IosDeviceInfo != nullptr) delete IosDeviceInfo;
    //if (KongregateInfo != nullptr) delete KongregateInfo;
    //if (NintendoSwitchAccountInfo != nullptr) delete NintendoSwitchAccountInfo;
    //if (NintendoSwitchDeviceIdInfo != nullptr) delete NintendoSwitchDeviceIdInfo;
    //if (PrivateInfo != nullptr) delete PrivateInfo;
    //if (PsnInfo != nullptr) delete PsnInfo;
    //if (SteamInfo != nullptr) delete SteamInfo;
    //if (TitleInfo != nullptr) delete TitleInfo;
    //if (TwitchInfo != nullptr) delete TwitchInfo;
    //if (WindowsHelloInfo != nullptr) delete WindowsHelloInfo;
    //if (XboxInfo != nullptr) delete XboxInfo;

}

void PlayFab::AdminModels::FUserAccountInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AndroidDeviceInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AndroidDeviceInfo"));
        AndroidDeviceInfo->writeJSON(writer);
    }

    if (AppleAccountInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AppleAccountInfo"));
        AppleAccountInfo->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writeDatetime(Created, writer);

    if (CustomIdInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("CustomIdInfo"));
        CustomIdInfo->writeJSON(writer);
    }

    if (FacebookInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("FacebookInfo"));
        FacebookInfo->writeJSON(writer);
    }

    if (FacebookInstantGamesIdInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("FacebookInstantGamesIdInfo"));
        FacebookInstantGamesIdInfo->writeJSON(writer);
    }

    if (GameCenterInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("GameCenterInfo"));
        GameCenterInfo->writeJSON(writer);
    }

    if (GoogleInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("GoogleInfo"));
        GoogleInfo->writeJSON(writer);
    }

    if (IosDeviceInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("IosDeviceInfo"));
        IosDeviceInfo->writeJSON(writer);
    }

    if (KongregateInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("KongregateInfo"));
        KongregateInfo->writeJSON(writer);
    }

    if (NintendoSwitchAccountInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("NintendoSwitchAccountInfo"));
        NintendoSwitchAccountInfo->writeJSON(writer);
    }

    if (NintendoSwitchDeviceIdInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("NintendoSwitchDeviceIdInfo"));
        NintendoSwitchDeviceIdInfo->writeJSON(writer);
    }

    if (OpenIdInfo.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("OpenIdInfo"));
        for (const FUserOpenIdInfo& item : OpenIdInfo)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (PrivateInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("PrivateInfo"));
        PrivateInfo->writeJSON(writer);
    }

    if (PsnInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("PsnInfo"));
        PsnInfo->writeJSON(writer);
    }

    if (SteamInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("SteamInfo"));
        SteamInfo->writeJSON(writer);
    }

    if (TitleInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("TitleInfo"));
        TitleInfo->writeJSON(writer);
    }

    if (TwitchInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("TwitchInfo"));
        TwitchInfo->writeJSON(writer);
    }

    if (Username.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Username"));
        writer->WriteValue(Username);
    }

    if (WindowsHelloInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("WindowsHelloInfo"));
        WindowsHelloInfo->writeJSON(writer);
    }

    if (XboxInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("XboxInfo"));
        XboxInfo->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUserAccountInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AndroidDeviceInfoValue = obj->TryGetField(TEXT("AndroidDeviceInfo"));
    if (AndroidDeviceInfoValue.IsValid() && !AndroidDeviceInfoValue->IsNull())
    {
        AndroidDeviceInfo = MakeShareable(new FUserAndroidDeviceInfo(AndroidDeviceInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> AppleAccountInfoValue = obj->TryGetField(TEXT("AppleAccountInfo"));
    if (AppleAccountInfoValue.IsValid() && !AppleAccountInfoValue->IsNull())
    {
        AppleAccountInfo = MakeShareable(new FUserAppleIdInfo(AppleAccountInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> CustomIdInfoValue = obj->TryGetField(TEXT("CustomIdInfo"));
    if (CustomIdInfoValue.IsValid() && !CustomIdInfoValue->IsNull())
    {
        CustomIdInfo = MakeShareable(new FUserCustomIdInfo(CustomIdInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> FacebookInfoValue = obj->TryGetField(TEXT("FacebookInfo"));
    if (FacebookInfoValue.IsValid() && !FacebookInfoValue->IsNull())
    {
        FacebookInfo = MakeShareable(new FUserFacebookInfo(FacebookInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> FacebookInstantGamesIdInfoValue = obj->TryGetField(TEXT("FacebookInstantGamesIdInfo"));
    if (FacebookInstantGamesIdInfoValue.IsValid() && !FacebookInstantGamesIdInfoValue->IsNull())
    {
        FacebookInstantGamesIdInfo = MakeShareable(new FUserFacebookInstantGamesIdInfo(FacebookInstantGamesIdInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GameCenterInfoValue = obj->TryGetField(TEXT("GameCenterInfo"));
    if (GameCenterInfoValue.IsValid() && !GameCenterInfoValue->IsNull())
    {
        GameCenterInfo = MakeShareable(new FUserGameCenterInfo(GameCenterInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GoogleInfoValue = obj->TryGetField(TEXT("GoogleInfo"));
    if (GoogleInfoValue.IsValid() && !GoogleInfoValue->IsNull())
    {
        GoogleInfo = MakeShareable(new FUserGoogleInfo(GoogleInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IosDeviceInfoValue = obj->TryGetField(TEXT("IosDeviceInfo"));
    if (IosDeviceInfoValue.IsValid() && !IosDeviceInfoValue->IsNull())
    {
        IosDeviceInfo = MakeShareable(new FUserIosDeviceInfo(IosDeviceInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> KongregateInfoValue = obj->TryGetField(TEXT("KongregateInfo"));
    if (KongregateInfoValue.IsValid() && !KongregateInfoValue->IsNull())
    {
        KongregateInfo = MakeShareable(new FUserKongregateInfo(KongregateInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> NintendoSwitchAccountInfoValue = obj->TryGetField(TEXT("NintendoSwitchAccountInfo"));
    if (NintendoSwitchAccountInfoValue.IsValid() && !NintendoSwitchAccountInfoValue->IsNull())
    {
        NintendoSwitchAccountInfo = MakeShareable(new FUserNintendoSwitchAccountIdInfo(NintendoSwitchAccountInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> NintendoSwitchDeviceIdInfoValue = obj->TryGetField(TEXT("NintendoSwitchDeviceIdInfo"));
    if (NintendoSwitchDeviceIdInfoValue.IsValid() && !NintendoSwitchDeviceIdInfoValue->IsNull())
    {
        NintendoSwitchDeviceIdInfo = MakeShareable(new FUserNintendoSwitchDeviceIdInfo(NintendoSwitchDeviceIdInfoValue->AsObject()));
    }

    const TArray<TSharedPtr<FJsonValue>>&OpenIdInfoArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("OpenIdInfo"));
    for (int32 Idx = 0; Idx < OpenIdInfoArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = OpenIdInfoArray[Idx];
        OpenIdInfo.Add(FUserOpenIdInfo(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PrivateInfoValue = obj->TryGetField(TEXT("PrivateInfo"));
    if (PrivateInfoValue.IsValid() && !PrivateInfoValue->IsNull())
    {
        PrivateInfo = MakeShareable(new FUserPrivateAccountInfo(PrivateInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> PsnInfoValue = obj->TryGetField(TEXT("PsnInfo"));
    if (PsnInfoValue.IsValid() && !PsnInfoValue->IsNull())
    {
        PsnInfo = MakeShareable(new FUserPsnInfo(PsnInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> SteamInfoValue = obj->TryGetField(TEXT("SteamInfo"));
    if (SteamInfoValue.IsValid() && !SteamInfoValue->IsNull())
    {
        SteamInfo = MakeShareable(new FUserSteamInfo(SteamInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> TitleInfoValue = obj->TryGetField(TEXT("TitleInfo"));
    if (TitleInfoValue.IsValid() && !TitleInfoValue->IsNull())
    {
        TitleInfo = MakeShareable(new FUserTitleInfo(TitleInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> TwitchInfoValue = obj->TryGetField(TEXT("TwitchInfo"));
    if (TwitchInfoValue.IsValid() && !TwitchInfoValue->IsNull())
    {
        TwitchInfo = MakeShareable(new FUserTwitchInfo(TwitchInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> UsernameValue = obj->TryGetField(TEXT("Username"));
    if (UsernameValue.IsValid() && !UsernameValue->IsNull())
    {
        FString TmpValue;
        if (UsernameValue->TryGetString(TmpValue)) { Username = TmpValue; }
    }

    const TSharedPtr<FJsonValue> WindowsHelloInfoValue = obj->TryGetField(TEXT("WindowsHelloInfo"));
    if (WindowsHelloInfoValue.IsValid() && !WindowsHelloInfoValue->IsNull())
    {
        WindowsHelloInfo = MakeShareable(new FUserWindowsHelloInfo(WindowsHelloInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> XboxInfoValue = obj->TryGetField(TEXT("XboxInfo"));
    if (XboxInfoValue.IsValid() && !XboxInfoValue->IsNull())
    {
        XboxInfo = MakeShareable(new FUserXboxInfo(XboxInfoValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FLookupUserAccountInfoResult::~FLookupUserAccountInfoResult()
{
    //if (UserInfo != nullptr) delete UserInfo;

}

void PlayFab::AdminModels::FLookupUserAccountInfoResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (UserInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("UserInfo"));
        UserInfo->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FLookupUserAccountInfoResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> UserInfoValue = obj->TryGetField(TEXT("UserInfo"));
    if (UserInfoValue.IsValid() && !UserInfoValue->IsNull())
    {
        UserInfo = MakeShareable(new FUserAccountInfo(UserInfoValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FModifyMatchmakerGameModesRequest::~FModifyMatchmakerGameModesRequest()
{

}

void PlayFab::AdminModels::FModifyMatchmakerGameModesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!BuildVersion.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ModifyMatchmakerGameModesRequest::BuildVersion, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("BuildVersion"));
        writer->WriteValue(BuildVersion);
    }

    writer->WriteArrayStart(TEXT("GameModes"));
    for (const FGameModeInfo& item : GameModes)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FModifyMatchmakerGameModesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BuildVersionValue = obj->TryGetField(TEXT("BuildVersion"));
    if (BuildVersionValue.IsValid() && !BuildVersionValue->IsNull())
    {
        FString TmpValue;
        if (BuildVersionValue->TryGetString(TmpValue)) { BuildVersion = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&GameModesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("GameModes"));
    for (int32 Idx = 0; Idx < GameModesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = GameModesArray[Idx];
        GameModes.Add(FGameModeInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FModifyMatchmakerGameModesResult::~FModifyMatchmakerGameModesResult()
{

}

void PlayFab::AdminModels::FModifyMatchmakerGameModesResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FModifyMatchmakerGameModesResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FModifyServerBuildRequest::~FModifyServerBuildRequest()
{

}

void PlayFab::AdminModels::FModifyServerBuildRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ActiveRegions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ActiveRegions"));
        for (const Region& item : ActiveRegions)
            writeRegionEnumJSON(item, writer);
        writer->WriteArrayEnd();
    }


    if (!BuildId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ModifyServerBuildRequest::BuildId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("BuildId"));
        writer->WriteValue(BuildId);
    }

    if (CommandLineTemplate.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CommandLineTemplate"));
        writer->WriteValue(CommandLineTemplate);
    }

    if (Comment.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Comment"));
        writer->WriteValue(Comment);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (ExecutablePath.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ExecutablePath"));
        writer->WriteValue(ExecutablePath);
    }

    writer->WriteIdentifierPrefix(TEXT("MaxGamesPerHost"));
    writer->WriteValue(MaxGamesPerHost);

    writer->WriteIdentifierPrefix(TEXT("MinFreeGameSlots"));
    writer->WriteValue(MinFreeGameSlots);

    if (Timestamp.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Timestamp"));
        writeDatetime(Timestamp, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FModifyServerBuildRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ActiveRegionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ActiveRegions"));
    for (int32 Idx = 0; Idx < ActiveRegionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ActiveRegionsArray[Idx];
        ActiveRegions.Add(readRegionFromValue(CurrentItem));
    }


    const TSharedPtr<FJsonValue> BuildIdValue = obj->TryGetField(TEXT("BuildId"));
    if (BuildIdValue.IsValid() && !BuildIdValue->IsNull())
    {
        FString TmpValue;
        if (BuildIdValue->TryGetString(TmpValue)) { BuildId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CommandLineTemplateValue = obj->TryGetField(TEXT("CommandLineTemplate"));
    if (CommandLineTemplateValue.IsValid() && !CommandLineTemplateValue->IsNull())
    {
        FString TmpValue;
        if (CommandLineTemplateValue->TryGetString(TmpValue)) { CommandLineTemplate = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CommentValue = obj->TryGetField(TEXT("Comment"));
    if (CommentValue.IsValid() && !CommentValue->IsNull())
    {
        FString TmpValue;
        if (CommentValue->TryGetString(TmpValue)) { Comment = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ExecutablePathValue = obj->TryGetField(TEXT("ExecutablePath"));
    if (ExecutablePathValue.IsValid() && !ExecutablePathValue->IsNull())
    {
        FString TmpValue;
        if (ExecutablePathValue->TryGetString(TmpValue)) { ExecutablePath = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MaxGamesPerHostValue = obj->TryGetField(TEXT("MaxGamesPerHost"));
    if (MaxGamesPerHostValue.IsValid() && !MaxGamesPerHostValue->IsNull())
    {
        int32 TmpValue;
        if (MaxGamesPerHostValue->TryGetNumber(TmpValue)) { MaxGamesPerHost = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MinFreeGameSlotsValue = obj->TryGetField(TEXT("MinFreeGameSlots"));
    if (MinFreeGameSlotsValue.IsValid() && !MinFreeGameSlotsValue->IsNull())
    {
        int32 TmpValue;
        if (MinFreeGameSlotsValue->TryGetNumber(TmpValue)) { MinFreeGameSlots = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TimestampValue = obj->TryGetField(TEXT("Timestamp"));
    if (TimestampValue.IsValid())
        Timestamp = readDatetime(TimestampValue);


    return HasSucceeded;
}

PlayFab::AdminModels::FModifyServerBuildResult::~FModifyServerBuildResult()
{

}

void PlayFab::AdminModels::FModifyServerBuildResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ActiveRegions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ActiveRegions"));
        for (const Region& item : ActiveRegions)
            writeRegionEnumJSON(item, writer);
        writer->WriteArrayEnd();
    }


    if (BuildId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("BuildId"));
        writer->WriteValue(BuildId);
    }

    if (CommandLineTemplate.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CommandLineTemplate"));
        writer->WriteValue(CommandLineTemplate);
    }

    if (Comment.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Comment"));
        writer->WriteValue(Comment);
    }

    if (ExecutablePath.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ExecutablePath"));
        writer->WriteValue(ExecutablePath);
    }

    writer->WriteIdentifierPrefix(TEXT("MaxGamesPerHost"));
    writer->WriteValue(MaxGamesPerHost);

    writer->WriteIdentifierPrefix(TEXT("MinFreeGameSlots"));
    writer->WriteValue(MinFreeGameSlots);

    if (Status.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        writeGameBuildStatusEnumJSON(Status, writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Timestamp"));
    writeDatetime(Timestamp, writer);

    if (TitleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitleId"));
        writer->WriteValue(TitleId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FModifyServerBuildResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ActiveRegionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ActiveRegions"));
    for (int32 Idx = 0; Idx < ActiveRegionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ActiveRegionsArray[Idx];
        ActiveRegions.Add(readRegionFromValue(CurrentItem));
    }


    const TSharedPtr<FJsonValue> BuildIdValue = obj->TryGetField(TEXT("BuildId"));
    if (BuildIdValue.IsValid() && !BuildIdValue->IsNull())
    {
        FString TmpValue;
        if (BuildIdValue->TryGetString(TmpValue)) { BuildId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CommandLineTemplateValue = obj->TryGetField(TEXT("CommandLineTemplate"));
    if (CommandLineTemplateValue.IsValid() && !CommandLineTemplateValue->IsNull())
    {
        FString TmpValue;
        if (CommandLineTemplateValue->TryGetString(TmpValue)) { CommandLineTemplate = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CommentValue = obj->TryGetField(TEXT("Comment"));
    if (CommentValue.IsValid() && !CommentValue->IsNull())
    {
        FString TmpValue;
        if (CommentValue->TryGetString(TmpValue)) { Comment = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExecutablePathValue = obj->TryGetField(TEXT("ExecutablePath"));
    if (ExecutablePathValue.IsValid() && !ExecutablePathValue->IsNull())
    {
        FString TmpValue;
        if (ExecutablePathValue->TryGetString(TmpValue)) { ExecutablePath = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MaxGamesPerHostValue = obj->TryGetField(TEXT("MaxGamesPerHost"));
    if (MaxGamesPerHostValue.IsValid() && !MaxGamesPerHostValue->IsNull())
    {
        int32 TmpValue;
        if (MaxGamesPerHostValue->TryGetNumber(TmpValue)) { MaxGamesPerHost = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MinFreeGameSlotsValue = obj->TryGetField(TEXT("MinFreeGameSlots"));
    if (MinFreeGameSlotsValue.IsValid() && !MinFreeGameSlotsValue->IsNull())
    {
        int32 TmpValue;
        if (MinFreeGameSlotsValue->TryGetNumber(TmpValue)) { MinFreeGameSlots = TmpValue; }
    }

    Status = readGameBuildStatusFromValue(obj->TryGetField(TEXT("Status")));

    const TSharedPtr<FJsonValue> TimestampValue = obj->TryGetField(TEXT("Timestamp"));
    if (TimestampValue.IsValid())
        Timestamp = readDatetime(TimestampValue);


    const TSharedPtr<FJsonValue> TitleIdValue = obj->TryGetField(TEXT("TitleId"));
    if (TitleIdValue.IsValid() && !TitleIdValue->IsNull())
    {
        FString TmpValue;
        if (TitleIdValue->TryGetString(TmpValue)) { TitleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FModifyUserVirtualCurrencyResult::~FModifyUserVirtualCurrencyResult()
{

}

void PlayFab::AdminModels::FModifyUserVirtualCurrencyResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Balance"));
    writer->WriteValue(Balance);

    writer->WriteIdentifierPrefix(TEXT("BalanceChange"));
    writer->WriteValue(BalanceChange);

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (VirtualCurrency.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("VirtualCurrency"));
        writer->WriteValue(VirtualCurrency);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FModifyUserVirtualCurrencyResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BalanceValue = obj->TryGetField(TEXT("Balance"));
    if (BalanceValue.IsValid() && !BalanceValue->IsNull())
    {
        int32 TmpValue;
        if (BalanceValue->TryGetNumber(TmpValue)) { Balance = TmpValue; }
    }

    const TSharedPtr<FJsonValue> BalanceChangeValue = obj->TryGetField(TEXT("BalanceChange"));
    if (BalanceChangeValue.IsValid() && !BalanceChangeValue->IsNull())
    {
        int32 TmpValue;
        if (BalanceChangeValue->TryGetNumber(TmpValue)) { BalanceChange = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VirtualCurrencyValue = obj->TryGetField(TEXT("VirtualCurrency"));
    if (VirtualCurrencyValue.IsValid() && !VirtualCurrencyValue->IsNull())
    {
        FString TmpValue;
        if (VirtualCurrencyValue->TryGetString(TmpValue)) { VirtualCurrency = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writePushSetupPlatformEnumJSON(PushSetupPlatform enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case PushSetupPlatformGCM: writer->WriteValue(TEXT("GCM")); break;
    case PushSetupPlatformAPNS: writer->WriteValue(TEXT("APNS")); break;
    case PushSetupPlatformAPNS_SANDBOX: writer->WriteValue(TEXT("APNS_SANDBOX")); break;
    }
}

AdminModels::PushSetupPlatform PlayFab::AdminModels::readPushSetupPlatformFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readPushSetupPlatformFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::PushSetupPlatform PlayFab::AdminModels::readPushSetupPlatformFromValue(const FString& value)
{
    static TMap<FString, PushSetupPlatform> _PushSetupPlatformMap;
    if (_PushSetupPlatformMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _PushSetupPlatformMap.Add(TEXT("GCM"), PushSetupPlatformGCM);
        _PushSetupPlatformMap.Add(TEXT("APNS"), PushSetupPlatformAPNS);
        _PushSetupPlatformMap.Add(TEXT("APNS_SANDBOX"), PushSetupPlatformAPNS_SANDBOX);

    }

    if (!value.IsEmpty())
    {
        auto output = _PushSetupPlatformMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return PushSetupPlatformGCM; // Basically critical fail
}

PlayFab::AdminModels::FRandomResultTable::~FRandomResultTable()
{

}

void PlayFab::AdminModels::FRandomResultTable::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("Nodes"));
    for (const FResultTableNode& item : Nodes)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    if (!TableId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RandomResultTable::TableId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("TableId"));
        writer->WriteValue(TableId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRandomResultTable::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&NodesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Nodes"));
    for (int32 Idx = 0; Idx < NodesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = NodesArray[Idx];
        Nodes.Add(FResultTableNode(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> TableIdValue = obj->TryGetField(TEXT("TableId"));
    if (TableIdValue.IsValid() && !TableIdValue->IsNull())
    {
        FString TmpValue;
        if (TableIdValue->TryGetString(TmpValue)) { TableId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FRefundPurchaseRequest::~FRefundPurchaseRequest()
{

}

void PlayFab::AdminModels::FRefundPurchaseRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!OrderId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RefundPurchaseRequest::OrderId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("OrderId"));
        writer->WriteValue(OrderId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RefundPurchaseRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRefundPurchaseRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> OrderIdValue = obj->TryGetField(TEXT("OrderId"));
    if (OrderIdValue.IsValid() && !OrderIdValue->IsNull())
    {
        FString TmpValue;
        if (OrderIdValue->TryGetString(TmpValue)) { OrderId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FRefundPurchaseResponse::~FRefundPurchaseResponse()
{

}

void PlayFab::AdminModels::FRefundPurchaseResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PurchaseStatus.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PurchaseStatus"));
        writer->WriteValue(PurchaseStatus);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRefundPurchaseResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PurchaseStatusValue = obj->TryGetField(TEXT("PurchaseStatus"));
    if (PurchaseStatusValue.IsValid() && !PurchaseStatusValue->IsNull())
    {
        FString TmpValue;
        if (PurchaseStatusValue->TryGetString(TmpValue)) { PurchaseStatus = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FRemovePlayerTagRequest::~FRemovePlayerTagRequest()
{

}

void PlayFab::AdminModels::FRemovePlayerTagRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RemovePlayerTagRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!TagName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RemovePlayerTagRequest::TagName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("TagName"));
        writer->WriteValue(TagName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRemovePlayerTagRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TagNameValue = obj->TryGetField(TEXT("TagName"));
    if (TagNameValue.IsValid() && !TagNameValue->IsNull())
    {
        FString TmpValue;
        if (TagNameValue->TryGetString(TmpValue)) { TagName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FRemovePlayerTagResult::~FRemovePlayerTagResult()
{

}

void PlayFab::AdminModels::FRemovePlayerTagResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRemovePlayerTagResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FRemoveServerBuildRequest::~FRemoveServerBuildRequest()
{

}

void PlayFab::AdminModels::FRemoveServerBuildRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!BuildId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RemoveServerBuildRequest::BuildId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("BuildId"));
        writer->WriteValue(BuildId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRemoveServerBuildRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BuildIdValue = obj->TryGetField(TEXT("BuildId"));
    if (BuildIdValue.IsValid() && !BuildIdValue->IsNull())
    {
        FString TmpValue;
        if (BuildIdValue->TryGetString(TmpValue)) { BuildId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FRemoveServerBuildResult::~FRemoveServerBuildResult()
{

}

void PlayFab::AdminModels::FRemoveServerBuildResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRemoveServerBuildResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FRemoveVirtualCurrencyTypesRequest::~FRemoveVirtualCurrencyTypesRequest()
{

}

void PlayFab::AdminModels::FRemoveVirtualCurrencyTypesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("VirtualCurrencies"));
    for (const FVirtualCurrencyData& item : VirtualCurrencies)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRemoveVirtualCurrencyTypesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&VirtualCurrenciesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("VirtualCurrencies"));
    for (int32 Idx = 0; Idx < VirtualCurrenciesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = VirtualCurrenciesArray[Idx];
        VirtualCurrencies.Add(FVirtualCurrencyData(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FResetCharacterStatisticsRequest::~FResetCharacterStatisticsRequest()
{

}

void PlayFab::AdminModels::FResetCharacterStatisticsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!CharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ResetCharacterStatisticsRequest::CharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ResetCharacterStatisticsRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FResetCharacterStatisticsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FResetCharacterStatisticsResult::~FResetCharacterStatisticsResult()
{

}

void PlayFab::AdminModels::FResetCharacterStatisticsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FResetCharacterStatisticsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FResetPasswordRequest::~FResetPasswordRequest()
{

}

void PlayFab::AdminModels::FResetPasswordRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!Password.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ResetPasswordRequest::Password, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Password"));
        writer->WriteValue(Password);
    }

    if (!Token.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ResetPasswordRequest::Token, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Token"));
        writer->WriteValue(Token);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FResetPasswordRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PasswordValue = obj->TryGetField(TEXT("Password"));
    if (PasswordValue.IsValid() && !PasswordValue->IsNull())
    {
        FString TmpValue;
        if (PasswordValue->TryGetString(TmpValue)) { Password = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TokenValue = obj->TryGetField(TEXT("Token"));
    if (TokenValue.IsValid() && !TokenValue->IsNull())
    {
        FString TmpValue;
        if (TokenValue->TryGetString(TmpValue)) { Token = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FResetPasswordResult::~FResetPasswordResult()
{

}

void PlayFab::AdminModels::FResetPasswordResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FResetPasswordResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FResetUserStatisticsRequest::~FResetUserStatisticsRequest()
{

}

void PlayFab::AdminModels::FResetUserStatisticsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ResetUserStatisticsRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FResetUserStatisticsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FResetUserStatisticsResult::~FResetUserStatisticsResult()
{

}

void PlayFab::AdminModels::FResetUserStatisticsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FResetUserStatisticsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

void PlayFab::AdminModels::writeResolutionOutcomeEnumJSON(ResolutionOutcome enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case ResolutionOutcomeRevoke: writer->WriteValue(TEXT("Revoke")); break;
    case ResolutionOutcomeReinstate: writer->WriteValue(TEXT("Reinstate")); break;
    case ResolutionOutcomeManual: writer->WriteValue(TEXT("Manual")); break;
    }
}

AdminModels::ResolutionOutcome PlayFab::AdminModels::readResolutionOutcomeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readResolutionOutcomeFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::ResolutionOutcome PlayFab::AdminModels::readResolutionOutcomeFromValue(const FString& value)
{
    static TMap<FString, ResolutionOutcome> _ResolutionOutcomeMap;
    if (_ResolutionOutcomeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _ResolutionOutcomeMap.Add(TEXT("Revoke"), ResolutionOutcomeRevoke);
        _ResolutionOutcomeMap.Add(TEXT("Reinstate"), ResolutionOutcomeReinstate);
        _ResolutionOutcomeMap.Add(TEXT("Manual"), ResolutionOutcomeManual);

    }

    if (!value.IsEmpty())
    {
        auto output = _ResolutionOutcomeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return ResolutionOutcomeRevoke; // Basically critical fail
}

PlayFab::AdminModels::FResolvePurchaseDisputeRequest::~FResolvePurchaseDisputeRequest()
{

}

void PlayFab::AdminModels::FResolvePurchaseDisputeRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!OrderId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ResolvePurchaseDisputeRequest::OrderId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("OrderId"));
        writer->WriteValue(OrderId);
    }

    writer->WriteIdentifierPrefix(TEXT("Outcome"));
    writeResolutionOutcomeEnumJSON(Outcome, writer);

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ResolvePurchaseDisputeRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FResolvePurchaseDisputeRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> OrderIdValue = obj->TryGetField(TEXT("OrderId"));
    if (OrderIdValue.IsValid() && !OrderIdValue->IsNull())
    {
        FString TmpValue;
        if (OrderIdValue->TryGetString(TmpValue)) { OrderId = TmpValue; }
    }

    Outcome = readResolutionOutcomeFromValue(obj->TryGetField(TEXT("Outcome")));

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FResolvePurchaseDisputeResponse::~FResolvePurchaseDisputeResponse()
{

}

void PlayFab::AdminModels::FResolvePurchaseDisputeResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PurchaseStatus.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PurchaseStatus"));
        writer->WriteValue(PurchaseStatus);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FResolvePurchaseDisputeResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PurchaseStatusValue = obj->TryGetField(TEXT("PurchaseStatus"));
    if (PurchaseStatusValue.IsValid() && !PurchaseStatusValue->IsNull())
    {
        FString TmpValue;
        if (PurchaseStatusValue->TryGetString(TmpValue)) { PurchaseStatus = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FRevokeAllBansForUserRequest::~FRevokeAllBansForUserRequest()
{

}

void PlayFab::AdminModels::FRevokeAllBansForUserRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RevokeAllBansForUserRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRevokeAllBansForUserRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FRevokeAllBansForUserResult::~FRevokeAllBansForUserResult()
{

}

void PlayFab::AdminModels::FRevokeAllBansForUserResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BanData.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BanData"));
        for (const FBanInfo& item : BanData)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRevokeAllBansForUserResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BanDataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("BanData"));
    for (int32 Idx = 0; Idx < BanDataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BanDataArray[Idx];
        BanData.Add(FBanInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FRevokeBansRequest::~FRevokeBansRequest()
{

}

void PlayFab::AdminModels::FRevokeBansRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("BanIds"));
    for (const FString& item : BanIds)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRevokeBansRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("BanIds"), BanIds);

    return HasSucceeded;
}

PlayFab::AdminModels::FRevokeBansResult::~FRevokeBansResult()
{

}

void PlayFab::AdminModels::FRevokeBansResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BanData.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BanData"));
        for (const FBanInfo& item : BanData)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRevokeBansResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BanDataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("BanData"));
    for (int32 Idx = 0; Idx < BanDataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BanDataArray[Idx];
        BanData.Add(FBanInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FRevokeInventoryItem::~FRevokeInventoryItem()
{

}

void PlayFab::AdminModels::FRevokeInventoryItem::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (!ItemInstanceId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RevokeInventoryItem::ItemInstanceId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RevokeInventoryItem::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRevokeInventoryItem::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FRevokeInventoryItemRequest::~FRevokeInventoryItemRequest()
{

}

void PlayFab::AdminModels::FRevokeInventoryItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (!ItemInstanceId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RevokeInventoryItemRequest::ItemInstanceId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RevokeInventoryItemRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRevokeInventoryItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FRevokeInventoryItemsRequest::~FRevokeInventoryItemsRequest()
{

}

void PlayFab::AdminModels::FRevokeInventoryItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("Items"));
    for (const FRevokeInventoryItem& item : Items)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRevokeInventoryItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ItemsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Items"));
    for (int32 Idx = 0; Idx < ItemsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemsArray[Idx];
        Items.Add(FRevokeInventoryItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FRevokeItemError::~FRevokeItemError()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::AdminModels::FRevokeItemError::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Error.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Error"));
        writer->WriteValue(Error);
    }

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRevokeItemError::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ErrorValue = obj->TryGetField(TEXT("Error"));
    if (ErrorValue.IsValid() && !ErrorValue->IsNull())
    {
        FString TmpValue;
        if (ErrorValue->TryGetString(TmpValue)) { Error = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FRevokeInventoryItem(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FRevokeInventoryItemsResult::~FRevokeInventoryItemsResult()
{

}

void PlayFab::AdminModels::FRevokeInventoryItemsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Errors.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Errors"));
        for (const FRevokeItemError& item : Errors)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRevokeInventoryItemsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ErrorsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Errors"));
    for (int32 Idx = 0; Idx < ErrorsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ErrorsArray[Idx];
        Errors.Add(FRevokeItemError(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FRevokeInventoryResult::~FRevokeInventoryResult()
{

}

void PlayFab::AdminModels::FRevokeInventoryResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRevokeInventoryResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FRunTaskRequest::~FRunTaskRequest()
{
    //if (Identifier != nullptr) delete Identifier;

}

void PlayFab::AdminModels::FRunTaskRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Identifier.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Identifier"));
        Identifier->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRunTaskRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> IdentifierValue = obj->TryGetField(TEXT("Identifier"));
    if (IdentifierValue.IsValid() && !IdentifierValue->IsNull())
    {
        Identifier = MakeShareable(new FNameIdentifier(IdentifierValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FRunTaskResult::~FRunTaskResult()
{

}

void PlayFab::AdminModels::FRunTaskResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (TaskInstanceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TaskInstanceId"));
        writer->WriteValue(TaskInstanceId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FRunTaskResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> TaskInstanceIdValue = obj->TryGetField(TEXT("TaskInstanceId"));
    if (TaskInstanceIdValue.IsValid() && !TaskInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (TaskInstanceIdValue->TryGetString(TmpValue)) { TaskInstanceId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FSendAccountRecoveryEmailRequest::~FSendAccountRecoveryEmailRequest()
{

}

void PlayFab::AdminModels::FSendAccountRecoveryEmailRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!Email.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SendAccountRecoveryEmailRequest::Email, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Email"));
        writer->WriteValue(Email);
    }

    if (EmailTemplateId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EmailTemplateId"));
        writer->WriteValue(EmailTemplateId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSendAccountRecoveryEmailRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EmailValue = obj->TryGetField(TEXT("Email"));
    if (EmailValue.IsValid() && !EmailValue->IsNull())
    {
        FString TmpValue;
        if (EmailValue->TryGetString(TmpValue)) { Email = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EmailTemplateIdValue = obj->TryGetField(TEXT("EmailTemplateId"));
    if (EmailTemplateIdValue.IsValid() && !EmailTemplateIdValue->IsNull())
    {
        FString TmpValue;
        if (EmailTemplateIdValue->TryGetString(TmpValue)) { EmailTemplateId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FSendAccountRecoveryEmailResult::~FSendAccountRecoveryEmailResult()
{

}

void PlayFab::AdminModels::FSendAccountRecoveryEmailResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSendAccountRecoveryEmailResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FSetPlayerSecretRequest::~FSetPlayerSecretRequest()
{

}

void PlayFab::AdminModels::FSetPlayerSecretRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PlayerSecret.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayerSecret"));
        writer->WriteValue(PlayerSecret);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetPlayerSecretRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSetPlayerSecretRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayerSecretValue = obj->TryGetField(TEXT("PlayerSecret"));
    if (PlayerSecretValue.IsValid() && !PlayerSecretValue->IsNull())
    {
        FString TmpValue;
        if (PlayerSecretValue->TryGetString(TmpValue)) { PlayerSecret = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FSetPlayerSecretResult::~FSetPlayerSecretResult()
{

}

void PlayFab::AdminModels::FSetPlayerSecretResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSetPlayerSecretResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FSetPublishedRevisionRequest::~FSetPublishedRevisionRequest()
{

}

void PlayFab::AdminModels::FSetPublishedRevisionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Revision"));
    writer->WriteValue(Revision);

    writer->WriteIdentifierPrefix(TEXT("Version"));
    writer->WriteValue(Version);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSetPublishedRevisionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> RevisionValue = obj->TryGetField(TEXT("Revision"));
    if (RevisionValue.IsValid() && !RevisionValue->IsNull())
    {
        int32 TmpValue;
        if (RevisionValue->TryGetNumber(TmpValue)) { Revision = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        int32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FSetPublishedRevisionResult::~FSetPublishedRevisionResult()
{

}

void PlayFab::AdminModels::FSetPublishedRevisionResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSetPublishedRevisionResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FSetPublisherDataRequest::~FSetPublisherDataRequest()
{

}

void PlayFab::AdminModels::FSetPublisherDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Key.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetPublisherDataRequest::Key, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Key"));
        writer->WriteValue(Key);
    }

    if (Value.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Value"));
        writer->WriteValue(Value);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSetPublisherDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> KeyValue = obj->TryGetField(TEXT("Key"));
    if (KeyValue.IsValid() && !KeyValue->IsNull())
    {
        FString TmpValue;
        if (KeyValue->TryGetString(TmpValue)) { Key = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        FString TmpValue;
        if (ValueValue->TryGetString(TmpValue)) { Value = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FSetPublisherDataResult::~FSetPublisherDataResult()
{

}

void PlayFab::AdminModels::FSetPublisherDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSetPublisherDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FTitleDataKeyValue::~FTitleDataKeyValue()
{

}

void PlayFab::AdminModels::FTitleDataKeyValue::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Key.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Key"));
        writer->WriteValue(Key);
    }

    if (Value.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Value"));
        writer->WriteValue(Value);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FTitleDataKeyValue::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> KeyValue = obj->TryGetField(TEXT("Key"));
    if (KeyValue.IsValid() && !KeyValue->IsNull())
    {
        FString TmpValue;
        if (KeyValue->TryGetString(TmpValue)) { Key = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        FString TmpValue;
        if (ValueValue->TryGetString(TmpValue)) { Value = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FSetTitleDataAndOverridesRequest::~FSetTitleDataAndOverridesRequest()
{

}

void PlayFab::AdminModels::FSetTitleDataAndOverridesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("KeyValues"));
    for (const FTitleDataKeyValue& item : KeyValues)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    if (OverrideLabel.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OverrideLabel"));
        writer->WriteValue(OverrideLabel);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSetTitleDataAndOverridesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&KeyValuesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("KeyValues"));
    for (int32 Idx = 0; Idx < KeyValuesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = KeyValuesArray[Idx];
        KeyValues.Add(FTitleDataKeyValue(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> OverrideLabelValue = obj->TryGetField(TEXT("OverrideLabel"));
    if (OverrideLabelValue.IsValid() && !OverrideLabelValue->IsNull())
    {
        FString TmpValue;
        if (OverrideLabelValue->TryGetString(TmpValue)) { OverrideLabel = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FSetTitleDataAndOverridesResult::~FSetTitleDataAndOverridesResult()
{

}

void PlayFab::AdminModels::FSetTitleDataAndOverridesResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSetTitleDataAndOverridesResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FSetTitleDataRequest::~FSetTitleDataRequest()
{

}

void PlayFab::AdminModels::FSetTitleDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Key.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetTitleDataRequest::Key, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Key"));
        writer->WriteValue(Key);
    }

    if (Value.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Value"));
        writer->WriteValue(Value);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSetTitleDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> KeyValue = obj->TryGetField(TEXT("Key"));
    if (KeyValue.IsValid() && !KeyValue->IsNull())
    {
        FString TmpValue;
        if (KeyValue->TryGetString(TmpValue)) { Key = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        FString TmpValue;
        if (ValueValue->TryGetString(TmpValue)) { Value = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FSetTitleDataResult::~FSetTitleDataResult()
{

}

void PlayFab::AdminModels::FSetTitleDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSetTitleDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FSetupPushNotificationRequest::~FSetupPushNotificationRequest()
{

}

void PlayFab::AdminModels::FSetupPushNotificationRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Credential.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetupPushNotificationRequest::Credential, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Credential"));
        writer->WriteValue(Credential);
    }

    if (Key.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Key"));
        writer->WriteValue(Key);
    }

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetupPushNotificationRequest::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteIdentifierPrefix(TEXT("OverwriteOldARN"));
    writer->WriteValue(OverwriteOldARN);

    writer->WriteIdentifierPrefix(TEXT("Platform"));
    writePushSetupPlatformEnumJSON(Platform, writer);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSetupPushNotificationRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CredentialValue = obj->TryGetField(TEXT("Credential"));
    if (CredentialValue.IsValid() && !CredentialValue->IsNull())
    {
        FString TmpValue;
        if (CredentialValue->TryGetString(TmpValue)) { Credential = TmpValue; }
    }

    const TSharedPtr<FJsonValue> KeyValue = obj->TryGetField(TEXT("Key"));
    if (KeyValue.IsValid() && !KeyValue->IsNull())
    {
        FString TmpValue;
        if (KeyValue->TryGetString(TmpValue)) { Key = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OverwriteOldARNValue = obj->TryGetField(TEXT("OverwriteOldARN"));
    if (OverwriteOldARNValue.IsValid() && !OverwriteOldARNValue->IsNull())
    {
        bool TmpValue;
        if (OverwriteOldARNValue->TryGetBool(TmpValue)) { OverwriteOldARN = TmpValue; }
    }

    Platform = readPushSetupPlatformFromValue(obj->TryGetField(TEXT("Platform")));

    return HasSucceeded;
}

PlayFab::AdminModels::FSetupPushNotificationResult::~FSetupPushNotificationResult()
{

}

void PlayFab::AdminModels::FSetupPushNotificationResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ARN.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ARN"));
        writer->WriteValue(ARN);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSetupPushNotificationResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ARNValue = obj->TryGetField(TEXT("ARN"));
    if (ARNValue.IsValid() && !ARNValue->IsNull())
    {
        FString TmpValue;
        if (ARNValue->TryGetString(TmpValue)) { ARN = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::AdminModels::writeStatisticVersionArchivalStatusEnumJSON(StatisticVersionArchivalStatus enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case StatisticVersionArchivalStatusNotScheduled: writer->WriteValue(TEXT("NotScheduled")); break;
    case StatisticVersionArchivalStatusScheduled: writer->WriteValue(TEXT("Scheduled")); break;
    case StatisticVersionArchivalStatusQueued: writer->WriteValue(TEXT("Queued")); break;
    case StatisticVersionArchivalStatusInProgress: writer->WriteValue(TEXT("InProgress")); break;
    case StatisticVersionArchivalStatusComplete: writer->WriteValue(TEXT("Complete")); break;
    }
}

AdminModels::StatisticVersionArchivalStatus PlayFab::AdminModels::readStatisticVersionArchivalStatusFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readStatisticVersionArchivalStatusFromValue(value.IsValid() ? value->AsString() : "");
}

AdminModels::StatisticVersionArchivalStatus PlayFab::AdminModels::readStatisticVersionArchivalStatusFromValue(const FString& value)
{
    static TMap<FString, StatisticVersionArchivalStatus> _StatisticVersionArchivalStatusMap;
    if (_StatisticVersionArchivalStatusMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _StatisticVersionArchivalStatusMap.Add(TEXT("NotScheduled"), StatisticVersionArchivalStatusNotScheduled);
        _StatisticVersionArchivalStatusMap.Add(TEXT("Scheduled"), StatisticVersionArchivalStatusScheduled);
        _StatisticVersionArchivalStatusMap.Add(TEXT("Queued"), StatisticVersionArchivalStatusQueued);
        _StatisticVersionArchivalStatusMap.Add(TEXT("InProgress"), StatisticVersionArchivalStatusInProgress);
        _StatisticVersionArchivalStatusMap.Add(TEXT("Complete"), StatisticVersionArchivalStatusComplete);

    }

    if (!value.IsEmpty())
    {
        auto output = _StatisticVersionArchivalStatusMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return StatisticVersionArchivalStatusNotScheduled; // Basically critical fail
}

PlayFab::AdminModels::FSubtractUserVirtualCurrencyRequest::~FSubtractUserVirtualCurrencyRequest()
{

}

void PlayFab::AdminModels::FSubtractUserVirtualCurrencyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SubtractUserVirtualCurrencyRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!VirtualCurrency.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SubtractUserVirtualCurrencyRequest::VirtualCurrency, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("VirtualCurrency"));
        writer->WriteValue(VirtualCurrency);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FSubtractUserVirtualCurrencyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VirtualCurrencyValue = obj->TryGetField(TEXT("VirtualCurrency"));
    if (VirtualCurrencyValue.IsValid() && !VirtualCurrencyValue->IsNull())
    {
        FString TmpValue;
        if (VirtualCurrencyValue->TryGetString(TmpValue)) { VirtualCurrency = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateBanRequest::~FUpdateBanRequest()
{

}

void PlayFab::AdminModels::FUpdateBanRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Active.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Active"));
        writer->WriteValue(Active);
    }

    if (!BanId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateBanRequest::BanId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("BanId"));
        writer->WriteValue(BanId);
    }

    if (Expires.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Expires"));
        writeDatetime(Expires, writer);
    }

    if (IPAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IPAddress"));
        writer->WriteValue(IPAddress);
    }

    if (MACAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MACAddress"));
        writer->WriteValue(MACAddress);
    }

    if (Permanent.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Permanent"));
        writer->WriteValue(Permanent);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateBanRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ActiveValue = obj->TryGetField(TEXT("Active"));
    if (ActiveValue.IsValid() && !ActiveValue->IsNull())
    {
        bool TmpValue;
        if (ActiveValue->TryGetBool(TmpValue)) { Active = TmpValue; }
    }

    const TSharedPtr<FJsonValue> BanIdValue = obj->TryGetField(TEXT("BanId"));
    if (BanIdValue.IsValid() && !BanIdValue->IsNull())
    {
        FString TmpValue;
        if (BanIdValue->TryGetString(TmpValue)) { BanId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExpiresValue = obj->TryGetField(TEXT("Expires"));
    if (ExpiresValue.IsValid())
        Expires = readDatetime(ExpiresValue);


    const TSharedPtr<FJsonValue> IPAddressValue = obj->TryGetField(TEXT("IPAddress"));
    if (IPAddressValue.IsValid() && !IPAddressValue->IsNull())
    {
        FString TmpValue;
        if (IPAddressValue->TryGetString(TmpValue)) { IPAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MACAddressValue = obj->TryGetField(TEXT("MACAddress"));
    if (MACAddressValue.IsValid() && !MACAddressValue->IsNull())
    {
        FString TmpValue;
        if (MACAddressValue->TryGetString(TmpValue)) { MACAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PermanentValue = obj->TryGetField(TEXT("Permanent"));
    if (PermanentValue.IsValid() && !PermanentValue->IsNull())
    {
        bool TmpValue;
        if (PermanentValue->TryGetBool(TmpValue)) { Permanent = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateBansRequest::~FUpdateBansRequest()
{

}

void PlayFab::AdminModels::FUpdateBansRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("Bans"));
    for (const FUpdateBanRequest& item : Bans)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateBansRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BansArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Bans"));
    for (int32 Idx = 0; Idx < BansArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BansArray[Idx];
        Bans.Add(FUpdateBanRequest(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateBansResult::~FUpdateBansResult()
{

}

void PlayFab::AdminModels::FUpdateBansResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BanData.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BanData"));
        for (const FBanInfo& item : BanData)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateBansResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BanDataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("BanData"));
    for (int32 Idx = 0; Idx < BanDataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BanDataArray[Idx];
        BanData.Add(FBanInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateCatalogItemsRequest::~FUpdateCatalogItemsRequest()
{

}

void PlayFab::AdminModels::FUpdateCatalogItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Catalog.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Catalog"));
        for (const FCatalogItem& item : Catalog)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (SetAsDefaultCatalog.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("SetAsDefaultCatalog"));
        writer->WriteValue(SetAsDefaultCatalog);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateCatalogItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&CatalogArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Catalog"));
    for (int32 Idx = 0; Idx < CatalogArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = CatalogArray[Idx];
        Catalog.Add(FCatalogItem(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> SetAsDefaultCatalogValue = obj->TryGetField(TEXT("SetAsDefaultCatalog"));
    if (SetAsDefaultCatalogValue.IsValid() && !SetAsDefaultCatalogValue->IsNull())
    {
        bool TmpValue;
        if (SetAsDefaultCatalogValue->TryGetBool(TmpValue)) { SetAsDefaultCatalog = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateCatalogItemsResult::~FUpdateCatalogItemsResult()
{

}

void PlayFab::AdminModels::FUpdateCatalogItemsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateCatalogItemsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateCloudScriptRequest::~FUpdateCloudScriptRequest()
{

}

void PlayFab::AdminModels::FUpdateCloudScriptRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (DeveloperPlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DeveloperPlayFabId"));
        writer->WriteValue(DeveloperPlayFabId);
    }

    writer->WriteArrayStart(TEXT("Files"));
    for (const FCloudScriptFile& item : Files)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteIdentifierPrefix(TEXT("Publish"));
    writer->WriteValue(Publish);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateCloudScriptRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DeveloperPlayFabIdValue = obj->TryGetField(TEXT("DeveloperPlayFabId"));
    if (DeveloperPlayFabIdValue.IsValid() && !DeveloperPlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (DeveloperPlayFabIdValue->TryGetString(TmpValue)) { DeveloperPlayFabId = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&FilesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Files"));
    for (int32 Idx = 0; Idx < FilesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = FilesArray[Idx];
        Files.Add(FCloudScriptFile(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> PublishValue = obj->TryGetField(TEXT("Publish"));
    if (PublishValue.IsValid() && !PublishValue->IsNull())
    {
        bool TmpValue;
        if (PublishValue->TryGetBool(TmpValue)) { Publish = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateCloudScriptResult::~FUpdateCloudScriptResult()
{

}

void PlayFab::AdminModels::FUpdateCloudScriptResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Revision"));
    writer->WriteValue(Revision);

    writer->WriteIdentifierPrefix(TEXT("Version"));
    writer->WriteValue(Version);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateCloudScriptResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> RevisionValue = obj->TryGetField(TEXT("Revision"));
    if (RevisionValue.IsValid() && !RevisionValue->IsNull())
    {
        int32 TmpValue;
        if (RevisionValue->TryGetNumber(TmpValue)) { Revision = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        int32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateOpenIdConnectionRequest::~FUpdateOpenIdConnectionRequest()
{
    //if (IssuerInformation != nullptr) delete IssuerInformation;

}

void PlayFab::AdminModels::FUpdateOpenIdConnectionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ClientId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ClientId"));
        writer->WriteValue(ClientId);
    }

    if (ClientSecret.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ClientSecret"));
        writer->WriteValue(ClientSecret);
    }

    if (!ConnectionId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateOpenIdConnectionRequest::ConnectionId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ConnectionId"));
        writer->WriteValue(ConnectionId);
    }

    if (IssuerDiscoveryUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IssuerDiscoveryUrl"));
        writer->WriteValue(IssuerDiscoveryUrl);
    }

    if (IssuerInformation.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("IssuerInformation"));
        IssuerInformation->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateOpenIdConnectionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ClientIdValue = obj->TryGetField(TEXT("ClientId"));
    if (ClientIdValue.IsValid() && !ClientIdValue->IsNull())
    {
        FString TmpValue;
        if (ClientIdValue->TryGetString(TmpValue)) { ClientId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ClientSecretValue = obj->TryGetField(TEXT("ClientSecret"));
    if (ClientSecretValue.IsValid() && !ClientSecretValue->IsNull())
    {
        FString TmpValue;
        if (ClientSecretValue->TryGetString(TmpValue)) { ClientSecret = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ConnectionIdValue = obj->TryGetField(TEXT("ConnectionId"));
    if (ConnectionIdValue.IsValid() && !ConnectionIdValue->IsNull())
    {
        FString TmpValue;
        if (ConnectionIdValue->TryGetString(TmpValue)) { ConnectionId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IssuerDiscoveryUrlValue = obj->TryGetField(TEXT("IssuerDiscoveryUrl"));
    if (IssuerDiscoveryUrlValue.IsValid() && !IssuerDiscoveryUrlValue->IsNull())
    {
        FString TmpValue;
        if (IssuerDiscoveryUrlValue->TryGetString(TmpValue)) { IssuerDiscoveryUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IssuerInformationValue = obj->TryGetField(TEXT("IssuerInformation"));
    if (IssuerInformationValue.IsValid() && !IssuerInformationValue->IsNull())
    {
        IssuerInformation = MakeShareable(new FOpenIdIssuerInformation(IssuerInformationValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdatePlayerSharedSecretRequest::~FUpdatePlayerSharedSecretRequest()
{

}

void PlayFab::AdminModels::FUpdatePlayerSharedSecretRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Disabled"));
    writer->WriteValue(Disabled);

    if (FriendlyName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FriendlyName"));
        writer->WriteValue(FriendlyName);
    }

    if (SecretKey.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SecretKey"));
        writer->WriteValue(SecretKey);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdatePlayerSharedSecretRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DisabledValue = obj->TryGetField(TEXT("Disabled"));
    if (DisabledValue.IsValid() && !DisabledValue->IsNull())
    {
        bool TmpValue;
        if (DisabledValue->TryGetBool(TmpValue)) { Disabled = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FriendlyNameValue = obj->TryGetField(TEXT("FriendlyName"));
    if (FriendlyNameValue.IsValid() && !FriendlyNameValue->IsNull())
    {
        FString TmpValue;
        if (FriendlyNameValue->TryGetString(TmpValue)) { FriendlyName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SecretKeyValue = obj->TryGetField(TEXT("SecretKey"));
    if (SecretKeyValue.IsValid() && !SecretKeyValue->IsNull())
    {
        FString TmpValue;
        if (SecretKeyValue->TryGetString(TmpValue)) { SecretKey = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdatePlayerSharedSecretResult::~FUpdatePlayerSharedSecretResult()
{

}

void PlayFab::AdminModels::FUpdatePlayerSharedSecretResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdatePlayerSharedSecretResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdatePlayerStatisticDefinitionRequest::~FUpdatePlayerStatisticDefinitionRequest()
{

}

void PlayFab::AdminModels::FUpdatePlayerStatisticDefinitionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AggregationMethod.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("AggregationMethod"));
        writeStatisticAggregationMethodEnumJSON(AggregationMethod, writer);
    }

    if (!StatisticName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdatePlayerStatisticDefinitionRequest::StatisticName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    if (VersionChangeInterval.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("VersionChangeInterval"));
        writeStatisticResetIntervalOptionEnumJSON(VersionChangeInterval, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdatePlayerStatisticDefinitionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    AggregationMethod = readStatisticAggregationMethodFromValue(obj->TryGetField(TEXT("AggregationMethod")));

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    VersionChangeInterval = readStatisticResetIntervalOptionFromValue(obj->TryGetField(TEXT("VersionChangeInterval")));

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdatePlayerStatisticDefinitionResult::~FUpdatePlayerStatisticDefinitionResult()
{
    //if (Statistic != nullptr) delete Statistic;

}

void PlayFab::AdminModels::FUpdatePlayerStatisticDefinitionResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Statistic.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Statistic"));
        Statistic->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdatePlayerStatisticDefinitionResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> StatisticValue = obj->TryGetField(TEXT("Statistic"));
    if (StatisticValue.IsValid() && !StatisticValue->IsNull())
    {
        Statistic = MakeShareable(new FPlayerStatisticDefinition(StatisticValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdatePolicyRequest::~FUpdatePolicyRequest()
{

}

void PlayFab::AdminModels::FUpdatePolicyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("OverwritePolicy"));
    writer->WriteValue(OverwritePolicy);

    if (!PolicyName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdatePolicyRequest::PolicyName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PolicyName"));
        writer->WriteValue(PolicyName);
    }

    writer->WriteArrayStart(TEXT("Statements"));
    for (const FPermissionStatement& item : Statements)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdatePolicyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> OverwritePolicyValue = obj->TryGetField(TEXT("OverwritePolicy"));
    if (OverwritePolicyValue.IsValid() && !OverwritePolicyValue->IsNull())
    {
        bool TmpValue;
        if (OverwritePolicyValue->TryGetBool(TmpValue)) { OverwritePolicy = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PolicyNameValue = obj->TryGetField(TEXT("PolicyName"));
    if (PolicyNameValue.IsValid() && !PolicyNameValue->IsNull())
    {
        FString TmpValue;
        if (PolicyNameValue->TryGetString(TmpValue)) { PolicyName = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&StatementsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Statements"));
    for (int32 Idx = 0; Idx < StatementsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StatementsArray[Idx];
        Statements.Add(FPermissionStatement(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FUpdatePolicyResponse::~FUpdatePolicyResponse()
{

}

void PlayFab::AdminModels::FUpdatePolicyResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PolicyName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PolicyName"));
        writer->WriteValue(PolicyName);
    }

    if (Statements.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Statements"));
        for (const FPermissionStatement& item : Statements)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdatePolicyResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PolicyNameValue = obj->TryGetField(TEXT("PolicyName"));
    if (PolicyNameValue.IsValid() && !PolicyNameValue->IsNull())
    {
        FString TmpValue;
        if (PolicyNameValue->TryGetString(TmpValue)) { PolicyName = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&StatementsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Statements"));
    for (int32 Idx = 0; Idx < StatementsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StatementsArray[Idx];
        Statements.Add(FPermissionStatement(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateRandomResultTablesRequest::~FUpdateRandomResultTablesRequest()
{

}

void PlayFab::AdminModels::FUpdateRandomResultTablesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Tables.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tables"));
        for (const FRandomResultTable& item : Tables)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateRandomResultTablesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TArray<TSharedPtr<FJsonValue>>&TablesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Tables"));
    for (int32 Idx = 0; Idx < TablesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = TablesArray[Idx];
        Tables.Add(FRandomResultTable(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateRandomResultTablesResult::~FUpdateRandomResultTablesResult()
{

}

void PlayFab::AdminModels::FUpdateRandomResultTablesResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateRandomResultTablesResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateSegmentRequest::~FUpdateSegmentRequest()
{

}

void PlayFab::AdminModels::FUpdateSegmentRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("SegmentModel"));
    pfSegmentModel.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateSegmentRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> SegmentModelValue = obj->TryGetField(TEXT("SegmentModel"));
    if (SegmentModelValue.IsValid() && !SegmentModelValue->IsNull())
    {
        pfSegmentModel = FSegmentModel(SegmentModelValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateSegmentResponse::~FUpdateSegmentResponse()
{

}

void PlayFab::AdminModels::FUpdateSegmentResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ErrorMessage.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorMessage"));
        writer->WriteValue(ErrorMessage);
    }

    if (SegmentId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SegmentId"));
        writer->WriteValue(SegmentId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateSegmentResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ErrorMessageValue = obj->TryGetField(TEXT("ErrorMessage"));
    if (ErrorMessageValue.IsValid() && !ErrorMessageValue->IsNull())
    {
        FString TmpValue;
        if (ErrorMessageValue->TryGetString(TmpValue)) { ErrorMessage = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SegmentIdValue = obj->TryGetField(TEXT("SegmentId"));
    if (SegmentIdValue.IsValid() && !SegmentIdValue->IsNull())
    {
        FString TmpValue;
        if (SegmentIdValue->TryGetString(TmpValue)) { SegmentId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateStoreItemsRequest::~FUpdateStoreItemsRequest()
{
    //if (MarketingData != nullptr) delete MarketingData;

}

void PlayFab::AdminModels::FUpdateStoreItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (MarketingData.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("MarketingData"));
        MarketingData->writeJSON(writer);
    }

    if (Store.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Store"));
        for (const FStoreItem& item : Store)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (!StoreId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateStoreItemsRequest::StoreId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("StoreId"));
        writer->WriteValue(StoreId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateStoreItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> MarketingDataValue = obj->TryGetField(TEXT("MarketingData"));
    if (MarketingDataValue.IsValid() && !MarketingDataValue->IsNull())
    {
        MarketingData = MakeShareable(new FStoreMarketingModel(MarketingDataValue->AsObject()));
    }

    const TArray<TSharedPtr<FJsonValue>>&StoreArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Store"));
    for (int32 Idx = 0; Idx < StoreArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StoreArray[Idx];
        Store.Add(FStoreItem(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> StoreIdValue = obj->TryGetField(TEXT("StoreId"));
    if (StoreIdValue.IsValid() && !StoreIdValue->IsNull())
    {
        FString TmpValue;
        if (StoreIdValue->TryGetString(TmpValue)) { StoreId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateStoreItemsResult::~FUpdateStoreItemsResult()
{

}

void PlayFab::AdminModels::FUpdateStoreItemsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateStoreItemsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateTaskRequest::~FUpdateTaskRequest()
{
    //if (Identifier != nullptr) delete Identifier;

}

void PlayFab::AdminModels::FUpdateTaskRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    if (Identifier.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Identifier"));
        Identifier->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("IsActive"));
    writer->WriteValue(IsActive);

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateTaskRequest::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (Parameter.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Parameter"));
        Parameter.writeJSON(writer);
    }

    if (Schedule.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Schedule"));
        writer->WriteValue(Schedule);
    }

    writer->WriteIdentifierPrefix(TEXT("Type"));
    writeScheduledTaskTypeEnumJSON(Type, writer);

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateTaskRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IdentifierValue = obj->TryGetField(TEXT("Identifier"));
    if (IdentifierValue.IsValid() && !IdentifierValue->IsNull())
    {
        Identifier = MakeShareable(new FNameIdentifier(IdentifierValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IsActiveValue = obj->TryGetField(TEXT("IsActive"));
    if (IsActiveValue.IsValid() && !IsActiveValue->IsNull())
    {
        bool TmpValue;
        if (IsActiveValue->TryGetBool(TmpValue)) { IsActive = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ParameterValue = obj->TryGetField(TEXT("Parameter"));
    if (ParameterValue.IsValid() && !ParameterValue->IsNull())
    {
        Parameter = FJsonKeeper(ParameterValue);
    }

    const TSharedPtr<FJsonValue> ScheduleValue = obj->TryGetField(TEXT("Schedule"));
    if (ScheduleValue.IsValid() && !ScheduleValue->IsNull())
    {
        FString TmpValue;
        if (ScheduleValue->TryGetString(TmpValue)) { Schedule = TmpValue; }
    }

    Type = readScheduledTaskTypeFromValue(obj->TryGetField(TEXT("Type")));

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateUserDataRequest::~FUpdateUserDataRequest()
{

}

void PlayFab::AdminModels::FUpdateUserDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FString>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (KeysToRemove.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("KeysToRemove"));
        for (const FString& item : KeysToRemove)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Permission.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Permission"));
        writeUserDataPermissionEnumJSON(Permission, writer);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateUserDataRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateUserDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), It.Value()->AsString());
        }
    }

    obj->TryGetStringArrayField(TEXT("KeysToRemove"), KeysToRemove);

    Permission = readUserDataPermissionFromValue(obj->TryGetField(TEXT("Permission")));

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateUserDataResult::~FUpdateUserDataResult()
{

}

void PlayFab::AdminModels::FUpdateUserDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("DataVersion"));
    writer->WriteValue(static_cast<int64>(DataVersion));

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateUserDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataVersionValue = obj->TryGetField(TEXT("DataVersion"));
    if (DataVersionValue.IsValid() && !DataVersionValue->IsNull())
    {
        uint32 TmpValue;
        if (DataVersionValue->TryGetNumber(TmpValue)) { DataVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateUserInternalDataRequest::~FUpdateUserInternalDataRequest()
{

}

void PlayFab::AdminModels::FUpdateUserInternalDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FString>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (KeysToRemove.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("KeysToRemove"));
        for (const FString& item : KeysToRemove)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateUserInternalDataRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateUserInternalDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), It.Value()->AsString());
        }
    }

    obj->TryGetStringArrayField(TEXT("KeysToRemove"), KeysToRemove);

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateUserTitleDisplayNameRequest::~FUpdateUserTitleDisplayNameRequest()
{

}

void PlayFab::AdminModels::FUpdateUserTitleDisplayNameRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!DisplayName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateUserTitleDisplayNameRequest::DisplayName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateUserTitleDisplayNameRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateUserTitleDisplayNameRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AdminModels::FUpdateUserTitleDisplayNameResult::~FUpdateUserTitleDisplayNameResult()
{

}

void PlayFab::AdminModels::FUpdateUserTitleDisplayNameResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AdminModels::FUpdateUserTitleDisplayNameResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    return HasSucceeded;
}

