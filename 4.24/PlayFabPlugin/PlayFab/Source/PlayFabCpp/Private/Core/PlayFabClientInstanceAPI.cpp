//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "Core/PlayFabClientInstanceAPI.h"
#include "Core/PlayFabSettings.h"
#include "Core/PlayFabResultHandler.h"
#include "PlayFab.h"

using namespace PlayFab;
using namespace PlayFab::ClientModels;

UPlayFabClientInstanceAPI::UPlayFabClientInstanceAPI()
{
}

UPlayFabClientInstanceAPI::UPlayFabClientInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings)
{
    this->settings = MoveTemp(apiSettings);
}

UPlayFabClientInstanceAPI::UPlayFabClientInstanceAPI(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext)
{
    this->authContext = MoveTemp(authenticationContext);
}

UPlayFabClientInstanceAPI::UPlayFabClientInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings, TSharedPtr<UPlayFabAuthenticationContext> authenticationContext)
{
    this->settings = MoveTemp(apiSettings);
    this->authContext = MoveTemp(authenticationContext);
}

UPlayFabClientInstanceAPI::~UPlayFabClientInstanceAPI()
{
}

TSharedPtr<UPlayFabAPISettings> UPlayFabClientInstanceAPI::GetSettings() const
{
    return this->settings;
}

int UPlayFabClientInstanceAPI::GetPendingCalls() const
{
    return PlayFabRequestHandler::GetPendingCalls();
}

void UPlayFabClientInstanceAPI::SetSettings(TSharedPtr<UPlayFabAPISettings> apiSettings)
{
    this->settings = MoveTemp(apiSettings);
}

TSharedPtr<UPlayFabAuthenticationContext> UPlayFabClientInstanceAPI::GetAuthenticationContext() const
{
    return this->authContext;
}

void UPlayFabClientInstanceAPI::SetAuthenticationContext(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext)
{
    this->authContext = MoveTemp(authenticationContext);
}

void UPlayFabClientInstanceAPI::ForgetAllCredentials()
{
    if (!this->authContext.IsValid())
        return;

    this->authContext->ForgetAllCredentials();
}

TSharedPtr<UPlayFabAuthenticationContext> UPlayFabClientInstanceAPI::GetOrCreateAuthenticationContext()
{
    if (!this->authContext.IsValid())
        this->authContext = MakeSharedUObject<UPlayFabAuthenticationContext>();

    return this->authContext;
}

bool UPlayFabClientInstanceAPI::IsClientLoggedIn()
{
    return !this->GetOrCreateAuthenticationContext()->GetClientSessionTicket().IsEmpty();
}

bool UPlayFabClientInstanceAPI::AcceptTrade(
    ClientModels::FAcceptTradeRequest& request,
    const FAcceptTradeDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/AcceptTrade"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnAcceptTradeResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnAcceptTradeResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAcceptTradeDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAcceptTradeResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::AddFriend(
    ClientModels::FAddFriendRequest& request,
    const FAddFriendDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/AddFriend"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnAddFriendResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnAddFriendResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddFriendDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAddFriendResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::AddGenericID(
    ClientModels::FAddGenericIDRequest& request,
    const FAddGenericIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/AddGenericID"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnAddGenericIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnAddGenericIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddGenericIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAddGenericIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::AddOrUpdateContactEmail(
    ClientModels::FAddOrUpdateContactEmailRequest& request,
    const FAddOrUpdateContactEmailDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/AddOrUpdateContactEmail"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnAddOrUpdateContactEmailResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnAddOrUpdateContactEmailResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddOrUpdateContactEmailDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAddOrUpdateContactEmailResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::AddSharedGroupMembers(
    ClientModels::FAddSharedGroupMembersRequest& request,
    const FAddSharedGroupMembersDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/AddSharedGroupMembers"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnAddSharedGroupMembersResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnAddSharedGroupMembersResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddSharedGroupMembersDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAddSharedGroupMembersResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::AddUsernamePassword(
    ClientModels::FAddUsernamePasswordRequest& request,
    const FAddUsernamePasswordDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/AddUsernamePassword"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnAddUsernamePasswordResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnAddUsernamePasswordResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddUsernamePasswordDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAddUsernamePasswordResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::AddUserVirtualCurrency(
    ClientModels::FAddUserVirtualCurrencyRequest& request,
    const FAddUserVirtualCurrencyDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/AddUserVirtualCurrency"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnAddUserVirtualCurrencyResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnAddUserVirtualCurrencyResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddUserVirtualCurrencyDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FModifyUserVirtualCurrencyResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::AndroidDevicePushNotificationRegistration(
    ClientModels::FAndroidDevicePushNotificationRegistrationRequest& request,
    const FAndroidDevicePushNotificationRegistrationDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/AndroidDevicePushNotificationRegistration"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnAndroidDevicePushNotificationRegistrationResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnAndroidDevicePushNotificationRegistrationResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAndroidDevicePushNotificationRegistrationDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAndroidDevicePushNotificationRegistrationResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::AttributeInstall(
    ClientModels::FAttributeInstallRequest& request,
    const FAttributeInstallDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/AttributeInstall"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnAttributeInstallResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnAttributeInstallResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAttributeInstallDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAttributeInstallResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::CancelTrade(
    ClientModels::FCancelTradeRequest& request,
    const FCancelTradeDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/CancelTrade"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnCancelTradeResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnCancelTradeResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCancelTradeDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FCancelTradeResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::ConfirmPurchase(
    ClientModels::FConfirmPurchaseRequest& request,
    const FConfirmPurchaseDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/ConfirmPurchase"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnConfirmPurchaseResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnConfirmPurchaseResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConfirmPurchaseDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FConfirmPurchaseResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::ConsumeItem(
    ClientModels::FConsumeItemRequest& request,
    const FConsumeItemDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/ConsumeItem"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnConsumeItemResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnConsumeItemResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConsumeItemDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FConsumeItemResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::ConsumeMicrosoftStoreEntitlements(
    ClientModels::FConsumeMicrosoftStoreEntitlementsRequest& request,
    const FConsumeMicrosoftStoreEntitlementsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/ConsumeMicrosoftStoreEntitlements"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnConsumeMicrosoftStoreEntitlementsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnConsumeMicrosoftStoreEntitlementsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConsumeMicrosoftStoreEntitlementsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FConsumeMicrosoftStoreEntitlementsResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::ConsumePS5Entitlements(
    ClientModels::FConsumePS5EntitlementsRequest& request,
    const FConsumePS5EntitlementsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/ConsumePS5Entitlements"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnConsumePS5EntitlementsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnConsumePS5EntitlementsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConsumePS5EntitlementsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FConsumePS5EntitlementsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::ConsumePSNEntitlements(
    ClientModels::FConsumePSNEntitlementsRequest& request,
    const FConsumePSNEntitlementsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/ConsumePSNEntitlements"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnConsumePSNEntitlementsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnConsumePSNEntitlementsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConsumePSNEntitlementsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FConsumePSNEntitlementsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::ConsumeXboxEntitlements(
    ClientModels::FConsumeXboxEntitlementsRequest& request,
    const FConsumeXboxEntitlementsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/ConsumeXboxEntitlements"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnConsumeXboxEntitlementsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnConsumeXboxEntitlementsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConsumeXboxEntitlementsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FConsumeXboxEntitlementsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::CreateSharedGroup(
    ClientModels::FCreateSharedGroupRequest& request,
    const FCreateSharedGroupDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/CreateSharedGroup"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnCreateSharedGroupResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnCreateSharedGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateSharedGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FCreateSharedGroupResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::ExecuteCloudScript(
    ClientModels::FExecuteCloudScriptRequest& request,
    const FExecuteCloudScriptDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/ExecuteCloudScript"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnExecuteCloudScriptResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnExecuteCloudScriptResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FExecuteCloudScriptDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FExecuteCloudScriptResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetAccountInfo(
    ClientModels::FGetAccountInfoRequest& request,
    const FGetAccountInfoDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetAccountInfo"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetAccountInfoResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetAccountInfoResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAccountInfoDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetAccountInfoResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetAdPlacements(
    ClientModels::FGetAdPlacementsRequest& request,
    const FGetAdPlacementsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetAdPlacements"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetAdPlacementsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetAdPlacementsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAdPlacementsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetAdPlacementsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetAllUsersCharacters(
    ClientModels::FListUsersCharactersRequest& request,
    const FGetAllUsersCharactersDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetAllUsersCharacters"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetAllUsersCharactersResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetAllUsersCharactersResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAllUsersCharactersDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FListUsersCharactersResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetCatalogItems(
    ClientModels::FGetCatalogItemsRequest& request,
    const FGetCatalogItemsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetCatalogItems"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetCatalogItemsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetCatalogItemsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCatalogItemsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetCatalogItemsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetCharacterData(
    ClientModels::FGetCharacterDataRequest& request,
    const FGetCharacterDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetCharacterData"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetCharacterDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetCharacterDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCharacterDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetCharacterDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetCharacterInventory(
    ClientModels::FGetCharacterInventoryRequest& request,
    const FGetCharacterInventoryDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetCharacterInventory"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetCharacterInventoryResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetCharacterInventoryResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCharacterInventoryDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetCharacterInventoryResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetCharacterLeaderboard(
    ClientModels::FGetCharacterLeaderboardRequest& request,
    const FGetCharacterLeaderboardDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetCharacterLeaderboard"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetCharacterLeaderboardResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetCharacterLeaderboardResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCharacterLeaderboardDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetCharacterLeaderboardResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetCharacterReadOnlyData(
    ClientModels::FGetCharacterDataRequest& request,
    const FGetCharacterReadOnlyDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetCharacterReadOnlyData"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetCharacterReadOnlyDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetCharacterReadOnlyDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCharacterReadOnlyDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetCharacterDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetCharacterStatistics(
    ClientModels::FGetCharacterStatisticsRequest& request,
    const FGetCharacterStatisticsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetCharacterStatistics"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetCharacterStatisticsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetCharacterStatisticsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCharacterStatisticsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetCharacterStatisticsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetContentDownloadUrl(
    ClientModels::FGetContentDownloadUrlRequest& request,
    const FGetContentDownloadUrlDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetContentDownloadUrl"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetContentDownloadUrlResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetContentDownloadUrlResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetContentDownloadUrlDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetContentDownloadUrlResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetCurrentGames(
    ClientModels::FCurrentGamesRequest& request,
    const FGetCurrentGamesDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetCurrentGames"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetCurrentGamesResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetCurrentGamesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCurrentGamesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FCurrentGamesResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetFriendLeaderboard(
    ClientModels::FGetFriendLeaderboardRequest& request,
    const FGetFriendLeaderboardDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetFriendLeaderboard"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetFriendLeaderboardResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetFriendLeaderboardResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFriendLeaderboardDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetLeaderboardResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetFriendLeaderboardAroundPlayer(
    ClientModels::FGetFriendLeaderboardAroundPlayerRequest& request,
    const FGetFriendLeaderboardAroundPlayerDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetFriendLeaderboardAroundPlayer"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetFriendLeaderboardAroundPlayerResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetFriendLeaderboardAroundPlayerResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFriendLeaderboardAroundPlayerDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetFriendLeaderboardAroundPlayerResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetFriendsList(
    ClientModels::FGetFriendsListRequest& request,
    const FGetFriendsListDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetFriendsList"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetFriendsListResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetFriendsListResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFriendsListDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetFriendsListResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetGameServerRegions(
    ClientModels::FGameServerRegionsRequest& request,
    const FGetGameServerRegionsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetGameServerRegions"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetGameServerRegionsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetGameServerRegionsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetGameServerRegionsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGameServerRegionsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetLeaderboard(
    ClientModels::FGetLeaderboardRequest& request,
    const FGetLeaderboardDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetLeaderboard"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetLeaderboardResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetLeaderboardResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLeaderboardDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetLeaderboardResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetLeaderboardAroundCharacter(
    ClientModels::FGetLeaderboardAroundCharacterRequest& request,
    const FGetLeaderboardAroundCharacterDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetLeaderboardAroundCharacter"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetLeaderboardAroundCharacterResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetLeaderboardAroundCharacterResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLeaderboardAroundCharacterDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetLeaderboardAroundCharacterResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetLeaderboardAroundPlayer(
    ClientModels::FGetLeaderboardAroundPlayerRequest& request,
    const FGetLeaderboardAroundPlayerDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetLeaderboardAroundPlayer"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetLeaderboardAroundPlayerResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetLeaderboardAroundPlayerResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLeaderboardAroundPlayerDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetLeaderboardAroundPlayerResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetLeaderboardForUserCharacters(
    ClientModels::FGetLeaderboardForUsersCharactersRequest& request,
    const FGetLeaderboardForUserCharactersDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetLeaderboardForUserCharacters"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetLeaderboardForUserCharactersResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetLeaderboardForUserCharactersResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLeaderboardForUserCharactersDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetLeaderboardForUsersCharactersResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPaymentToken(
    ClientModels::FGetPaymentTokenRequest& request,
    const FGetPaymentTokenDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPaymentToken"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPaymentTokenResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPaymentTokenResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPaymentTokenDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPaymentTokenResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPhotonAuthenticationToken(
    ClientModels::FGetPhotonAuthenticationTokenRequest& request,
    const FGetPhotonAuthenticationTokenDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPhotonAuthenticationToken"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPhotonAuthenticationTokenResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPhotonAuthenticationTokenResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPhotonAuthenticationTokenDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPhotonAuthenticationTokenResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayerCombinedInfo(
    ClientModels::FGetPlayerCombinedInfoRequest& request,
    const FGetPlayerCombinedInfoDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayerCombinedInfo"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayerCombinedInfoResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayerCombinedInfoResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerCombinedInfoDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayerCombinedInfoResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayerProfile(
    ClientModels::FGetPlayerProfileRequest& request,
    const FGetPlayerProfileDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayerProfile"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayerProfileResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayerProfileResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerProfileDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayerProfileResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayerSegments(
    const FGetPlayerSegmentsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{ 
    ClientModels::FGetPlayerSegmentsRequest emptyRequest = ClientModels::FGetPlayerSegmentsRequest();
    return UPlayFabClientInstanceAPI::GetPlayerSegments(emptyRequest, SuccessDelegate, ErrorDelegate);
}

bool UPlayFabClientInstanceAPI::GetPlayerSegments(
    ClientModels::FGetPlayerSegmentsRequest& request,
    const FGetPlayerSegmentsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayerSegments"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayerSegmentsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayerSegmentsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerSegmentsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayerSegmentsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayerStatistics(
    ClientModels::FGetPlayerStatisticsRequest& request,
    const FGetPlayerStatisticsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayerStatistics"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayerStatisticsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayerStatisticsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerStatisticsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayerStatisticsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayerStatisticVersions(
    ClientModels::FGetPlayerStatisticVersionsRequest& request,
    const FGetPlayerStatisticVersionsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayerStatisticVersions"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayerStatisticVersionsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayerStatisticVersionsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerStatisticVersionsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayerStatisticVersionsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayerTags(
    ClientModels::FGetPlayerTagsRequest& request,
    const FGetPlayerTagsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayerTags"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayerTagsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayerTagsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerTagsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayerTagsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayerTrades(
    ClientModels::FGetPlayerTradesRequest& request,
    const FGetPlayerTradesDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayerTrades"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayerTradesResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayerTradesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerTradesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayerTradesResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayFabIDsFromFacebookIDs(
    ClientModels::FGetPlayFabIDsFromFacebookIDsRequest& request,
    const FGetPlayFabIDsFromFacebookIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayFabIDsFromFacebookIDs"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromFacebookIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromFacebookIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromFacebookIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromFacebookIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayFabIDsFromFacebookInstantGamesIds(
    ClientModels::FGetPlayFabIDsFromFacebookInstantGamesIdsRequest& request,
    const FGetPlayFabIDsFromFacebookInstantGamesIdsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayFabIDsFromFacebookInstantGamesIds"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromFacebookInstantGamesIdsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromFacebookInstantGamesIdsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromFacebookInstantGamesIdsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromFacebookInstantGamesIdsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayFabIDsFromGameCenterIDs(
    ClientModels::FGetPlayFabIDsFromGameCenterIDsRequest& request,
    const FGetPlayFabIDsFromGameCenterIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayFabIDsFromGameCenterIDs"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromGameCenterIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromGameCenterIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromGameCenterIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromGameCenterIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayFabIDsFromGenericIDs(
    ClientModels::FGetPlayFabIDsFromGenericIDsRequest& request,
    const FGetPlayFabIDsFromGenericIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayFabIDsFromGenericIDs"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromGenericIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromGenericIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromGenericIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromGenericIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayFabIDsFromGoogleIDs(
    ClientModels::FGetPlayFabIDsFromGoogleIDsRequest& request,
    const FGetPlayFabIDsFromGoogleIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayFabIDsFromGoogleIDs"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromGoogleIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromGoogleIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromGoogleIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromGoogleIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayFabIDsFromKongregateIDs(
    ClientModels::FGetPlayFabIDsFromKongregateIDsRequest& request,
    const FGetPlayFabIDsFromKongregateIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayFabIDsFromKongregateIDs"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromKongregateIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromKongregateIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromKongregateIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromKongregateIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayFabIDsFromNintendoSwitchDeviceIds(
    ClientModels::FGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest& request,
    const FGetPlayFabIDsFromNintendoSwitchDeviceIdsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayFabIDsFromNintendoSwitchDeviceIds"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromNintendoSwitchDeviceIdsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromNintendoSwitchDeviceIdsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromNintendoSwitchDeviceIdsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromNintendoSwitchDeviceIdsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayFabIDsFromPSNAccountIDs(
    ClientModels::FGetPlayFabIDsFromPSNAccountIDsRequest& request,
    const FGetPlayFabIDsFromPSNAccountIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayFabIDsFromPSNAccountIDs"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromPSNAccountIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromPSNAccountIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromPSNAccountIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromPSNAccountIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayFabIDsFromSteamIDs(
    ClientModels::FGetPlayFabIDsFromSteamIDsRequest& request,
    const FGetPlayFabIDsFromSteamIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayFabIDsFromSteamIDs"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromSteamIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromSteamIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromSteamIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromSteamIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayFabIDsFromTwitchIDs(
    ClientModels::FGetPlayFabIDsFromTwitchIDsRequest& request,
    const FGetPlayFabIDsFromTwitchIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayFabIDsFromTwitchIDs"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromTwitchIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromTwitchIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromTwitchIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromTwitchIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPlayFabIDsFromXboxLiveIDs(
    ClientModels::FGetPlayFabIDsFromXboxLiveIDsRequest& request,
    const FGetPlayFabIDsFromXboxLiveIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPlayFabIDsFromXboxLiveIDs"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromXboxLiveIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPlayFabIDsFromXboxLiveIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromXboxLiveIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromXboxLiveIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPublisherData(
    ClientModels::FGetPublisherDataRequest& request,
    const FGetPublisherDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPublisherData"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPublisherDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPublisherDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPublisherDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPublisherDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetPurchase(
    ClientModels::FGetPurchaseRequest& request,
    const FGetPurchaseDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetPurchase"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetPurchaseResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetPurchaseResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPurchaseDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPurchaseResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetSharedGroupData(
    ClientModels::FGetSharedGroupDataRequest& request,
    const FGetSharedGroupDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetSharedGroupData"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetSharedGroupDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetSharedGroupDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetSharedGroupDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetSharedGroupDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetStoreItems(
    ClientModels::FGetStoreItemsRequest& request,
    const FGetStoreItemsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetStoreItems"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetStoreItemsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetStoreItemsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetStoreItemsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetStoreItemsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetTime(
    const FGetTimeDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{ 
    ClientModels::FGetTimeRequest emptyRequest = ClientModels::FGetTimeRequest();
    return UPlayFabClientInstanceAPI::GetTime(emptyRequest, SuccessDelegate, ErrorDelegate);
}

bool UPlayFabClientInstanceAPI::GetTime(
    ClientModels::FGetTimeRequest& request,
    const FGetTimeDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetTime"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetTimeResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetTimeResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetTimeDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetTimeResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetTitleData(
    ClientModels::FGetTitleDataRequest& request,
    const FGetTitleDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetTitleData"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetTitleDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetTitleDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetTitleDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetTitleDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetTitleNews(
    ClientModels::FGetTitleNewsRequest& request,
    const FGetTitleNewsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetTitleNews"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetTitleNewsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetTitleNewsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetTitleNewsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetTitleNewsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetTitlePublicKey(
    ClientModels::FGetTitlePublicKeyRequest& request,
    const FGetTitlePublicKeyDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetTitlePublicKey"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetTitlePublicKeyResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetTitlePublicKeyResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetTitlePublicKeyDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetTitlePublicKeyResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetTradeStatus(
    ClientModels::FGetTradeStatusRequest& request,
    const FGetTradeStatusDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetTradeStatus"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetTradeStatusResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetTradeStatusResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetTradeStatusDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetTradeStatusResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetUserData(
    ClientModels::FGetUserDataRequest& request,
    const FGetUserDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetUserData"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetUserDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetUserDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetUserDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetUserInventory(
    ClientModels::FGetUserInventoryRequest& request,
    const FGetUserInventoryDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetUserInventory"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetUserInventoryResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetUserInventoryResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserInventoryDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetUserInventoryResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetUserPublisherData(
    ClientModels::FGetUserDataRequest& request,
    const FGetUserPublisherDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetUserPublisherData"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetUserPublisherDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetUserPublisherDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserPublisherDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetUserDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetUserPublisherReadOnlyData(
    ClientModels::FGetUserDataRequest& request,
    const FGetUserPublisherReadOnlyDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetUserPublisherReadOnlyData"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetUserPublisherReadOnlyDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetUserPublisherReadOnlyDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserPublisherReadOnlyDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetUserDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GetUserReadOnlyData(
    ClientModels::FGetUserDataRequest& request,
    const FGetUserReadOnlyDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GetUserReadOnlyData"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGetUserReadOnlyDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGetUserReadOnlyDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserReadOnlyDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetUserDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::GrantCharacterToUser(
    ClientModels::FGrantCharacterToUserRequest& request,
    const FGrantCharacterToUserDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/GrantCharacterToUser"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnGrantCharacterToUserResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnGrantCharacterToUserResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGrantCharacterToUserDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGrantCharacterToUserResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkAndroidDeviceID(
    ClientModels::FLinkAndroidDeviceIDRequest& request,
    const FLinkAndroidDeviceIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkAndroidDeviceID"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkAndroidDeviceIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkAndroidDeviceIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkAndroidDeviceIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkAndroidDeviceIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkApple(
    ClientModels::FLinkAppleRequest& request,
    const FLinkAppleDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkApple"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkAppleResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkAppleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkAppleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkCustomID(
    ClientModels::FLinkCustomIDRequest& request,
    const FLinkCustomIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkCustomID"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkCustomIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkCustomIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkCustomIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkCustomIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkFacebookAccount(
    ClientModels::FLinkFacebookAccountRequest& request,
    const FLinkFacebookAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkFacebookAccount"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkFacebookAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkFacebookAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkFacebookAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkFacebookAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkFacebookInstantGamesId(
    ClientModels::FLinkFacebookInstantGamesIdRequest& request,
    const FLinkFacebookInstantGamesIdDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkFacebookInstantGamesId"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkFacebookInstantGamesIdResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkFacebookInstantGamesIdResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkFacebookInstantGamesIdDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkFacebookInstantGamesIdResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkGameCenterAccount(
    ClientModels::FLinkGameCenterAccountRequest& request,
    const FLinkGameCenterAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkGameCenterAccount"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkGameCenterAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkGameCenterAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkGameCenterAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkGameCenterAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkGoogleAccount(
    ClientModels::FLinkGoogleAccountRequest& request,
    const FLinkGoogleAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkGoogleAccount"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkGoogleAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkGoogleAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkGoogleAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkGoogleAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkIOSDeviceID(
    ClientModels::FLinkIOSDeviceIDRequest& request,
    const FLinkIOSDeviceIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkIOSDeviceID"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkIOSDeviceIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkIOSDeviceIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkIOSDeviceIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkIOSDeviceIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkKongregate(
    ClientModels::FLinkKongregateAccountRequest& request,
    const FLinkKongregateDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkKongregate"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkKongregateResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkKongregateResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkKongregateDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkKongregateAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkNintendoServiceAccount(
    ClientModels::FLinkNintendoServiceAccountRequest& request,
    const FLinkNintendoServiceAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkNintendoServiceAccount"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkNintendoServiceAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkNintendoServiceAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkNintendoServiceAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkNintendoSwitchDeviceId(
    ClientModels::FLinkNintendoSwitchDeviceIdRequest& request,
    const FLinkNintendoSwitchDeviceIdDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkNintendoSwitchDeviceId"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkNintendoSwitchDeviceIdResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkNintendoSwitchDeviceIdResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkNintendoSwitchDeviceIdDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkNintendoSwitchDeviceIdResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkOpenIdConnect(
    ClientModels::FLinkOpenIdConnectRequest& request,
    const FLinkOpenIdConnectDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkOpenIdConnect"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkOpenIdConnectResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkOpenIdConnectResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkOpenIdConnectDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkPSNAccount(
    ClientModels::FLinkPSNAccountRequest& request,
    const FLinkPSNAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkPSNAccount"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkPSNAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkPSNAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkPSNAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkPSNAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkSteamAccount(
    ClientModels::FLinkSteamAccountRequest& request,
    const FLinkSteamAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkSteamAccount"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkSteamAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkSteamAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkSteamAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkSteamAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkTwitch(
    ClientModels::FLinkTwitchAccountRequest& request,
    const FLinkTwitchDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkTwitch"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkTwitchResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkTwitchResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkTwitchDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkTwitchAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LinkXboxAccount(
    ClientModels::FLinkXboxAccountRequest& request,
    const FLinkXboxAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LinkXboxAccount"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLinkXboxAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLinkXboxAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkXboxAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkXboxAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithAndroidDeviceID(
    ClientModels::FLoginWithAndroidDeviceIDRequest& request,
    const FLoginWithAndroidDeviceIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithAndroidDeviceID"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithAndroidDeviceIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithAndroidDeviceIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithAndroidDeviceIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithApple(
    ClientModels::FLoginWithAppleRequest& request,
    const FLoginWithAppleDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithApple"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithAppleResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithAppleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithAppleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithCustomID(
    ClientModels::FLoginWithCustomIDRequest& request,
    const FLoginWithCustomIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithCustomID"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithCustomIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithCustomIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithCustomIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithEmailAddress(
    ClientModels::FLoginWithEmailAddressRequest& request,
    const FLoginWithEmailAddressDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithEmailAddress"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithEmailAddressResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithEmailAddressResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithEmailAddressDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithFacebook(
    ClientModels::FLoginWithFacebookRequest& request,
    const FLoginWithFacebookDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithFacebook"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithFacebookResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithFacebookResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithFacebookDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithFacebookInstantGamesId(
    ClientModels::FLoginWithFacebookInstantGamesIdRequest& request,
    const FLoginWithFacebookInstantGamesIdDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithFacebookInstantGamesId"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithFacebookInstantGamesIdResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithFacebookInstantGamesIdResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithFacebookInstantGamesIdDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithGameCenter(
    ClientModels::FLoginWithGameCenterRequest& request,
    const FLoginWithGameCenterDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithGameCenter"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithGameCenterResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithGameCenterResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithGameCenterDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithGoogleAccount(
    ClientModels::FLoginWithGoogleAccountRequest& request,
    const FLoginWithGoogleAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithGoogleAccount"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithGoogleAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithGoogleAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithGoogleAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithIOSDeviceID(
    ClientModels::FLoginWithIOSDeviceIDRequest& request,
    const FLoginWithIOSDeviceIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithIOSDeviceID"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithIOSDeviceIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithIOSDeviceIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithIOSDeviceIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithKongregate(
    ClientModels::FLoginWithKongregateRequest& request,
    const FLoginWithKongregateDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithKongregate"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithKongregateResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithKongregateResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithKongregateDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithNintendoServiceAccount(
    ClientModels::FLoginWithNintendoServiceAccountRequest& request,
    const FLoginWithNintendoServiceAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithNintendoServiceAccount"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithNintendoServiceAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithNintendoServiceAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithNintendoServiceAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithNintendoSwitchDeviceId(
    ClientModels::FLoginWithNintendoSwitchDeviceIdRequest& request,
    const FLoginWithNintendoSwitchDeviceIdDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithNintendoSwitchDeviceId"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithNintendoSwitchDeviceIdResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithNintendoSwitchDeviceIdResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithNintendoSwitchDeviceIdDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithOpenIdConnect(
    ClientModels::FLoginWithOpenIdConnectRequest& request,
    const FLoginWithOpenIdConnectDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithOpenIdConnect"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithOpenIdConnectResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithOpenIdConnectResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithOpenIdConnectDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithPlayFab(
    ClientModels::FLoginWithPlayFabRequest& request,
    const FLoginWithPlayFabDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithPlayFab"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithPlayFabResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithPlayFabResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithPlayFabDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithPSN(
    ClientModels::FLoginWithPSNRequest& request,
    const FLoginWithPSNDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithPSN"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithPSNResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithPSNResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithPSNDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithSteam(
    ClientModels::FLoginWithSteamRequest& request,
    const FLoginWithSteamDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithSteam"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithSteamResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithSteamResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithSteamDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithTwitch(
    ClientModels::FLoginWithTwitchRequest& request,
    const FLoginWithTwitchDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithTwitch"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithTwitchResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithTwitchResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithTwitchDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::LoginWithXbox(
    ClientModels::FLoginWithXboxRequest& request,
    const FLoginWithXboxDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/LoginWithXbox"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnLoginWithXboxResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnLoginWithXboxResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithXboxDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            GetOrCreateAuthenticationContext()->SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            this->authContext->SetPlayFabId(outResult.PlayFabId);
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::Matchmake(
    ClientModels::FMatchmakeRequest& request,
    const FMatchmakeDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/Matchmake"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnMatchmakeResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnMatchmakeResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMatchmakeDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FMatchmakeResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::OpenTrade(
    ClientModels::FOpenTradeRequest& request,
    const FOpenTradeDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/OpenTrade"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnOpenTradeResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnOpenTradeResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FOpenTradeDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FOpenTradeResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::PayForPurchase(
    ClientModels::FPayForPurchaseRequest& request,
    const FPayForPurchaseDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/PayForPurchase"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnPayForPurchaseResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnPayForPurchaseResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPayForPurchaseDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FPayForPurchaseResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::PurchaseItem(
    ClientModels::FPurchaseItemRequest& request,
    const FPurchaseItemDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/PurchaseItem"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnPurchaseItemResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnPurchaseItemResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPurchaseItemDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FPurchaseItemResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::RedeemCoupon(
    ClientModels::FRedeemCouponRequest& request,
    const FRedeemCouponDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/RedeemCoupon"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnRedeemCouponResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnRedeemCouponResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRedeemCouponDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRedeemCouponResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::RefreshPSNAuthToken(
    ClientModels::FRefreshPSNAuthTokenRequest& request,
    const FRefreshPSNAuthTokenDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/RefreshPSNAuthToken"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnRefreshPSNAuthTokenResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnRefreshPSNAuthTokenResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRefreshPSNAuthTokenDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::RegisterForIOSPushNotification(
    ClientModels::FRegisterForIOSPushNotificationRequest& request,
    const FRegisterForIOSPushNotificationDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/RegisterForIOSPushNotification"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnRegisterForIOSPushNotificationResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnRegisterForIOSPushNotificationResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRegisterForIOSPushNotificationDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRegisterForIOSPushNotificationResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::RegisterPlayFabUser(
    ClientModels::FRegisterPlayFabUserRequest& request,
    const FRegisterPlayFabUserDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/RegisterPlayFabUser"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnRegisterPlayFabUserResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnRegisterPlayFabUserResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRegisterPlayFabUserDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRegisterPlayFabUserResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        if (outResult.SessionTicket.Len() > 0)
            GetOrCreateAuthenticationContext()->SetClientSessionTicket(outResult.SessionTicket);
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::RemoveContactEmail(
    ClientModels::FRemoveContactEmailRequest& request,
    const FRemoveContactEmailDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/RemoveContactEmail"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnRemoveContactEmailResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnRemoveContactEmailResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveContactEmailDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRemoveContactEmailResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::RemoveFriend(
    ClientModels::FRemoveFriendRequest& request,
    const FRemoveFriendDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/RemoveFriend"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnRemoveFriendResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnRemoveFriendResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveFriendDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRemoveFriendResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::RemoveGenericID(
    ClientModels::FRemoveGenericIDRequest& request,
    const FRemoveGenericIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/RemoveGenericID"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnRemoveGenericIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnRemoveGenericIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveGenericIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRemoveGenericIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::RemoveSharedGroupMembers(
    ClientModels::FRemoveSharedGroupMembersRequest& request,
    const FRemoveSharedGroupMembersDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/RemoveSharedGroupMembers"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnRemoveSharedGroupMembersResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnRemoveSharedGroupMembersResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveSharedGroupMembersDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRemoveSharedGroupMembersResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::ReportAdActivity(
    ClientModels::FReportAdActivityRequest& request,
    const FReportAdActivityDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/ReportAdActivity"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnReportAdActivityResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnReportAdActivityResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FReportAdActivityDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FReportAdActivityResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::ReportDeviceInfo(
    ClientModels::FDeviceInfoRequest& request,
    const FReportDeviceInfoDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/ReportDeviceInfo"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnReportDeviceInfoResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnReportDeviceInfoResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FReportDeviceInfoDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::ReportPlayer(
    ClientModels::FReportPlayerClientRequest& request,
    const FReportPlayerDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/ReportPlayer"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnReportPlayerResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnReportPlayerResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FReportPlayerDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FReportPlayerClientResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::RestoreIOSPurchases(
    ClientModels::FRestoreIOSPurchasesRequest& request,
    const FRestoreIOSPurchasesDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/RestoreIOSPurchases"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnRestoreIOSPurchasesResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnRestoreIOSPurchasesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRestoreIOSPurchasesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRestoreIOSPurchasesResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::RewardAdActivity(
    ClientModels::FRewardAdActivityRequest& request,
    const FRewardAdActivityDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/RewardAdActivity"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnRewardAdActivityResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnRewardAdActivityResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRewardAdActivityDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRewardAdActivityResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::SendAccountRecoveryEmail(
    ClientModels::FSendAccountRecoveryEmailRequest& request,
    const FSendAccountRecoveryEmailDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/SendAccountRecoveryEmail"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnSendAccountRecoveryEmailResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnSendAccountRecoveryEmailResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSendAccountRecoveryEmailDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FSendAccountRecoveryEmailResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::SetFriendTags(
    ClientModels::FSetFriendTagsRequest& request,
    const FSetFriendTagsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/SetFriendTags"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnSetFriendTagsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnSetFriendTagsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetFriendTagsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FSetFriendTagsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::SetPlayerSecret(
    ClientModels::FSetPlayerSecretRequest& request,
    const FSetPlayerSecretDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/SetPlayerSecret"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnSetPlayerSecretResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnSetPlayerSecretResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetPlayerSecretDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FSetPlayerSecretResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::StartGame(
    ClientModels::FStartGameRequest& request,
    const FStartGameDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/StartGame"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnStartGameResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnStartGameResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FStartGameDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FStartGameResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::StartPurchase(
    ClientModels::FStartPurchaseRequest& request,
    const FStartPurchaseDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/StartPurchase"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnStartPurchaseResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnStartPurchaseResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FStartPurchaseDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FStartPurchaseResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::SubtractUserVirtualCurrency(
    ClientModels::FSubtractUserVirtualCurrencyRequest& request,
    const FSubtractUserVirtualCurrencyDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/SubtractUserVirtualCurrency"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnSubtractUserVirtualCurrencyResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnSubtractUserVirtualCurrencyResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSubtractUserVirtualCurrencyDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FModifyUserVirtualCurrencyResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkAndroidDeviceID(
    ClientModels::FUnlinkAndroidDeviceIDRequest& request,
    const FUnlinkAndroidDeviceIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkAndroidDeviceID"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkAndroidDeviceIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkAndroidDeviceIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkAndroidDeviceIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkAndroidDeviceIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkApple(
    ClientModels::FUnlinkAppleRequest& request,
    const FUnlinkAppleDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkApple"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkAppleResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkAppleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkAppleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkCustomID(
    ClientModels::FUnlinkCustomIDRequest& request,
    const FUnlinkCustomIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkCustomID"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkCustomIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkCustomIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkCustomIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkCustomIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkFacebookAccount(
    ClientModels::FUnlinkFacebookAccountRequest& request,
    const FUnlinkFacebookAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkFacebookAccount"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkFacebookAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkFacebookAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkFacebookAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkFacebookAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkFacebookInstantGamesId(
    ClientModels::FUnlinkFacebookInstantGamesIdRequest& request,
    const FUnlinkFacebookInstantGamesIdDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkFacebookInstantGamesId"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkFacebookInstantGamesIdResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkFacebookInstantGamesIdResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkFacebookInstantGamesIdDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkFacebookInstantGamesIdResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkGameCenterAccount(
    ClientModels::FUnlinkGameCenterAccountRequest& request,
    const FUnlinkGameCenterAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkGameCenterAccount"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkGameCenterAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkGameCenterAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkGameCenterAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkGameCenterAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkGoogleAccount(
    ClientModels::FUnlinkGoogleAccountRequest& request,
    const FUnlinkGoogleAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkGoogleAccount"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkGoogleAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkGoogleAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkGoogleAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkGoogleAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkIOSDeviceID(
    ClientModels::FUnlinkIOSDeviceIDRequest& request,
    const FUnlinkIOSDeviceIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkIOSDeviceID"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkIOSDeviceIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkIOSDeviceIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkIOSDeviceIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkIOSDeviceIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkKongregate(
    ClientModels::FUnlinkKongregateAccountRequest& request,
    const FUnlinkKongregateDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkKongregate"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkKongregateResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkKongregateResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkKongregateDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkKongregateAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkNintendoServiceAccount(
    ClientModels::FUnlinkNintendoServiceAccountRequest& request,
    const FUnlinkNintendoServiceAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkNintendoServiceAccount"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkNintendoServiceAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkNintendoServiceAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkNintendoServiceAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkNintendoSwitchDeviceId(
    ClientModels::FUnlinkNintendoSwitchDeviceIdRequest& request,
    const FUnlinkNintendoSwitchDeviceIdDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkNintendoSwitchDeviceId"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkNintendoSwitchDeviceIdResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkNintendoSwitchDeviceIdResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkNintendoSwitchDeviceIdDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkNintendoSwitchDeviceIdResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkOpenIdConnect(
    ClientModels::FUnlinkOpenIdConnectRequest& request,
    const FUnlinkOpenIdConnectDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkOpenIdConnect"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkOpenIdConnectResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkOpenIdConnectResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkOpenIdConnectDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkPSNAccount(
    ClientModels::FUnlinkPSNAccountRequest& request,
    const FUnlinkPSNAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkPSNAccount"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkPSNAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkPSNAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkPSNAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkPSNAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkSteamAccount(
    ClientModels::FUnlinkSteamAccountRequest& request,
    const FUnlinkSteamAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkSteamAccount"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkSteamAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkSteamAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkSteamAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkSteamAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkTwitch(
    ClientModels::FUnlinkTwitchAccountRequest& request,
    const FUnlinkTwitchDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkTwitch"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkTwitchResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkTwitchResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkTwitchDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkTwitchAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlinkXboxAccount(
    ClientModels::FUnlinkXboxAccountRequest& request,
    const FUnlinkXboxAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlinkXboxAccount"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlinkXboxAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlinkXboxAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkXboxAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkXboxAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlockContainerInstance(
    ClientModels::FUnlockContainerInstanceRequest& request,
    const FUnlockContainerInstanceDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlockContainerInstance"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlockContainerInstanceResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlockContainerInstanceResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlockContainerInstanceDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlockContainerItemResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UnlockContainerItem(
    ClientModels::FUnlockContainerItemRequest& request,
    const FUnlockContainerItemDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UnlockContainerItem"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUnlockContainerItemResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUnlockContainerItemResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlockContainerItemDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlockContainerItemResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UpdateAvatarUrl(
    ClientModels::FUpdateAvatarUrlRequest& request,
    const FUpdateAvatarUrlDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UpdateAvatarUrl"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUpdateAvatarUrlResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUpdateAvatarUrlResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateAvatarUrlDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UpdateCharacterData(
    ClientModels::FUpdateCharacterDataRequest& request,
    const FUpdateCharacterDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UpdateCharacterData"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUpdateCharacterDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUpdateCharacterDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateCharacterDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUpdateCharacterDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UpdateCharacterStatistics(
    ClientModels::FUpdateCharacterStatisticsRequest& request,
    const FUpdateCharacterStatisticsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UpdateCharacterStatistics"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUpdateCharacterStatisticsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUpdateCharacterStatisticsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateCharacterStatisticsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUpdateCharacterStatisticsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UpdatePlayerStatistics(
    ClientModels::FUpdatePlayerStatisticsRequest& request,
    const FUpdatePlayerStatisticsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UpdatePlayerStatistics"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUpdatePlayerStatisticsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUpdatePlayerStatisticsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdatePlayerStatisticsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUpdatePlayerStatisticsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UpdateSharedGroupData(
    ClientModels::FUpdateSharedGroupDataRequest& request,
    const FUpdateSharedGroupDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UpdateSharedGroupData"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUpdateSharedGroupDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUpdateSharedGroupDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateSharedGroupDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUpdateSharedGroupDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UpdateUserData(
    ClientModels::FUpdateUserDataRequest& request,
    const FUpdateUserDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UpdateUserData"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUpdateUserDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUpdateUserDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateUserDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUpdateUserDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UpdateUserPublisherData(
    ClientModels::FUpdateUserDataRequest& request,
    const FUpdateUserPublisherDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UpdateUserPublisherData"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUpdateUserPublisherDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUpdateUserPublisherDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateUserPublisherDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUpdateUserDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::UpdateUserTitleDisplayName(
    ClientModels::FUpdateUserTitleDisplayNameRequest& request,
    const FUpdateUserTitleDisplayNameDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/UpdateUserTitleDisplayName"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnUpdateUserTitleDisplayNameResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnUpdateUserTitleDisplayNameResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateUserTitleDisplayNameDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUpdateUserTitleDisplayNameResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::ValidateAmazonIAPReceipt(
    ClientModels::FValidateAmazonReceiptRequest& request,
    const FValidateAmazonIAPReceiptDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/ValidateAmazonIAPReceipt"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnValidateAmazonIAPReceiptResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnValidateAmazonIAPReceiptResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FValidateAmazonIAPReceiptDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FValidateAmazonReceiptResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::ValidateGooglePlayPurchase(
    ClientModels::FValidateGooglePlayPurchaseRequest& request,
    const FValidateGooglePlayPurchaseDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/ValidateGooglePlayPurchase"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnValidateGooglePlayPurchaseResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnValidateGooglePlayPurchaseResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FValidateGooglePlayPurchaseDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FValidateGooglePlayPurchaseResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::ValidateIOSReceipt(
    ClientModels::FValidateIOSReceiptRequest& request,
    const FValidateIOSReceiptDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/ValidateIOSReceipt"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnValidateIOSReceiptResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnValidateIOSReceiptResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FValidateIOSReceiptDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FValidateIOSReceiptResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::ValidateWindowsStoreReceipt(
    ClientModels::FValidateWindowsReceiptRequest& request,
    const FValidateWindowsStoreReceiptDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/ValidateWindowsStoreReceipt"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnValidateWindowsStoreReceiptResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnValidateWindowsStoreReceiptResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FValidateWindowsStoreReceiptDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FValidateWindowsReceiptResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::WriteCharacterEvent(
    ClientModels::FWriteClientCharacterEventRequest& request,
    const FWriteCharacterEventDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/WriteCharacterEvent"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnWriteCharacterEventResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnWriteCharacterEventResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FWriteCharacterEventDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FWriteEventResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::WritePlayerEvent(
    ClientModels::FWriteClientPlayerEventRequest& request,
    const FWritePlayerEventDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/WritePlayerEvent"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnWritePlayerEventResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnWritePlayerEventResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FWritePlayerEventDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FWriteEventResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientInstanceAPI::WriteTitleEvent(
    ClientModels::FWriteTitleEventRequest& request,
    const FWriteTitleEventDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    TSharedPtr<UPlayFabAuthenticationContext> context = request.AuthenticationContext.IsValid() ? request.AuthenticationContext : GetOrCreateAuthenticationContext();
    if (context->GetClientSessionTicket().Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(this->settings, TEXT("/Client/WriteTitleEvent"), request.toJSONString(), TEXT("X-Authorization"), context->GetClientSessionTicket());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientInstanceAPI::OnWriteTitleEventResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientInstanceAPI::OnWriteTitleEventResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FWriteTitleEventDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FWriteEventResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}
