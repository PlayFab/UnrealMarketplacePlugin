//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "Core/PlayFabEconomyDataModels.h"
#include "Core/PlayFabJsonHelpers.h"

using namespace PlayFab;
using namespace PlayFab::EconomyModels;

PlayFab::EconomyModels::FCatalogAlternateId::~FCatalogAlternateId()
{

}

void PlayFab::EconomyModels::FCatalogAlternateId::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    if (Value.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Value"));
        writer->WriteValue(Value);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogAlternateId::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        FString TmpValue;
        if (ValueValue->TryGetString(TmpValue)) { Value = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FEntityKey::~FEntityKey()
{

}

void PlayFab::EconomyModels::FEntityKey::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Id.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EntityKey::Id, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FEntityKey::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::EconomyModels::writeDisplayPropertyTypeEnumJSON(DisplayPropertyType enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case DisplayPropertyTypeNone: writer->WriteValue(TEXT("None")); break;
    case DisplayPropertyTypeQueryDateTime: writer->WriteValue(TEXT("QueryDateTime")); break;
    case DisplayPropertyTypeQueryDouble: writer->WriteValue(TEXT("QueryDouble")); break;
    case DisplayPropertyTypeQueryString: writer->WriteValue(TEXT("QueryString")); break;
    case DisplayPropertyTypeSearchString: writer->WriteValue(TEXT("SearchString")); break;
    }
}

EconomyModels::DisplayPropertyType PlayFab::EconomyModels::readDisplayPropertyTypeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readDisplayPropertyTypeFromValue(value.IsValid() ? value->AsString() : "");
}

EconomyModels::DisplayPropertyType PlayFab::EconomyModels::readDisplayPropertyTypeFromValue(const FString& value)
{
    static TMap<FString, DisplayPropertyType> _DisplayPropertyTypeMap;
    if (_DisplayPropertyTypeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _DisplayPropertyTypeMap.Add(TEXT("None"), DisplayPropertyTypeNone);
        _DisplayPropertyTypeMap.Add(TEXT("QueryDateTime"), DisplayPropertyTypeQueryDateTime);
        _DisplayPropertyTypeMap.Add(TEXT("QueryDouble"), DisplayPropertyTypeQueryDouble);
        _DisplayPropertyTypeMap.Add(TEXT("QueryString"), DisplayPropertyTypeQueryString);
        _DisplayPropertyTypeMap.Add(TEXT("SearchString"), DisplayPropertyTypeSearchString);

    }

    if (!value.IsEmpty())
    {
        auto output = _DisplayPropertyTypeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return DisplayPropertyTypeNone; // Basically critical fail
}

PlayFab::EconomyModels::FDisplayPropertyIndexInfo::~FDisplayPropertyIndexInfo()
{

}

void PlayFab::EconomyModels::FDisplayPropertyIndexInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (Type.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writeDisplayPropertyTypeEnumJSON(Type, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDisplayPropertyIndexInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    Type = readDisplayPropertyTypeFromValue(obj->TryGetField(TEXT("Type")));

    return HasSucceeded;
}

PlayFab::EconomyModels::FFileConfig::~FFileConfig()
{

}

void PlayFab::EconomyModels::FFileConfig::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContentTypes.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ContentTypes"));
        for (const FString& item : ContentTypes)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FFileConfig::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("ContentTypes"), ContentTypes);

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    return HasSucceeded;
}

PlayFab::EconomyModels::FImageConfig::~FImageConfig()
{

}

void PlayFab::EconomyModels::FImageConfig::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FImageConfig::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    return HasSucceeded;
}

PlayFab::EconomyModels::FUserGeneratedContentSpecificConfig::~FUserGeneratedContentSpecificConfig()
{

}

void PlayFab::EconomyModels::FUserGeneratedContentSpecificConfig::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContentTypes.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ContentTypes"));
        for (const FString& item : ContentTypes)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUserGeneratedContentSpecificConfig::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("ContentTypes"), ContentTypes);

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogConfig::~FCatalogConfig()
{
    //if (File != nullptr) delete File;
    //if (Image != nullptr) delete Image;
    //if (UserGeneratedContent != nullptr) delete UserGeneratedContent;

}

void PlayFab::EconomyModels::FCatalogConfig::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AdminEntities.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AdminEntities"));
        for (const FEntityKey& item : AdminEntities)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (DisplayPropertyIndexInfos.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("DisplayPropertyIndexInfos"));
        for (const FDisplayPropertyIndexInfo& item : DisplayPropertyIndexInfos)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (File.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("File"));
        File->writeJSON(writer);
    }

    if (Image.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Image"));
        Image->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("IsCatalogEnabled"));
    writer->WriteValue(IsCatalogEnabled);

    if (Platforms.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Platforms"));
        for (const FString& item : Platforms)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (ReviewerEntities.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ReviewerEntities"));
        for (const FEntityKey& item : ReviewerEntities)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (UserGeneratedContent.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("UserGeneratedContent"));
        UserGeneratedContent->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogConfig::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AdminEntitiesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("AdminEntities"));
    for (int32 Idx = 0; Idx < AdminEntitiesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AdminEntitiesArray[Idx];
        AdminEntities.Add(FEntityKey(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&DisplayPropertyIndexInfosArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("DisplayPropertyIndexInfos"));
    for (int32 Idx = 0; Idx < DisplayPropertyIndexInfosArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = DisplayPropertyIndexInfosArray[Idx];
        DisplayPropertyIndexInfos.Add(FDisplayPropertyIndexInfo(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> FileValue = obj->TryGetField(TEXT("File"));
    if (FileValue.IsValid() && !FileValue->IsNull())
    {
        File = MakeShareable(new FFileConfig(FileValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ImageValue = obj->TryGetField(TEXT("Image"));
    if (ImageValue.IsValid() && !ImageValue->IsNull())
    {
        Image = MakeShareable(new FImageConfig(ImageValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IsCatalogEnabledValue = obj->TryGetField(TEXT("IsCatalogEnabled"));
    if (IsCatalogEnabledValue.IsValid() && !IsCatalogEnabledValue->IsNull())
    {
        bool TmpValue;
        if (IsCatalogEnabledValue->TryGetBool(TmpValue)) { IsCatalogEnabled = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("Platforms"), Platforms);

    const TArray<TSharedPtr<FJsonValue>>&ReviewerEntitiesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ReviewerEntities"));
    for (int32 Idx = 0; Idx < ReviewerEntitiesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ReviewerEntitiesArray[Idx];
        ReviewerEntities.Add(FEntityKey(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> UserGeneratedContentValue = obj->TryGetField(TEXT("UserGeneratedContent"));
    if (UserGeneratedContentValue.IsValid() && !UserGeneratedContentValue->IsNull())
    {
        UserGeneratedContent = MakeShareable(new FUserGeneratedContentSpecificConfig(UserGeneratedContentValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FContent::~FContent()
{

}

void PlayFab::EconomyModels::FContent::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (MaxClientVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MaxClientVersion"));
        writer->WriteValue(MaxClientVersion);
    }

    if (MinClientVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MinClientVersion"));
        writer->WriteValue(MinClientVersion);
    }

    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    if (Url.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Url"));
        writer->WriteValue(Url);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FContent::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MaxClientVersionValue = obj->TryGetField(TEXT("MaxClientVersion"));
    if (MaxClientVersionValue.IsValid() && !MaxClientVersionValue->IsNull())
    {
        FString TmpValue;
        if (MaxClientVersionValue->TryGetString(TmpValue)) { MaxClientVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MinClientVersionValue = obj->TryGetField(TEXT("MinClientVersion"));
    if (MinClientVersionValue.IsValid() && !MinClientVersionValue->IsNull())
    {
        FString TmpValue;
        if (MinClientVersionValue->TryGetString(TmpValue)) { MinClientVersion = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UrlValue = obj->TryGetField(TEXT("Url"));
    if (UrlValue.IsValid() && !UrlValue->IsNull())
    {
        FString TmpValue;
        if (UrlValue->TryGetString(TmpValue)) { Url = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FImage::~FImage()
{

}

void PlayFab::EconomyModels::FImage::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Tag.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Tag"));
        writer->WriteValue(Tag);
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    if (Url.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Url"));
        writer->WriteValue(Url);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FImage::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TagValue = obj->TryGetField(TEXT("Tag"));
    if (TagValue.IsValid() && !TagValue->IsNull())
    {
        FString TmpValue;
        if (TagValue->TryGetString(TmpValue)) { Tag = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UrlValue = obj->TryGetField(TEXT("Url"));
    if (UrlValue.IsValid() && !UrlValue->IsNull())
    {
        FString TmpValue;
        if (UrlValue->TryGetString(TmpValue)) { Url = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FKeywordSet::~FKeywordSet()
{

}

void PlayFab::EconomyModels::FKeywordSet::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Values.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Values"));
        for (const FString& item : Values)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FKeywordSet::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("Values"), Values);

    return HasSucceeded;
}

void PlayFab::EconomyModels::writeModerationStatusEnumJSON(ModerationStatus enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case ModerationStatusUnknown: writer->WriteValue(TEXT("Unknown")); break;
    case ModerationStatusAwaitingModeration: writer->WriteValue(TEXT("AwaitingModeration")); break;
    case ModerationStatusApproved: writer->WriteValue(TEXT("Approved")); break;
    case ModerationStatusRejected: writer->WriteValue(TEXT("Rejected")); break;
    }
}

EconomyModels::ModerationStatus PlayFab::EconomyModels::readModerationStatusFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readModerationStatusFromValue(value.IsValid() ? value->AsString() : "");
}

EconomyModels::ModerationStatus PlayFab::EconomyModels::readModerationStatusFromValue(const FString& value)
{
    static TMap<FString, ModerationStatus> _ModerationStatusMap;
    if (_ModerationStatusMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _ModerationStatusMap.Add(TEXT("Unknown"), ModerationStatusUnknown);
        _ModerationStatusMap.Add(TEXT("AwaitingModeration"), ModerationStatusAwaitingModeration);
        _ModerationStatusMap.Add(TEXT("Approved"), ModerationStatusApproved);
        _ModerationStatusMap.Add(TEXT("Rejected"), ModerationStatusRejected);

    }

    if (!value.IsEmpty())
    {
        auto output = _ModerationStatusMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return ModerationStatusUnknown; // Basically critical fail
}

PlayFab::EconomyModels::FModerationState::~FModerationState()
{

}

void PlayFab::EconomyModels::FModerationState::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (LastModifiedDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LastModifiedDate"));
        writeDatetime(LastModifiedDate, writer);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    if (Status.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        writeModerationStatusEnumJSON(Status, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FModerationState::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> LastModifiedDateValue = obj->TryGetField(TEXT("LastModifiedDate"));
    if (LastModifiedDateValue.IsValid())
        LastModifiedDate = readDatetime(LastModifiedDateValue);


    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    Status = readModerationStatusFromValue(obj->TryGetField(TEXT("Status")));

    return HasSucceeded;
}

PlayFab::EconomyModels::FRating::~FRating()
{

}

void PlayFab::EconomyModels::FRating::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Average.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Average"));
        writer->WriteValue(Average);
    }

    if (Count1Star.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Count1Star"));
        writer->WriteValue(Count1Star);
    }

    if (Count2Star.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Count2Star"));
        writer->WriteValue(Count2Star);
    }

    if (Count3Star.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Count3Star"));
        writer->WriteValue(Count3Star);
    }

    if (Count4Star.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Count4Star"));
        writer->WriteValue(Count4Star);
    }

    if (Count5Star.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Count5Star"));
        writer->WriteValue(Count5Star);
    }

    if (TotalCount.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("TotalCount"));
        writer->WriteValue(TotalCount);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRating::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AverageValue = obj->TryGetField(TEXT("Average"));
    if (AverageValue.IsValid() && !AverageValue->IsNull())
    {
        double TmpValue;
        if (AverageValue->TryGetNumber(TmpValue)) { Average = TmpValue; }
    }

    const TSharedPtr<FJsonValue> Count1StarValue = obj->TryGetField(TEXT("Count1Star"));
    if (Count1StarValue.IsValid() && !Count1StarValue->IsNull())
    {
        int32 TmpValue;
        if (Count1StarValue->TryGetNumber(TmpValue)) { Count1Star = TmpValue; }
    }

    const TSharedPtr<FJsonValue> Count2StarValue = obj->TryGetField(TEXT("Count2Star"));
    if (Count2StarValue.IsValid() && !Count2StarValue->IsNull())
    {
        int32 TmpValue;
        if (Count2StarValue->TryGetNumber(TmpValue)) { Count2Star = TmpValue; }
    }

    const TSharedPtr<FJsonValue> Count3StarValue = obj->TryGetField(TEXT("Count3Star"));
    if (Count3StarValue.IsValid() && !Count3StarValue->IsNull())
    {
        int32 TmpValue;
        if (Count3StarValue->TryGetNumber(TmpValue)) { Count3Star = TmpValue; }
    }

    const TSharedPtr<FJsonValue> Count4StarValue = obj->TryGetField(TEXT("Count4Star"));
    if (Count4StarValue.IsValid() && !Count4StarValue->IsNull())
    {
        int32 TmpValue;
        if (Count4StarValue->TryGetNumber(TmpValue)) { Count4Star = TmpValue; }
    }

    const TSharedPtr<FJsonValue> Count5StarValue = obj->TryGetField(TEXT("Count5Star"));
    if (Count5StarValue.IsValid() && !Count5StarValue->IsNull())
    {
        int32 TmpValue;
        if (Count5StarValue->TryGetNumber(TmpValue)) { Count5Star = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalCountValue = obj->TryGetField(TEXT("TotalCount"));
    if (TotalCountValue.IsValid() && !TotalCountValue->IsNull())
    {
        int32 TmpValue;
        if (TotalCountValue->TryGetNumber(TmpValue)) { TotalCount = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogItem::~FCatalogItem()
{
    //if (CreatorEntity != nullptr) delete CreatorEntity;
    //if (Moderation != nullptr) delete Moderation;
    //if (Rating != nullptr) delete Rating;

}

void PlayFab::EconomyModels::FCatalogItem::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AlternateIds"));
        for (const FCatalogAlternateId& item : AlternateIds)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Contents.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Contents"));
        for (const FContent& item : Contents)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (ContentType.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContentType"));
        writer->WriteValue(ContentType);
    }

    if (CreationDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("CreationDate"));
        writeDatetime(CreationDate, writer);
    }

    if (CreatorEntity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("CreatorEntity"));
        CreatorEntity->writeJSON(writer);
    }

    if (Description.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Description"));
        for (TMap<FString, FString>::TConstIterator It(Description); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (DisplayProperties.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayProperties"));
        DisplayProperties.writeJSON(writer);
    }

    if (DisplayVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayVersion"));
        writer->WriteValue(DisplayVersion);
    }

    if (EndDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("EndDate"));
        writeDatetime(EndDate, writer);
    }

    if (ETag.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ETag"));
        writer->WriteValue(ETag);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Images.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Images"));
        for (const FImage& item : Images)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (IsHidden.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IsHidden"));
        writer->WriteValue(IsHidden);
    }

    if (Keywords.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Keywords"));
        for (TMap<FString, FKeywordSet>::TConstIterator It(Keywords); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    if (LastModifiedDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LastModifiedDate"));
        writeDatetime(LastModifiedDate, writer);
    }

    if (Moderation.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Moderation"));
        Moderation->writeJSON(writer);
    }

    if (pfRating.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Rating"));
        pfRating->writeJSON(writer);
    }

    if (StartDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("StartDate"));
        writeDatetime(StartDate, writer);
    }

    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Title.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Title"));
        for (TMap<FString, FString>::TConstIterator It(Title); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogItem::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AlternateIdsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("AlternateIds"));
    for (int32 Idx = 0; Idx < AlternateIdsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AlternateIdsArray[Idx];
        AlternateIds.Add(FCatalogAlternateId(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&ContentsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Contents"));
    for (int32 Idx = 0; Idx < ContentsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ContentsArray[Idx];
        Contents.Add(FContent(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> ContentTypeValue = obj->TryGetField(TEXT("ContentType"));
    if (ContentTypeValue.IsValid() && !ContentTypeValue->IsNull())
    {
        FString TmpValue;
        if (ContentTypeValue->TryGetString(TmpValue)) { ContentType = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreationDateValue = obj->TryGetField(TEXT("CreationDate"));
    if (CreationDateValue.IsValid())
        CreationDate = readDatetime(CreationDateValue);


    const TSharedPtr<FJsonValue> CreatorEntityValue = obj->TryGetField(TEXT("CreatorEntity"));
    if (CreatorEntityValue.IsValid() && !CreatorEntityValue->IsNull())
    {
        CreatorEntity = MakeShareable(new FEntityKey(CreatorEntityValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* DescriptionObject;
    if (obj->TryGetObjectField(TEXT("Description"), DescriptionObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DescriptionObject)->Values); It; ++It)
        {
            Description.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DisplayPropertiesValue = obj->TryGetField(TEXT("DisplayProperties"));
    if (DisplayPropertiesValue.IsValid() && !DisplayPropertiesValue->IsNull())
    {
        DisplayProperties = FJsonKeeper(DisplayPropertiesValue);
    }

    const TSharedPtr<FJsonValue> DisplayVersionValue = obj->TryGetField(TEXT("DisplayVersion"));
    if (DisplayVersionValue.IsValid() && !DisplayVersionValue->IsNull())
    {
        FString TmpValue;
        if (DisplayVersionValue->TryGetString(TmpValue)) { DisplayVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EndDateValue = obj->TryGetField(TEXT("EndDate"));
    if (EndDateValue.IsValid())
        EndDate = readDatetime(EndDateValue);


    const TSharedPtr<FJsonValue> ETagValue = obj->TryGetField(TEXT("ETag"));
    if (ETagValue.IsValid() && !ETagValue->IsNull())
    {
        FString TmpValue;
        if (ETagValue->TryGetString(TmpValue)) { ETag = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ImagesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Images"));
    for (int32 Idx = 0; Idx < ImagesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ImagesArray[Idx];
        Images.Add(FImage(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> IsHiddenValue = obj->TryGetField(TEXT("IsHidden"));
    if (IsHiddenValue.IsValid() && !IsHiddenValue->IsNull())
    {
        bool TmpValue;
        if (IsHiddenValue->TryGetBool(TmpValue)) { IsHidden = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* KeywordsObject;
    if (obj->TryGetObjectField(TEXT("Keywords"), KeywordsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*KeywordsObject)->Values); It; ++It)
        {
            Keywords.Add(It.Key(), FKeywordSet(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> LastModifiedDateValue = obj->TryGetField(TEXT("LastModifiedDate"));
    if (LastModifiedDateValue.IsValid())
        LastModifiedDate = readDatetime(LastModifiedDateValue);


    const TSharedPtr<FJsonValue> ModerationValue = obj->TryGetField(TEXT("Moderation"));
    if (ModerationValue.IsValid() && !ModerationValue->IsNull())
    {
        Moderation = MakeShareable(new FModerationState(ModerationValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> RatingValue = obj->TryGetField(TEXT("Rating"));
    if (RatingValue.IsValid() && !RatingValue->IsNull())
    {
        pfRating = MakeShareable(new FRating(RatingValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> StartDateValue = obj->TryGetField(TEXT("StartDate"));
    if (StartDateValue.IsValid())
        StartDate = readDatetime(StartDateValue);


    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    const TSharedPtr<FJsonObject>* TitleObject;
    if (obj->TryGetObjectField(TEXT("Title"), TitleObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*TitleObject)->Values); It; ++It)
        {
            Title.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogPriceAmount::~FCatalogPriceAmount()
{

}

void PlayFab::EconomyModels::FCatalogPriceAmount::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogPriceAmount::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogPriceInstance::~FCatalogPriceInstance()
{

}

void PlayFab::EconomyModels::FCatalogPriceInstance::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Amounts.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Amounts"));
        for (const FCatalogPriceAmount& item : Amounts)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogPriceInstance::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AmountsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Amounts"));
    for (int32 Idx = 0; Idx < AmountsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AmountsArray[Idx];
        Amounts.Add(FCatalogPriceAmount(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogPrice::~FCatalogPrice()
{

}

void PlayFab::EconomyModels::FCatalogPrice::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Prices.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Prices"));
        for (const FCatalogPriceInstance& item : Prices)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (RealPrices.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("RealPrices"));
        for (const FCatalogPriceInstance& item : RealPrices)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Sort.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Sort"));
        writer->WriteValue(Sort);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogPrice::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&PricesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Prices"));
    for (int32 Idx = 0; Idx < PricesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PricesArray[Idx];
        Prices.Add(FCatalogPriceInstance(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&RealPricesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("RealPrices"));
    for (int32 Idx = 0; Idx < RealPricesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = RealPricesArray[Idx];
        RealPrices.Add(FCatalogPriceInstance(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> SortValue = obj->TryGetField(TEXT("Sort"));
    if (SortValue.IsValid() && !SortValue->IsNull())
    {
        int32 TmpValue;
        if (SortValue->TryGetNumber(TmpValue)) { Sort = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogItemReference::~FCatalogItemReference()
{
    //if (Price != nullptr) delete Price;

}

void PlayFab::EconomyModels::FCatalogItemReference::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Amount.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Amount"));
        writer->WriteValue(Amount);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Price.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Price"));
        Price->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogItemReference::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PriceValue = obj->TryGetField(TEXT("Price"));
    if (PriceValue.IsValid() && !PriceValue->IsNull())
    {
        Price = MakeShareable(new FCatalogPrice(PriceValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogSpecificConfig::~FCatalogSpecificConfig()
{

}

void PlayFab::EconomyModels::FCatalogSpecificConfig::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContentTypes.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ContentTypes"));
        for (const FString& item : ContentTypes)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogSpecificConfig::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("ContentTypes"), ContentTypes);

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    return HasSucceeded;
}

void PlayFab::EconomyModels::writeConcernCategoryEnumJSON(ConcernCategory enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case ConcernCategoryNone: writer->WriteValue(TEXT("None")); break;
    case ConcernCategoryOffensiveContent: writer->WriteValue(TEXT("OffensiveContent")); break;
    case ConcernCategoryChildExploitation: writer->WriteValue(TEXT("ChildExploitation")); break;
    case ConcernCategoryMalwareOrVirus: writer->WriteValue(TEXT("MalwareOrVirus")); break;
    case ConcernCategoryPrivacyConcerns: writer->WriteValue(TEXT("PrivacyConcerns")); break;
    case ConcernCategoryMisleadingApp: writer->WriteValue(TEXT("MisleadingApp")); break;
    case ConcernCategoryPoorPerformance: writer->WriteValue(TEXT("PoorPerformance")); break;
    case ConcernCategoryReviewResponse: writer->WriteValue(TEXT("ReviewResponse")); break;
    case ConcernCategorySpamAdvertising: writer->WriteValue(TEXT("SpamAdvertising")); break;
    case ConcernCategoryProfanity: writer->WriteValue(TEXT("Profanity")); break;
    }
}

EconomyModels::ConcernCategory PlayFab::EconomyModels::readConcernCategoryFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readConcernCategoryFromValue(value.IsValid() ? value->AsString() : "");
}

EconomyModels::ConcernCategory PlayFab::EconomyModels::readConcernCategoryFromValue(const FString& value)
{
    static TMap<FString, ConcernCategory> _ConcernCategoryMap;
    if (_ConcernCategoryMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _ConcernCategoryMap.Add(TEXT("None"), ConcernCategoryNone);
        _ConcernCategoryMap.Add(TEXT("OffensiveContent"), ConcernCategoryOffensiveContent);
        _ConcernCategoryMap.Add(TEXT("ChildExploitation"), ConcernCategoryChildExploitation);
        _ConcernCategoryMap.Add(TEXT("MalwareOrVirus"), ConcernCategoryMalwareOrVirus);
        _ConcernCategoryMap.Add(TEXT("PrivacyConcerns"), ConcernCategoryPrivacyConcerns);
        _ConcernCategoryMap.Add(TEXT("MisleadingApp"), ConcernCategoryMisleadingApp);
        _ConcernCategoryMap.Add(TEXT("PoorPerformance"), ConcernCategoryPoorPerformance);
        _ConcernCategoryMap.Add(TEXT("ReviewResponse"), ConcernCategoryReviewResponse);
        _ConcernCategoryMap.Add(TEXT("SpamAdvertising"), ConcernCategorySpamAdvertising);
        _ConcernCategoryMap.Add(TEXT("Profanity"), ConcernCategoryProfanity);

    }

    if (!value.IsEmpty())
    {
        auto output = _ConcernCategoryMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return ConcernCategoryNone; // Basically critical fail
}

PlayFab::EconomyModels::FCreateDraftItemRequest::~FCreateDraftItemRequest()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FCreateDraftItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Publish"));
    writer->WriteValue(Publish);

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCreateDraftItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FCatalogItem(ItemValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> PublishValue = obj->TryGetField(TEXT("Publish"));
    if (PublishValue.IsValid() && !PublishValue->IsNull())
    {
        bool TmpValue;
        if (PublishValue->TryGetBool(TmpValue)) { Publish = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCreateDraftItemResponse::~FCreateDraftItemResponse()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FCreateDraftItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCreateDraftItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FCatalogItem(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FUploadInfo::~FUploadInfo()
{

}

void PlayFab::EconomyModels::FUploadInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FileName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FileName"));
        writer->WriteValue(FileName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUploadInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FileNameValue = obj->TryGetField(TEXT("FileName"));
    if (FileNameValue.IsValid() && !FileNameValue->IsNull())
    {
        FString TmpValue;
        if (FileNameValue->TryGetString(TmpValue)) { FileName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCreateUploadUrlsRequest::~FCreateUploadUrlsRequest()
{

}

void PlayFab::EconomyModels::FCreateUploadUrlsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Files.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Files"));
        for (const FUploadInfo& item : Files)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCreateUploadUrlsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TArray<TSharedPtr<FJsonValue>>&FilesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Files"));
    for (int32 Idx = 0; Idx < FilesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = FilesArray[Idx];
        Files.Add(FUploadInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FUploadUrlMetadata::~FUploadUrlMetadata()
{

}

void PlayFab::EconomyModels::FUploadUrlMetadata::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FileName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FileName"));
        writer->WriteValue(FileName);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Url.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Url"));
        writer->WriteValue(Url);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUploadUrlMetadata::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FileNameValue = obj->TryGetField(TEXT("FileName"));
    if (FileNameValue.IsValid() && !FileNameValue->IsNull())
    {
        FString TmpValue;
        if (FileNameValue->TryGetString(TmpValue)) { FileName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UrlValue = obj->TryGetField(TEXT("Url"));
    if (UrlValue.IsValid() && !UrlValue->IsNull())
    {
        FString TmpValue;
        if (UrlValue->TryGetString(TmpValue)) { Url = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCreateUploadUrlsResponse::~FCreateUploadUrlsResponse()
{

}

void PlayFab::EconomyModels::FCreateUploadUrlsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (UploadUrls.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("UploadUrls"));
        for (const FUploadUrlMetadata& item : UploadUrls)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCreateUploadUrlsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&UploadUrlsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("UploadUrls"));
    for (int32 Idx = 0; Idx < UploadUrlsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = UploadUrlsArray[Idx];
        UploadUrls.Add(FUploadUrlMetadata(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FDeepLinkFormat::~FDeepLinkFormat()
{

}

void PlayFab::EconomyModels::FDeepLinkFormat::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Format.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Format"));
        writer->WriteValue(Format);
    }

    if (Platform.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writer->WriteValue(Platform);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeepLinkFormat::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FormatValue = obj->TryGetField(TEXT("Format"));
    if (FormatValue.IsValid() && !FormatValue->IsNull())
    {
        FString TmpValue;
        if (FormatValue->TryGetString(TmpValue)) { Format = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlatformValue = obj->TryGetField(TEXT("Platform"));
    if (PlatformValue.IsValid() && !PlatformValue->IsNull())
    {
        FString TmpValue;
        if (PlatformValue->TryGetString(TmpValue)) { Platform = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FDeleteEntityItemReviewsRequest::~FDeleteEntityItemReviewsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FDeleteEntityItemReviewsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeleteEntityItemReviewsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FDeleteEntityItemReviewsResponse::~FDeleteEntityItemReviewsResponse()
{

}

void PlayFab::EconomyModels::FDeleteEntityItemReviewsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeleteEntityItemReviewsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FDeleteItemRequest::~FDeleteItemRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FDeleteItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeleteItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FDeleteItemResponse::~FDeleteItemResponse()
{

}

void PlayFab::EconomyModels::FDeleteItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeleteItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FFilterOptions::~FFilterOptions()
{

}

void PlayFab::EconomyModels::FFilterOptions::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FFilterOptions::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetCatalogConfigRequest::~FGetCatalogConfigRequest()
{

}

void PlayFab::EconomyModels::FGetCatalogConfigRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetCatalogConfigRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetCatalogConfigResponse::~FGetCatalogConfigResponse()
{
    //if (Config != nullptr) delete Config;

}

void PlayFab::EconomyModels::FGetCatalogConfigResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Config.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Config"));
        Config->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetCatalogConfigResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ConfigValue = obj->TryGetField(TEXT("Config"));
    if (ConfigValue.IsValid() && !ConfigValue->IsNull())
    {
        Config = MakeShareable(new FCatalogConfig(ConfigValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetDraftItemRequest::~FGetDraftItemRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetDraftItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetDraftItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetDraftItemResponse::~FGetDraftItemResponse()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FGetDraftItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetDraftItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FCatalogItem(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetDraftItemsRequest::~FGetDraftItemsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetDraftItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AlternateIds"));
        for (const FCatalogAlternateId& item : AlternateIds)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Ids.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Ids"));
        for (const FString& item : Ids)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetDraftItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AlternateIdsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("AlternateIds"));
    for (int32 Idx = 0; Idx < AlternateIdsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AlternateIdsArray[Idx];
        AlternateIds.Add(FCatalogAlternateId(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    obj->TryGetStringArrayField(TEXT("Ids"), Ids);

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetDraftItemsResponse::~FGetDraftItemsResponse()
{

}

void PlayFab::EconomyModels::FGetDraftItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    if (Items.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Items"));
        for (const FCatalogItem& item : Items)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetDraftItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ItemsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Items"));
    for (int32 Idx = 0; Idx < ItemsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemsArray[Idx];
        Items.Add(FCatalogItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FGetEntityDraftItemsRequest::~FGetEntityDraftItemsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetEntityDraftItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    writer->WriteIdentifierPrefix(TEXT("Count"));
    writer->WriteValue(Count);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetEntityDraftItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CountValue = obj->TryGetField(TEXT("Count"));
    if (CountValue.IsValid() && !CountValue->IsNull())
    {
        int32 TmpValue;
        if (CountValue->TryGetNumber(TmpValue)) { Count = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetEntityDraftItemsResponse::~FGetEntityDraftItemsResponse()
{

}

void PlayFab::EconomyModels::FGetEntityDraftItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    if (Items.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Items"));
        for (const FCatalogItem& item : Items)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetEntityDraftItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ItemsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Items"));
    for (int32 Idx = 0; Idx < ItemsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemsArray[Idx];
        Items.Add(FCatalogItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FGetEntityItemReviewRequest::~FGetEntityItemReviewRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetEntityItemReviewRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetEntityItemReviewRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FReview::~FReview()
{

}

void PlayFab::EconomyModels::FReview::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("HelpfulNegative"));
    writer->WriteValue(HelpfulNegative);

    writer->WriteIdentifierPrefix(TEXT("HelpfulPositive"));
    writer->WriteValue(HelpfulPositive);

    writer->WriteIdentifierPrefix(TEXT("IsInstalled"));
    writer->WriteValue(IsInstalled);

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (ItemVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemVersion"));
        writer->WriteValue(ItemVersion);
    }

    if (Locale.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Locale"));
        writer->WriteValue(Locale);
    }

    writer->WriteIdentifierPrefix(TEXT("Rating"));
    writer->WriteValue(Rating);

    if (ReviewerId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ReviewerId"));
        writer->WriteValue(ReviewerId);
    }

    if (ReviewId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ReviewId"));
        writer->WriteValue(ReviewId);
    }

    if (ReviewText.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ReviewText"));
        writer->WriteValue(ReviewText);
    }

    writer->WriteIdentifierPrefix(TEXT("Submitted"));
    writeDatetime(Submitted, writer);

    if (Title.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Title"));
        writer->WriteValue(Title);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReview::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> HelpfulNegativeValue = obj->TryGetField(TEXT("HelpfulNegative"));
    if (HelpfulNegativeValue.IsValid() && !HelpfulNegativeValue->IsNull())
    {
        int32 TmpValue;
        if (HelpfulNegativeValue->TryGetNumber(TmpValue)) { HelpfulNegative = TmpValue; }
    }

    const TSharedPtr<FJsonValue> HelpfulPositiveValue = obj->TryGetField(TEXT("HelpfulPositive"));
    if (HelpfulPositiveValue.IsValid() && !HelpfulPositiveValue->IsNull())
    {
        int32 TmpValue;
        if (HelpfulPositiveValue->TryGetNumber(TmpValue)) { HelpfulPositive = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IsInstalledValue = obj->TryGetField(TEXT("IsInstalled"));
    if (IsInstalledValue.IsValid() && !IsInstalledValue->IsNull())
    {
        bool TmpValue;
        if (IsInstalledValue->TryGetBool(TmpValue)) { IsInstalled = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemVersionValue = obj->TryGetField(TEXT("ItemVersion"));
    if (ItemVersionValue.IsValid() && !ItemVersionValue->IsNull())
    {
        FString TmpValue;
        if (ItemVersionValue->TryGetString(TmpValue)) { ItemVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LocaleValue = obj->TryGetField(TEXT("Locale"));
    if (LocaleValue.IsValid() && !LocaleValue->IsNull())
    {
        FString TmpValue;
        if (LocaleValue->TryGetString(TmpValue)) { Locale = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RatingValue = obj->TryGetField(TEXT("Rating"));
    if (RatingValue.IsValid() && !RatingValue->IsNull())
    {
        int32 TmpValue;
        if (RatingValue->TryGetNumber(TmpValue)) { Rating = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReviewerIdValue = obj->TryGetField(TEXT("ReviewerId"));
    if (ReviewerIdValue.IsValid() && !ReviewerIdValue->IsNull())
    {
        FString TmpValue;
        if (ReviewerIdValue->TryGetString(TmpValue)) { ReviewerId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReviewIdValue = obj->TryGetField(TEXT("ReviewId"));
    if (ReviewIdValue.IsValid() && !ReviewIdValue->IsNull())
    {
        FString TmpValue;
        if (ReviewIdValue->TryGetString(TmpValue)) { ReviewId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReviewTextValue = obj->TryGetField(TEXT("ReviewText"));
    if (ReviewTextValue.IsValid() && !ReviewTextValue->IsNull())
    {
        FString TmpValue;
        if (ReviewTextValue->TryGetString(TmpValue)) { ReviewText = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SubmittedValue = obj->TryGetField(TEXT("Submitted"));
    if (SubmittedValue.IsValid())
        Submitted = readDatetime(SubmittedValue);


    const TSharedPtr<FJsonValue> TitleValue = obj->TryGetField(TEXT("Title"));
    if (TitleValue.IsValid() && !TitleValue->IsNull())
    {
        FString TmpValue;
        if (TitleValue->TryGetString(TmpValue)) { Title = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetEntityItemReviewResponse::~FGetEntityItemReviewResponse()
{
    //if (Review != nullptr) delete Review;

}

void PlayFab::EconomyModels::FGetEntityItemReviewResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (pfReview.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Review"));
        pfReview->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetEntityItemReviewResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ReviewValue = obj->TryGetField(TEXT("Review"));
    if (ReviewValue.IsValid() && !ReviewValue->IsNull())
    {
        pfReview = MakeShareable(new FReview(ReviewValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemModerationStateRequest::~FGetItemModerationStateRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;

}

void PlayFab::EconomyModels::FGetItemModerationStateRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemModerationStateRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemModerationStateResponse::~FGetItemModerationStateResponse()
{
    //if (State != nullptr) delete State;

}

void PlayFab::EconomyModels::FGetItemModerationStateResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (State.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("State"));
        State->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemModerationStateResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> StateValue = obj->TryGetField(TEXT("State"));
    if (StateValue.IsValid() && !StateValue->IsNull())
    {
        State = MakeShareable(new FModerationState(StateValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemPublishStatusRequest::~FGetItemPublishStatusRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetItemPublishStatusRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemPublishStatusRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::EconomyModels::writePublishResultEnumJSON(PublishResult enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case PublishResultUnknown: writer->WriteValue(TEXT("Unknown")); break;
    case PublishResultPending: writer->WriteValue(TEXT("Pending")); break;
    case PublishResultSucceeded: writer->WriteValue(TEXT("Succeeded")); break;
    case PublishResultFailed: writer->WriteValue(TEXT("Failed")); break;
    case PublishResultCanceled: writer->WriteValue(TEXT("Canceled")); break;
    }
}

EconomyModels::PublishResult PlayFab::EconomyModels::readPublishResultFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readPublishResultFromValue(value.IsValid() ? value->AsString() : "");
}

EconomyModels::PublishResult PlayFab::EconomyModels::readPublishResultFromValue(const FString& value)
{
    static TMap<FString, PublishResult> _PublishResultMap;
    if (_PublishResultMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _PublishResultMap.Add(TEXT("Unknown"), PublishResultUnknown);
        _PublishResultMap.Add(TEXT("Pending"), PublishResultPending);
        _PublishResultMap.Add(TEXT("Succeeded"), PublishResultSucceeded);
        _PublishResultMap.Add(TEXT("Failed"), PublishResultFailed);
        _PublishResultMap.Add(TEXT("Canceled"), PublishResultCanceled);

    }

    if (!value.IsEmpty())
    {
        auto output = _PublishResultMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return PublishResultUnknown; // Basically critical fail
}

PlayFab::EconomyModels::FGetItemPublishStatusResponse::~FGetItemPublishStatusResponse()
{

}

void PlayFab::EconomyModels::FGetItemPublishStatusResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Result.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Result"));
        writePublishResultEnumJSON(Result, writer);
    }

    if (StatusMessage.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StatusMessage"));
        writer->WriteValue(StatusMessage);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemPublishStatusResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    Result = readPublishResultFromValue(obj->TryGetField(TEXT("Result")));

    const TSharedPtr<FJsonValue> StatusMessageValue = obj->TryGetField(TEXT("StatusMessage"));
    if (StatusMessageValue.IsValid() && !StatusMessageValue->IsNull())
    {
        FString TmpValue;
        if (StatusMessageValue->TryGetString(TmpValue)) { StatusMessage = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemRequest::~FGetItemRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemResponse::~FGetItemResponse()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FGetItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FCatalogItem(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemReviewsRequest::~FGetItemReviewsRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;

}

void PlayFab::EconomyModels::FGetItemReviewsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    writer->WriteIdentifierPrefix(TEXT("Count"));
    writer->WriteValue(Count);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (OrderBy.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OrderBy"));
        writer->WriteValue(OrderBy);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemReviewsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CountValue = obj->TryGetField(TEXT("Count"));
    if (CountValue.IsValid() && !CountValue->IsNull())
    {
        int32 TmpValue;
        if (CountValue->TryGetNumber(TmpValue)) { Count = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OrderByValue = obj->TryGetField(TEXT("OrderBy"));
    if (OrderByValue.IsValid() && !OrderByValue->IsNull())
    {
        FString TmpValue;
        if (OrderByValue->TryGetString(TmpValue)) { OrderBy = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemReviewsResponse::~FGetItemReviewsResponse()
{

}

void PlayFab::EconomyModels::FGetItemReviewsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    if (Reviews.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Reviews"));
        for (const FReview& item : Reviews)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemReviewsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ReviewsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Reviews"));
    for (int32 Idx = 0; Idx < ReviewsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ReviewsArray[Idx];
        Reviews.Add(FReview(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemReviewSummaryRequest::~FGetItemReviewSummaryRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;

}

void PlayFab::EconomyModels::FGetItemReviewSummaryRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemReviewSummaryRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemReviewSummaryResponse::~FGetItemReviewSummaryResponse()
{
    //if (LeastFavorableReview != nullptr) delete LeastFavorableReview;
    //if (MostFavorableReview != nullptr) delete MostFavorableReview;
    //if (Rating != nullptr) delete Rating;

}

void PlayFab::EconomyModels::FGetItemReviewSummaryResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (LeastFavorableReview.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("LeastFavorableReview"));
        LeastFavorableReview->writeJSON(writer);
    }

    if (MostFavorableReview.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("MostFavorableReview"));
        MostFavorableReview->writeJSON(writer);
    }

    if (pfRating.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Rating"));
        pfRating->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("ReviewsCount"));
    writer->WriteValue(ReviewsCount);

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemReviewSummaryResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> LeastFavorableReviewValue = obj->TryGetField(TEXT("LeastFavorableReview"));
    if (LeastFavorableReviewValue.IsValid() && !LeastFavorableReviewValue->IsNull())
    {
        LeastFavorableReview = MakeShareable(new FReview(LeastFavorableReviewValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> MostFavorableReviewValue = obj->TryGetField(TEXT("MostFavorableReview"));
    if (MostFavorableReviewValue.IsValid() && !MostFavorableReviewValue->IsNull())
    {
        MostFavorableReview = MakeShareable(new FReview(MostFavorableReviewValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> RatingValue = obj->TryGetField(TEXT("Rating"));
    if (RatingValue.IsValid() && !RatingValue->IsNull())
    {
        pfRating = MakeShareable(new FRating(RatingValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ReviewsCountValue = obj->TryGetField(TEXT("ReviewsCount"));
    if (ReviewsCountValue.IsValid() && !ReviewsCountValue->IsNull())
    {
        int32 TmpValue;
        if (ReviewsCountValue->TryGetNumber(TmpValue)) { ReviewsCount = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemsRequest::~FGetItemsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AlternateIds"));
        for (const FCatalogAlternateId& item : AlternateIds)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Ids.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Ids"));
        for (const FString& item : Ids)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AlternateIdsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("AlternateIds"));
    for (int32 Idx = 0; Idx < AlternateIdsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AlternateIdsArray[Idx];
        AlternateIds.Add(FCatalogAlternateId(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    obj->TryGetStringArrayField(TEXT("Ids"), Ids);

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemsResponse::~FGetItemsResponse()
{

}

void PlayFab::EconomyModels::FGetItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Items.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Items"));
        for (const FCatalogItem& item : Items)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ItemsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Items"));
    for (int32 Idx = 0; Idx < ItemsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemsArray[Idx];
        Items.Add(FCatalogItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

void PlayFab::EconomyModels::writeHelpfulnessVoteEnumJSON(HelpfulnessVote enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case HelpfulnessVoteNone: writer->WriteValue(TEXT("None")); break;
    case HelpfulnessVoteUnHelpful: writer->WriteValue(TEXT("UnHelpful")); break;
    case HelpfulnessVoteHelpful: writer->WriteValue(TEXT("Helpful")); break;
    }
}

EconomyModels::HelpfulnessVote PlayFab::EconomyModels::readHelpfulnessVoteFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readHelpfulnessVoteFromValue(value.IsValid() ? value->AsString() : "");
}

EconomyModels::HelpfulnessVote PlayFab::EconomyModels::readHelpfulnessVoteFromValue(const FString& value)
{
    static TMap<FString, HelpfulnessVote> _HelpfulnessVoteMap;
    if (_HelpfulnessVoteMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _HelpfulnessVoteMap.Add(TEXT("None"), HelpfulnessVoteNone);
        _HelpfulnessVoteMap.Add(TEXT("UnHelpful"), HelpfulnessVoteUnHelpful);
        _HelpfulnessVoteMap.Add(TEXT("Helpful"), HelpfulnessVoteHelpful);

    }

    if (!value.IsEmpty())
    {
        auto output = _HelpfulnessVoteMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return HelpfulnessVoteNone; // Basically critical fail
}

PlayFab::EconomyModels::FPayoutDetails::~FPayoutDetails()
{

}

void PlayFab::EconomyModels::FPayoutDetails::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AccountSellerId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AccountSellerId"));
        writer->WriteValue(AccountSellerId);
    }

    if (TaxCode.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TaxCode"));
        writer->WriteValue(TaxCode);
    }

    if (Uaid.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Uaid"));
        writer->WriteValue(Uaid);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FPayoutDetails::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AccountSellerIdValue = obj->TryGetField(TEXT("AccountSellerId"));
    if (AccountSellerIdValue.IsValid() && !AccountSellerIdValue->IsNull())
    {
        FString TmpValue;
        if (AccountSellerIdValue->TryGetString(TmpValue)) { AccountSellerId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TaxCodeValue = obj->TryGetField(TEXT("TaxCode"));
    if (TaxCodeValue.IsValid() && !TaxCodeValue->IsNull())
    {
        FString TmpValue;
        if (TaxCodeValue->TryGetString(TmpValue)) { TaxCode = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UaidValue = obj->TryGetField(TEXT("Uaid"));
    if (UaidValue.IsValid() && !UaidValue->IsNull())
    {
        FString TmpValue;
        if (UaidValue->TryGetString(TmpValue)) { Uaid = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FPriceOverride::~FPriceOverride()
{

}

void PlayFab::EconomyModels::FPriceOverride::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FPriceOverride::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FPricesOverride::~FPricesOverride()
{

}

void PlayFab::EconomyModels::FPricesOverride::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FPricesOverride::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FPublishDraftItemRequest::~FPublishDraftItemRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FPublishDraftItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ETag.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ETag"));
        writer->WriteValue(ETag);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FPublishDraftItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ETagValue = obj->TryGetField(TEXT("ETag"));
    if (ETagValue.IsValid() && !ETagValue->IsNull())
    {
        FString TmpValue;
        if (ETagValue->TryGetString(TmpValue)) { ETag = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FPublishDraftItemResponse::~FPublishDraftItemResponse()
{

}

void PlayFab::EconomyModels::FPublishDraftItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FPublishDraftItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FPurchaseOverride::~FPurchaseOverride()
{

}

void PlayFab::EconomyModels::FPurchaseOverride::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FPurchaseOverride::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FReportItemRequest::~FReportItemRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FReportItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (pfConcernCategory.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ConcernCategory"));
        writeConcernCategoryEnumJSON(pfConcernCategory, writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReportItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    pfConcernCategory = readConcernCategoryFromValue(obj->TryGetField(TEXT("ConcernCategory")));

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FReportItemResponse::~FReportItemResponse()
{

}

void PlayFab::EconomyModels::FReportItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReportItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FReportItemReviewRequest::~FReportItemReviewRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FReportItemReviewRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (pfConcernCategory.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ConcernCategory"));
        writeConcernCategoryEnumJSON(pfConcernCategory, writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    if (ReviewId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ReviewId"));
        writer->WriteValue(ReviewId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReportItemReviewRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    pfConcernCategory = readConcernCategoryFromValue(obj->TryGetField(TEXT("ConcernCategory")));

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReviewIdValue = obj->TryGetField(TEXT("ReviewId"));
    if (ReviewIdValue.IsValid() && !ReviewIdValue->IsNull())
    {
        FString TmpValue;
        if (ReviewIdValue->TryGetString(TmpValue)) { ReviewId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FReportItemReviewResponse::~FReportItemReviewResponse()
{

}

void PlayFab::EconomyModels::FReportItemReviewResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReportItemReviewResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FReviewItemRequest::~FReviewItemRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;
    //if (Review != nullptr) delete Review;

}

void PlayFab::EconomyModels::FReviewItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (pfReview.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Review"));
        pfReview->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReviewItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReviewValue = obj->TryGetField(TEXT("Review"));
    if (ReviewValue.IsValid() && !ReviewValue->IsNull())
    {
        pfReview = MakeShareable(new FReview(ReviewValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FReviewItemResponse::~FReviewItemResponse()
{

}

void PlayFab::EconomyModels::FReviewItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReviewItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FReviewTakedown::~FReviewTakedown()
{
    //if (AlternateId != nullptr) delete AlternateId;

}

void PlayFab::EconomyModels::FReviewTakedown::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (ReviewId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ReviewId"));
        writer->WriteValue(ReviewId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReviewTakedown::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReviewIdValue = obj->TryGetField(TEXT("ReviewId"));
    if (ReviewIdValue.IsValid() && !ReviewIdValue->IsNull())
    {
        FString TmpValue;
        if (ReviewIdValue->TryGetString(TmpValue)) { ReviewId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FScanResult::~FScanResult()
{

}

void PlayFab::EconomyModels::FScanResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Url.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Url"));
        writer->WriteValue(Url);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FScanResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> UrlValue = obj->TryGetField(TEXT("Url"));
    if (UrlValue.IsValid() && !UrlValue->IsNull())
    {
        FString TmpValue;
        if (UrlValue->TryGetString(TmpValue)) { Url = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FSearchItemsRequest::~FSearchItemsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FSearchItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    writer->WriteIdentifierPrefix(TEXT("Count"));
    writer->WriteValue(Count);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Filter.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Filter"));
        writer->WriteValue(Filter);
    }

    if (OrderBy.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OrderBy"));
        writer->WriteValue(OrderBy);
    }

    if (Search.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Search"));
        writer->WriteValue(Search);
    }

    if (Select.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Select"));
        writer->WriteValue(Select);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSearchItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CountValue = obj->TryGetField(TEXT("Count"));
    if (CountValue.IsValid() && !CountValue->IsNull())
    {
        int32 TmpValue;
        if (CountValue->TryGetNumber(TmpValue)) { Count = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> FilterValue = obj->TryGetField(TEXT("Filter"));
    if (FilterValue.IsValid() && !FilterValue->IsNull())
    {
        FString TmpValue;
        if (FilterValue->TryGetString(TmpValue)) { Filter = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OrderByValue = obj->TryGetField(TEXT("OrderBy"));
    if (OrderByValue.IsValid() && !OrderByValue->IsNull())
    {
        FString TmpValue;
        if (OrderByValue->TryGetString(TmpValue)) { OrderBy = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SearchValue = obj->TryGetField(TEXT("Search"));
    if (SearchValue.IsValid() && !SearchValue->IsNull())
    {
        FString TmpValue;
        if (SearchValue->TryGetString(TmpValue)) { Search = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SelectValue = obj->TryGetField(TEXT("Select"));
    if (SelectValue.IsValid() && !SelectValue->IsNull())
    {
        FString TmpValue;
        if (SelectValue->TryGetString(TmpValue)) { Select = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FSearchItemsResponse::~FSearchItemsResponse()
{

}

void PlayFab::EconomyModels::FSearchItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    if (Items.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Items"));
        for (const FCatalogItem& item : Items)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSearchItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ItemsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Items"));
    for (int32 Idx = 0; Idx < ItemsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemsArray[Idx];
        Items.Add(FCatalogItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FSetItemModerationStateRequest::~FSetItemModerationStateRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;

}

void PlayFab::EconomyModels::FSetItemModerationStateRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    if (Status.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        writeModerationStatusEnumJSON(Status, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSetItemModerationStateRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    Status = readModerationStatusFromValue(obj->TryGetField(TEXT("Status")));

    return HasSucceeded;
}

PlayFab::EconomyModels::FSetItemModerationStateResponse::~FSetItemModerationStateResponse()
{

}

void PlayFab::EconomyModels::FSetItemModerationStateResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSetItemModerationStateResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FStoreDetails::~FStoreDetails()
{

}

void PlayFab::EconomyModels::FStoreDetails::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FStoreDetails::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FStoreInfo::~FStoreInfo()
{
    //if (AlternateId != nullptr) delete AlternateId;

}

void PlayFab::EconomyModels::FStoreInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FStoreInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FSubmitItemReviewVoteRequest::~FSubmitItemReviewVoteRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FSubmitItemReviewVoteRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (ReviewId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ReviewId"));
        writer->WriteValue(ReviewId);
    }

    if (Vote.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Vote"));
        writeHelpfulnessVoteEnumJSON(Vote, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSubmitItemReviewVoteRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReviewIdValue = obj->TryGetField(TEXT("ReviewId"));
    if (ReviewIdValue.IsValid() && !ReviewIdValue->IsNull())
    {
        FString TmpValue;
        if (ReviewIdValue->TryGetString(TmpValue)) { ReviewId = TmpValue; }
    }

    Vote = readHelpfulnessVoteFromValue(obj->TryGetField(TEXT("Vote")));

    return HasSucceeded;
}

PlayFab::EconomyModels::FSubmitItemReviewVoteResponse::~FSubmitItemReviewVoteResponse()
{

}

void PlayFab::EconomyModels::FSubmitItemReviewVoteResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSubmitItemReviewVoteResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FSubscriptionDetails::~FSubscriptionDetails()
{

}

void PlayFab::EconomyModels::FSubscriptionDetails::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("DurationInSeconds"));
    writer->WriteValue(DurationInSeconds);

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSubscriptionDetails::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DurationInSecondsValue = obj->TryGetField(TEXT("DurationInSeconds"));
    if (DurationInSecondsValue.IsValid() && !DurationInSecondsValue->IsNull())
    {
        double TmpValue;
        if (DurationInSecondsValue->TryGetNumber(TmpValue)) { DurationInSeconds = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FTakedownItemReviewsRequest::~FTakedownItemReviewsRequest()
{

}

void PlayFab::EconomyModels::FTakedownItemReviewsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Reviews.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Reviews"));
        for (const FReviewTakedown& item : Reviews)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FTakedownItemReviewsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TArray<TSharedPtr<FJsonValue>>&ReviewsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Reviews"));
    for (int32 Idx = 0; Idx < ReviewsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ReviewsArray[Idx];
        Reviews.Add(FReviewTakedown(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FTakedownItemReviewsResponse::~FTakedownItemReviewsResponse()
{

}

void PlayFab::EconomyModels::FTakedownItemReviewsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FTakedownItemReviewsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FUpdateCatalogConfigRequest::~FUpdateCatalogConfigRequest()
{
    //if (Config != nullptr) delete Config;

}

void PlayFab::EconomyModels::FUpdateCatalogConfigRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Config.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Config"));
        Config->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUpdateCatalogConfigRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ConfigValue = obj->TryGetField(TEXT("Config"));
    if (ConfigValue.IsValid() && !ConfigValue->IsNull())
    {
        Config = MakeShareable(new FCatalogConfig(ConfigValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FUpdateCatalogConfigResponse::~FUpdateCatalogConfigResponse()
{

}

void PlayFab::EconomyModels::FUpdateCatalogConfigResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUpdateCatalogConfigResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FUpdateDraftItemRequest::~FUpdateDraftItemRequest()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FUpdateDraftItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Publish"));
    writer->WriteValue(Publish);

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUpdateDraftItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FCatalogItem(ItemValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> PublishValue = obj->TryGetField(TEXT("Publish"));
    if (PublishValue.IsValid() && !PublishValue->IsNull())
    {
        bool TmpValue;
        if (PublishValue->TryGetBool(TmpValue)) { Publish = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FUpdateDraftItemResponse::~FUpdateDraftItemResponse()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FUpdateDraftItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUpdateDraftItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FCatalogItem(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

