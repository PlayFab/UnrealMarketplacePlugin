//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "Core/PlayFabServerDataModels.h"
#include "Core/PlayFabJsonHelpers.h"

using namespace PlayFab;
using namespace PlayFab::ServerModels;

PlayFab::ServerModels::FAdCampaignAttribution::~FAdCampaignAttribution()
{

}

void PlayFab::ServerModels::FAdCampaignAttribution::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("AttributedAt"));
    writeDatetime(AttributedAt, writer);

    if (CampaignId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CampaignId"));
        writer->WriteValue(CampaignId);
    }

    if (Platform.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writer->WriteValue(Platform);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAdCampaignAttribution::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AttributedAtValue = obj->TryGetField(TEXT("AttributedAt"));
    if (AttributedAtValue.IsValid())
        AttributedAt = readDatetime(AttributedAtValue);


    const TSharedPtr<FJsonValue> CampaignIdValue = obj->TryGetField(TEXT("CampaignId"));
    if (CampaignIdValue.IsValid() && !CampaignIdValue->IsNull())
    {
        FString TmpValue;
        if (CampaignIdValue->TryGetString(TmpValue)) { CampaignId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlatformValue = obj->TryGetField(TEXT("Platform"));
    if (PlatformValue.IsValid() && !PlatformValue->IsNull())
    {
        FString TmpValue;
        if (PlatformValue->TryGetString(TmpValue)) { Platform = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FAdCampaignAttributionModel::~FAdCampaignAttributionModel()
{

}

void PlayFab::ServerModels::FAdCampaignAttributionModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("AttributedAt"));
    writeDatetime(AttributedAt, writer);

    if (CampaignId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CampaignId"));
        writer->WriteValue(CampaignId);
    }

    if (Platform.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writer->WriteValue(Platform);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAdCampaignAttributionModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AttributedAtValue = obj->TryGetField(TEXT("AttributedAt"));
    if (AttributedAtValue.IsValid())
        AttributedAt = readDatetime(AttributedAtValue);


    const TSharedPtr<FJsonValue> CampaignIdValue = obj->TryGetField(TEXT("CampaignId"));
    if (CampaignIdValue.IsValid() && !CampaignIdValue->IsNull())
    {
        FString TmpValue;
        if (CampaignIdValue->TryGetString(TmpValue)) { CampaignId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlatformValue = obj->TryGetField(TEXT("Platform"));
    if (PlatformValue.IsValid() && !PlatformValue->IsNull())
    {
        FString TmpValue;
        if (PlatformValue->TryGetString(TmpValue)) { Platform = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FAddCharacterVirtualCurrencyRequest::~FAddCharacterVirtualCurrencyRequest()
{

}

void PlayFab::ServerModels::FAddCharacterVirtualCurrencyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (!CharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddCharacterVirtualCurrencyRequest::CharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddCharacterVirtualCurrencyRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!VirtualCurrency.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddCharacterVirtualCurrencyRequest::VirtualCurrency, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("VirtualCurrency"));
        writer->WriteValue(VirtualCurrency);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAddCharacterVirtualCurrencyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VirtualCurrencyValue = obj->TryGetField(TEXT("VirtualCurrency"));
    if (VirtualCurrencyValue.IsValid() && !VirtualCurrencyValue->IsNull())
    {
        FString TmpValue;
        if (VirtualCurrencyValue->TryGetString(TmpValue)) { VirtualCurrency = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FAddFriendRequest::~FAddFriendRequest()
{

}

void PlayFab::ServerModels::FAddFriendRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FriendEmail.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FriendEmail"));
        writer->WriteValue(FriendEmail);
    }

    if (FriendPlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FriendPlayFabId"));
        writer->WriteValue(FriendPlayFabId);
    }

    if (FriendTitleDisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FriendTitleDisplayName"));
        writer->WriteValue(FriendTitleDisplayName);
    }

    if (FriendUsername.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FriendUsername"));
        writer->WriteValue(FriendUsername);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddFriendRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAddFriendRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FriendEmailValue = obj->TryGetField(TEXT("FriendEmail"));
    if (FriendEmailValue.IsValid() && !FriendEmailValue->IsNull())
    {
        FString TmpValue;
        if (FriendEmailValue->TryGetString(TmpValue)) { FriendEmail = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FriendPlayFabIdValue = obj->TryGetField(TEXT("FriendPlayFabId"));
    if (FriendPlayFabIdValue.IsValid() && !FriendPlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (FriendPlayFabIdValue->TryGetString(TmpValue)) { FriendPlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FriendTitleDisplayNameValue = obj->TryGetField(TEXT("FriendTitleDisplayName"));
    if (FriendTitleDisplayNameValue.IsValid() && !FriendTitleDisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (FriendTitleDisplayNameValue->TryGetString(TmpValue)) { FriendTitleDisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FriendUsernameValue = obj->TryGetField(TEXT("FriendUsername"));
    if (FriendUsernameValue.IsValid() && !FriendUsernameValue->IsNull())
    {
        FString TmpValue;
        if (FriendUsernameValue->TryGetString(TmpValue)) { FriendUsername = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGenericServiceId::~FGenericServiceId()
{

}

void PlayFab::ServerModels::FGenericServiceId::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!ServiceName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GenericServiceId::ServiceName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ServiceName"));
        writer->WriteValue(ServiceName);
    }

    if (!UserId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GenericServiceId::UserId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("UserId"));
        writer->WriteValue(UserId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGenericServiceId::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ServiceNameValue = obj->TryGetField(TEXT("ServiceName"));
    if (ServiceNameValue.IsValid() && !ServiceNameValue->IsNull())
    {
        FString TmpValue;
        if (ServiceNameValue->TryGetString(TmpValue)) { ServiceName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UserIdValue = obj->TryGetField(TEXT("UserId"));
    if (UserIdValue.IsValid() && !UserIdValue->IsNull())
    {
        FString TmpValue;
        if (UserIdValue->TryGetString(TmpValue)) { UserId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FAddGenericIDRequest::~FAddGenericIDRequest()
{

}

void PlayFab::ServerModels::FAddGenericIDRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("GenericId"));
    GenericId.writeJSON(writer);

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddGenericIDRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAddGenericIDRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GenericIdValue = obj->TryGetField(TEXT("GenericId"));
    if (GenericIdValue.IsValid() && !GenericIdValue->IsNull())
    {
        GenericId = FGenericServiceId(GenericIdValue->AsObject());
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FAddPlayerTagRequest::~FAddPlayerTagRequest()
{

}

void PlayFab::ServerModels::FAddPlayerTagRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddPlayerTagRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!TagName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddPlayerTagRequest::TagName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("TagName"));
        writer->WriteValue(TagName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAddPlayerTagRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TagNameValue = obj->TryGetField(TEXT("TagName"));
    if (TagNameValue.IsValid() && !TagNameValue->IsNull())
    {
        FString TmpValue;
        if (TagNameValue->TryGetString(TmpValue)) { TagName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FAddPlayerTagResult::~FAddPlayerTagResult()
{

}

void PlayFab::ServerModels::FAddPlayerTagResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAddPlayerTagResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FAddSharedGroupMembersRequest::~FAddSharedGroupMembersRequest()
{

}

void PlayFab::ServerModels::FAddSharedGroupMembersRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("PlayFabIds"));
    for (const FString& item : PlayFabIds)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    if (!SharedGroupId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddSharedGroupMembersRequest::SharedGroupId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("SharedGroupId"));
        writer->WriteValue(SharedGroupId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAddSharedGroupMembersRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("PlayFabIds"), PlayFabIds);

    const TSharedPtr<FJsonValue> SharedGroupIdValue = obj->TryGetField(TEXT("SharedGroupId"));
    if (SharedGroupIdValue.IsValid() && !SharedGroupIdValue->IsNull())
    {
        FString TmpValue;
        if (SharedGroupIdValue->TryGetString(TmpValue)) { SharedGroupId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FAddSharedGroupMembersResult::~FAddSharedGroupMembersResult()
{

}

void PlayFab::ServerModels::FAddSharedGroupMembersResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAddSharedGroupMembersResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FAddUserVirtualCurrencyRequest::~FAddUserVirtualCurrencyRequest()
{

}

void PlayFab::ServerModels::FAddUserVirtualCurrencyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddUserVirtualCurrencyRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!VirtualCurrency.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AddUserVirtualCurrencyRequest::VirtualCurrency, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("VirtualCurrency"));
        writer->WriteValue(VirtualCurrency);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAddUserVirtualCurrencyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VirtualCurrencyValue = obj->TryGetField(TEXT("VirtualCurrency"));
    if (VirtualCurrencyValue.IsValid() && !VirtualCurrencyValue->IsNull())
    {
        FString TmpValue;
        if (VirtualCurrencyValue->TryGetString(TmpValue)) { VirtualCurrency = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::ServerModels::writePushNotificationPlatformEnumJSON(PushNotificationPlatform enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case PushNotificationPlatformApplePushNotificationService: writer->WriteValue(TEXT("ApplePushNotificationService")); break;
    case PushNotificationPlatformGoogleCloudMessaging: writer->WriteValue(TEXT("GoogleCloudMessaging")); break;
    }
}

ServerModels::PushNotificationPlatform PlayFab::ServerModels::readPushNotificationPlatformFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readPushNotificationPlatformFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::PushNotificationPlatform PlayFab::ServerModels::readPushNotificationPlatformFromValue(const FString& value)
{
    static TMap<FString, PushNotificationPlatform> _PushNotificationPlatformMap;
    if (_PushNotificationPlatformMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _PushNotificationPlatformMap.Add(TEXT("ApplePushNotificationService"), PushNotificationPlatformApplePushNotificationService);
        _PushNotificationPlatformMap.Add(TEXT("GoogleCloudMessaging"), PushNotificationPlatformGoogleCloudMessaging);

    }

    if (!value.IsEmpty())
    {
        auto output = _PushNotificationPlatformMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return PushNotificationPlatformApplePushNotificationService; // Basically critical fail
}

PlayFab::ServerModels::FAdvancedPushPlatformMsg::~FAdvancedPushPlatformMsg()
{

}

void PlayFab::ServerModels::FAdvancedPushPlatformMsg::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (GCMDataOnly.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("GCMDataOnly"));
        writer->WriteValue(GCMDataOnly);
    }

    if (!Json.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AdvancedPushPlatformMsg::Json, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Json"));
        writer->WriteValue(Json);
    }

    writer->WriteIdentifierPrefix(TEXT("Platform"));
    writePushNotificationPlatformEnumJSON(Platform, writer);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAdvancedPushPlatformMsg::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GCMDataOnlyValue = obj->TryGetField(TEXT("GCMDataOnly"));
    if (GCMDataOnlyValue.IsValid() && !GCMDataOnlyValue->IsNull())
    {
        bool TmpValue;
        if (GCMDataOnlyValue->TryGetBool(TmpValue)) { GCMDataOnly = TmpValue; }
    }

    const TSharedPtr<FJsonValue> JsonValue = obj->TryGetField(TEXT("Json"));
    if (JsonValue.IsValid() && !JsonValue->IsNull())
    {
        FString TmpValue;
        if (JsonValue->TryGetString(TmpValue)) { Json = TmpValue; }
    }

    Platform = readPushNotificationPlatformFromValue(obj->TryGetField(TEXT("Platform")));

    return HasSucceeded;
}

PlayFab::ServerModels::FAuthenticateSessionTicketRequest::~FAuthenticateSessionTicketRequest()
{

}

void PlayFab::ServerModels::FAuthenticateSessionTicketRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!SessionTicket.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AuthenticateSessionTicketRequest::SessionTicket, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("SessionTicket"));
        writer->WriteValue(SessionTicket);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAuthenticateSessionTicketRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> SessionTicketValue = obj->TryGetField(TEXT("SessionTicket"));
    if (SessionTicketValue.IsValid() && !SessionTicketValue->IsNull())
    {
        FString TmpValue;
        if (SessionTicketValue->TryGetString(TmpValue)) { SessionTicket = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserAndroidDeviceInfo::~FUserAndroidDeviceInfo()
{

}

void PlayFab::ServerModels::FUserAndroidDeviceInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AndroidDeviceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AndroidDeviceId"));
        writer->WriteValue(AndroidDeviceId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserAndroidDeviceInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AndroidDeviceIdValue = obj->TryGetField(TEXT("AndroidDeviceId"));
    if (AndroidDeviceIdValue.IsValid() && !AndroidDeviceIdValue->IsNull())
    {
        FString TmpValue;
        if (AndroidDeviceIdValue->TryGetString(TmpValue)) { AndroidDeviceId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserAppleIdInfo::~FUserAppleIdInfo()
{

}

void PlayFab::ServerModels::FUserAppleIdInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AppleSubjectId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AppleSubjectId"));
        writer->WriteValue(AppleSubjectId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserAppleIdInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AppleSubjectIdValue = obj->TryGetField(TEXT("AppleSubjectId"));
    if (AppleSubjectIdValue.IsValid() && !AppleSubjectIdValue->IsNull())
    {
        FString TmpValue;
        if (AppleSubjectIdValue->TryGetString(TmpValue)) { AppleSubjectId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserCustomIdInfo::~FUserCustomIdInfo()
{

}

void PlayFab::ServerModels::FUserCustomIdInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CustomId"));
        writer->WriteValue(CustomId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserCustomIdInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CustomIdValue = obj->TryGetField(TEXT("CustomId"));
    if (CustomIdValue.IsValid() && !CustomIdValue->IsNull())
    {
        FString TmpValue;
        if (CustomIdValue->TryGetString(TmpValue)) { CustomId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserFacebookInfo::~FUserFacebookInfo()
{

}

void PlayFab::ServerModels::FUserFacebookInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FacebookId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FacebookId"));
        writer->WriteValue(FacebookId);
    }

    if (FullName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FullName"));
        writer->WriteValue(FullName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserFacebookInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FacebookIdValue = obj->TryGetField(TEXT("FacebookId"));
    if (FacebookIdValue.IsValid() && !FacebookIdValue->IsNull())
    {
        FString TmpValue;
        if (FacebookIdValue->TryGetString(TmpValue)) { FacebookId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FullNameValue = obj->TryGetField(TEXT("FullName"));
    if (FullNameValue.IsValid() && !FullNameValue->IsNull())
    {
        FString TmpValue;
        if (FullNameValue->TryGetString(TmpValue)) { FullName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserFacebookInstantGamesIdInfo::~FUserFacebookInstantGamesIdInfo()
{

}

void PlayFab::ServerModels::FUserFacebookInstantGamesIdInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FacebookInstantGamesId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FacebookInstantGamesId"));
        writer->WriteValue(FacebookInstantGamesId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserFacebookInstantGamesIdInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FacebookInstantGamesIdValue = obj->TryGetField(TEXT("FacebookInstantGamesId"));
    if (FacebookInstantGamesIdValue.IsValid() && !FacebookInstantGamesIdValue->IsNull())
    {
        FString TmpValue;
        if (FacebookInstantGamesIdValue->TryGetString(TmpValue)) { FacebookInstantGamesId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserGameCenterInfo::~FUserGameCenterInfo()
{

}

void PlayFab::ServerModels::FUserGameCenterInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (GameCenterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GameCenterId"));
        writer->WriteValue(GameCenterId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserGameCenterInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GameCenterIdValue = obj->TryGetField(TEXT("GameCenterId"));
    if (GameCenterIdValue.IsValid() && !GameCenterIdValue->IsNull())
    {
        FString TmpValue;
        if (GameCenterIdValue->TryGetString(TmpValue)) { GameCenterId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserGoogleInfo::~FUserGoogleInfo()
{

}

void PlayFab::ServerModels::FUserGoogleInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (GoogleEmail.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GoogleEmail"));
        writer->WriteValue(GoogleEmail);
    }

    if (GoogleGender.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GoogleGender"));
        writer->WriteValue(GoogleGender);
    }

    if (GoogleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GoogleId"));
        writer->WriteValue(GoogleId);
    }

    if (GoogleLocale.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GoogleLocale"));
        writer->WriteValue(GoogleLocale);
    }

    if (GoogleName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GoogleName"));
        writer->WriteValue(GoogleName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserGoogleInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GoogleEmailValue = obj->TryGetField(TEXT("GoogleEmail"));
    if (GoogleEmailValue.IsValid() && !GoogleEmailValue->IsNull())
    {
        FString TmpValue;
        if (GoogleEmailValue->TryGetString(TmpValue)) { GoogleEmail = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GoogleGenderValue = obj->TryGetField(TEXT("GoogleGender"));
    if (GoogleGenderValue.IsValid() && !GoogleGenderValue->IsNull())
    {
        FString TmpValue;
        if (GoogleGenderValue->TryGetString(TmpValue)) { GoogleGender = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GoogleIdValue = obj->TryGetField(TEXT("GoogleId"));
    if (GoogleIdValue.IsValid() && !GoogleIdValue->IsNull())
    {
        FString TmpValue;
        if (GoogleIdValue->TryGetString(TmpValue)) { GoogleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GoogleLocaleValue = obj->TryGetField(TEXT("GoogleLocale"));
    if (GoogleLocaleValue.IsValid() && !GoogleLocaleValue->IsNull())
    {
        FString TmpValue;
        if (GoogleLocaleValue->TryGetString(TmpValue)) { GoogleLocale = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GoogleNameValue = obj->TryGetField(TEXT("GoogleName"));
    if (GoogleNameValue.IsValid() && !GoogleNameValue->IsNull())
    {
        FString TmpValue;
        if (GoogleNameValue->TryGetString(TmpValue)) { GoogleName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserIosDeviceInfo::~FUserIosDeviceInfo()
{

}

void PlayFab::ServerModels::FUserIosDeviceInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (IosDeviceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IosDeviceId"));
        writer->WriteValue(IosDeviceId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserIosDeviceInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IosDeviceIdValue = obj->TryGetField(TEXT("IosDeviceId"));
    if (IosDeviceIdValue.IsValid() && !IosDeviceIdValue->IsNull())
    {
        FString TmpValue;
        if (IosDeviceIdValue->TryGetString(TmpValue)) { IosDeviceId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserKongregateInfo::~FUserKongregateInfo()
{

}

void PlayFab::ServerModels::FUserKongregateInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (KongregateId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("KongregateId"));
        writer->WriteValue(KongregateId);
    }

    if (KongregateName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("KongregateName"));
        writer->WriteValue(KongregateName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserKongregateInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> KongregateIdValue = obj->TryGetField(TEXT("KongregateId"));
    if (KongregateIdValue.IsValid() && !KongregateIdValue->IsNull())
    {
        FString TmpValue;
        if (KongregateIdValue->TryGetString(TmpValue)) { KongregateId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> KongregateNameValue = obj->TryGetField(TEXT("KongregateName"));
    if (KongregateNameValue.IsValid() && !KongregateNameValue->IsNull())
    {
        FString TmpValue;
        if (KongregateNameValue->TryGetString(TmpValue)) { KongregateName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserNintendoSwitchAccountIdInfo::~FUserNintendoSwitchAccountIdInfo()
{

}

void PlayFab::ServerModels::FUserNintendoSwitchAccountIdInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (NintendoSwitchAccountSubjectId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NintendoSwitchAccountSubjectId"));
        writer->WriteValue(NintendoSwitchAccountSubjectId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserNintendoSwitchAccountIdInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NintendoSwitchAccountSubjectIdValue = obj->TryGetField(TEXT("NintendoSwitchAccountSubjectId"));
    if (NintendoSwitchAccountSubjectIdValue.IsValid() && !NintendoSwitchAccountSubjectIdValue->IsNull())
    {
        FString TmpValue;
        if (NintendoSwitchAccountSubjectIdValue->TryGetString(TmpValue)) { NintendoSwitchAccountSubjectId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserNintendoSwitchDeviceIdInfo::~FUserNintendoSwitchDeviceIdInfo()
{

}

void PlayFab::ServerModels::FUserNintendoSwitchDeviceIdInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (NintendoSwitchDeviceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NintendoSwitchDeviceId"));
        writer->WriteValue(NintendoSwitchDeviceId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserNintendoSwitchDeviceIdInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NintendoSwitchDeviceIdValue = obj->TryGetField(TEXT("NintendoSwitchDeviceId"));
    if (NintendoSwitchDeviceIdValue.IsValid() && !NintendoSwitchDeviceIdValue->IsNull())
    {
        FString TmpValue;
        if (NintendoSwitchDeviceIdValue->TryGetString(TmpValue)) { NintendoSwitchDeviceId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserOpenIdInfo::~FUserOpenIdInfo()
{

}

void PlayFab::ServerModels::FUserOpenIdInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ConnectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ConnectionId"));
        writer->WriteValue(ConnectionId);
    }

    if (Issuer.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Issuer"));
        writer->WriteValue(Issuer);
    }

    if (Subject.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Subject"));
        writer->WriteValue(Subject);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserOpenIdInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ConnectionIdValue = obj->TryGetField(TEXT("ConnectionId"));
    if (ConnectionIdValue.IsValid() && !ConnectionIdValue->IsNull())
    {
        FString TmpValue;
        if (ConnectionIdValue->TryGetString(TmpValue)) { ConnectionId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IssuerValue = obj->TryGetField(TEXT("Issuer"));
    if (IssuerValue.IsValid() && !IssuerValue->IsNull())
    {
        FString TmpValue;
        if (IssuerValue->TryGetString(TmpValue)) { Issuer = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SubjectValue = obj->TryGetField(TEXT("Subject"));
    if (SubjectValue.IsValid() && !SubjectValue->IsNull())
    {
        FString TmpValue;
        if (SubjectValue->TryGetString(TmpValue)) { Subject = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserPrivateAccountInfo::~FUserPrivateAccountInfo()
{

}

void PlayFab::ServerModels::FUserPrivateAccountInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Email.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Email"));
        writer->WriteValue(Email);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserPrivateAccountInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EmailValue = obj->TryGetField(TEXT("Email"));
    if (EmailValue.IsValid() && !EmailValue->IsNull())
    {
        FString TmpValue;
        if (EmailValue->TryGetString(TmpValue)) { Email = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserPsnInfo::~FUserPsnInfo()
{

}

void PlayFab::ServerModels::FUserPsnInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PsnAccountId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PsnAccountId"));
        writer->WriteValue(PsnAccountId);
    }

    if (PsnOnlineId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PsnOnlineId"));
        writer->WriteValue(PsnOnlineId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserPsnInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PsnAccountIdValue = obj->TryGetField(TEXT("PsnAccountId"));
    if (PsnAccountIdValue.IsValid() && !PsnAccountIdValue->IsNull())
    {
        FString TmpValue;
        if (PsnAccountIdValue->TryGetString(TmpValue)) { PsnAccountId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PsnOnlineIdValue = obj->TryGetField(TEXT("PsnOnlineId"));
    if (PsnOnlineIdValue.IsValid() && !PsnOnlineIdValue->IsNull())
    {
        FString TmpValue;
        if (PsnOnlineIdValue->TryGetString(TmpValue)) { PsnOnlineId = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::ServerModels::writeTitleActivationStatusEnumJSON(TitleActivationStatus enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case TitleActivationStatusNone: writer->WriteValue(TEXT("None")); break;
    case TitleActivationStatusActivatedTitleKey: writer->WriteValue(TEXT("ActivatedTitleKey")); break;
    case TitleActivationStatusPendingSteam: writer->WriteValue(TEXT("PendingSteam")); break;
    case TitleActivationStatusActivatedSteam: writer->WriteValue(TEXT("ActivatedSteam")); break;
    case TitleActivationStatusRevokedSteam: writer->WriteValue(TEXT("RevokedSteam")); break;
    }
}

ServerModels::TitleActivationStatus PlayFab::ServerModels::readTitleActivationStatusFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readTitleActivationStatusFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::TitleActivationStatus PlayFab::ServerModels::readTitleActivationStatusFromValue(const FString& value)
{
    static TMap<FString, TitleActivationStatus> _TitleActivationStatusMap;
    if (_TitleActivationStatusMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _TitleActivationStatusMap.Add(TEXT("None"), TitleActivationStatusNone);
        _TitleActivationStatusMap.Add(TEXT("ActivatedTitleKey"), TitleActivationStatusActivatedTitleKey);
        _TitleActivationStatusMap.Add(TEXT("PendingSteam"), TitleActivationStatusPendingSteam);
        _TitleActivationStatusMap.Add(TEXT("ActivatedSteam"), TitleActivationStatusActivatedSteam);
        _TitleActivationStatusMap.Add(TEXT("RevokedSteam"), TitleActivationStatusRevokedSteam);

    }

    if (!value.IsEmpty())
    {
        auto output = _TitleActivationStatusMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return TitleActivationStatusNone; // Basically critical fail
}

void PlayFab::ServerModels::writeCurrencyEnumJSON(Currency enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case CurrencyAED: writer->WriteValue(TEXT("AED")); break;
    case CurrencyAFN: writer->WriteValue(TEXT("AFN")); break;
    case CurrencyALL: writer->WriteValue(TEXT("ALL")); break;
    case CurrencyAMD: writer->WriteValue(TEXT("AMD")); break;
    case CurrencyANG: writer->WriteValue(TEXT("ANG")); break;
    case CurrencyAOA: writer->WriteValue(TEXT("AOA")); break;
    case CurrencyARS: writer->WriteValue(TEXT("ARS")); break;
    case CurrencyAUD: writer->WriteValue(TEXT("AUD")); break;
    case CurrencyAWG: writer->WriteValue(TEXT("AWG")); break;
    case CurrencyAZN: writer->WriteValue(TEXT("AZN")); break;
    case CurrencyBAM: writer->WriteValue(TEXT("BAM")); break;
    case CurrencyBBD: writer->WriteValue(TEXT("BBD")); break;
    case CurrencyBDT: writer->WriteValue(TEXT("BDT")); break;
    case CurrencyBGN: writer->WriteValue(TEXT("BGN")); break;
    case CurrencyBHD: writer->WriteValue(TEXT("BHD")); break;
    case CurrencyBIF: writer->WriteValue(TEXT("BIF")); break;
    case CurrencyBMD: writer->WriteValue(TEXT("BMD")); break;
    case CurrencyBND: writer->WriteValue(TEXT("BND")); break;
    case CurrencyBOB: writer->WriteValue(TEXT("BOB")); break;
    case CurrencyBRL: writer->WriteValue(TEXT("BRL")); break;
    case CurrencyBSD: writer->WriteValue(TEXT("BSD")); break;
    case CurrencyBTN: writer->WriteValue(TEXT("BTN")); break;
    case CurrencyBWP: writer->WriteValue(TEXT("BWP")); break;
    case CurrencyBYR: writer->WriteValue(TEXT("BYR")); break;
    case CurrencyBZD: writer->WriteValue(TEXT("BZD")); break;
    case CurrencyCAD: writer->WriteValue(TEXT("CAD")); break;
    case CurrencyCDF: writer->WriteValue(TEXT("CDF")); break;
    case CurrencyCHF: writer->WriteValue(TEXT("CHF")); break;
    case CurrencyCLP: writer->WriteValue(TEXT("CLP")); break;
    case CurrencyCNY: writer->WriteValue(TEXT("CNY")); break;
    case CurrencyCOP: writer->WriteValue(TEXT("COP")); break;
    case CurrencyCRC: writer->WriteValue(TEXT("CRC")); break;
    case CurrencyCUC: writer->WriteValue(TEXT("CUC")); break;
    case CurrencyCUP: writer->WriteValue(TEXT("CUP")); break;
    case CurrencyCVE: writer->WriteValue(TEXT("CVE")); break;
    case CurrencyCZK: writer->WriteValue(TEXT("CZK")); break;
    case CurrencyDJF: writer->WriteValue(TEXT("DJF")); break;
    case CurrencyDKK: writer->WriteValue(TEXT("DKK")); break;
    case CurrencyDOP: writer->WriteValue(TEXT("DOP")); break;
    case CurrencyDZD: writer->WriteValue(TEXT("DZD")); break;
    case CurrencyEGP: writer->WriteValue(TEXT("EGP")); break;
    case CurrencyERN: writer->WriteValue(TEXT("ERN")); break;
    case CurrencyETB: writer->WriteValue(TEXT("ETB")); break;
    case CurrencyEUR: writer->WriteValue(TEXT("EUR")); break;
    case CurrencyFJD: writer->WriteValue(TEXT("FJD")); break;
    case CurrencyFKP: writer->WriteValue(TEXT("FKP")); break;
    case CurrencyGBP: writer->WriteValue(TEXT("GBP")); break;
    case CurrencyGEL: writer->WriteValue(TEXT("GEL")); break;
    case CurrencyGGP: writer->WriteValue(TEXT("GGP")); break;
    case CurrencyGHS: writer->WriteValue(TEXT("GHS")); break;
    case CurrencyGIP: writer->WriteValue(TEXT("GIP")); break;
    case CurrencyGMD: writer->WriteValue(TEXT("GMD")); break;
    case CurrencyGNF: writer->WriteValue(TEXT("GNF")); break;
    case CurrencyGTQ: writer->WriteValue(TEXT("GTQ")); break;
    case CurrencyGYD: writer->WriteValue(TEXT("GYD")); break;
    case CurrencyHKD: writer->WriteValue(TEXT("HKD")); break;
    case CurrencyHNL: writer->WriteValue(TEXT("HNL")); break;
    case CurrencyHRK: writer->WriteValue(TEXT("HRK")); break;
    case CurrencyHTG: writer->WriteValue(TEXT("HTG")); break;
    case CurrencyHUF: writer->WriteValue(TEXT("HUF")); break;
    case CurrencyIDR: writer->WriteValue(TEXT("IDR")); break;
    case CurrencyILS: writer->WriteValue(TEXT("ILS")); break;
    case CurrencyIMP: writer->WriteValue(TEXT("IMP")); break;
    case CurrencyINR: writer->WriteValue(TEXT("INR")); break;
    case CurrencyIQD: writer->WriteValue(TEXT("IQD")); break;
    case CurrencyIRR: writer->WriteValue(TEXT("IRR")); break;
    case CurrencyISK: writer->WriteValue(TEXT("ISK")); break;
    case CurrencyJEP: writer->WriteValue(TEXT("JEP")); break;
    case CurrencyJMD: writer->WriteValue(TEXT("JMD")); break;
    case CurrencyJOD: writer->WriteValue(TEXT("JOD")); break;
    case CurrencyJPY: writer->WriteValue(TEXT("JPY")); break;
    case CurrencyKES: writer->WriteValue(TEXT("KES")); break;
    case CurrencyKGS: writer->WriteValue(TEXT("KGS")); break;
    case CurrencyKHR: writer->WriteValue(TEXT("KHR")); break;
    case CurrencyKMF: writer->WriteValue(TEXT("KMF")); break;
    case CurrencyKPW: writer->WriteValue(TEXT("KPW")); break;
    case CurrencyKRW: writer->WriteValue(TEXT("KRW")); break;
    case CurrencyKWD: writer->WriteValue(TEXT("KWD")); break;
    case CurrencyKYD: writer->WriteValue(TEXT("KYD")); break;
    case CurrencyKZT: writer->WriteValue(TEXT("KZT")); break;
    case CurrencyLAK: writer->WriteValue(TEXT("LAK")); break;
    case CurrencyLBP: writer->WriteValue(TEXT("LBP")); break;
    case CurrencyLKR: writer->WriteValue(TEXT("LKR")); break;
    case CurrencyLRD: writer->WriteValue(TEXT("LRD")); break;
    case CurrencyLSL: writer->WriteValue(TEXT("LSL")); break;
    case CurrencyLYD: writer->WriteValue(TEXT("LYD")); break;
    case CurrencyMAD: writer->WriteValue(TEXT("MAD")); break;
    case CurrencyMDL: writer->WriteValue(TEXT("MDL")); break;
    case CurrencyMGA: writer->WriteValue(TEXT("MGA")); break;
    case CurrencyMKD: writer->WriteValue(TEXT("MKD")); break;
    case CurrencyMMK: writer->WriteValue(TEXT("MMK")); break;
    case CurrencyMNT: writer->WriteValue(TEXT("MNT")); break;
    case CurrencyMOP: writer->WriteValue(TEXT("MOP")); break;
    case CurrencyMRO: writer->WriteValue(TEXT("MRO")); break;
    case CurrencyMUR: writer->WriteValue(TEXT("MUR")); break;
    case CurrencyMVR: writer->WriteValue(TEXT("MVR")); break;
    case CurrencyMWK: writer->WriteValue(TEXT("MWK")); break;
    case CurrencyMXN: writer->WriteValue(TEXT("MXN")); break;
    case CurrencyMYR: writer->WriteValue(TEXT("MYR")); break;
    case CurrencyMZN: writer->WriteValue(TEXT("MZN")); break;
    case CurrencyNAD: writer->WriteValue(TEXT("NAD")); break;
    case CurrencyNGN: writer->WriteValue(TEXT("NGN")); break;
    case CurrencyNIO: writer->WriteValue(TEXT("NIO")); break;
    case CurrencyNOK: writer->WriteValue(TEXT("NOK")); break;
    case CurrencyNPR: writer->WriteValue(TEXT("NPR")); break;
    case CurrencyNZD: writer->WriteValue(TEXT("NZD")); break;
    case CurrencyOMR: writer->WriteValue(TEXT("OMR")); break;
    case CurrencyPAB: writer->WriteValue(TEXT("PAB")); break;
    case CurrencyPEN: writer->WriteValue(TEXT("PEN")); break;
    case CurrencyPGK: writer->WriteValue(TEXT("PGK")); break;
    case CurrencyPHP: writer->WriteValue(TEXT("PHP")); break;
    case CurrencyPKR: writer->WriteValue(TEXT("PKR")); break;
    case CurrencyPLN: writer->WriteValue(TEXT("PLN")); break;
    case CurrencyPYG: writer->WriteValue(TEXT("PYG")); break;
    case CurrencyQAR: writer->WriteValue(TEXT("QAR")); break;
    case CurrencyRON: writer->WriteValue(TEXT("RON")); break;
    case CurrencyRSD: writer->WriteValue(TEXT("RSD")); break;
    case CurrencyRUB: writer->WriteValue(TEXT("RUB")); break;
    case CurrencyRWF: writer->WriteValue(TEXT("RWF")); break;
    case CurrencySAR: writer->WriteValue(TEXT("SAR")); break;
    case CurrencySBD: writer->WriteValue(TEXT("SBD")); break;
    case CurrencySCR: writer->WriteValue(TEXT("SCR")); break;
    case CurrencySDG: writer->WriteValue(TEXT("SDG")); break;
    case CurrencySEK: writer->WriteValue(TEXT("SEK")); break;
    case CurrencySGD: writer->WriteValue(TEXT("SGD")); break;
    case CurrencySHP: writer->WriteValue(TEXT("SHP")); break;
    case CurrencySLL: writer->WriteValue(TEXT("SLL")); break;
    case CurrencySOS: writer->WriteValue(TEXT("SOS")); break;
    case CurrencySPL: writer->WriteValue(TEXT("SPL")); break;
    case CurrencySRD: writer->WriteValue(TEXT("SRD")); break;
    case CurrencySTD: writer->WriteValue(TEXT("STD")); break;
    case CurrencySVC: writer->WriteValue(TEXT("SVC")); break;
    case CurrencySYP: writer->WriteValue(TEXT("SYP")); break;
    case CurrencySZL: writer->WriteValue(TEXT("SZL")); break;
    case CurrencyTHB: writer->WriteValue(TEXT("THB")); break;
    case CurrencyTJS: writer->WriteValue(TEXT("TJS")); break;
    case CurrencyTMT: writer->WriteValue(TEXT("TMT")); break;
    case CurrencyTND: writer->WriteValue(TEXT("TND")); break;
    case CurrencyTOP: writer->WriteValue(TEXT("TOP")); break;
    case CurrencyTRY: writer->WriteValue(TEXT("TRY")); break;
    case CurrencyTTD: writer->WriteValue(TEXT("TTD")); break;
    case CurrencyTVD: writer->WriteValue(TEXT("TVD")); break;
    case CurrencyTWD: writer->WriteValue(TEXT("TWD")); break;
    case CurrencyTZS: writer->WriteValue(TEXT("TZS")); break;
    case CurrencyUAH: writer->WriteValue(TEXT("UAH")); break;
    case CurrencyUGX: writer->WriteValue(TEXT("UGX")); break;
    case CurrencyUSD: writer->WriteValue(TEXT("USD")); break;
    case CurrencyUYU: writer->WriteValue(TEXT("UYU")); break;
    case CurrencyUZS: writer->WriteValue(TEXT("UZS")); break;
    case CurrencyVEF: writer->WriteValue(TEXT("VEF")); break;
    case CurrencyVND: writer->WriteValue(TEXT("VND")); break;
    case CurrencyVUV: writer->WriteValue(TEXT("VUV")); break;
    case CurrencyWST: writer->WriteValue(TEXT("WST")); break;
    case CurrencyXAF: writer->WriteValue(TEXT("XAF")); break;
    case CurrencyXCD: writer->WriteValue(TEXT("XCD")); break;
    case CurrencyXDR: writer->WriteValue(TEXT("XDR")); break;
    case CurrencyXOF: writer->WriteValue(TEXT("XOF")); break;
    case CurrencyXPF: writer->WriteValue(TEXT("XPF")); break;
    case CurrencyYER: writer->WriteValue(TEXT("YER")); break;
    case CurrencyZAR: writer->WriteValue(TEXT("ZAR")); break;
    case CurrencyZMW: writer->WriteValue(TEXT("ZMW")); break;
    case CurrencyZWD: writer->WriteValue(TEXT("ZWD")); break;
    }
}

ServerModels::Currency PlayFab::ServerModels::readCurrencyFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readCurrencyFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::Currency PlayFab::ServerModels::readCurrencyFromValue(const FString& value)
{
    static TMap<FString, Currency> _CurrencyMap;
    if (_CurrencyMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _CurrencyMap.Add(TEXT("AED"), CurrencyAED);
        _CurrencyMap.Add(TEXT("AFN"), CurrencyAFN);
        _CurrencyMap.Add(TEXT("ALL"), CurrencyALL);
        _CurrencyMap.Add(TEXT("AMD"), CurrencyAMD);
        _CurrencyMap.Add(TEXT("ANG"), CurrencyANG);
        _CurrencyMap.Add(TEXT("AOA"), CurrencyAOA);
        _CurrencyMap.Add(TEXT("ARS"), CurrencyARS);
        _CurrencyMap.Add(TEXT("AUD"), CurrencyAUD);
        _CurrencyMap.Add(TEXT("AWG"), CurrencyAWG);
        _CurrencyMap.Add(TEXT("AZN"), CurrencyAZN);
        _CurrencyMap.Add(TEXT("BAM"), CurrencyBAM);
        _CurrencyMap.Add(TEXT("BBD"), CurrencyBBD);
        _CurrencyMap.Add(TEXT("BDT"), CurrencyBDT);
        _CurrencyMap.Add(TEXT("BGN"), CurrencyBGN);
        _CurrencyMap.Add(TEXT("BHD"), CurrencyBHD);
        _CurrencyMap.Add(TEXT("BIF"), CurrencyBIF);
        _CurrencyMap.Add(TEXT("BMD"), CurrencyBMD);
        _CurrencyMap.Add(TEXT("BND"), CurrencyBND);
        _CurrencyMap.Add(TEXT("BOB"), CurrencyBOB);
        _CurrencyMap.Add(TEXT("BRL"), CurrencyBRL);
        _CurrencyMap.Add(TEXT("BSD"), CurrencyBSD);
        _CurrencyMap.Add(TEXT("BTN"), CurrencyBTN);
        _CurrencyMap.Add(TEXT("BWP"), CurrencyBWP);
        _CurrencyMap.Add(TEXT("BYR"), CurrencyBYR);
        _CurrencyMap.Add(TEXT("BZD"), CurrencyBZD);
        _CurrencyMap.Add(TEXT("CAD"), CurrencyCAD);
        _CurrencyMap.Add(TEXT("CDF"), CurrencyCDF);
        _CurrencyMap.Add(TEXT("CHF"), CurrencyCHF);
        _CurrencyMap.Add(TEXT("CLP"), CurrencyCLP);
        _CurrencyMap.Add(TEXT("CNY"), CurrencyCNY);
        _CurrencyMap.Add(TEXT("COP"), CurrencyCOP);
        _CurrencyMap.Add(TEXT("CRC"), CurrencyCRC);
        _CurrencyMap.Add(TEXT("CUC"), CurrencyCUC);
        _CurrencyMap.Add(TEXT("CUP"), CurrencyCUP);
        _CurrencyMap.Add(TEXT("CVE"), CurrencyCVE);
        _CurrencyMap.Add(TEXT("CZK"), CurrencyCZK);
        _CurrencyMap.Add(TEXT("DJF"), CurrencyDJF);
        _CurrencyMap.Add(TEXT("DKK"), CurrencyDKK);
        _CurrencyMap.Add(TEXT("DOP"), CurrencyDOP);
        _CurrencyMap.Add(TEXT("DZD"), CurrencyDZD);
        _CurrencyMap.Add(TEXT("EGP"), CurrencyEGP);
        _CurrencyMap.Add(TEXT("ERN"), CurrencyERN);
        _CurrencyMap.Add(TEXT("ETB"), CurrencyETB);
        _CurrencyMap.Add(TEXT("EUR"), CurrencyEUR);
        _CurrencyMap.Add(TEXT("FJD"), CurrencyFJD);
        _CurrencyMap.Add(TEXT("FKP"), CurrencyFKP);
        _CurrencyMap.Add(TEXT("GBP"), CurrencyGBP);
        _CurrencyMap.Add(TEXT("GEL"), CurrencyGEL);
        _CurrencyMap.Add(TEXT("GGP"), CurrencyGGP);
        _CurrencyMap.Add(TEXT("GHS"), CurrencyGHS);
        _CurrencyMap.Add(TEXT("GIP"), CurrencyGIP);
        _CurrencyMap.Add(TEXT("GMD"), CurrencyGMD);
        _CurrencyMap.Add(TEXT("GNF"), CurrencyGNF);
        _CurrencyMap.Add(TEXT("GTQ"), CurrencyGTQ);
        _CurrencyMap.Add(TEXT("GYD"), CurrencyGYD);
        _CurrencyMap.Add(TEXT("HKD"), CurrencyHKD);
        _CurrencyMap.Add(TEXT("HNL"), CurrencyHNL);
        _CurrencyMap.Add(TEXT("HRK"), CurrencyHRK);
        _CurrencyMap.Add(TEXT("HTG"), CurrencyHTG);
        _CurrencyMap.Add(TEXT("HUF"), CurrencyHUF);
        _CurrencyMap.Add(TEXT("IDR"), CurrencyIDR);
        _CurrencyMap.Add(TEXT("ILS"), CurrencyILS);
        _CurrencyMap.Add(TEXT("IMP"), CurrencyIMP);
        _CurrencyMap.Add(TEXT("INR"), CurrencyINR);
        _CurrencyMap.Add(TEXT("IQD"), CurrencyIQD);
        _CurrencyMap.Add(TEXT("IRR"), CurrencyIRR);
        _CurrencyMap.Add(TEXT("ISK"), CurrencyISK);
        _CurrencyMap.Add(TEXT("JEP"), CurrencyJEP);
        _CurrencyMap.Add(TEXT("JMD"), CurrencyJMD);
        _CurrencyMap.Add(TEXT("JOD"), CurrencyJOD);
        _CurrencyMap.Add(TEXT("JPY"), CurrencyJPY);
        _CurrencyMap.Add(TEXT("KES"), CurrencyKES);
        _CurrencyMap.Add(TEXT("KGS"), CurrencyKGS);
        _CurrencyMap.Add(TEXT("KHR"), CurrencyKHR);
        _CurrencyMap.Add(TEXT("KMF"), CurrencyKMF);
        _CurrencyMap.Add(TEXT("KPW"), CurrencyKPW);
        _CurrencyMap.Add(TEXT("KRW"), CurrencyKRW);
        _CurrencyMap.Add(TEXT("KWD"), CurrencyKWD);
        _CurrencyMap.Add(TEXT("KYD"), CurrencyKYD);
        _CurrencyMap.Add(TEXT("KZT"), CurrencyKZT);
        _CurrencyMap.Add(TEXT("LAK"), CurrencyLAK);
        _CurrencyMap.Add(TEXT("LBP"), CurrencyLBP);
        _CurrencyMap.Add(TEXT("LKR"), CurrencyLKR);
        _CurrencyMap.Add(TEXT("LRD"), CurrencyLRD);
        _CurrencyMap.Add(TEXT("LSL"), CurrencyLSL);
        _CurrencyMap.Add(TEXT("LYD"), CurrencyLYD);
        _CurrencyMap.Add(TEXT("MAD"), CurrencyMAD);
        _CurrencyMap.Add(TEXT("MDL"), CurrencyMDL);
        _CurrencyMap.Add(TEXT("MGA"), CurrencyMGA);
        _CurrencyMap.Add(TEXT("MKD"), CurrencyMKD);
        _CurrencyMap.Add(TEXT("MMK"), CurrencyMMK);
        _CurrencyMap.Add(TEXT("MNT"), CurrencyMNT);
        _CurrencyMap.Add(TEXT("MOP"), CurrencyMOP);
        _CurrencyMap.Add(TEXT("MRO"), CurrencyMRO);
        _CurrencyMap.Add(TEXT("MUR"), CurrencyMUR);
        _CurrencyMap.Add(TEXT("MVR"), CurrencyMVR);
        _CurrencyMap.Add(TEXT("MWK"), CurrencyMWK);
        _CurrencyMap.Add(TEXT("MXN"), CurrencyMXN);
        _CurrencyMap.Add(TEXT("MYR"), CurrencyMYR);
        _CurrencyMap.Add(TEXT("MZN"), CurrencyMZN);
        _CurrencyMap.Add(TEXT("NAD"), CurrencyNAD);
        _CurrencyMap.Add(TEXT("NGN"), CurrencyNGN);
        _CurrencyMap.Add(TEXT("NIO"), CurrencyNIO);
        _CurrencyMap.Add(TEXT("NOK"), CurrencyNOK);
        _CurrencyMap.Add(TEXT("NPR"), CurrencyNPR);
        _CurrencyMap.Add(TEXT("NZD"), CurrencyNZD);
        _CurrencyMap.Add(TEXT("OMR"), CurrencyOMR);
        _CurrencyMap.Add(TEXT("PAB"), CurrencyPAB);
        _CurrencyMap.Add(TEXT("PEN"), CurrencyPEN);
        _CurrencyMap.Add(TEXT("PGK"), CurrencyPGK);
        _CurrencyMap.Add(TEXT("PHP"), CurrencyPHP);
        _CurrencyMap.Add(TEXT("PKR"), CurrencyPKR);
        _CurrencyMap.Add(TEXT("PLN"), CurrencyPLN);
        _CurrencyMap.Add(TEXT("PYG"), CurrencyPYG);
        _CurrencyMap.Add(TEXT("QAR"), CurrencyQAR);
        _CurrencyMap.Add(TEXT("RON"), CurrencyRON);
        _CurrencyMap.Add(TEXT("RSD"), CurrencyRSD);
        _CurrencyMap.Add(TEXT("RUB"), CurrencyRUB);
        _CurrencyMap.Add(TEXT("RWF"), CurrencyRWF);
        _CurrencyMap.Add(TEXT("SAR"), CurrencySAR);
        _CurrencyMap.Add(TEXT("SBD"), CurrencySBD);
        _CurrencyMap.Add(TEXT("SCR"), CurrencySCR);
        _CurrencyMap.Add(TEXT("SDG"), CurrencySDG);
        _CurrencyMap.Add(TEXT("SEK"), CurrencySEK);
        _CurrencyMap.Add(TEXT("SGD"), CurrencySGD);
        _CurrencyMap.Add(TEXT("SHP"), CurrencySHP);
        _CurrencyMap.Add(TEXT("SLL"), CurrencySLL);
        _CurrencyMap.Add(TEXT("SOS"), CurrencySOS);
        _CurrencyMap.Add(TEXT("SPL"), CurrencySPL);
        _CurrencyMap.Add(TEXT("SRD"), CurrencySRD);
        _CurrencyMap.Add(TEXT("STD"), CurrencySTD);
        _CurrencyMap.Add(TEXT("SVC"), CurrencySVC);
        _CurrencyMap.Add(TEXT("SYP"), CurrencySYP);
        _CurrencyMap.Add(TEXT("SZL"), CurrencySZL);
        _CurrencyMap.Add(TEXT("THB"), CurrencyTHB);
        _CurrencyMap.Add(TEXT("TJS"), CurrencyTJS);
        _CurrencyMap.Add(TEXT("TMT"), CurrencyTMT);
        _CurrencyMap.Add(TEXT("TND"), CurrencyTND);
        _CurrencyMap.Add(TEXT("TOP"), CurrencyTOP);
        _CurrencyMap.Add(TEXT("TRY"), CurrencyTRY);
        _CurrencyMap.Add(TEXT("TTD"), CurrencyTTD);
        _CurrencyMap.Add(TEXT("TVD"), CurrencyTVD);
        _CurrencyMap.Add(TEXT("TWD"), CurrencyTWD);
        _CurrencyMap.Add(TEXT("TZS"), CurrencyTZS);
        _CurrencyMap.Add(TEXT("UAH"), CurrencyUAH);
        _CurrencyMap.Add(TEXT("UGX"), CurrencyUGX);
        _CurrencyMap.Add(TEXT("USD"), CurrencyUSD);
        _CurrencyMap.Add(TEXT("UYU"), CurrencyUYU);
        _CurrencyMap.Add(TEXT("UZS"), CurrencyUZS);
        _CurrencyMap.Add(TEXT("VEF"), CurrencyVEF);
        _CurrencyMap.Add(TEXT("VND"), CurrencyVND);
        _CurrencyMap.Add(TEXT("VUV"), CurrencyVUV);
        _CurrencyMap.Add(TEXT("WST"), CurrencyWST);
        _CurrencyMap.Add(TEXT("XAF"), CurrencyXAF);
        _CurrencyMap.Add(TEXT("XCD"), CurrencyXCD);
        _CurrencyMap.Add(TEXT("XDR"), CurrencyXDR);
        _CurrencyMap.Add(TEXT("XOF"), CurrencyXOF);
        _CurrencyMap.Add(TEXT("XPF"), CurrencyXPF);
        _CurrencyMap.Add(TEXT("YER"), CurrencyYER);
        _CurrencyMap.Add(TEXT("ZAR"), CurrencyZAR);
        _CurrencyMap.Add(TEXT("ZMW"), CurrencyZMW);
        _CurrencyMap.Add(TEXT("ZWD"), CurrencyZWD);

    }

    if (!value.IsEmpty())
    {
        auto output = _CurrencyMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return CurrencyAED; // Basically critical fail
}

PlayFab::ServerModels::FUserSteamInfo::~FUserSteamInfo()
{

}

void PlayFab::ServerModels::FUserSteamInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (SteamActivationStatus.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("SteamActivationStatus"));
        writeTitleActivationStatusEnumJSON(SteamActivationStatus, writer);
    }

    if (SteamCountry.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SteamCountry"));
        writer->WriteValue(SteamCountry);
    }

    if (SteamCurrency.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("SteamCurrency"));
        writeCurrencyEnumJSON(SteamCurrency, writer);
    }

    if (SteamId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SteamId"));
        writer->WriteValue(SteamId);
    }

    if (SteamName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SteamName"));
        writer->WriteValue(SteamName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserSteamInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    SteamActivationStatus = readTitleActivationStatusFromValue(obj->TryGetField(TEXT("SteamActivationStatus")));

    const TSharedPtr<FJsonValue> SteamCountryValue = obj->TryGetField(TEXT("SteamCountry"));
    if (SteamCountryValue.IsValid() && !SteamCountryValue->IsNull())
    {
        FString TmpValue;
        if (SteamCountryValue->TryGetString(TmpValue)) { SteamCountry = TmpValue; }
    }

    SteamCurrency = readCurrencyFromValue(obj->TryGetField(TEXT("SteamCurrency")));

    const TSharedPtr<FJsonValue> SteamIdValue = obj->TryGetField(TEXT("SteamId"));
    if (SteamIdValue.IsValid() && !SteamIdValue->IsNull())
    {
        FString TmpValue;
        if (SteamIdValue->TryGetString(TmpValue)) { SteamId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SteamNameValue = obj->TryGetField(TEXT("SteamName"));
    if (SteamNameValue.IsValid() && !SteamNameValue->IsNull())
    {
        FString TmpValue;
        if (SteamNameValue->TryGetString(TmpValue)) { SteamName = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::ServerModels::writeUserOriginationEnumJSON(UserOrigination enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case UserOriginationOrganic: writer->WriteValue(TEXT("Organic")); break;
    case UserOriginationSteam: writer->WriteValue(TEXT("Steam")); break;
    case UserOriginationGoogle: writer->WriteValue(TEXT("Google")); break;
    case UserOriginationAmazon: writer->WriteValue(TEXT("Amazon")); break;
    case UserOriginationFacebook: writer->WriteValue(TEXT("Facebook")); break;
    case UserOriginationKongregate: writer->WriteValue(TEXT("Kongregate")); break;
    case UserOriginationGamersFirst: writer->WriteValue(TEXT("GamersFirst")); break;
    case UserOriginationUnknown: writer->WriteValue(TEXT("Unknown")); break;
    case UserOriginationIOS: writer->WriteValue(TEXT("IOS")); break;
    case UserOriginationLoadTest: writer->WriteValue(TEXT("LoadTest")); break;
    case UserOriginationAndroid: writer->WriteValue(TEXT("Android")); break;
    case UserOriginationPSN: writer->WriteValue(TEXT("PSN")); break;
    case UserOriginationGameCenter: writer->WriteValue(TEXT("GameCenter")); break;
    case UserOriginationCustomId: writer->WriteValue(TEXT("CustomId")); break;
    case UserOriginationXboxLive: writer->WriteValue(TEXT("XboxLive")); break;
    case UserOriginationParse: writer->WriteValue(TEXT("Parse")); break;
    case UserOriginationTwitch: writer->WriteValue(TEXT("Twitch")); break;
    case UserOriginationWindowsHello: writer->WriteValue(TEXT("WindowsHello")); break;
    case UserOriginationServerCustomId: writer->WriteValue(TEXT("ServerCustomId")); break;
    case UserOriginationNintendoSwitchDeviceId: writer->WriteValue(TEXT("NintendoSwitchDeviceId")); break;
    case UserOriginationFacebookInstantGamesId: writer->WriteValue(TEXT("FacebookInstantGamesId")); break;
    case UserOriginationOpenIdConnect: writer->WriteValue(TEXT("OpenIdConnect")); break;
    case UserOriginationApple: writer->WriteValue(TEXT("Apple")); break;
    case UserOriginationNintendoSwitchAccount: writer->WriteValue(TEXT("NintendoSwitchAccount")); break;
    }
}

ServerModels::UserOrigination PlayFab::ServerModels::readUserOriginationFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readUserOriginationFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::UserOrigination PlayFab::ServerModels::readUserOriginationFromValue(const FString& value)
{
    static TMap<FString, UserOrigination> _UserOriginationMap;
    if (_UserOriginationMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _UserOriginationMap.Add(TEXT("Organic"), UserOriginationOrganic);
        _UserOriginationMap.Add(TEXT("Steam"), UserOriginationSteam);
        _UserOriginationMap.Add(TEXT("Google"), UserOriginationGoogle);
        _UserOriginationMap.Add(TEXT("Amazon"), UserOriginationAmazon);
        _UserOriginationMap.Add(TEXT("Facebook"), UserOriginationFacebook);
        _UserOriginationMap.Add(TEXT("Kongregate"), UserOriginationKongregate);
        _UserOriginationMap.Add(TEXT("GamersFirst"), UserOriginationGamersFirst);
        _UserOriginationMap.Add(TEXT("Unknown"), UserOriginationUnknown);
        _UserOriginationMap.Add(TEXT("IOS"), UserOriginationIOS);
        _UserOriginationMap.Add(TEXT("LoadTest"), UserOriginationLoadTest);
        _UserOriginationMap.Add(TEXT("Android"), UserOriginationAndroid);
        _UserOriginationMap.Add(TEXT("PSN"), UserOriginationPSN);
        _UserOriginationMap.Add(TEXT("GameCenter"), UserOriginationGameCenter);
        _UserOriginationMap.Add(TEXT("CustomId"), UserOriginationCustomId);
        _UserOriginationMap.Add(TEXT("XboxLive"), UserOriginationXboxLive);
        _UserOriginationMap.Add(TEXT("Parse"), UserOriginationParse);
        _UserOriginationMap.Add(TEXT("Twitch"), UserOriginationTwitch);
        _UserOriginationMap.Add(TEXT("WindowsHello"), UserOriginationWindowsHello);
        _UserOriginationMap.Add(TEXT("ServerCustomId"), UserOriginationServerCustomId);
        _UserOriginationMap.Add(TEXT("NintendoSwitchDeviceId"), UserOriginationNintendoSwitchDeviceId);
        _UserOriginationMap.Add(TEXT("FacebookInstantGamesId"), UserOriginationFacebookInstantGamesId);
        _UserOriginationMap.Add(TEXT("OpenIdConnect"), UserOriginationOpenIdConnect);
        _UserOriginationMap.Add(TEXT("Apple"), UserOriginationApple);
        _UserOriginationMap.Add(TEXT("NintendoSwitchAccount"), UserOriginationNintendoSwitchAccount);

    }

    if (!value.IsEmpty())
    {
        auto output = _UserOriginationMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return UserOriginationOrganic; // Basically critical fail
}

PlayFab::ServerModels::FEntityKey::~FEntityKey()
{

}

void PlayFab::ServerModels::FEntityKey::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Id.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EntityKey::Id, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FEntityKey::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserTitleInfo::~FUserTitleInfo()
{
    //if (TitlePlayerAccount != nullptr) delete TitlePlayerAccount;

}

void PlayFab::ServerModels::FUserTitleInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AvatarUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AvatarUrl"));
        writer->WriteValue(AvatarUrl);
    }

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writeDatetime(Created, writer);

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (FirstLogin.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FirstLogin"));
        writeDatetime(FirstLogin, writer);
    }

    if (isBanned.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("isBanned"));
        writer->WriteValue(isBanned);
    }

    if (LastLogin.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LastLogin"));
        writeDatetime(LastLogin, writer);
    }

    if (Origination.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Origination"));
        writeUserOriginationEnumJSON(Origination, writer);
    }

    if (TitlePlayerAccount.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("TitlePlayerAccount"));
        TitlePlayerAccount->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserTitleInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AvatarUrlValue = obj->TryGetField(TEXT("AvatarUrl"));
    if (AvatarUrlValue.IsValid() && !AvatarUrlValue->IsNull())
    {
        FString TmpValue;
        if (AvatarUrlValue->TryGetString(TmpValue)) { AvatarUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FirstLoginValue = obj->TryGetField(TEXT("FirstLogin"));
    if (FirstLoginValue.IsValid())
        FirstLogin = readDatetime(FirstLoginValue);


    const TSharedPtr<FJsonValue> isBannedValue = obj->TryGetField(TEXT("isBanned"));
    if (isBannedValue.IsValid() && !isBannedValue->IsNull())
    {
        bool TmpValue;
        if (isBannedValue->TryGetBool(TmpValue)) { isBanned = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LastLoginValue = obj->TryGetField(TEXT("LastLogin"));
    if (LastLoginValue.IsValid())
        LastLogin = readDatetime(LastLoginValue);


    Origination = readUserOriginationFromValue(obj->TryGetField(TEXT("Origination")));

    const TSharedPtr<FJsonValue> TitlePlayerAccountValue = obj->TryGetField(TEXT("TitlePlayerAccount"));
    if (TitlePlayerAccountValue.IsValid() && !TitlePlayerAccountValue->IsNull())
    {
        TitlePlayerAccount = MakeShareable(new FEntityKey(TitlePlayerAccountValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserTwitchInfo::~FUserTwitchInfo()
{

}

void PlayFab::ServerModels::FUserTwitchInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (TwitchId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TwitchId"));
        writer->WriteValue(TwitchId);
    }

    if (TwitchUserName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TwitchUserName"));
        writer->WriteValue(TwitchUserName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserTwitchInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> TwitchIdValue = obj->TryGetField(TEXT("TwitchId"));
    if (TwitchIdValue.IsValid() && !TwitchIdValue->IsNull())
    {
        FString TmpValue;
        if (TwitchIdValue->TryGetString(TmpValue)) { TwitchId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TwitchUserNameValue = obj->TryGetField(TEXT("TwitchUserName"));
    if (TwitchUserNameValue.IsValid() && !TwitchUserNameValue->IsNull())
    {
        FString TmpValue;
        if (TwitchUserNameValue->TryGetString(TmpValue)) { TwitchUserName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserWindowsHelloInfo::~FUserWindowsHelloInfo()
{

}

void PlayFab::ServerModels::FUserWindowsHelloInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (WindowsHelloDeviceName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("WindowsHelloDeviceName"));
        writer->WriteValue(WindowsHelloDeviceName);
    }

    if (WindowsHelloPublicKeyHash.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("WindowsHelloPublicKeyHash"));
        writer->WriteValue(WindowsHelloPublicKeyHash);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserWindowsHelloInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> WindowsHelloDeviceNameValue = obj->TryGetField(TEXT("WindowsHelloDeviceName"));
    if (WindowsHelloDeviceNameValue.IsValid() && !WindowsHelloDeviceNameValue->IsNull())
    {
        FString TmpValue;
        if (WindowsHelloDeviceNameValue->TryGetString(TmpValue)) { WindowsHelloDeviceName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> WindowsHelloPublicKeyHashValue = obj->TryGetField(TEXT("WindowsHelloPublicKeyHash"));
    if (WindowsHelloPublicKeyHashValue.IsValid() && !WindowsHelloPublicKeyHashValue->IsNull())
    {
        FString TmpValue;
        if (WindowsHelloPublicKeyHashValue->TryGetString(TmpValue)) { WindowsHelloPublicKeyHash = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserXboxInfo::~FUserXboxInfo()
{

}

void PlayFab::ServerModels::FUserXboxInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (XboxUserId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("XboxUserId"));
        writer->WriteValue(XboxUserId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserXboxInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> XboxUserIdValue = obj->TryGetField(TEXT("XboxUserId"));
    if (XboxUserIdValue.IsValid() && !XboxUserIdValue->IsNull())
    {
        FString TmpValue;
        if (XboxUserIdValue->TryGetString(TmpValue)) { XboxUserId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUserAccountInfo::~FUserAccountInfo()
{
    //if (AndroidDeviceInfo != nullptr) delete AndroidDeviceInfo;
    //if (AppleAccountInfo != nullptr) delete AppleAccountInfo;
    //if (CustomIdInfo != nullptr) delete CustomIdInfo;
    //if (FacebookInfo != nullptr) delete FacebookInfo;
    //if (FacebookInstantGamesIdInfo != nullptr) delete FacebookInstantGamesIdInfo;
    //if (GameCenterInfo != nullptr) delete GameCenterInfo;
    //if (GoogleInfo != nullptr) delete GoogleInfo;
    //if (IosDeviceInfo != nullptr) delete IosDeviceInfo;
    //if (KongregateInfo != nullptr) delete KongregateInfo;
    //if (NintendoSwitchAccountInfo != nullptr) delete NintendoSwitchAccountInfo;
    //if (NintendoSwitchDeviceIdInfo != nullptr) delete NintendoSwitchDeviceIdInfo;
    //if (PrivateInfo != nullptr) delete PrivateInfo;
    //if (PsnInfo != nullptr) delete PsnInfo;
    //if (SteamInfo != nullptr) delete SteamInfo;
    //if (TitleInfo != nullptr) delete TitleInfo;
    //if (TwitchInfo != nullptr) delete TwitchInfo;
    //if (WindowsHelloInfo != nullptr) delete WindowsHelloInfo;
    //if (XboxInfo != nullptr) delete XboxInfo;

}

void PlayFab::ServerModels::FUserAccountInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AndroidDeviceInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AndroidDeviceInfo"));
        AndroidDeviceInfo->writeJSON(writer);
    }

    if (AppleAccountInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AppleAccountInfo"));
        AppleAccountInfo->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writeDatetime(Created, writer);

    if (CustomIdInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("CustomIdInfo"));
        CustomIdInfo->writeJSON(writer);
    }

    if (FacebookInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("FacebookInfo"));
        FacebookInfo->writeJSON(writer);
    }

    if (FacebookInstantGamesIdInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("FacebookInstantGamesIdInfo"));
        FacebookInstantGamesIdInfo->writeJSON(writer);
    }

    if (GameCenterInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("GameCenterInfo"));
        GameCenterInfo->writeJSON(writer);
    }

    if (GoogleInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("GoogleInfo"));
        GoogleInfo->writeJSON(writer);
    }

    if (IosDeviceInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("IosDeviceInfo"));
        IosDeviceInfo->writeJSON(writer);
    }

    if (KongregateInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("KongregateInfo"));
        KongregateInfo->writeJSON(writer);
    }

    if (NintendoSwitchAccountInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("NintendoSwitchAccountInfo"));
        NintendoSwitchAccountInfo->writeJSON(writer);
    }

    if (NintendoSwitchDeviceIdInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("NintendoSwitchDeviceIdInfo"));
        NintendoSwitchDeviceIdInfo->writeJSON(writer);
    }

    if (OpenIdInfo.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("OpenIdInfo"));
        for (const FUserOpenIdInfo& item : OpenIdInfo)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (PrivateInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("PrivateInfo"));
        PrivateInfo->writeJSON(writer);
    }

    if (PsnInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("PsnInfo"));
        PsnInfo->writeJSON(writer);
    }

    if (SteamInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("SteamInfo"));
        SteamInfo->writeJSON(writer);
    }

    if (TitleInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("TitleInfo"));
        TitleInfo->writeJSON(writer);
    }

    if (TwitchInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("TwitchInfo"));
        TwitchInfo->writeJSON(writer);
    }

    if (Username.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Username"));
        writer->WriteValue(Username);
    }

    if (WindowsHelloInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("WindowsHelloInfo"));
        WindowsHelloInfo->writeJSON(writer);
    }

    if (XboxInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("XboxInfo"));
        XboxInfo->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserAccountInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AndroidDeviceInfoValue = obj->TryGetField(TEXT("AndroidDeviceInfo"));
    if (AndroidDeviceInfoValue.IsValid() && !AndroidDeviceInfoValue->IsNull())
    {
        AndroidDeviceInfo = MakeShareable(new FUserAndroidDeviceInfo(AndroidDeviceInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> AppleAccountInfoValue = obj->TryGetField(TEXT("AppleAccountInfo"));
    if (AppleAccountInfoValue.IsValid() && !AppleAccountInfoValue->IsNull())
    {
        AppleAccountInfo = MakeShareable(new FUserAppleIdInfo(AppleAccountInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> CustomIdInfoValue = obj->TryGetField(TEXT("CustomIdInfo"));
    if (CustomIdInfoValue.IsValid() && !CustomIdInfoValue->IsNull())
    {
        CustomIdInfo = MakeShareable(new FUserCustomIdInfo(CustomIdInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> FacebookInfoValue = obj->TryGetField(TEXT("FacebookInfo"));
    if (FacebookInfoValue.IsValid() && !FacebookInfoValue->IsNull())
    {
        FacebookInfo = MakeShareable(new FUserFacebookInfo(FacebookInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> FacebookInstantGamesIdInfoValue = obj->TryGetField(TEXT("FacebookInstantGamesIdInfo"));
    if (FacebookInstantGamesIdInfoValue.IsValid() && !FacebookInstantGamesIdInfoValue->IsNull())
    {
        FacebookInstantGamesIdInfo = MakeShareable(new FUserFacebookInstantGamesIdInfo(FacebookInstantGamesIdInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GameCenterInfoValue = obj->TryGetField(TEXT("GameCenterInfo"));
    if (GameCenterInfoValue.IsValid() && !GameCenterInfoValue->IsNull())
    {
        GameCenterInfo = MakeShareable(new FUserGameCenterInfo(GameCenterInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GoogleInfoValue = obj->TryGetField(TEXT("GoogleInfo"));
    if (GoogleInfoValue.IsValid() && !GoogleInfoValue->IsNull())
    {
        GoogleInfo = MakeShareable(new FUserGoogleInfo(GoogleInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IosDeviceInfoValue = obj->TryGetField(TEXT("IosDeviceInfo"));
    if (IosDeviceInfoValue.IsValid() && !IosDeviceInfoValue->IsNull())
    {
        IosDeviceInfo = MakeShareable(new FUserIosDeviceInfo(IosDeviceInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> KongregateInfoValue = obj->TryGetField(TEXT("KongregateInfo"));
    if (KongregateInfoValue.IsValid() && !KongregateInfoValue->IsNull())
    {
        KongregateInfo = MakeShareable(new FUserKongregateInfo(KongregateInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> NintendoSwitchAccountInfoValue = obj->TryGetField(TEXT("NintendoSwitchAccountInfo"));
    if (NintendoSwitchAccountInfoValue.IsValid() && !NintendoSwitchAccountInfoValue->IsNull())
    {
        NintendoSwitchAccountInfo = MakeShareable(new FUserNintendoSwitchAccountIdInfo(NintendoSwitchAccountInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> NintendoSwitchDeviceIdInfoValue = obj->TryGetField(TEXT("NintendoSwitchDeviceIdInfo"));
    if (NintendoSwitchDeviceIdInfoValue.IsValid() && !NintendoSwitchDeviceIdInfoValue->IsNull())
    {
        NintendoSwitchDeviceIdInfo = MakeShareable(new FUserNintendoSwitchDeviceIdInfo(NintendoSwitchDeviceIdInfoValue->AsObject()));
    }

    const TArray<TSharedPtr<FJsonValue>>&OpenIdInfoArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("OpenIdInfo"));
    for (int32 Idx = 0; Idx < OpenIdInfoArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = OpenIdInfoArray[Idx];
        OpenIdInfo.Add(FUserOpenIdInfo(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PrivateInfoValue = obj->TryGetField(TEXT("PrivateInfo"));
    if (PrivateInfoValue.IsValid() && !PrivateInfoValue->IsNull())
    {
        PrivateInfo = MakeShareable(new FUserPrivateAccountInfo(PrivateInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> PsnInfoValue = obj->TryGetField(TEXT("PsnInfo"));
    if (PsnInfoValue.IsValid() && !PsnInfoValue->IsNull())
    {
        PsnInfo = MakeShareable(new FUserPsnInfo(PsnInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> SteamInfoValue = obj->TryGetField(TEXT("SteamInfo"));
    if (SteamInfoValue.IsValid() && !SteamInfoValue->IsNull())
    {
        SteamInfo = MakeShareable(new FUserSteamInfo(SteamInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> TitleInfoValue = obj->TryGetField(TEXT("TitleInfo"));
    if (TitleInfoValue.IsValid() && !TitleInfoValue->IsNull())
    {
        TitleInfo = MakeShareable(new FUserTitleInfo(TitleInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> TwitchInfoValue = obj->TryGetField(TEXT("TwitchInfo"));
    if (TwitchInfoValue.IsValid() && !TwitchInfoValue->IsNull())
    {
        TwitchInfo = MakeShareable(new FUserTwitchInfo(TwitchInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> UsernameValue = obj->TryGetField(TEXT("Username"));
    if (UsernameValue.IsValid() && !UsernameValue->IsNull())
    {
        FString TmpValue;
        if (UsernameValue->TryGetString(TmpValue)) { Username = TmpValue; }
    }

    const TSharedPtr<FJsonValue> WindowsHelloInfoValue = obj->TryGetField(TEXT("WindowsHelloInfo"));
    if (WindowsHelloInfoValue.IsValid() && !WindowsHelloInfoValue->IsNull())
    {
        WindowsHelloInfo = MakeShareable(new FUserWindowsHelloInfo(WindowsHelloInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> XboxInfoValue = obj->TryGetField(TEXT("XboxInfo"));
    if (XboxInfoValue.IsValid() && !XboxInfoValue->IsNull())
    {
        XboxInfo = MakeShareable(new FUserXboxInfo(XboxInfoValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FAuthenticateSessionTicketResult::~FAuthenticateSessionTicketResult()
{
    //if (UserInfo != nullptr) delete UserInfo;

}

void PlayFab::ServerModels::FAuthenticateSessionTicketResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (IsSessionTicketExpired.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IsSessionTicketExpired"));
        writer->WriteValue(IsSessionTicketExpired);
    }

    if (UserInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("UserInfo"));
        UserInfo->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAuthenticateSessionTicketResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IsSessionTicketExpiredValue = obj->TryGetField(TEXT("IsSessionTicketExpired"));
    if (IsSessionTicketExpiredValue.IsValid() && !IsSessionTicketExpiredValue->IsNull())
    {
        bool TmpValue;
        if (IsSessionTicketExpiredValue->TryGetBool(TmpValue)) { IsSessionTicketExpired = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UserInfoValue = obj->TryGetField(TEXT("UserInfo"));
    if (UserInfoValue.IsValid() && !UserInfoValue->IsNull())
    {
        UserInfo = MakeShareable(new FUserAccountInfo(UserInfoValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FAwardSteamAchievementItem::~FAwardSteamAchievementItem()
{

}

void PlayFab::ServerModels::FAwardSteamAchievementItem::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!AchievementName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AwardSteamAchievementItem::AchievementName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("AchievementName"));
        writer->WriteValue(AchievementName);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: AwardSteamAchievementItem::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteIdentifierPrefix(TEXT("Result"));
    writer->WriteValue(Result);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAwardSteamAchievementItem::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AchievementNameValue = obj->TryGetField(TEXT("AchievementName"));
    if (AchievementNameValue.IsValid() && !AchievementNameValue->IsNull())
    {
        FString TmpValue;
        if (AchievementNameValue->TryGetString(TmpValue)) { AchievementName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ResultValue = obj->TryGetField(TEXT("Result"));
    if (ResultValue.IsValid() && !ResultValue->IsNull())
    {
        bool TmpValue;
        if (ResultValue->TryGetBool(TmpValue)) { Result = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FAwardSteamAchievementRequest::~FAwardSteamAchievementRequest()
{

}

void PlayFab::ServerModels::FAwardSteamAchievementRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("Achievements"));
    for (const FAwardSteamAchievementItem& item : Achievements)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAwardSteamAchievementRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AchievementsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Achievements"));
    for (int32 Idx = 0; Idx < AchievementsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AchievementsArray[Idx];
        Achievements.Add(FAwardSteamAchievementItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FAwardSteamAchievementResult::~FAwardSteamAchievementResult()
{

}

void PlayFab::ServerModels::FAwardSteamAchievementResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AchievementResults.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AchievementResults"));
        for (const FAwardSteamAchievementItem& item : AchievementResults)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FAwardSteamAchievementResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AchievementResultsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("AchievementResults"));
    for (int32 Idx = 0; Idx < AchievementResultsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AchievementResultsArray[Idx];
        AchievementResults.Add(FAwardSteamAchievementItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FBanInfo::~FBanInfo()
{

}

void PlayFab::ServerModels::FBanInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Active"));
    writer->WriteValue(Active);

    if (BanId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("BanId"));
        writer->WriteValue(BanId);
    }

    if (Created.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Created"));
        writeDatetime(Created, writer);
    }

    if (Expires.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Expires"));
        writeDatetime(Expires, writer);
    }

    if (IPAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IPAddress"));
        writer->WriteValue(IPAddress);
    }

    if (MACAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MACAddress"));
        writer->WriteValue(MACAddress);
    }

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FBanInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ActiveValue = obj->TryGetField(TEXT("Active"));
    if (ActiveValue.IsValid() && !ActiveValue->IsNull())
    {
        bool TmpValue;
        if (ActiveValue->TryGetBool(TmpValue)) { Active = TmpValue; }
    }

    const TSharedPtr<FJsonValue> BanIdValue = obj->TryGetField(TEXT("BanId"));
    if (BanIdValue.IsValid() && !BanIdValue->IsNull())
    {
        FString TmpValue;
        if (BanIdValue->TryGetString(TmpValue)) { BanId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> ExpiresValue = obj->TryGetField(TEXT("Expires"));
    if (ExpiresValue.IsValid())
        Expires = readDatetime(ExpiresValue);


    const TSharedPtr<FJsonValue> IPAddressValue = obj->TryGetField(TEXT("IPAddress"));
    if (IPAddressValue.IsValid() && !IPAddressValue->IsNull())
    {
        FString TmpValue;
        if (IPAddressValue->TryGetString(TmpValue)) { IPAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MACAddressValue = obj->TryGetField(TEXT("MACAddress"));
    if (MACAddressValue.IsValid() && !MACAddressValue->IsNull())
    {
        FString TmpValue;
        if (MACAddressValue->TryGetString(TmpValue)) { MACAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FBanRequest::~FBanRequest()
{

}

void PlayFab::ServerModels::FBanRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DurationInHours.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("DurationInHours"));
        writer->WriteValue(static_cast<int64>(DurationInHours));
    }

    if (IPAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IPAddress"));
        writer->WriteValue(IPAddress);
    }

    if (MACAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MACAddress"));
        writer->WriteValue(MACAddress);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: BanRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FBanRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DurationInHoursValue = obj->TryGetField(TEXT("DurationInHours"));
    if (DurationInHoursValue.IsValid() && !DurationInHoursValue->IsNull())
    {
        uint32 TmpValue;
        if (DurationInHoursValue->TryGetNumber(TmpValue)) { DurationInHours = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IPAddressValue = obj->TryGetField(TEXT("IPAddress"));
    if (IPAddressValue.IsValid() && !IPAddressValue->IsNull())
    {
        FString TmpValue;
        if (IPAddressValue->TryGetString(TmpValue)) { IPAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MACAddressValue = obj->TryGetField(TEXT("MACAddress"));
    if (MACAddressValue.IsValid() && !MACAddressValue->IsNull())
    {
        FString TmpValue;
        if (MACAddressValue->TryGetString(TmpValue)) { MACAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FBanUsersRequest::~FBanUsersRequest()
{

}

void PlayFab::ServerModels::FBanUsersRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("Bans"));
    for (const FBanRequest& item : Bans)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FBanUsersRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BansArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Bans"));
    for (int32 Idx = 0; Idx < BansArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BansArray[Idx];
        Bans.Add(FBanRequest(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FBanUsersResult::~FBanUsersResult()
{

}

void PlayFab::ServerModels::FBanUsersResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BanData.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BanData"));
        for (const FBanInfo& item : BanData)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FBanUsersResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BanDataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("BanData"));
    for (int32 Idx = 0; Idx < BanDataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BanDataArray[Idx];
        BanData.Add(FBanInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FCatalogItemBundleInfo::~FCatalogItemBundleInfo()
{

}

void PlayFab::ServerModels::FCatalogItemBundleInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BundledItems.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BundledItems"));
        for (const FString& item : BundledItems)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (BundledResultTables.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BundledResultTables"));
        for (const FString& item : BundledResultTables)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (BundledVirtualCurrencies.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("BundledVirtualCurrencies"));
        for (TMap<FString, uint32>::TConstIterator It(BundledVirtualCurrencies); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue(static_cast<int64>((*It).Value));
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FCatalogItemBundleInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("BundledItems"), BundledItems);

    obj->TryGetStringArrayField(TEXT("BundledResultTables"), BundledResultTables);

    const TSharedPtr<FJsonObject>* BundledVirtualCurrenciesObject;
    if (obj->TryGetObjectField(TEXT("BundledVirtualCurrencies"), BundledVirtualCurrenciesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*BundledVirtualCurrenciesObject)->Values); It; ++It)
        {
            uint32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            BundledVirtualCurrencies.Add(It.Key(), TmpValue);
        }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FCatalogItemConsumableInfo::~FCatalogItemConsumableInfo()
{

}

void PlayFab::ServerModels::FCatalogItemConsumableInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (UsageCount.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("UsageCount"));
        writer->WriteValue(static_cast<int64>(UsageCount));
    }

    if (UsagePeriod.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("UsagePeriod"));
        writer->WriteValue(static_cast<int64>(UsagePeriod));
    }

    if (UsagePeriodGroup.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("UsagePeriodGroup"));
        writer->WriteValue(UsagePeriodGroup);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FCatalogItemConsumableInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> UsageCountValue = obj->TryGetField(TEXT("UsageCount"));
    if (UsageCountValue.IsValid() && !UsageCountValue->IsNull())
    {
        uint32 TmpValue;
        if (UsageCountValue->TryGetNumber(TmpValue)) { UsageCount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsagePeriodValue = obj->TryGetField(TEXT("UsagePeriod"));
    if (UsagePeriodValue.IsValid() && !UsagePeriodValue->IsNull())
    {
        uint32 TmpValue;
        if (UsagePeriodValue->TryGetNumber(TmpValue)) { UsagePeriod = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsagePeriodGroupValue = obj->TryGetField(TEXT("UsagePeriodGroup"));
    if (UsagePeriodGroupValue.IsValid() && !UsagePeriodGroupValue->IsNull())
    {
        FString TmpValue;
        if (UsagePeriodGroupValue->TryGetString(TmpValue)) { UsagePeriodGroup = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FCatalogItemContainerInfo::~FCatalogItemContainerInfo()
{

}

void PlayFab::ServerModels::FCatalogItemContainerInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ItemContents.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ItemContents"));
        for (const FString& item : ItemContents)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (KeyItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("KeyItemId"));
        writer->WriteValue(KeyItemId);
    }

    if (ResultTableContents.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ResultTableContents"));
        for (const FString& item : ResultTableContents)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (VirtualCurrencyContents.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("VirtualCurrencyContents"));
        for (TMap<FString, uint32>::TConstIterator It(VirtualCurrencyContents); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue(static_cast<int64>((*It).Value));
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FCatalogItemContainerInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("ItemContents"), ItemContents);

    const TSharedPtr<FJsonValue> KeyItemIdValue = obj->TryGetField(TEXT("KeyItemId"));
    if (KeyItemIdValue.IsValid() && !KeyItemIdValue->IsNull())
    {
        FString TmpValue;
        if (KeyItemIdValue->TryGetString(TmpValue)) { KeyItemId = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("ResultTableContents"), ResultTableContents);

    const TSharedPtr<FJsonObject>* VirtualCurrencyContentsObject;
    if (obj->TryGetObjectField(TEXT("VirtualCurrencyContents"), VirtualCurrencyContentsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*VirtualCurrencyContentsObject)->Values); It; ++It)
        {
            uint32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            VirtualCurrencyContents.Add(It.Key(), TmpValue);
        }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FCatalogItem::~FCatalogItem()
{
    //if (Bundle != nullptr) delete Bundle;
    //if (Consumable != nullptr) delete Consumable;
    //if (Container != nullptr) delete Container;

}

void PlayFab::ServerModels::FCatalogItem::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Bundle.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Bundle"));
        Bundle->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("CanBecomeCharacter"));
    writer->WriteValue(CanBecomeCharacter);

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (Consumable.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Consumable"));
        Consumable->writeJSON(writer);
    }

    if (Container.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Container"));
        Container->writeJSON(writer);
    }

    if (CustomData.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CustomData"));
        writer->WriteValue(CustomData);
    }

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    writer->WriteIdentifierPrefix(TEXT("InitialLimitedEditionCount"));
    writer->WriteValue(InitialLimitedEditionCount);

    writer->WriteIdentifierPrefix(TEXT("IsLimitedEdition"));
    writer->WriteValue(IsLimitedEdition);

    writer->WriteIdentifierPrefix(TEXT("IsStackable"));
    writer->WriteValue(IsStackable);

    writer->WriteIdentifierPrefix(TEXT("IsTradable"));
    writer->WriteValue(IsTradable);

    if (ItemClass.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemClass"));
        writer->WriteValue(ItemClass);
    }

    if (!ItemId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CatalogItem::ItemId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (ItemImageUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemImageUrl"));
        writer->WriteValue(ItemImageUrl);
    }

    if (RealCurrencyPrices.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("RealCurrencyPrices"));
        for (TMap<FString, uint32>::TConstIterator It(RealCurrencyPrices); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue(static_cast<int64>((*It).Value));
        }
        writer->WriteObjectEnd();
    }

    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (VirtualCurrencyPrices.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("VirtualCurrencyPrices"));
        for (TMap<FString, uint32>::TConstIterator It(VirtualCurrencyPrices); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue(static_cast<int64>((*It).Value));
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FCatalogItem::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BundleValue = obj->TryGetField(TEXT("Bundle"));
    if (BundleValue.IsValid() && !BundleValue->IsNull())
    {
        Bundle = MakeShareable(new FCatalogItemBundleInfo(BundleValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> CanBecomeCharacterValue = obj->TryGetField(TEXT("CanBecomeCharacter"));
    if (CanBecomeCharacterValue.IsValid() && !CanBecomeCharacterValue->IsNull())
    {
        bool TmpValue;
        if (CanBecomeCharacterValue->TryGetBool(TmpValue)) { CanBecomeCharacter = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ConsumableValue = obj->TryGetField(TEXT("Consumable"));
    if (ConsumableValue.IsValid() && !ConsumableValue->IsNull())
    {
        Consumable = MakeShareable(new FCatalogItemConsumableInfo(ConsumableValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ContainerValue = obj->TryGetField(TEXT("Container"));
    if (ContainerValue.IsValid() && !ContainerValue->IsNull())
    {
        Container = MakeShareable(new FCatalogItemContainerInfo(ContainerValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> CustomDataValue = obj->TryGetField(TEXT("CustomData"));
    if (CustomDataValue.IsValid() && !CustomDataValue->IsNull())
    {
        FString TmpValue;
        if (CustomDataValue->TryGetString(TmpValue)) { CustomData = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> InitialLimitedEditionCountValue = obj->TryGetField(TEXT("InitialLimitedEditionCount"));
    if (InitialLimitedEditionCountValue.IsValid() && !InitialLimitedEditionCountValue->IsNull())
    {
        int32 TmpValue;
        if (InitialLimitedEditionCountValue->TryGetNumber(TmpValue)) { InitialLimitedEditionCount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IsLimitedEditionValue = obj->TryGetField(TEXT("IsLimitedEdition"));
    if (IsLimitedEditionValue.IsValid() && !IsLimitedEditionValue->IsNull())
    {
        bool TmpValue;
        if (IsLimitedEditionValue->TryGetBool(TmpValue)) { IsLimitedEdition = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IsStackableValue = obj->TryGetField(TEXT("IsStackable"));
    if (IsStackableValue.IsValid() && !IsStackableValue->IsNull())
    {
        bool TmpValue;
        if (IsStackableValue->TryGetBool(TmpValue)) { IsStackable = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IsTradableValue = obj->TryGetField(TEXT("IsTradable"));
    if (IsTradableValue.IsValid() && !IsTradableValue->IsNull())
    {
        bool TmpValue;
        if (IsTradableValue->TryGetBool(TmpValue)) { IsTradable = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemClassValue = obj->TryGetField(TEXT("ItemClass"));
    if (ItemClassValue.IsValid() && !ItemClassValue->IsNull())
    {
        FString TmpValue;
        if (ItemClassValue->TryGetString(TmpValue)) { ItemClass = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemImageUrlValue = obj->TryGetField(TEXT("ItemImageUrl"));
    if (ItemImageUrlValue.IsValid() && !ItemImageUrlValue->IsNull())
    {
        FString TmpValue;
        if (ItemImageUrlValue->TryGetString(TmpValue)) { ItemImageUrl = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* RealCurrencyPricesObject;
    if (obj->TryGetObjectField(TEXT("RealCurrencyPrices"), RealCurrencyPricesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*RealCurrencyPricesObject)->Values); It; ++It)
        {
            uint32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            RealCurrencyPrices.Add(It.Key(), TmpValue);
        }
    }

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    const TSharedPtr<FJsonObject>* VirtualCurrencyPricesObject;
    if (obj->TryGetObjectField(TEXT("VirtualCurrencyPrices"), VirtualCurrencyPricesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*VirtualCurrencyPricesObject)->Values); It; ++It)
        {
            uint32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            VirtualCurrencyPrices.Add(It.Key(), TmpValue);
        }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FItemInstance::~FItemInstance()
{

}

void PlayFab::ServerModels::FItemInstance::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Annotation.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Annotation"));
        writer->WriteValue(Annotation);
    }

    if (BundleContents.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BundleContents"));
        for (const FString& item : BundleContents)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (BundleParent.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("BundleParent"));
        writer->WriteValue(BundleParent);
    }

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CustomData.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomData"));
        for (TMap<FString, FString>::TConstIterator It(CustomData); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (Expiration.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Expiration"));
        writeDatetime(Expiration, writer);
    }

    if (ItemClass.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemClass"));
        writer->WriteValue(ItemClass);
    }

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (ItemInstanceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    if (PurchaseDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("PurchaseDate"));
        writeDatetime(PurchaseDate, writer);
    }

    if (RemainingUses.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("RemainingUses"));
        writer->WriteValue(RemainingUses);
    }

    if (UnitCurrency.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("UnitCurrency"));
        writer->WriteValue(UnitCurrency);
    }

    writer->WriteIdentifierPrefix(TEXT("UnitPrice"));
    writer->WriteValue(static_cast<int64>(UnitPrice));

    if (UsesIncrementedBy.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("UsesIncrementedBy"));
        writer->WriteValue(UsesIncrementedBy);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FItemInstance::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AnnotationValue = obj->TryGetField(TEXT("Annotation"));
    if (AnnotationValue.IsValid() && !AnnotationValue->IsNull())
    {
        FString TmpValue;
        if (AnnotationValue->TryGetString(TmpValue)) { Annotation = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("BundleContents"), BundleContents);

    const TSharedPtr<FJsonValue> BundleParentValue = obj->TryGetField(TEXT("BundleParent"));
    if (BundleParentValue.IsValid() && !BundleParentValue->IsNull())
    {
        FString TmpValue;
        if (BundleParentValue->TryGetString(TmpValue)) { BundleParent = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomDataObject;
    if (obj->TryGetObjectField(TEXT("CustomData"), CustomDataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomDataObject)->Values); It; ++It)
        {
            CustomData.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExpirationValue = obj->TryGetField(TEXT("Expiration"));
    if (ExpirationValue.IsValid())
        Expiration = readDatetime(ExpirationValue);


    const TSharedPtr<FJsonValue> ItemClassValue = obj->TryGetField(TEXT("ItemClass"));
    if (ItemClassValue.IsValid() && !ItemClassValue->IsNull())
    {
        FString TmpValue;
        if (ItemClassValue->TryGetString(TmpValue)) { ItemClass = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PurchaseDateValue = obj->TryGetField(TEXT("PurchaseDate"));
    if (PurchaseDateValue.IsValid())
        PurchaseDate = readDatetime(PurchaseDateValue);


    const TSharedPtr<FJsonValue> RemainingUsesValue = obj->TryGetField(TEXT("RemainingUses"));
    if (RemainingUsesValue.IsValid() && !RemainingUsesValue->IsNull())
    {
        int32 TmpValue;
        if (RemainingUsesValue->TryGetNumber(TmpValue)) { RemainingUses = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UnitCurrencyValue = obj->TryGetField(TEXT("UnitCurrency"));
    if (UnitCurrencyValue.IsValid() && !UnitCurrencyValue->IsNull())
    {
        FString TmpValue;
        if (UnitCurrencyValue->TryGetString(TmpValue)) { UnitCurrency = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UnitPriceValue = obj->TryGetField(TEXT("UnitPrice"));
    if (UnitPriceValue.IsValid() && !UnitPriceValue->IsNull())
    {
        uint32 TmpValue;
        if (UnitPriceValue->TryGetNumber(TmpValue)) { UnitPrice = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsesIncrementedByValue = obj->TryGetField(TEXT("UsesIncrementedBy"));
    if (UsesIncrementedByValue.IsValid() && !UsesIncrementedByValue->IsNull())
    {
        int32 TmpValue;
        if (UsesIncrementedByValue->TryGetNumber(TmpValue)) { UsesIncrementedBy = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FCharacterInventory::~FCharacterInventory()
{

}

void PlayFab::ServerModels::FCharacterInventory::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (Inventory.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Inventory"));
        for (const FItemInstance& item : Inventory)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FCharacterInventory::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&InventoryArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Inventory"));
    for (int32 Idx = 0; Idx < InventoryArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = InventoryArray[Idx];
        Inventory.Add(FItemInstance(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FCharacterLeaderboardEntry::~FCharacterLeaderboardEntry()
{

}

void PlayFab::ServerModels::FCharacterLeaderboardEntry::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CharacterName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterName"));
        writer->WriteValue(CharacterName);
    }

    if (CharacterType.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterType"));
        writer->WriteValue(CharacterType);
    }

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteIdentifierPrefix(TEXT("Position"));
    writer->WriteValue(Position);

    writer->WriteIdentifierPrefix(TEXT("StatValue"));
    writer->WriteValue(StatValue);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FCharacterLeaderboardEntry::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterNameValue = obj->TryGetField(TEXT("CharacterName"));
    if (CharacterNameValue.IsValid() && !CharacterNameValue->IsNull())
    {
        FString TmpValue;
        if (CharacterNameValue->TryGetString(TmpValue)) { CharacterName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterTypeValue = obj->TryGetField(TEXT("CharacterType"));
    if (CharacterTypeValue.IsValid() && !CharacterTypeValue->IsNull())
    {
        FString TmpValue;
        if (CharacterTypeValue->TryGetString(TmpValue)) { CharacterType = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PositionValue = obj->TryGetField(TEXT("Position"));
    if (PositionValue.IsValid() && !PositionValue->IsNull())
    {
        int32 TmpValue;
        if (PositionValue->TryGetNumber(TmpValue)) { Position = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StatValueValue = obj->TryGetField(TEXT("StatValue"));
    if (StatValueValue.IsValid() && !StatValueValue->IsNull())
    {
        int32 TmpValue;
        if (StatValueValue->TryGetNumber(TmpValue)) { StatValue = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FCharacterResult::~FCharacterResult()
{

}

void PlayFab::ServerModels::FCharacterResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CharacterName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterName"));
        writer->WriteValue(CharacterName);
    }

    if (CharacterType.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterType"));
        writer->WriteValue(CharacterType);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FCharacterResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterNameValue = obj->TryGetField(TEXT("CharacterName"));
    if (CharacterNameValue.IsValid() && !CharacterNameValue->IsNull())
    {
        FString TmpValue;
        if (CharacterNameValue->TryGetString(TmpValue)) { CharacterName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterTypeValue = obj->TryGetField(TEXT("CharacterType"));
    if (CharacterTypeValue.IsValid() && !CharacterTypeValue->IsNull())
    {
        FString TmpValue;
        if (CharacterTypeValue->TryGetString(TmpValue)) { CharacterType = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::ServerModels::writeCloudScriptRevisionOptionEnumJSON(CloudScriptRevisionOption enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case CloudScriptRevisionOptionLive: writer->WriteValue(TEXT("Live")); break;
    case CloudScriptRevisionOptionLatest: writer->WriteValue(TEXT("Latest")); break;
    case CloudScriptRevisionOptionSpecific: writer->WriteValue(TEXT("Specific")); break;
    }
}

ServerModels::CloudScriptRevisionOption PlayFab::ServerModels::readCloudScriptRevisionOptionFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readCloudScriptRevisionOptionFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::CloudScriptRevisionOption PlayFab::ServerModels::readCloudScriptRevisionOptionFromValue(const FString& value)
{
    static TMap<FString, CloudScriptRevisionOption> _CloudScriptRevisionOptionMap;
    if (_CloudScriptRevisionOptionMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _CloudScriptRevisionOptionMap.Add(TEXT("Live"), CloudScriptRevisionOptionLive);
        _CloudScriptRevisionOptionMap.Add(TEXT("Latest"), CloudScriptRevisionOptionLatest);
        _CloudScriptRevisionOptionMap.Add(TEXT("Specific"), CloudScriptRevisionOptionSpecific);

    }

    if (!value.IsEmpty())
    {
        auto output = _CloudScriptRevisionOptionMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return CloudScriptRevisionOptionLive; // Basically critical fail
}

PlayFab::ServerModels::FConsumeItemRequest::~FConsumeItemRequest()
{

}

void PlayFab::ServerModels::FConsumeItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    writer->WriteIdentifierPrefix(TEXT("ConsumeCount"));
    writer->WriteValue(ConsumeCount);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!ItemInstanceId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ConsumeItemRequest::ItemInstanceId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ConsumeItemRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FConsumeItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ConsumeCountValue = obj->TryGetField(TEXT("ConsumeCount"));
    if (ConsumeCountValue.IsValid() && !ConsumeCountValue->IsNull())
    {
        int32 TmpValue;
        if (ConsumeCountValue->TryGetNumber(TmpValue)) { ConsumeCount = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FConsumeItemResult::~FConsumeItemResult()
{

}

void PlayFab::ServerModels::FConsumeItemResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ItemInstanceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    writer->WriteIdentifierPrefix(TEXT("RemainingUses"));
    writer->WriteValue(RemainingUses);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FConsumeItemResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RemainingUsesValue = obj->TryGetField(TEXT("RemainingUses"));
    if (RemainingUsesValue.IsValid() && !RemainingUsesValue->IsNull())
    {
        int32 TmpValue;
        if (RemainingUsesValue->TryGetNumber(TmpValue)) { RemainingUses = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::ServerModels::writeEmailVerificationStatusEnumJSON(EmailVerificationStatus enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case EmailVerificationStatusUnverified: writer->WriteValue(TEXT("Unverified")); break;
    case EmailVerificationStatusPending: writer->WriteValue(TEXT("Pending")); break;
    case EmailVerificationStatusConfirmed: writer->WriteValue(TEXT("Confirmed")); break;
    }
}

ServerModels::EmailVerificationStatus PlayFab::ServerModels::readEmailVerificationStatusFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readEmailVerificationStatusFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::EmailVerificationStatus PlayFab::ServerModels::readEmailVerificationStatusFromValue(const FString& value)
{
    static TMap<FString, EmailVerificationStatus> _EmailVerificationStatusMap;
    if (_EmailVerificationStatusMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _EmailVerificationStatusMap.Add(TEXT("Unverified"), EmailVerificationStatusUnverified);
        _EmailVerificationStatusMap.Add(TEXT("Pending"), EmailVerificationStatusPending);
        _EmailVerificationStatusMap.Add(TEXT("Confirmed"), EmailVerificationStatusConfirmed);

    }

    if (!value.IsEmpty())
    {
        auto output = _EmailVerificationStatusMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return EmailVerificationStatusUnverified; // Basically critical fail
}

PlayFab::ServerModels::FContactEmailInfo::~FContactEmailInfo()
{

}

void PlayFab::ServerModels::FContactEmailInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (EmailAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EmailAddress"));
        writer->WriteValue(EmailAddress);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (VerificationStatus.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("VerificationStatus"));
        writeEmailVerificationStatusEnumJSON(VerificationStatus, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FContactEmailInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EmailAddressValue = obj->TryGetField(TEXT("EmailAddress"));
    if (EmailAddressValue.IsValid() && !EmailAddressValue->IsNull())
    {
        FString TmpValue;
        if (EmailAddressValue->TryGetString(TmpValue)) { EmailAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    VerificationStatus = readEmailVerificationStatusFromValue(obj->TryGetField(TEXT("VerificationStatus")));

    return HasSucceeded;
}

PlayFab::ServerModels::FContactEmailInfoModel::~FContactEmailInfoModel()
{

}

void PlayFab::ServerModels::FContactEmailInfoModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (EmailAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EmailAddress"));
        writer->WriteValue(EmailAddress);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (VerificationStatus.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("VerificationStatus"));
        writeEmailVerificationStatusEnumJSON(VerificationStatus, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FContactEmailInfoModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EmailAddressValue = obj->TryGetField(TEXT("EmailAddress"));
    if (EmailAddressValue.IsValid() && !EmailAddressValue->IsNull())
    {
        FString TmpValue;
        if (EmailAddressValue->TryGetString(TmpValue)) { EmailAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    VerificationStatus = readEmailVerificationStatusFromValue(obj->TryGetField(TEXT("VerificationStatus")));

    return HasSucceeded;
}

void PlayFab::ServerModels::writeContinentCodeEnumJSON(ContinentCode enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case ContinentCodeAF: writer->WriteValue(TEXT("AF")); break;
    case ContinentCodeAN: writer->WriteValue(TEXT("AN")); break;
    case ContinentCodeAS: writer->WriteValue(TEXT("AS")); break;
    case ContinentCodeEU: writer->WriteValue(TEXT("EU")); break;
    case ContinentCodeNA: writer->WriteValue(TEXT("NA")); break;
    case ContinentCodeOC: writer->WriteValue(TEXT("OC")); break;
    case ContinentCodeSA: writer->WriteValue(TEXT("SA")); break;
    }
}

ServerModels::ContinentCode PlayFab::ServerModels::readContinentCodeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readContinentCodeFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::ContinentCode PlayFab::ServerModels::readContinentCodeFromValue(const FString& value)
{
    static TMap<FString, ContinentCode> _ContinentCodeMap;
    if (_ContinentCodeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _ContinentCodeMap.Add(TEXT("AF"), ContinentCodeAF);
        _ContinentCodeMap.Add(TEXT("AN"), ContinentCodeAN);
        _ContinentCodeMap.Add(TEXT("AS"), ContinentCodeAS);
        _ContinentCodeMap.Add(TEXT("EU"), ContinentCodeEU);
        _ContinentCodeMap.Add(TEXT("NA"), ContinentCodeNA);
        _ContinentCodeMap.Add(TEXT("OC"), ContinentCodeOC);
        _ContinentCodeMap.Add(TEXT("SA"), ContinentCodeSA);

    }

    if (!value.IsEmpty())
    {
        auto output = _ContinentCodeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return ContinentCodeAF; // Basically critical fail
}

void PlayFab::ServerModels::writeCountryCodeEnumJSON(CountryCode enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case CountryCodeAF: writer->WriteValue(TEXT("AF")); break;
    case CountryCodeAX: writer->WriteValue(TEXT("AX")); break;
    case CountryCodeAL: writer->WriteValue(TEXT("AL")); break;
    case CountryCodeDZ: writer->WriteValue(TEXT("DZ")); break;
    case CountryCodeAS: writer->WriteValue(TEXT("AS")); break;
    case CountryCodeAD: writer->WriteValue(TEXT("AD")); break;
    case CountryCodeAO: writer->WriteValue(TEXT("AO")); break;
    case CountryCodeAI: writer->WriteValue(TEXT("AI")); break;
    case CountryCodeAQ: writer->WriteValue(TEXT("AQ")); break;
    case CountryCodeAG: writer->WriteValue(TEXT("AG")); break;
    case CountryCodeAR: writer->WriteValue(TEXT("AR")); break;
    case CountryCodeAM: writer->WriteValue(TEXT("AM")); break;
    case CountryCodeAW: writer->WriteValue(TEXT("AW")); break;
    case CountryCodeAU: writer->WriteValue(TEXT("AU")); break;
    case CountryCodeAT: writer->WriteValue(TEXT("AT")); break;
    case CountryCodeAZ: writer->WriteValue(TEXT("AZ")); break;
    case CountryCodeBS: writer->WriteValue(TEXT("BS")); break;
    case CountryCodeBH: writer->WriteValue(TEXT("BH")); break;
    case CountryCodeBD: writer->WriteValue(TEXT("BD")); break;
    case CountryCodeBB: writer->WriteValue(TEXT("BB")); break;
    case CountryCodeBY: writer->WriteValue(TEXT("BY")); break;
    case CountryCodeBE: writer->WriteValue(TEXT("BE")); break;
    case CountryCodeBZ: writer->WriteValue(TEXT("BZ")); break;
    case CountryCodeBJ: writer->WriteValue(TEXT("BJ")); break;
    case CountryCodeBM: writer->WriteValue(TEXT("BM")); break;
    case CountryCodeBT: writer->WriteValue(TEXT("BT")); break;
    case CountryCodeBO: writer->WriteValue(TEXT("BO")); break;
    case CountryCodeBQ: writer->WriteValue(TEXT("BQ")); break;
    case CountryCodeBA: writer->WriteValue(TEXT("BA")); break;
    case CountryCodeBW: writer->WriteValue(TEXT("BW")); break;
    case CountryCodeBV: writer->WriteValue(TEXT("BV")); break;
    case CountryCodeBR: writer->WriteValue(TEXT("BR")); break;
    case CountryCodeIO: writer->WriteValue(TEXT("IO")); break;
    case CountryCodeBN: writer->WriteValue(TEXT("BN")); break;
    case CountryCodeBG: writer->WriteValue(TEXT("BG")); break;
    case CountryCodeBF: writer->WriteValue(TEXT("BF")); break;
    case CountryCodeBI: writer->WriteValue(TEXT("BI")); break;
    case CountryCodeKH: writer->WriteValue(TEXT("KH")); break;
    case CountryCodeCM: writer->WriteValue(TEXT("CM")); break;
    case CountryCodeCA: writer->WriteValue(TEXT("CA")); break;
    case CountryCodeCV: writer->WriteValue(TEXT("CV")); break;
    case CountryCodeKY: writer->WriteValue(TEXT("KY")); break;
    case CountryCodeCF: writer->WriteValue(TEXT("CF")); break;
    case CountryCodeTD: writer->WriteValue(TEXT("TD")); break;
    case CountryCodeCL: writer->WriteValue(TEXT("CL")); break;
    case CountryCodeCN: writer->WriteValue(TEXT("CN")); break;
    case CountryCodeCX: writer->WriteValue(TEXT("CX")); break;
    case CountryCodeCC: writer->WriteValue(TEXT("CC")); break;
    case CountryCodeCO: writer->WriteValue(TEXT("CO")); break;
    case CountryCodeKM: writer->WriteValue(TEXT("KM")); break;
    case CountryCodeCG: writer->WriteValue(TEXT("CG")); break;
    case CountryCodeCD: writer->WriteValue(TEXT("CD")); break;
    case CountryCodeCK: writer->WriteValue(TEXT("CK")); break;
    case CountryCodeCR: writer->WriteValue(TEXT("CR")); break;
    case CountryCodeCI: writer->WriteValue(TEXT("CI")); break;
    case CountryCodeHR: writer->WriteValue(TEXT("HR")); break;
    case CountryCodeCU: writer->WriteValue(TEXT("CU")); break;
    case CountryCodeCW: writer->WriteValue(TEXT("CW")); break;
    case CountryCodeCY: writer->WriteValue(TEXT("CY")); break;
    case CountryCodeCZ: writer->WriteValue(TEXT("CZ")); break;
    case CountryCodeDK: writer->WriteValue(TEXT("DK")); break;
    case CountryCodeDJ: writer->WriteValue(TEXT("DJ")); break;
    case CountryCodeDM: writer->WriteValue(TEXT("DM")); break;
    case CountryCodeDO: writer->WriteValue(TEXT("DO")); break;
    case CountryCodeEC: writer->WriteValue(TEXT("EC")); break;
    case CountryCodeEG: writer->WriteValue(TEXT("EG")); break;
    case CountryCodeSV: writer->WriteValue(TEXT("SV")); break;
    case CountryCodeGQ: writer->WriteValue(TEXT("GQ")); break;
    case CountryCodeER: writer->WriteValue(TEXT("ER")); break;
    case CountryCodeEE: writer->WriteValue(TEXT("EE")); break;
    case CountryCodeET: writer->WriteValue(TEXT("ET")); break;
    case CountryCodeFK: writer->WriteValue(TEXT("FK")); break;
    case CountryCodeFO: writer->WriteValue(TEXT("FO")); break;
    case CountryCodeFJ: writer->WriteValue(TEXT("FJ")); break;
    case CountryCodeFI: writer->WriteValue(TEXT("FI")); break;
    case CountryCodeFR: writer->WriteValue(TEXT("FR")); break;
    case CountryCodeGF: writer->WriteValue(TEXT("GF")); break;
    case CountryCodePF: writer->WriteValue(TEXT("PF")); break;
    case CountryCodeTF: writer->WriteValue(TEXT("TF")); break;
    case CountryCodeGA: writer->WriteValue(TEXT("GA")); break;
    case CountryCodeGM: writer->WriteValue(TEXT("GM")); break;
    case CountryCodeGE: writer->WriteValue(TEXT("GE")); break;
    case CountryCodeDE: writer->WriteValue(TEXT("DE")); break;
    case CountryCodeGH: writer->WriteValue(TEXT("GH")); break;
    case CountryCodeGI: writer->WriteValue(TEXT("GI")); break;
    case CountryCodeGR: writer->WriteValue(TEXT("GR")); break;
    case CountryCodeGL: writer->WriteValue(TEXT("GL")); break;
    case CountryCodeGD: writer->WriteValue(TEXT("GD")); break;
    case CountryCodeGP: writer->WriteValue(TEXT("GP")); break;
    case CountryCodeGU: writer->WriteValue(TEXT("GU")); break;
    case CountryCodeGT: writer->WriteValue(TEXT("GT")); break;
    case CountryCodeGG: writer->WriteValue(TEXT("GG")); break;
    case CountryCodeGN: writer->WriteValue(TEXT("GN")); break;
    case CountryCodeGW: writer->WriteValue(TEXT("GW")); break;
    case CountryCodeGY: writer->WriteValue(TEXT("GY")); break;
    case CountryCodeHT: writer->WriteValue(TEXT("HT")); break;
    case CountryCodeHM: writer->WriteValue(TEXT("HM")); break;
    case CountryCodeVA: writer->WriteValue(TEXT("VA")); break;
    case CountryCodeHN: writer->WriteValue(TEXT("HN")); break;
    case CountryCodeHK: writer->WriteValue(TEXT("HK")); break;
    case CountryCodeHU: writer->WriteValue(TEXT("HU")); break;
    case CountryCodeIS: writer->WriteValue(TEXT("IS")); break;
    case CountryCodeIN: writer->WriteValue(TEXT("IN")); break;
    case CountryCodeID: writer->WriteValue(TEXT("ID")); break;
    case CountryCodeIR: writer->WriteValue(TEXT("IR")); break;
    case CountryCodeIQ: writer->WriteValue(TEXT("IQ")); break;
    case CountryCodeIE: writer->WriteValue(TEXT("IE")); break;
    case CountryCodeIM: writer->WriteValue(TEXT("IM")); break;
    case CountryCodeIL: writer->WriteValue(TEXT("IL")); break;
    case CountryCodeIT: writer->WriteValue(TEXT("IT")); break;
    case CountryCodeJM: writer->WriteValue(TEXT("JM")); break;
    case CountryCodeJP: writer->WriteValue(TEXT("JP")); break;
    case CountryCodeJE: writer->WriteValue(TEXT("JE")); break;
    case CountryCodeJO: writer->WriteValue(TEXT("JO")); break;
    case CountryCodeKZ: writer->WriteValue(TEXT("KZ")); break;
    case CountryCodeKE: writer->WriteValue(TEXT("KE")); break;
    case CountryCodeKI: writer->WriteValue(TEXT("KI")); break;
    case CountryCodeKP: writer->WriteValue(TEXT("KP")); break;
    case CountryCodeKR: writer->WriteValue(TEXT("KR")); break;
    case CountryCodeKW: writer->WriteValue(TEXT("KW")); break;
    case CountryCodeKG: writer->WriteValue(TEXT("KG")); break;
    case CountryCodeLA: writer->WriteValue(TEXT("LA")); break;
    case CountryCodeLV: writer->WriteValue(TEXT("LV")); break;
    case CountryCodeLB: writer->WriteValue(TEXT("LB")); break;
    case CountryCodeLS: writer->WriteValue(TEXT("LS")); break;
    case CountryCodeLR: writer->WriteValue(TEXT("LR")); break;
    case CountryCodeLY: writer->WriteValue(TEXT("LY")); break;
    case CountryCodeLI: writer->WriteValue(TEXT("LI")); break;
    case CountryCodeLT: writer->WriteValue(TEXT("LT")); break;
    case CountryCodeLU: writer->WriteValue(TEXT("LU")); break;
    case CountryCodeMO: writer->WriteValue(TEXT("MO")); break;
    case CountryCodeMK: writer->WriteValue(TEXT("MK")); break;
    case CountryCodeMG: writer->WriteValue(TEXT("MG")); break;
    case CountryCodeMW: writer->WriteValue(TEXT("MW")); break;
    case CountryCodeMY: writer->WriteValue(TEXT("MY")); break;
    case CountryCodeMV: writer->WriteValue(TEXT("MV")); break;
    case CountryCodeML: writer->WriteValue(TEXT("ML")); break;
    case CountryCodeMT: writer->WriteValue(TEXT("MT")); break;
    case CountryCodeMH: writer->WriteValue(TEXT("MH")); break;
    case CountryCodeMQ: writer->WriteValue(TEXT("MQ")); break;
    case CountryCodeMR: writer->WriteValue(TEXT("MR")); break;
    case CountryCodeMU: writer->WriteValue(TEXT("MU")); break;
    case CountryCodeYT: writer->WriteValue(TEXT("YT")); break;
    case CountryCodeMX: writer->WriteValue(TEXT("MX")); break;
    case CountryCodeFM: writer->WriteValue(TEXT("FM")); break;
    case CountryCodeMD: writer->WriteValue(TEXT("MD")); break;
    case CountryCodeMC: writer->WriteValue(TEXT("MC")); break;
    case CountryCodeMN: writer->WriteValue(TEXT("MN")); break;
    case CountryCodeME: writer->WriteValue(TEXT("ME")); break;
    case CountryCodeMS: writer->WriteValue(TEXT("MS")); break;
    case CountryCodeMA: writer->WriteValue(TEXT("MA")); break;
    case CountryCodeMZ: writer->WriteValue(TEXT("MZ")); break;
    case CountryCodeMM: writer->WriteValue(TEXT("MM")); break;
    case CountryCodeNA: writer->WriteValue(TEXT("NA")); break;
    case CountryCodeNR: writer->WriteValue(TEXT("NR")); break;
    case CountryCodeNP: writer->WriteValue(TEXT("NP")); break;
    case CountryCodeNL: writer->WriteValue(TEXT("NL")); break;
    case CountryCodeNC: writer->WriteValue(TEXT("NC")); break;
    case CountryCodeNZ: writer->WriteValue(TEXT("NZ")); break;
    case CountryCodeNI: writer->WriteValue(TEXT("NI")); break;
    case CountryCodeNE: writer->WriteValue(TEXT("NE")); break;
    case CountryCodeNG: writer->WriteValue(TEXT("NG")); break;
    case CountryCodeNU: writer->WriteValue(TEXT("NU")); break;
    case CountryCodeNF: writer->WriteValue(TEXT("NF")); break;
    case CountryCodeMP: writer->WriteValue(TEXT("MP")); break;
    case CountryCodeNO: writer->WriteValue(TEXT("NO")); break;
    case CountryCodeOM: writer->WriteValue(TEXT("OM")); break;
    case CountryCodePK: writer->WriteValue(TEXT("PK")); break;
    case CountryCodePW: writer->WriteValue(TEXT("PW")); break;
    case CountryCodePS: writer->WriteValue(TEXT("PS")); break;
    case CountryCodePA: writer->WriteValue(TEXT("PA")); break;
    case CountryCodePG: writer->WriteValue(TEXT("PG")); break;
    case CountryCodePY: writer->WriteValue(TEXT("PY")); break;
    case CountryCodePE: writer->WriteValue(TEXT("PE")); break;
    case CountryCodePH: writer->WriteValue(TEXT("PH")); break;
    case CountryCodePN: writer->WriteValue(TEXT("PN")); break;
    case CountryCodePL: writer->WriteValue(TEXT("PL")); break;
    case CountryCodePT: writer->WriteValue(TEXT("PT")); break;
    case CountryCodePR: writer->WriteValue(TEXT("PR")); break;
    case CountryCodeQA: writer->WriteValue(TEXT("QA")); break;
    case CountryCodeRE: writer->WriteValue(TEXT("RE")); break;
    case CountryCodeRO: writer->WriteValue(TEXT("RO")); break;
    case CountryCodeRU: writer->WriteValue(TEXT("RU")); break;
    case CountryCodeRW: writer->WriteValue(TEXT("RW")); break;
    case CountryCodeBL: writer->WriteValue(TEXT("BL")); break;
    case CountryCodeSH: writer->WriteValue(TEXT("SH")); break;
    case CountryCodeKN: writer->WriteValue(TEXT("KN")); break;
    case CountryCodeLC: writer->WriteValue(TEXT("LC")); break;
    case CountryCodeMF: writer->WriteValue(TEXT("MF")); break;
    case CountryCodePM: writer->WriteValue(TEXT("PM")); break;
    case CountryCodeVC: writer->WriteValue(TEXT("VC")); break;
    case CountryCodeWS: writer->WriteValue(TEXT("WS")); break;
    case CountryCodeSM: writer->WriteValue(TEXT("SM")); break;
    case CountryCodeST: writer->WriteValue(TEXT("ST")); break;
    case CountryCodeSA: writer->WriteValue(TEXT("SA")); break;
    case CountryCodeSN: writer->WriteValue(TEXT("SN")); break;
    case CountryCodeRS: writer->WriteValue(TEXT("RS")); break;
    case CountryCodeSC: writer->WriteValue(TEXT("SC")); break;
    case CountryCodeSL: writer->WriteValue(TEXT("SL")); break;
    case CountryCodeSG: writer->WriteValue(TEXT("SG")); break;
    case CountryCodeSX: writer->WriteValue(TEXT("SX")); break;
    case CountryCodeSK: writer->WriteValue(TEXT("SK")); break;
    case CountryCodeSI: writer->WriteValue(TEXT("SI")); break;
    case CountryCodeSB: writer->WriteValue(TEXT("SB")); break;
    case CountryCodeSO: writer->WriteValue(TEXT("SO")); break;
    case CountryCodeZA: writer->WriteValue(TEXT("ZA")); break;
    case CountryCodeGS: writer->WriteValue(TEXT("GS")); break;
    case CountryCodeSS: writer->WriteValue(TEXT("SS")); break;
    case CountryCodeES: writer->WriteValue(TEXT("ES")); break;
    case CountryCodeLK: writer->WriteValue(TEXT("LK")); break;
    case CountryCodeSD: writer->WriteValue(TEXT("SD")); break;
    case CountryCodeSR: writer->WriteValue(TEXT("SR")); break;
    case CountryCodeSJ: writer->WriteValue(TEXT("SJ")); break;
    case CountryCodeSZ: writer->WriteValue(TEXT("SZ")); break;
    case CountryCodeSE: writer->WriteValue(TEXT("SE")); break;
    case CountryCodeCH: writer->WriteValue(TEXT("CH")); break;
    case CountryCodeSY: writer->WriteValue(TEXT("SY")); break;
    case CountryCodeTW: writer->WriteValue(TEXT("TW")); break;
    case CountryCodeTJ: writer->WriteValue(TEXT("TJ")); break;
    case CountryCodeTZ: writer->WriteValue(TEXT("TZ")); break;
    case CountryCodeTH: writer->WriteValue(TEXT("TH")); break;
    case CountryCodeTL: writer->WriteValue(TEXT("TL")); break;
    case CountryCodeTG: writer->WriteValue(TEXT("TG")); break;
    case CountryCodeTK: writer->WriteValue(TEXT("TK")); break;
    case CountryCodeTO: writer->WriteValue(TEXT("TO")); break;
    case CountryCodeTT: writer->WriteValue(TEXT("TT")); break;
    case CountryCodeTN: writer->WriteValue(TEXT("TN")); break;
    case CountryCodeTR: writer->WriteValue(TEXT("TR")); break;
    case CountryCodeTM: writer->WriteValue(TEXT("TM")); break;
    case CountryCodeTC: writer->WriteValue(TEXT("TC")); break;
    case CountryCodeTV: writer->WriteValue(TEXT("TV")); break;
    case CountryCodeUG: writer->WriteValue(TEXT("UG")); break;
    case CountryCodeUA: writer->WriteValue(TEXT("UA")); break;
    case CountryCodeAE: writer->WriteValue(TEXT("AE")); break;
    case CountryCodeGB: writer->WriteValue(TEXT("GB")); break;
    case CountryCodeUS: writer->WriteValue(TEXT("US")); break;
    case CountryCodeUM: writer->WriteValue(TEXT("UM")); break;
    case CountryCodeUY: writer->WriteValue(TEXT("UY")); break;
    case CountryCodeUZ: writer->WriteValue(TEXT("UZ")); break;
    case CountryCodeVU: writer->WriteValue(TEXT("VU")); break;
    case CountryCodeVE: writer->WriteValue(TEXT("VE")); break;
    case CountryCodeVN: writer->WriteValue(TEXT("VN")); break;
    case CountryCodeVG: writer->WriteValue(TEXT("VG")); break;
    case CountryCodeVI: writer->WriteValue(TEXT("VI")); break;
    case CountryCodeWF: writer->WriteValue(TEXT("WF")); break;
    case CountryCodeEH: writer->WriteValue(TEXT("EH")); break;
    case CountryCodeYE: writer->WriteValue(TEXT("YE")); break;
    case CountryCodeZM: writer->WriteValue(TEXT("ZM")); break;
    case CountryCodeZW: writer->WriteValue(TEXT("ZW")); break;
    }
}

ServerModels::CountryCode PlayFab::ServerModels::readCountryCodeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readCountryCodeFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::CountryCode PlayFab::ServerModels::readCountryCodeFromValue(const FString& value)
{
    static TMap<FString, CountryCode> _CountryCodeMap;
    if (_CountryCodeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _CountryCodeMap.Add(TEXT("AF"), CountryCodeAF);
        _CountryCodeMap.Add(TEXT("AX"), CountryCodeAX);
        _CountryCodeMap.Add(TEXT("AL"), CountryCodeAL);
        _CountryCodeMap.Add(TEXT("DZ"), CountryCodeDZ);
        _CountryCodeMap.Add(TEXT("AS"), CountryCodeAS);
        _CountryCodeMap.Add(TEXT("AD"), CountryCodeAD);
        _CountryCodeMap.Add(TEXT("AO"), CountryCodeAO);
        _CountryCodeMap.Add(TEXT("AI"), CountryCodeAI);
        _CountryCodeMap.Add(TEXT("AQ"), CountryCodeAQ);
        _CountryCodeMap.Add(TEXT("AG"), CountryCodeAG);
        _CountryCodeMap.Add(TEXT("AR"), CountryCodeAR);
        _CountryCodeMap.Add(TEXT("AM"), CountryCodeAM);
        _CountryCodeMap.Add(TEXT("AW"), CountryCodeAW);
        _CountryCodeMap.Add(TEXT("AU"), CountryCodeAU);
        _CountryCodeMap.Add(TEXT("AT"), CountryCodeAT);
        _CountryCodeMap.Add(TEXT("AZ"), CountryCodeAZ);
        _CountryCodeMap.Add(TEXT("BS"), CountryCodeBS);
        _CountryCodeMap.Add(TEXT("BH"), CountryCodeBH);
        _CountryCodeMap.Add(TEXT("BD"), CountryCodeBD);
        _CountryCodeMap.Add(TEXT("BB"), CountryCodeBB);
        _CountryCodeMap.Add(TEXT("BY"), CountryCodeBY);
        _CountryCodeMap.Add(TEXT("BE"), CountryCodeBE);
        _CountryCodeMap.Add(TEXT("BZ"), CountryCodeBZ);
        _CountryCodeMap.Add(TEXT("BJ"), CountryCodeBJ);
        _CountryCodeMap.Add(TEXT("BM"), CountryCodeBM);
        _CountryCodeMap.Add(TEXT("BT"), CountryCodeBT);
        _CountryCodeMap.Add(TEXT("BO"), CountryCodeBO);
        _CountryCodeMap.Add(TEXT("BQ"), CountryCodeBQ);
        _CountryCodeMap.Add(TEXT("BA"), CountryCodeBA);
        _CountryCodeMap.Add(TEXT("BW"), CountryCodeBW);
        _CountryCodeMap.Add(TEXT("BV"), CountryCodeBV);
        _CountryCodeMap.Add(TEXT("BR"), CountryCodeBR);
        _CountryCodeMap.Add(TEXT("IO"), CountryCodeIO);
        _CountryCodeMap.Add(TEXT("BN"), CountryCodeBN);
        _CountryCodeMap.Add(TEXT("BG"), CountryCodeBG);
        _CountryCodeMap.Add(TEXT("BF"), CountryCodeBF);
        _CountryCodeMap.Add(TEXT("BI"), CountryCodeBI);
        _CountryCodeMap.Add(TEXT("KH"), CountryCodeKH);
        _CountryCodeMap.Add(TEXT("CM"), CountryCodeCM);
        _CountryCodeMap.Add(TEXT("CA"), CountryCodeCA);
        _CountryCodeMap.Add(TEXT("CV"), CountryCodeCV);
        _CountryCodeMap.Add(TEXT("KY"), CountryCodeKY);
        _CountryCodeMap.Add(TEXT("CF"), CountryCodeCF);
        _CountryCodeMap.Add(TEXT("TD"), CountryCodeTD);
        _CountryCodeMap.Add(TEXT("CL"), CountryCodeCL);
        _CountryCodeMap.Add(TEXT("CN"), CountryCodeCN);
        _CountryCodeMap.Add(TEXT("CX"), CountryCodeCX);
        _CountryCodeMap.Add(TEXT("CC"), CountryCodeCC);
        _CountryCodeMap.Add(TEXT("CO"), CountryCodeCO);
        _CountryCodeMap.Add(TEXT("KM"), CountryCodeKM);
        _CountryCodeMap.Add(TEXT("CG"), CountryCodeCG);
        _CountryCodeMap.Add(TEXT("CD"), CountryCodeCD);
        _CountryCodeMap.Add(TEXT("CK"), CountryCodeCK);
        _CountryCodeMap.Add(TEXT("CR"), CountryCodeCR);
        _CountryCodeMap.Add(TEXT("CI"), CountryCodeCI);
        _CountryCodeMap.Add(TEXT("HR"), CountryCodeHR);
        _CountryCodeMap.Add(TEXT("CU"), CountryCodeCU);
        _CountryCodeMap.Add(TEXT("CW"), CountryCodeCW);
        _CountryCodeMap.Add(TEXT("CY"), CountryCodeCY);
        _CountryCodeMap.Add(TEXT("CZ"), CountryCodeCZ);
        _CountryCodeMap.Add(TEXT("DK"), CountryCodeDK);
        _CountryCodeMap.Add(TEXT("DJ"), CountryCodeDJ);
        _CountryCodeMap.Add(TEXT("DM"), CountryCodeDM);
        _CountryCodeMap.Add(TEXT("DO"), CountryCodeDO);
        _CountryCodeMap.Add(TEXT("EC"), CountryCodeEC);
        _CountryCodeMap.Add(TEXT("EG"), CountryCodeEG);
        _CountryCodeMap.Add(TEXT("SV"), CountryCodeSV);
        _CountryCodeMap.Add(TEXT("GQ"), CountryCodeGQ);
        _CountryCodeMap.Add(TEXT("ER"), CountryCodeER);
        _CountryCodeMap.Add(TEXT("EE"), CountryCodeEE);
        _CountryCodeMap.Add(TEXT("ET"), CountryCodeET);
        _CountryCodeMap.Add(TEXT("FK"), CountryCodeFK);
        _CountryCodeMap.Add(TEXT("FO"), CountryCodeFO);
        _CountryCodeMap.Add(TEXT("FJ"), CountryCodeFJ);
        _CountryCodeMap.Add(TEXT("FI"), CountryCodeFI);
        _CountryCodeMap.Add(TEXT("FR"), CountryCodeFR);
        _CountryCodeMap.Add(TEXT("GF"), CountryCodeGF);
        _CountryCodeMap.Add(TEXT("PF"), CountryCodePF);
        _CountryCodeMap.Add(TEXT("TF"), CountryCodeTF);
        _CountryCodeMap.Add(TEXT("GA"), CountryCodeGA);
        _CountryCodeMap.Add(TEXT("GM"), CountryCodeGM);
        _CountryCodeMap.Add(TEXT("GE"), CountryCodeGE);
        _CountryCodeMap.Add(TEXT("DE"), CountryCodeDE);
        _CountryCodeMap.Add(TEXT("GH"), CountryCodeGH);
        _CountryCodeMap.Add(TEXT("GI"), CountryCodeGI);
        _CountryCodeMap.Add(TEXT("GR"), CountryCodeGR);
        _CountryCodeMap.Add(TEXT("GL"), CountryCodeGL);
        _CountryCodeMap.Add(TEXT("GD"), CountryCodeGD);
        _CountryCodeMap.Add(TEXT("GP"), CountryCodeGP);
        _CountryCodeMap.Add(TEXT("GU"), CountryCodeGU);
        _CountryCodeMap.Add(TEXT("GT"), CountryCodeGT);
        _CountryCodeMap.Add(TEXT("GG"), CountryCodeGG);
        _CountryCodeMap.Add(TEXT("GN"), CountryCodeGN);
        _CountryCodeMap.Add(TEXT("GW"), CountryCodeGW);
        _CountryCodeMap.Add(TEXT("GY"), CountryCodeGY);
        _CountryCodeMap.Add(TEXT("HT"), CountryCodeHT);
        _CountryCodeMap.Add(TEXT("HM"), CountryCodeHM);
        _CountryCodeMap.Add(TEXT("VA"), CountryCodeVA);
        _CountryCodeMap.Add(TEXT("HN"), CountryCodeHN);
        _CountryCodeMap.Add(TEXT("HK"), CountryCodeHK);
        _CountryCodeMap.Add(TEXT("HU"), CountryCodeHU);
        _CountryCodeMap.Add(TEXT("IS"), CountryCodeIS);
        _CountryCodeMap.Add(TEXT("IN"), CountryCodeIN);
        _CountryCodeMap.Add(TEXT("ID"), CountryCodeID);
        _CountryCodeMap.Add(TEXT("IR"), CountryCodeIR);
        _CountryCodeMap.Add(TEXT("IQ"), CountryCodeIQ);
        _CountryCodeMap.Add(TEXT("IE"), CountryCodeIE);
        _CountryCodeMap.Add(TEXT("IM"), CountryCodeIM);
        _CountryCodeMap.Add(TEXT("IL"), CountryCodeIL);
        _CountryCodeMap.Add(TEXT("IT"), CountryCodeIT);
        _CountryCodeMap.Add(TEXT("JM"), CountryCodeJM);
        _CountryCodeMap.Add(TEXT("JP"), CountryCodeJP);
        _CountryCodeMap.Add(TEXT("JE"), CountryCodeJE);
        _CountryCodeMap.Add(TEXT("JO"), CountryCodeJO);
        _CountryCodeMap.Add(TEXT("KZ"), CountryCodeKZ);
        _CountryCodeMap.Add(TEXT("KE"), CountryCodeKE);
        _CountryCodeMap.Add(TEXT("KI"), CountryCodeKI);
        _CountryCodeMap.Add(TEXT("KP"), CountryCodeKP);
        _CountryCodeMap.Add(TEXT("KR"), CountryCodeKR);
        _CountryCodeMap.Add(TEXT("KW"), CountryCodeKW);
        _CountryCodeMap.Add(TEXT("KG"), CountryCodeKG);
        _CountryCodeMap.Add(TEXT("LA"), CountryCodeLA);
        _CountryCodeMap.Add(TEXT("LV"), CountryCodeLV);
        _CountryCodeMap.Add(TEXT("LB"), CountryCodeLB);
        _CountryCodeMap.Add(TEXT("LS"), CountryCodeLS);
        _CountryCodeMap.Add(TEXT("LR"), CountryCodeLR);
        _CountryCodeMap.Add(TEXT("LY"), CountryCodeLY);
        _CountryCodeMap.Add(TEXT("LI"), CountryCodeLI);
        _CountryCodeMap.Add(TEXT("LT"), CountryCodeLT);
        _CountryCodeMap.Add(TEXT("LU"), CountryCodeLU);
        _CountryCodeMap.Add(TEXT("MO"), CountryCodeMO);
        _CountryCodeMap.Add(TEXT("MK"), CountryCodeMK);
        _CountryCodeMap.Add(TEXT("MG"), CountryCodeMG);
        _CountryCodeMap.Add(TEXT("MW"), CountryCodeMW);
        _CountryCodeMap.Add(TEXT("MY"), CountryCodeMY);
        _CountryCodeMap.Add(TEXT("MV"), CountryCodeMV);
        _CountryCodeMap.Add(TEXT("ML"), CountryCodeML);
        _CountryCodeMap.Add(TEXT("MT"), CountryCodeMT);
        _CountryCodeMap.Add(TEXT("MH"), CountryCodeMH);
        _CountryCodeMap.Add(TEXT("MQ"), CountryCodeMQ);
        _CountryCodeMap.Add(TEXT("MR"), CountryCodeMR);
        _CountryCodeMap.Add(TEXT("MU"), CountryCodeMU);
        _CountryCodeMap.Add(TEXT("YT"), CountryCodeYT);
        _CountryCodeMap.Add(TEXT("MX"), CountryCodeMX);
        _CountryCodeMap.Add(TEXT("FM"), CountryCodeFM);
        _CountryCodeMap.Add(TEXT("MD"), CountryCodeMD);
        _CountryCodeMap.Add(TEXT("MC"), CountryCodeMC);
        _CountryCodeMap.Add(TEXT("MN"), CountryCodeMN);
        _CountryCodeMap.Add(TEXT("ME"), CountryCodeME);
        _CountryCodeMap.Add(TEXT("MS"), CountryCodeMS);
        _CountryCodeMap.Add(TEXT("MA"), CountryCodeMA);
        _CountryCodeMap.Add(TEXT("MZ"), CountryCodeMZ);
        _CountryCodeMap.Add(TEXT("MM"), CountryCodeMM);
        _CountryCodeMap.Add(TEXT("NA"), CountryCodeNA);
        _CountryCodeMap.Add(TEXT("NR"), CountryCodeNR);
        _CountryCodeMap.Add(TEXT("NP"), CountryCodeNP);
        _CountryCodeMap.Add(TEXT("NL"), CountryCodeNL);
        _CountryCodeMap.Add(TEXT("NC"), CountryCodeNC);
        _CountryCodeMap.Add(TEXT("NZ"), CountryCodeNZ);
        _CountryCodeMap.Add(TEXT("NI"), CountryCodeNI);
        _CountryCodeMap.Add(TEXT("NE"), CountryCodeNE);
        _CountryCodeMap.Add(TEXT("NG"), CountryCodeNG);
        _CountryCodeMap.Add(TEXT("NU"), CountryCodeNU);
        _CountryCodeMap.Add(TEXT("NF"), CountryCodeNF);
        _CountryCodeMap.Add(TEXT("MP"), CountryCodeMP);
        _CountryCodeMap.Add(TEXT("NO"), CountryCodeNO);
        _CountryCodeMap.Add(TEXT("OM"), CountryCodeOM);
        _CountryCodeMap.Add(TEXT("PK"), CountryCodePK);
        _CountryCodeMap.Add(TEXT("PW"), CountryCodePW);
        _CountryCodeMap.Add(TEXT("PS"), CountryCodePS);
        _CountryCodeMap.Add(TEXT("PA"), CountryCodePA);
        _CountryCodeMap.Add(TEXT("PG"), CountryCodePG);
        _CountryCodeMap.Add(TEXT("PY"), CountryCodePY);
        _CountryCodeMap.Add(TEXT("PE"), CountryCodePE);
        _CountryCodeMap.Add(TEXT("PH"), CountryCodePH);
        _CountryCodeMap.Add(TEXT("PN"), CountryCodePN);
        _CountryCodeMap.Add(TEXT("PL"), CountryCodePL);
        _CountryCodeMap.Add(TEXT("PT"), CountryCodePT);
        _CountryCodeMap.Add(TEXT("PR"), CountryCodePR);
        _CountryCodeMap.Add(TEXT("QA"), CountryCodeQA);
        _CountryCodeMap.Add(TEXT("RE"), CountryCodeRE);
        _CountryCodeMap.Add(TEXT("RO"), CountryCodeRO);
        _CountryCodeMap.Add(TEXT("RU"), CountryCodeRU);
        _CountryCodeMap.Add(TEXT("RW"), CountryCodeRW);
        _CountryCodeMap.Add(TEXT("BL"), CountryCodeBL);
        _CountryCodeMap.Add(TEXT("SH"), CountryCodeSH);
        _CountryCodeMap.Add(TEXT("KN"), CountryCodeKN);
        _CountryCodeMap.Add(TEXT("LC"), CountryCodeLC);
        _CountryCodeMap.Add(TEXT("MF"), CountryCodeMF);
        _CountryCodeMap.Add(TEXT("PM"), CountryCodePM);
        _CountryCodeMap.Add(TEXT("VC"), CountryCodeVC);
        _CountryCodeMap.Add(TEXT("WS"), CountryCodeWS);
        _CountryCodeMap.Add(TEXT("SM"), CountryCodeSM);
        _CountryCodeMap.Add(TEXT("ST"), CountryCodeST);
        _CountryCodeMap.Add(TEXT("SA"), CountryCodeSA);
        _CountryCodeMap.Add(TEXT("SN"), CountryCodeSN);
        _CountryCodeMap.Add(TEXT("RS"), CountryCodeRS);
        _CountryCodeMap.Add(TEXT("SC"), CountryCodeSC);
        _CountryCodeMap.Add(TEXT("SL"), CountryCodeSL);
        _CountryCodeMap.Add(TEXT("SG"), CountryCodeSG);
        _CountryCodeMap.Add(TEXT("SX"), CountryCodeSX);
        _CountryCodeMap.Add(TEXT("SK"), CountryCodeSK);
        _CountryCodeMap.Add(TEXT("SI"), CountryCodeSI);
        _CountryCodeMap.Add(TEXT("SB"), CountryCodeSB);
        _CountryCodeMap.Add(TEXT("SO"), CountryCodeSO);
        _CountryCodeMap.Add(TEXT("ZA"), CountryCodeZA);
        _CountryCodeMap.Add(TEXT("GS"), CountryCodeGS);
        _CountryCodeMap.Add(TEXT("SS"), CountryCodeSS);
        _CountryCodeMap.Add(TEXT("ES"), CountryCodeES);
        _CountryCodeMap.Add(TEXT("LK"), CountryCodeLK);
        _CountryCodeMap.Add(TEXT("SD"), CountryCodeSD);
        _CountryCodeMap.Add(TEXT("SR"), CountryCodeSR);
        _CountryCodeMap.Add(TEXT("SJ"), CountryCodeSJ);
        _CountryCodeMap.Add(TEXT("SZ"), CountryCodeSZ);
        _CountryCodeMap.Add(TEXT("SE"), CountryCodeSE);
        _CountryCodeMap.Add(TEXT("CH"), CountryCodeCH);
        _CountryCodeMap.Add(TEXT("SY"), CountryCodeSY);
        _CountryCodeMap.Add(TEXT("TW"), CountryCodeTW);
        _CountryCodeMap.Add(TEXT("TJ"), CountryCodeTJ);
        _CountryCodeMap.Add(TEXT("TZ"), CountryCodeTZ);
        _CountryCodeMap.Add(TEXT("TH"), CountryCodeTH);
        _CountryCodeMap.Add(TEXT("TL"), CountryCodeTL);
        _CountryCodeMap.Add(TEXT("TG"), CountryCodeTG);
        _CountryCodeMap.Add(TEXT("TK"), CountryCodeTK);
        _CountryCodeMap.Add(TEXT("TO"), CountryCodeTO);
        _CountryCodeMap.Add(TEXT("TT"), CountryCodeTT);
        _CountryCodeMap.Add(TEXT("TN"), CountryCodeTN);
        _CountryCodeMap.Add(TEXT("TR"), CountryCodeTR);
        _CountryCodeMap.Add(TEXT("TM"), CountryCodeTM);
        _CountryCodeMap.Add(TEXT("TC"), CountryCodeTC);
        _CountryCodeMap.Add(TEXT("TV"), CountryCodeTV);
        _CountryCodeMap.Add(TEXT("UG"), CountryCodeUG);
        _CountryCodeMap.Add(TEXT("UA"), CountryCodeUA);
        _CountryCodeMap.Add(TEXT("AE"), CountryCodeAE);
        _CountryCodeMap.Add(TEXT("GB"), CountryCodeGB);
        _CountryCodeMap.Add(TEXT("US"), CountryCodeUS);
        _CountryCodeMap.Add(TEXT("UM"), CountryCodeUM);
        _CountryCodeMap.Add(TEXT("UY"), CountryCodeUY);
        _CountryCodeMap.Add(TEXT("UZ"), CountryCodeUZ);
        _CountryCodeMap.Add(TEXT("VU"), CountryCodeVU);
        _CountryCodeMap.Add(TEXT("VE"), CountryCodeVE);
        _CountryCodeMap.Add(TEXT("VN"), CountryCodeVN);
        _CountryCodeMap.Add(TEXT("VG"), CountryCodeVG);
        _CountryCodeMap.Add(TEXT("VI"), CountryCodeVI);
        _CountryCodeMap.Add(TEXT("WF"), CountryCodeWF);
        _CountryCodeMap.Add(TEXT("EH"), CountryCodeEH);
        _CountryCodeMap.Add(TEXT("YE"), CountryCodeYE);
        _CountryCodeMap.Add(TEXT("ZM"), CountryCodeZM);
        _CountryCodeMap.Add(TEXT("ZW"), CountryCodeZW);

    }

    if (!value.IsEmpty())
    {
        auto output = _CountryCodeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return CountryCodeAF; // Basically critical fail
}

PlayFab::ServerModels::FCreateSharedGroupRequest::~FCreateSharedGroupRequest()
{

}

void PlayFab::ServerModels::FCreateSharedGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (SharedGroupId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SharedGroupId"));
        writer->WriteValue(SharedGroupId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FCreateSharedGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> SharedGroupIdValue = obj->TryGetField(TEXT("SharedGroupId"));
    if (SharedGroupIdValue.IsValid() && !SharedGroupIdValue->IsNull())
    {
        FString TmpValue;
        if (SharedGroupIdValue->TryGetString(TmpValue)) { SharedGroupId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FCreateSharedGroupResult::~FCreateSharedGroupResult()
{

}

void PlayFab::ServerModels::FCreateSharedGroupResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (SharedGroupId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SharedGroupId"));
        writer->WriteValue(SharedGroupId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FCreateSharedGroupResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> SharedGroupIdValue = obj->TryGetField(TEXT("SharedGroupId"));
    if (SharedGroupIdValue.IsValid() && !SharedGroupIdValue->IsNull())
    {
        FString TmpValue;
        if (SharedGroupIdValue->TryGetString(TmpValue)) { SharedGroupId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FDeleteCharacterFromUserRequest::~FDeleteCharacterFromUserRequest()
{

}

void PlayFab::ServerModels::FDeleteCharacterFromUserRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!CharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeleteCharacterFromUserRequest::CharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeleteCharacterFromUserRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteIdentifierPrefix(TEXT("SaveCharacterInventory"));
    writer->WriteValue(SaveCharacterInventory);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FDeleteCharacterFromUserRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SaveCharacterInventoryValue = obj->TryGetField(TEXT("SaveCharacterInventory"));
    if (SaveCharacterInventoryValue.IsValid() && !SaveCharacterInventoryValue->IsNull())
    {
        bool TmpValue;
        if (SaveCharacterInventoryValue->TryGetBool(TmpValue)) { SaveCharacterInventory = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FDeleteCharacterFromUserResult::~FDeleteCharacterFromUserResult()
{

}

void PlayFab::ServerModels::FDeleteCharacterFromUserResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FDeleteCharacterFromUserResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FDeletePlayerRequest::~FDeletePlayerRequest()
{

}

void PlayFab::ServerModels::FDeletePlayerRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeletePlayerRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FDeletePlayerRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FDeletePlayerResult::~FDeletePlayerResult()
{

}

void PlayFab::ServerModels::FDeletePlayerResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FDeletePlayerResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FDeletePushNotificationTemplateRequest::~FDeletePushNotificationTemplateRequest()
{

}

void PlayFab::ServerModels::FDeletePushNotificationTemplateRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!PushNotificationTemplateId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeletePushNotificationTemplateRequest::PushNotificationTemplateId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PushNotificationTemplateId"));
        writer->WriteValue(PushNotificationTemplateId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FDeletePushNotificationTemplateRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PushNotificationTemplateIdValue = obj->TryGetField(TEXT("PushNotificationTemplateId"));
    if (PushNotificationTemplateIdValue.IsValid() && !PushNotificationTemplateIdValue->IsNull())
    {
        FString TmpValue;
        if (PushNotificationTemplateIdValue->TryGetString(TmpValue)) { PushNotificationTemplateId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FDeletePushNotificationTemplateResult::~FDeletePushNotificationTemplateResult()
{

}

void PlayFab::ServerModels::FDeletePushNotificationTemplateResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FDeletePushNotificationTemplateResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FDeleteSharedGroupRequest::~FDeleteSharedGroupRequest()
{

}

void PlayFab::ServerModels::FDeleteSharedGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!SharedGroupId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeleteSharedGroupRequest::SharedGroupId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("SharedGroupId"));
        writer->WriteValue(SharedGroupId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FDeleteSharedGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> SharedGroupIdValue = obj->TryGetField(TEXT("SharedGroupId"));
    if (SharedGroupIdValue.IsValid() && !SharedGroupIdValue->IsNull())
    {
        FString TmpValue;
        if (SharedGroupIdValue->TryGetString(TmpValue)) { SharedGroupId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FDeregisterGameRequest::~FDeregisterGameRequest()
{

}

void PlayFab::ServerModels::FDeregisterGameRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!LobbyId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeregisterGameRequest::LobbyId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("LobbyId"));
        writer->WriteValue(LobbyId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FDeregisterGameRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> LobbyIdValue = obj->TryGetField(TEXT("LobbyId"));
    if (LobbyIdValue.IsValid() && !LobbyIdValue->IsNull())
    {
        FString TmpValue;
        if (LobbyIdValue->TryGetString(TmpValue)) { LobbyId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FDeregisterGameResponse::~FDeregisterGameResponse()
{

}

void PlayFab::ServerModels::FDeregisterGameResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FDeregisterGameResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FEmptyResponse::~FEmptyResponse()
{

}

void PlayFab::ServerModels::FEmptyResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FEmptyResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FEmptyResult::~FEmptyResult()
{

}

void PlayFab::ServerModels::FEmptyResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FEmptyResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FEntityTokenResponse::~FEntityTokenResponse()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::ServerModels::FEntityTokenResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (EntityToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EntityToken"));
        writer->WriteValue(EntityToken);
    }

    if (TokenExpiration.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("TokenExpiration"));
        writeDatetime(TokenExpiration, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FEntityTokenResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> EntityTokenValue = obj->TryGetField(TEXT("EntityToken"));
    if (EntityTokenValue.IsValid() && !EntityTokenValue->IsNull())
    {
        FString TmpValue;
        if (EntityTokenValue->TryGetString(TmpValue)) { EntityToken = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TokenExpirationValue = obj->TryGetField(TEXT("TokenExpiration"));
    if (TokenExpirationValue.IsValid())
        TokenExpiration = readDatetime(TokenExpirationValue);


    return HasSucceeded;
}

PlayFab::ServerModels::FEvaluateRandomResultTableRequest::~FEvaluateRandomResultTableRequest()
{

}

void PlayFab::ServerModels::FEvaluateRandomResultTableRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (!TableId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EvaluateRandomResultTableRequest::TableId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("TableId"));
        writer->WriteValue(TableId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FEvaluateRandomResultTableRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TableIdValue = obj->TryGetField(TEXT("TableId"));
    if (TableIdValue.IsValid() && !TableIdValue->IsNull())
    {
        FString TmpValue;
        if (TableIdValue->TryGetString(TmpValue)) { TableId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FEvaluateRandomResultTableResult::~FEvaluateRandomResultTableResult()
{

}

void PlayFab::ServerModels::FEvaluateRandomResultTableResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ResultItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ResultItemId"));
        writer->WriteValue(ResultItemId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FEvaluateRandomResultTableResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ResultItemIdValue = obj->TryGetField(TEXT("ResultItemId"));
    if (ResultItemIdValue.IsValid() && !ResultItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ResultItemIdValue->TryGetString(TmpValue)) { ResultItemId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FScriptExecutionError::~FScriptExecutionError()
{

}

void PlayFab::ServerModels::FScriptExecutionError::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Error.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Error"));
        writer->WriteValue(Error);
    }

    if (Message.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Message"));
        writer->WriteValue(Message);
    }

    if (StackTrace.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StackTrace"));
        writer->WriteValue(StackTrace);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FScriptExecutionError::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ErrorValue = obj->TryGetField(TEXT("Error"));
    if (ErrorValue.IsValid() && !ErrorValue->IsNull())
    {
        FString TmpValue;
        if (ErrorValue->TryGetString(TmpValue)) { Error = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MessageValue = obj->TryGetField(TEXT("Message"));
    if (MessageValue.IsValid() && !MessageValue->IsNull())
    {
        FString TmpValue;
        if (MessageValue->TryGetString(TmpValue)) { Message = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StackTraceValue = obj->TryGetField(TEXT("StackTrace"));
    if (StackTraceValue.IsValid() && !StackTraceValue->IsNull())
    {
        FString TmpValue;
        if (StackTraceValue->TryGetString(TmpValue)) { StackTrace = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FLogStatement::~FLogStatement()
{

}

void PlayFab::ServerModels::FLogStatement::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Data"));
        Data.writeJSON(writer);
    }

    if (Level.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Level"));
        writer->WriteValue(Level);
    }

    if (Message.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Message"));
        writer->WriteValue(Message);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FLogStatement::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataValue = obj->TryGetField(TEXT("Data"));
    if (DataValue.IsValid() && !DataValue->IsNull())
    {
        Data = FJsonKeeper(DataValue);
    }

    const TSharedPtr<FJsonValue> LevelValue = obj->TryGetField(TEXT("Level"));
    if (LevelValue.IsValid() && !LevelValue->IsNull())
    {
        FString TmpValue;
        if (LevelValue->TryGetString(TmpValue)) { Level = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MessageValue = obj->TryGetField(TEXT("Message"));
    if (MessageValue.IsValid() && !MessageValue->IsNull())
    {
        FString TmpValue;
        if (MessageValue->TryGetString(TmpValue)) { Message = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FExecuteCloudScriptResult::~FExecuteCloudScriptResult()
{
    //if (Error != nullptr) delete Error;

}

void PlayFab::ServerModels::FExecuteCloudScriptResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("APIRequestsIssued"));
    writer->WriteValue(APIRequestsIssued);

    if (Error.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Error"));
        Error->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("ExecutionTimeSeconds"));
    writer->WriteValue(ExecutionTimeSeconds);

    if (FunctionName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionName"));
        writer->WriteValue(FunctionName);
    }

    if (FunctionResult.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionResult"));
        FunctionResult.writeJSON(writer);
    }

    if (FunctionResultTooLarge.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionResultTooLarge"));
        writer->WriteValue(FunctionResultTooLarge);
    }

    writer->WriteIdentifierPrefix(TEXT("HttpRequestsIssued"));
    writer->WriteValue(HttpRequestsIssued);

    if (Logs.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Logs"));
        for (const FLogStatement& item : Logs)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (LogsTooLarge.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LogsTooLarge"));
        writer->WriteValue(LogsTooLarge);
    }

    writer->WriteIdentifierPrefix(TEXT("MemoryConsumedBytes"));
    writer->WriteValue(static_cast<int64>(MemoryConsumedBytes));

    writer->WriteIdentifierPrefix(TEXT("ProcessorTimeSeconds"));
    writer->WriteValue(ProcessorTimeSeconds);

    writer->WriteIdentifierPrefix(TEXT("Revision"));
    writer->WriteValue(Revision);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FExecuteCloudScriptResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> APIRequestsIssuedValue = obj->TryGetField(TEXT("APIRequestsIssued"));
    if (APIRequestsIssuedValue.IsValid() && !APIRequestsIssuedValue->IsNull())
    {
        int32 TmpValue;
        if (APIRequestsIssuedValue->TryGetNumber(TmpValue)) { APIRequestsIssued = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ErrorValue = obj->TryGetField(TEXT("Error"));
    if (ErrorValue.IsValid() && !ErrorValue->IsNull())
    {
        Error = MakeShareable(new FScriptExecutionError(ErrorValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ExecutionTimeSecondsValue = obj->TryGetField(TEXT("ExecutionTimeSeconds"));
    if (ExecutionTimeSecondsValue.IsValid() && !ExecutionTimeSecondsValue->IsNull())
    {
        double TmpValue;
        if (ExecutionTimeSecondsValue->TryGetNumber(TmpValue)) { ExecutionTimeSeconds = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionNameValue = obj->TryGetField(TEXT("FunctionName"));
    if (FunctionNameValue.IsValid() && !FunctionNameValue->IsNull())
    {
        FString TmpValue;
        if (FunctionNameValue->TryGetString(TmpValue)) { FunctionName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionResultValue = obj->TryGetField(TEXT("FunctionResult"));
    if (FunctionResultValue.IsValid() && !FunctionResultValue->IsNull())
    {
        FunctionResult = FJsonKeeper(FunctionResultValue);
    }

    const TSharedPtr<FJsonValue> FunctionResultTooLargeValue = obj->TryGetField(TEXT("FunctionResultTooLarge"));
    if (FunctionResultTooLargeValue.IsValid() && !FunctionResultTooLargeValue->IsNull())
    {
        bool TmpValue;
        if (FunctionResultTooLargeValue->TryGetBool(TmpValue)) { FunctionResultTooLarge = TmpValue; }
    }

    const TSharedPtr<FJsonValue> HttpRequestsIssuedValue = obj->TryGetField(TEXT("HttpRequestsIssued"));
    if (HttpRequestsIssuedValue.IsValid() && !HttpRequestsIssuedValue->IsNull())
    {
        int32 TmpValue;
        if (HttpRequestsIssuedValue->TryGetNumber(TmpValue)) { HttpRequestsIssued = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&LogsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Logs"));
    for (int32 Idx = 0; Idx < LogsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LogsArray[Idx];
        Logs.Add(FLogStatement(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> LogsTooLargeValue = obj->TryGetField(TEXT("LogsTooLarge"));
    if (LogsTooLargeValue.IsValid() && !LogsTooLargeValue->IsNull())
    {
        bool TmpValue;
        if (LogsTooLargeValue->TryGetBool(TmpValue)) { LogsTooLarge = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MemoryConsumedBytesValue = obj->TryGetField(TEXT("MemoryConsumedBytes"));
    if (MemoryConsumedBytesValue.IsValid() && !MemoryConsumedBytesValue->IsNull())
    {
        uint32 TmpValue;
        if (MemoryConsumedBytesValue->TryGetNumber(TmpValue)) { MemoryConsumedBytes = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProcessorTimeSecondsValue = obj->TryGetField(TEXT("ProcessorTimeSeconds"));
    if (ProcessorTimeSecondsValue.IsValid() && !ProcessorTimeSecondsValue->IsNull())
    {
        double TmpValue;
        if (ProcessorTimeSecondsValue->TryGetNumber(TmpValue)) { ProcessorTimeSeconds = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RevisionValue = obj->TryGetField(TEXT("Revision"));
    if (RevisionValue.IsValid() && !RevisionValue->IsNull())
    {
        int32 TmpValue;
        if (RevisionValue->TryGetNumber(TmpValue)) { Revision = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FExecuteCloudScriptServerRequest::~FExecuteCloudScriptServerRequest()
{

}

void PlayFab::ServerModels::FExecuteCloudScriptServerRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!FunctionName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ExecuteCloudScriptServerRequest::FunctionName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionName"));
        writer->WriteValue(FunctionName);
    }

    if (FunctionParameter.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionParameter"));
        FunctionParameter.writeJSON(writer);
    }

    if (GeneratePlayStreamEvent.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("GeneratePlayStreamEvent"));
        writer->WriteValue(GeneratePlayStreamEvent);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ExecuteCloudScriptServerRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (RevisionSelection.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("RevisionSelection"));
        writeCloudScriptRevisionOptionEnumJSON(RevisionSelection, writer);
    }

    if (SpecificRevision.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("SpecificRevision"));
        writer->WriteValue(SpecificRevision);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FExecuteCloudScriptServerRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> FunctionNameValue = obj->TryGetField(TEXT("FunctionName"));
    if (FunctionNameValue.IsValid() && !FunctionNameValue->IsNull())
    {
        FString TmpValue;
        if (FunctionNameValue->TryGetString(TmpValue)) { FunctionName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionParameterValue = obj->TryGetField(TEXT("FunctionParameter"));
    if (FunctionParameterValue.IsValid() && !FunctionParameterValue->IsNull())
    {
        FunctionParameter = FJsonKeeper(FunctionParameterValue);
    }

    const TSharedPtr<FJsonValue> GeneratePlayStreamEventValue = obj->TryGetField(TEXT("GeneratePlayStreamEvent"));
    if (GeneratePlayStreamEventValue.IsValid() && !GeneratePlayStreamEventValue->IsNull())
    {
        bool TmpValue;
        if (GeneratePlayStreamEventValue->TryGetBool(TmpValue)) { GeneratePlayStreamEvent = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    RevisionSelection = readCloudScriptRevisionOptionFromValue(obj->TryGetField(TEXT("RevisionSelection")));

    const TSharedPtr<FJsonValue> SpecificRevisionValue = obj->TryGetField(TEXT("SpecificRevision"));
    if (SpecificRevisionValue.IsValid() && !SpecificRevisionValue->IsNull())
    {
        int32 TmpValue;
        if (SpecificRevisionValue->TryGetNumber(TmpValue)) { SpecificRevision = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FFacebookInstantGamesPlayFabIdPair::~FFacebookInstantGamesPlayFabIdPair()
{

}

void PlayFab::ServerModels::FFacebookInstantGamesPlayFabIdPair::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FacebookInstantGamesId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FacebookInstantGamesId"));
        writer->WriteValue(FacebookInstantGamesId);
    }

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FFacebookInstantGamesPlayFabIdPair::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FacebookInstantGamesIdValue = obj->TryGetField(TEXT("FacebookInstantGamesId"));
    if (FacebookInstantGamesIdValue.IsValid() && !FacebookInstantGamesIdValue->IsNull())
    {
        FString TmpValue;
        if (FacebookInstantGamesIdValue->TryGetString(TmpValue)) { FacebookInstantGamesId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FFacebookPlayFabIdPair::~FFacebookPlayFabIdPair()
{

}

void PlayFab::ServerModels::FFacebookPlayFabIdPair::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FacebookId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FacebookId"));
        writer->WriteValue(FacebookId);
    }

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FFacebookPlayFabIdPair::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FacebookIdValue = obj->TryGetField(TEXT("FacebookId"));
    if (FacebookIdValue.IsValid() && !FacebookIdValue->IsNull())
    {
        FString TmpValue;
        if (FacebookIdValue->TryGetString(TmpValue)) { FacebookId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::ServerModels::writeLoginIdentityProviderEnumJSON(LoginIdentityProvider enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case LoginIdentityProviderUnknown: writer->WriteValue(TEXT("Unknown")); break;
    case LoginIdentityProviderPlayFab: writer->WriteValue(TEXT("PlayFab")); break;
    case LoginIdentityProviderCustom: writer->WriteValue(TEXT("Custom")); break;
    case LoginIdentityProviderGameCenter: writer->WriteValue(TEXT("GameCenter")); break;
    case LoginIdentityProviderGooglePlay: writer->WriteValue(TEXT("GooglePlay")); break;
    case LoginIdentityProviderSteam: writer->WriteValue(TEXT("Steam")); break;
    case LoginIdentityProviderXBoxLive: writer->WriteValue(TEXT("XBoxLive")); break;
    case LoginIdentityProviderPSN: writer->WriteValue(TEXT("PSN")); break;
    case LoginIdentityProviderKongregate: writer->WriteValue(TEXT("Kongregate")); break;
    case LoginIdentityProviderFacebook: writer->WriteValue(TEXT("Facebook")); break;
    case LoginIdentityProviderIOSDevice: writer->WriteValue(TEXT("IOSDevice")); break;
    case LoginIdentityProviderAndroidDevice: writer->WriteValue(TEXT("AndroidDevice")); break;
    case LoginIdentityProviderTwitch: writer->WriteValue(TEXT("Twitch")); break;
    case LoginIdentityProviderWindowsHello: writer->WriteValue(TEXT("WindowsHello")); break;
    case LoginIdentityProviderGameServer: writer->WriteValue(TEXT("GameServer")); break;
    case LoginIdentityProviderCustomServer: writer->WriteValue(TEXT("CustomServer")); break;
    case LoginIdentityProviderNintendoSwitch: writer->WriteValue(TEXT("NintendoSwitch")); break;
    case LoginIdentityProviderFacebookInstantGames: writer->WriteValue(TEXT("FacebookInstantGames")); break;
    case LoginIdentityProviderOpenIdConnect: writer->WriteValue(TEXT("OpenIdConnect")); break;
    case LoginIdentityProviderApple: writer->WriteValue(TEXT("Apple")); break;
    case LoginIdentityProviderNintendoSwitchAccount: writer->WriteValue(TEXT("NintendoSwitchAccount")); break;
    }
}

ServerModels::LoginIdentityProvider PlayFab::ServerModels::readLoginIdentityProviderFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readLoginIdentityProviderFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::LoginIdentityProvider PlayFab::ServerModels::readLoginIdentityProviderFromValue(const FString& value)
{
    static TMap<FString, LoginIdentityProvider> _LoginIdentityProviderMap;
    if (_LoginIdentityProviderMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _LoginIdentityProviderMap.Add(TEXT("Unknown"), LoginIdentityProviderUnknown);
        _LoginIdentityProviderMap.Add(TEXT("PlayFab"), LoginIdentityProviderPlayFab);
        _LoginIdentityProviderMap.Add(TEXT("Custom"), LoginIdentityProviderCustom);
        _LoginIdentityProviderMap.Add(TEXT("GameCenter"), LoginIdentityProviderGameCenter);
        _LoginIdentityProviderMap.Add(TEXT("GooglePlay"), LoginIdentityProviderGooglePlay);
        _LoginIdentityProviderMap.Add(TEXT("Steam"), LoginIdentityProviderSteam);
        _LoginIdentityProviderMap.Add(TEXT("XBoxLive"), LoginIdentityProviderXBoxLive);
        _LoginIdentityProviderMap.Add(TEXT("PSN"), LoginIdentityProviderPSN);
        _LoginIdentityProviderMap.Add(TEXT("Kongregate"), LoginIdentityProviderKongregate);
        _LoginIdentityProviderMap.Add(TEXT("Facebook"), LoginIdentityProviderFacebook);
        _LoginIdentityProviderMap.Add(TEXT("IOSDevice"), LoginIdentityProviderIOSDevice);
        _LoginIdentityProviderMap.Add(TEXT("AndroidDevice"), LoginIdentityProviderAndroidDevice);
        _LoginIdentityProviderMap.Add(TEXT("Twitch"), LoginIdentityProviderTwitch);
        _LoginIdentityProviderMap.Add(TEXT("WindowsHello"), LoginIdentityProviderWindowsHello);
        _LoginIdentityProviderMap.Add(TEXT("GameServer"), LoginIdentityProviderGameServer);
        _LoginIdentityProviderMap.Add(TEXT("CustomServer"), LoginIdentityProviderCustomServer);
        _LoginIdentityProviderMap.Add(TEXT("NintendoSwitch"), LoginIdentityProviderNintendoSwitch);
        _LoginIdentityProviderMap.Add(TEXT("FacebookInstantGames"), LoginIdentityProviderFacebookInstantGames);
        _LoginIdentityProviderMap.Add(TEXT("OpenIdConnect"), LoginIdentityProviderOpenIdConnect);
        _LoginIdentityProviderMap.Add(TEXT("Apple"), LoginIdentityProviderApple);
        _LoginIdentityProviderMap.Add(TEXT("NintendoSwitchAccount"), LoginIdentityProviderNintendoSwitchAccount);

    }

    if (!value.IsEmpty())
    {
        auto output = _LoginIdentityProviderMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return LoginIdentityProviderUnknown; // Basically critical fail
}

PlayFab::ServerModels::FLinkedPlatformAccountModel::~FLinkedPlatformAccountModel()
{

}

void PlayFab::ServerModels::FLinkedPlatformAccountModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Email.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Email"));
        writer->WriteValue(Email);
    }

    if (Platform.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writeLoginIdentityProviderEnumJSON(Platform, writer);
    }

    if (PlatformUserId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlatformUserId"));
        writer->WriteValue(PlatformUserId);
    }

    if (Username.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Username"));
        writer->WriteValue(Username);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FLinkedPlatformAccountModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EmailValue = obj->TryGetField(TEXT("Email"));
    if (EmailValue.IsValid() && !EmailValue->IsNull())
    {
        FString TmpValue;
        if (EmailValue->TryGetString(TmpValue)) { Email = TmpValue; }
    }

    Platform = readLoginIdentityProviderFromValue(obj->TryGetField(TEXT("Platform")));

    const TSharedPtr<FJsonValue> PlatformUserIdValue = obj->TryGetField(TEXT("PlatformUserId"));
    if (PlatformUserIdValue.IsValid() && !PlatformUserIdValue->IsNull())
    {
        FString TmpValue;
        if (PlatformUserIdValue->TryGetString(TmpValue)) { PlatformUserId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsernameValue = obj->TryGetField(TEXT("Username"));
    if (UsernameValue.IsValid() && !UsernameValue->IsNull())
    {
        FString TmpValue;
        if (UsernameValue->TryGetString(TmpValue)) { Username = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FLocationModel::~FLocationModel()
{

}

void PlayFab::ServerModels::FLocationModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (City.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("City"));
        writer->WriteValue(City);
    }

    if (pfContinentCode.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ContinentCode"));
        writeContinentCodeEnumJSON(pfContinentCode, writer);
    }

    if (pfCountryCode.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("CountryCode"));
        writeCountryCodeEnumJSON(pfCountryCode, writer);
    }

    if (Latitude.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Latitude"));
        writer->WriteValue(Latitude);
    }

    if (Longitude.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Longitude"));
        writer->WriteValue(Longitude);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FLocationModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CityValue = obj->TryGetField(TEXT("City"));
    if (CityValue.IsValid() && !CityValue->IsNull())
    {
        FString TmpValue;
        if (CityValue->TryGetString(TmpValue)) { City = TmpValue; }
    }

    pfContinentCode = readContinentCodeFromValue(obj->TryGetField(TEXT("ContinentCode")));

    pfCountryCode = readCountryCodeFromValue(obj->TryGetField(TEXT("CountryCode")));

    const TSharedPtr<FJsonValue> LatitudeValue = obj->TryGetField(TEXT("Latitude"));
    if (LatitudeValue.IsValid() && !LatitudeValue->IsNull())
    {
        double TmpValue;
        if (LatitudeValue->TryGetNumber(TmpValue)) { Latitude = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LongitudeValue = obj->TryGetField(TEXT("Longitude"));
    if (LongitudeValue.IsValid() && !LongitudeValue->IsNull())
    {
        double TmpValue;
        if (LongitudeValue->TryGetNumber(TmpValue)) { Longitude = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::ServerModels::writeSubscriptionProviderStatusEnumJSON(SubscriptionProviderStatus enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case SubscriptionProviderStatusNoError: writer->WriteValue(TEXT("NoError")); break;
    case SubscriptionProviderStatusCancelled: writer->WriteValue(TEXT("Cancelled")); break;
    case SubscriptionProviderStatusUnknownError: writer->WriteValue(TEXT("UnknownError")); break;
    case SubscriptionProviderStatusBillingError: writer->WriteValue(TEXT("BillingError")); break;
    case SubscriptionProviderStatusProductUnavailable: writer->WriteValue(TEXT("ProductUnavailable")); break;
    case SubscriptionProviderStatusCustomerDidNotAcceptPriceChange: writer->WriteValue(TEXT("CustomerDidNotAcceptPriceChange")); break;
    case SubscriptionProviderStatusFreeTrial: writer->WriteValue(TEXT("FreeTrial")); break;
    case SubscriptionProviderStatusPaymentPending: writer->WriteValue(TEXT("PaymentPending")); break;
    }
}

ServerModels::SubscriptionProviderStatus PlayFab::ServerModels::readSubscriptionProviderStatusFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readSubscriptionProviderStatusFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::SubscriptionProviderStatus PlayFab::ServerModels::readSubscriptionProviderStatusFromValue(const FString& value)
{
    static TMap<FString, SubscriptionProviderStatus> _SubscriptionProviderStatusMap;
    if (_SubscriptionProviderStatusMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _SubscriptionProviderStatusMap.Add(TEXT("NoError"), SubscriptionProviderStatusNoError);
        _SubscriptionProviderStatusMap.Add(TEXT("Cancelled"), SubscriptionProviderStatusCancelled);
        _SubscriptionProviderStatusMap.Add(TEXT("UnknownError"), SubscriptionProviderStatusUnknownError);
        _SubscriptionProviderStatusMap.Add(TEXT("BillingError"), SubscriptionProviderStatusBillingError);
        _SubscriptionProviderStatusMap.Add(TEXT("ProductUnavailable"), SubscriptionProviderStatusProductUnavailable);
        _SubscriptionProviderStatusMap.Add(TEXT("CustomerDidNotAcceptPriceChange"), SubscriptionProviderStatusCustomerDidNotAcceptPriceChange);
        _SubscriptionProviderStatusMap.Add(TEXT("FreeTrial"), SubscriptionProviderStatusFreeTrial);
        _SubscriptionProviderStatusMap.Add(TEXT("PaymentPending"), SubscriptionProviderStatusPaymentPending);

    }

    if (!value.IsEmpty())
    {
        auto output = _SubscriptionProviderStatusMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return SubscriptionProviderStatusNoError; // Basically critical fail
}

PlayFab::ServerModels::FSubscriptionModel::~FSubscriptionModel()
{

}

void PlayFab::ServerModels::FSubscriptionModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Expiration"));
    writeDatetime(Expiration, writer);

    writer->WriteIdentifierPrefix(TEXT("InitialSubscriptionTime"));
    writeDatetime(InitialSubscriptionTime, writer);

    writer->WriteIdentifierPrefix(TEXT("IsActive"));
    writer->WriteValue(IsActive);

    if (Status.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        writeSubscriptionProviderStatusEnumJSON(Status, writer);
    }

    if (SubscriptionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SubscriptionId"));
        writer->WriteValue(SubscriptionId);
    }

    if (SubscriptionItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SubscriptionItemId"));
        writer->WriteValue(SubscriptionItemId);
    }

    if (SubscriptionProvider.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SubscriptionProvider"));
        writer->WriteValue(SubscriptionProvider);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSubscriptionModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ExpirationValue = obj->TryGetField(TEXT("Expiration"));
    if (ExpirationValue.IsValid())
        Expiration = readDatetime(ExpirationValue);


    const TSharedPtr<FJsonValue> InitialSubscriptionTimeValue = obj->TryGetField(TEXT("InitialSubscriptionTime"));
    if (InitialSubscriptionTimeValue.IsValid())
        InitialSubscriptionTime = readDatetime(InitialSubscriptionTimeValue);


    const TSharedPtr<FJsonValue> IsActiveValue = obj->TryGetField(TEXT("IsActive"));
    if (IsActiveValue.IsValid() && !IsActiveValue->IsNull())
    {
        bool TmpValue;
        if (IsActiveValue->TryGetBool(TmpValue)) { IsActive = TmpValue; }
    }

    Status = readSubscriptionProviderStatusFromValue(obj->TryGetField(TEXT("Status")));

    const TSharedPtr<FJsonValue> SubscriptionIdValue = obj->TryGetField(TEXT("SubscriptionId"));
    if (SubscriptionIdValue.IsValid() && !SubscriptionIdValue->IsNull())
    {
        FString TmpValue;
        if (SubscriptionIdValue->TryGetString(TmpValue)) { SubscriptionId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SubscriptionItemIdValue = obj->TryGetField(TEXT("SubscriptionItemId"));
    if (SubscriptionItemIdValue.IsValid() && !SubscriptionItemIdValue->IsNull())
    {
        FString TmpValue;
        if (SubscriptionItemIdValue->TryGetString(TmpValue)) { SubscriptionItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SubscriptionProviderValue = obj->TryGetField(TEXT("SubscriptionProvider"));
    if (SubscriptionProviderValue.IsValid() && !SubscriptionProviderValue->IsNull())
    {
        FString TmpValue;
        if (SubscriptionProviderValue->TryGetString(TmpValue)) { SubscriptionProvider = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FMembershipModel::~FMembershipModel()
{

}

void PlayFab::ServerModels::FMembershipModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("IsActive"));
    writer->WriteValue(IsActive);

    writer->WriteIdentifierPrefix(TEXT("MembershipExpiration"));
    writeDatetime(MembershipExpiration, writer);

    if (MembershipId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MembershipId"));
        writer->WriteValue(MembershipId);
    }

    if (OverrideExpiration.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("OverrideExpiration"));
        writeDatetime(OverrideExpiration, writer);
    }

    if (OverrideIsSet.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("OverrideIsSet"));
        writer->WriteValue(OverrideIsSet);
    }

    if (Subscriptions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Subscriptions"));
        for (const FSubscriptionModel& item : Subscriptions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FMembershipModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IsActiveValue = obj->TryGetField(TEXT("IsActive"));
    if (IsActiveValue.IsValid() && !IsActiveValue->IsNull())
    {
        bool TmpValue;
        if (IsActiveValue->TryGetBool(TmpValue)) { IsActive = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MembershipExpirationValue = obj->TryGetField(TEXT("MembershipExpiration"));
    if (MembershipExpirationValue.IsValid())
        MembershipExpiration = readDatetime(MembershipExpirationValue);


    const TSharedPtr<FJsonValue> MembershipIdValue = obj->TryGetField(TEXT("MembershipId"));
    if (MembershipIdValue.IsValid() && !MembershipIdValue->IsNull())
    {
        FString TmpValue;
        if (MembershipIdValue->TryGetString(TmpValue)) { MembershipId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OverrideExpirationValue = obj->TryGetField(TEXT("OverrideExpiration"));
    if (OverrideExpirationValue.IsValid())
        OverrideExpiration = readDatetime(OverrideExpirationValue);


    const TSharedPtr<FJsonValue> OverrideIsSetValue = obj->TryGetField(TEXT("OverrideIsSet"));
    if (OverrideIsSetValue.IsValid() && !OverrideIsSetValue->IsNull())
    {
        bool TmpValue;
        if (OverrideIsSetValue->TryGetBool(TmpValue)) { OverrideIsSet = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&SubscriptionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Subscriptions"));
    for (int32 Idx = 0; Idx < SubscriptionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SubscriptionsArray[Idx];
        Subscriptions.Add(FSubscriptionModel(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FPushNotificationRegistrationModel::~FPushNotificationRegistrationModel()
{

}

void PlayFab::ServerModels::FPushNotificationRegistrationModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (NotificationEndpointARN.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NotificationEndpointARN"));
        writer->WriteValue(NotificationEndpointARN);
    }

    if (Platform.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writePushNotificationPlatformEnumJSON(Platform, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FPushNotificationRegistrationModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NotificationEndpointARNValue = obj->TryGetField(TEXT("NotificationEndpointARN"));
    if (NotificationEndpointARNValue.IsValid() && !NotificationEndpointARNValue->IsNull())
    {
        FString TmpValue;
        if (NotificationEndpointARNValue->TryGetString(TmpValue)) { NotificationEndpointARN = TmpValue; }
    }

    Platform = readPushNotificationPlatformFromValue(obj->TryGetField(TEXT("Platform")));

    return HasSucceeded;
}

PlayFab::ServerModels::FStatisticModel::~FStatisticModel()
{

}

void PlayFab::ServerModels::FStatisticModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteIdentifierPrefix(TEXT("Value"));
    writer->WriteValue(Value);

    writer->WriteIdentifierPrefix(TEXT("Version"));
    writer->WriteValue(Version);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FStatisticModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        int32 TmpValue;
        if (ValueValue->TryGetNumber(TmpValue)) { Value = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        int32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FTagModel::~FTagModel()
{

}

void PlayFab::ServerModels::FTagModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (TagValue.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TagValue"));
        writer->WriteValue(TagValue);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FTagModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> TagValueValue = obj->TryGetField(TEXT("TagValue"));
    if (TagValueValue.IsValid() && !TagValueValue->IsNull())
    {
        FString TmpValue;
        if (TagValueValue->TryGetString(TmpValue)) { TagValue = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FValueToDateModel::~FValueToDateModel()
{

}

void PlayFab::ServerModels::FValueToDateModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Currency.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Currency"));
        writer->WriteValue(Currency);
    }

    writer->WriteIdentifierPrefix(TEXT("TotalValue"));
    writer->WriteValue(static_cast<int64>(TotalValue));

    if (TotalValueAsDecimal.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TotalValueAsDecimal"));
        writer->WriteValue(TotalValueAsDecimal);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FValueToDateModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CurrencyValue = obj->TryGetField(TEXT("Currency"));
    if (CurrencyValue.IsValid() && !CurrencyValue->IsNull())
    {
        FString TmpValue;
        if (CurrencyValue->TryGetString(TmpValue)) { Currency = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalValueValue = obj->TryGetField(TEXT("TotalValue"));
    if (TotalValueValue.IsValid() && !TotalValueValue->IsNull())
    {
        uint32 TmpValue;
        if (TotalValueValue->TryGetNumber(TmpValue)) { TotalValue = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalValueAsDecimalValue = obj->TryGetField(TEXT("TotalValueAsDecimal"));
    if (TotalValueAsDecimalValue.IsValid() && !TotalValueAsDecimalValue->IsNull())
    {
        FString TmpValue;
        if (TotalValueAsDecimalValue->TryGetString(TmpValue)) { TotalValueAsDecimal = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FPlayerProfileModel::~FPlayerProfileModel()
{

}

void PlayFab::ServerModels::FPlayerProfileModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AdCampaignAttributions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AdCampaignAttributions"));
        for (const FAdCampaignAttributionModel& item : AdCampaignAttributions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (AvatarUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AvatarUrl"));
        writer->WriteValue(AvatarUrl);
    }

    if (BannedUntil.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("BannedUntil"));
        writeDatetime(BannedUntil, writer);
    }

    if (ContactEmailAddresses.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ContactEmailAddresses"));
        for (const FContactEmailInfoModel& item : ContactEmailAddresses)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Created.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Created"));
        writeDatetime(Created, writer);
    }

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (ExperimentVariants.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ExperimentVariants"));
        for (const FString& item : ExperimentVariants)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (LastLogin.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LastLogin"));
        writeDatetime(LastLogin, writer);
    }

    if (LinkedAccounts.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("LinkedAccounts"));
        for (const FLinkedPlatformAccountModel& item : LinkedAccounts)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Locations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Locations"));
        for (const FLocationModel& item : Locations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Memberships.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Memberships"));
        for (const FMembershipModel& item : Memberships)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Origination.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Origination"));
        writeLoginIdentityProviderEnumJSON(Origination, writer);
    }

    if (PlayerId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayerId"));
        writer->WriteValue(PlayerId);
    }

    if (PublisherId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PublisherId"));
        writer->WriteValue(PublisherId);
    }

    if (PushNotificationRegistrations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PushNotificationRegistrations"));
        for (const FPushNotificationRegistrationModel& item : PushNotificationRegistrations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Statistics.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Statistics"));
        for (const FStatisticModel& item : Statistics)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FTagModel& item : Tags)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (TitleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitleId"));
        writer->WriteValue(TitleId);
    }

    if (TotalValueToDateInUSD.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("TotalValueToDateInUSD"));
        writer->WriteValue(static_cast<int64>(TotalValueToDateInUSD));
    }

    if (ValuesToDate.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ValuesToDate"));
        for (const FValueToDateModel& item : ValuesToDate)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FPlayerProfileModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AdCampaignAttributionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("AdCampaignAttributions"));
    for (int32 Idx = 0; Idx < AdCampaignAttributionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AdCampaignAttributionsArray[Idx];
        AdCampaignAttributions.Add(FAdCampaignAttributionModel(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> AvatarUrlValue = obj->TryGetField(TEXT("AvatarUrl"));
    if (AvatarUrlValue.IsValid() && !AvatarUrlValue->IsNull())
    {
        FString TmpValue;
        if (AvatarUrlValue->TryGetString(TmpValue)) { AvatarUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> BannedUntilValue = obj->TryGetField(TEXT("BannedUntil"));
    if (BannedUntilValue.IsValid())
        BannedUntil = readDatetime(BannedUntilValue);


    const TArray<TSharedPtr<FJsonValue>>&ContactEmailAddressesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ContactEmailAddresses"));
    for (int32 Idx = 0; Idx < ContactEmailAddressesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ContactEmailAddressesArray[Idx];
        ContactEmailAddresses.Add(FContactEmailInfoModel(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("ExperimentVariants"), ExperimentVariants);

    const TSharedPtr<FJsonValue> LastLoginValue = obj->TryGetField(TEXT("LastLogin"));
    if (LastLoginValue.IsValid())
        LastLogin = readDatetime(LastLoginValue);


    const TArray<TSharedPtr<FJsonValue>>&LinkedAccountsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("LinkedAccounts"));
    for (int32 Idx = 0; Idx < LinkedAccountsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LinkedAccountsArray[Idx];
        LinkedAccounts.Add(FLinkedPlatformAccountModel(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&LocationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Locations"));
    for (int32 Idx = 0; Idx < LocationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LocationsArray[Idx];
        Locations.Add(FLocationModel(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&MembershipsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Memberships"));
    for (int32 Idx = 0; Idx < MembershipsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = MembershipsArray[Idx];
        Memberships.Add(FMembershipModel(CurrentItem->AsObject()));
    }


    Origination = readLoginIdentityProviderFromValue(obj->TryGetField(TEXT("Origination")));

    const TSharedPtr<FJsonValue> PlayerIdValue = obj->TryGetField(TEXT("PlayerId"));
    if (PlayerIdValue.IsValid() && !PlayerIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayerIdValue->TryGetString(TmpValue)) { PlayerId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PublisherIdValue = obj->TryGetField(TEXT("PublisherId"));
    if (PublisherIdValue.IsValid() && !PublisherIdValue->IsNull())
    {
        FString TmpValue;
        if (PublisherIdValue->TryGetString(TmpValue)) { PublisherId = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&PushNotificationRegistrationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("PushNotificationRegistrations"));
    for (int32 Idx = 0; Idx < PushNotificationRegistrationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PushNotificationRegistrationsArray[Idx];
        PushNotificationRegistrations.Add(FPushNotificationRegistrationModel(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&StatisticsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Statistics"));
    for (int32 Idx = 0; Idx < StatisticsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StatisticsArray[Idx];
        Statistics.Add(FStatisticModel(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&TagsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Tags"));
    for (int32 Idx = 0; Idx < TagsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = TagsArray[Idx];
        Tags.Add(FTagModel(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> TitleIdValue = obj->TryGetField(TEXT("TitleId"));
    if (TitleIdValue.IsValid() && !TitleIdValue->IsNull())
    {
        FString TmpValue;
        if (TitleIdValue->TryGetString(TmpValue)) { TitleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalValueToDateInUSDValue = obj->TryGetField(TEXT("TotalValueToDateInUSD"));
    if (TotalValueToDateInUSDValue.IsValid() && !TotalValueToDateInUSDValue->IsNull())
    {
        uint32 TmpValue;
        if (TotalValueToDateInUSDValue->TryGetNumber(TmpValue)) { TotalValueToDateInUSD = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ValuesToDateArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ValuesToDate"));
    for (int32 Idx = 0; Idx < ValuesToDateArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ValuesToDateArray[Idx];
        ValuesToDate.Add(FValueToDateModel(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FFriendInfo::~FFriendInfo()
{
    //if (FacebookInfo != nullptr) delete FacebookInfo;
    //if (GameCenterInfo != nullptr) delete GameCenterInfo;
    //if (Profile != nullptr) delete Profile;
    //if (PSNInfo != nullptr) delete PSNInfo;
    //if (SteamInfo != nullptr) delete SteamInfo;
    //if (XboxInfo != nullptr) delete XboxInfo;

}

void PlayFab::ServerModels::FFriendInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FacebookInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("FacebookInfo"));
        FacebookInfo->writeJSON(writer);
    }

    if (FriendPlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FriendPlayFabId"));
        writer->WriteValue(FriendPlayFabId);
    }

    if (GameCenterInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("GameCenterInfo"));
        GameCenterInfo->writeJSON(writer);
    }

    if (Profile.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Profile"));
        Profile->writeJSON(writer);
    }

    if (PSNInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("PSNInfo"));
        PSNInfo->writeJSON(writer);
    }

    if (SteamInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("SteamInfo"));
        SteamInfo->writeJSON(writer);
    }

    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (TitleDisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitleDisplayName"));
        writer->WriteValue(TitleDisplayName);
    }

    if (Username.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Username"));
        writer->WriteValue(Username);
    }

    if (XboxInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("XboxInfo"));
        XboxInfo->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FFriendInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FacebookInfoValue = obj->TryGetField(TEXT("FacebookInfo"));
    if (FacebookInfoValue.IsValid() && !FacebookInfoValue->IsNull())
    {
        FacebookInfo = MakeShareable(new FUserFacebookInfo(FacebookInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> FriendPlayFabIdValue = obj->TryGetField(TEXT("FriendPlayFabId"));
    if (FriendPlayFabIdValue.IsValid() && !FriendPlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (FriendPlayFabIdValue->TryGetString(TmpValue)) { FriendPlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GameCenterInfoValue = obj->TryGetField(TEXT("GameCenterInfo"));
    if (GameCenterInfoValue.IsValid() && !GameCenterInfoValue->IsNull())
    {
        GameCenterInfo = MakeShareable(new FUserGameCenterInfo(GameCenterInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ProfileValue = obj->TryGetField(TEXT("Profile"));
    if (ProfileValue.IsValid() && !ProfileValue->IsNull())
    {
        Profile = MakeShareable(new FPlayerProfileModel(ProfileValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> PSNInfoValue = obj->TryGetField(TEXT("PSNInfo"));
    if (PSNInfoValue.IsValid() && !PSNInfoValue->IsNull())
    {
        PSNInfo = MakeShareable(new FUserPsnInfo(PSNInfoValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> SteamInfoValue = obj->TryGetField(TEXT("SteamInfo"));
    if (SteamInfoValue.IsValid() && !SteamInfoValue->IsNull())
    {
        SteamInfo = MakeShareable(new FUserSteamInfo(SteamInfoValue->AsObject()));
    }

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    const TSharedPtr<FJsonValue> TitleDisplayNameValue = obj->TryGetField(TEXT("TitleDisplayName"));
    if (TitleDisplayNameValue.IsValid() && !TitleDisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (TitleDisplayNameValue->TryGetString(TmpValue)) { TitleDisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsernameValue = obj->TryGetField(TEXT("Username"));
    if (UsernameValue.IsValid() && !UsernameValue->IsNull())
    {
        FString TmpValue;
        if (UsernameValue->TryGetString(TmpValue)) { Username = TmpValue; }
    }

    const TSharedPtr<FJsonValue> XboxInfoValue = obj->TryGetField(TEXT("XboxInfo"));
    if (XboxInfoValue.IsValid() && !XboxInfoValue->IsNull())
    {
        XboxInfo = MakeShareable(new FUserXboxInfo(XboxInfoValue->AsObject()));
    }

    return HasSucceeded;
}

void PlayFab::ServerModels::writeGameInstanceStateEnumJSON(GameInstanceState enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case GameInstanceStateOpen: writer->WriteValue(TEXT("Open")); break;
    case GameInstanceStateClosed: writer->WriteValue(TEXT("Closed")); break;
    }
}

ServerModels::GameInstanceState PlayFab::ServerModels::readGameInstanceStateFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readGameInstanceStateFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::GameInstanceState PlayFab::ServerModels::readGameInstanceStateFromValue(const FString& value)
{
    static TMap<FString, GameInstanceState> _GameInstanceStateMap;
    if (_GameInstanceStateMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _GameInstanceStateMap.Add(TEXT("Open"), GameInstanceStateOpen);
        _GameInstanceStateMap.Add(TEXT("Closed"), GameInstanceStateClosed);

    }

    if (!value.IsEmpty())
    {
        auto output = _GameInstanceStateMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return GameInstanceStateOpen; // Basically critical fail
}

PlayFab::ServerModels::FGenericPlayFabIdPair::~FGenericPlayFabIdPair()
{
    //if (GenericId != nullptr) delete GenericId;

}

void PlayFab::ServerModels::FGenericPlayFabIdPair::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (GenericId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("GenericId"));
        GenericId->writeJSON(writer);
    }

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGenericPlayFabIdPair::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GenericIdValue = obj->TryGetField(TEXT("GenericId"));
    if (GenericIdValue.IsValid() && !GenericIdValue->IsNull())
    {
        GenericId = MakeShareable(new FGenericServiceId(GenericIdValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetAllSegmentsRequest::~FGetAllSegmentsRequest()
{

}

void PlayFab::ServerModels::FGetAllSegmentsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetAllSegmentsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FGetSegmentResult::~FGetSegmentResult()
{

}

void PlayFab::ServerModels::FGetSegmentResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ABTestParent.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ABTestParent"));
        writer->WriteValue(ABTestParent);
    }

    if (!Id.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetSegmentResult::Id, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetSegmentResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ABTestParentValue = obj->TryGetField(TEXT("ABTestParent"));
    if (ABTestParentValue.IsValid() && !ABTestParentValue->IsNull())
    {
        FString TmpValue;
        if (ABTestParentValue->TryGetString(TmpValue)) { ABTestParent = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetAllSegmentsResult::~FGetAllSegmentsResult()
{

}

void PlayFab::ServerModels::FGetAllSegmentsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Segments.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Segments"));
        for (const FGetSegmentResult& item : Segments)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetAllSegmentsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&SegmentsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Segments"));
    for (int32 Idx = 0; Idx < SegmentsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SegmentsArray[Idx];
        Segments.Add(FGetSegmentResult(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetCatalogItemsRequest::~FGetCatalogItemsRequest()
{

}

void PlayFab::ServerModels::FGetCatalogItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetCatalogItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetCatalogItemsResult::~FGetCatalogItemsResult()
{

}

void PlayFab::ServerModels::FGetCatalogItemsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Catalog.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Catalog"));
        for (const FCatalogItem& item : Catalog)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetCatalogItemsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&CatalogArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Catalog"));
    for (int32 Idx = 0; Idx < CatalogArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = CatalogArray[Idx];
        Catalog.Add(FCatalogItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetCharacterDataRequest::~FGetCharacterDataRequest()
{

}

void PlayFab::ServerModels::FGetCharacterDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!CharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetCharacterDataRequest::CharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (IfChangedFromDataVersion.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IfChangedFromDataVersion"));
        writer->WriteValue(static_cast<int64>(IfChangedFromDataVersion));
    }

    if (Keys.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Keys"));
        for (const FString& item : Keys)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetCharacterDataRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetCharacterDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IfChangedFromDataVersionValue = obj->TryGetField(TEXT("IfChangedFromDataVersion"));
    if (IfChangedFromDataVersionValue.IsValid() && !IfChangedFromDataVersionValue->IsNull())
    {
        uint32 TmpValue;
        if (IfChangedFromDataVersionValue->TryGetNumber(TmpValue)) { IfChangedFromDataVersion = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("Keys"), Keys);

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::ServerModels::writeUserDataPermissionEnumJSON(UserDataPermission enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case UserDataPermissionPrivate: writer->WriteValue(TEXT("Private")); break;
    case UserDataPermissionPublic: writer->WriteValue(TEXT("Public")); break;
    }
}

ServerModels::UserDataPermission PlayFab::ServerModels::readUserDataPermissionFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readUserDataPermissionFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::UserDataPermission PlayFab::ServerModels::readUserDataPermissionFromValue(const FString& value)
{
    static TMap<FString, UserDataPermission> _UserDataPermissionMap;
    if (_UserDataPermissionMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _UserDataPermissionMap.Add(TEXT("Private"), UserDataPermissionPrivate);
        _UserDataPermissionMap.Add(TEXT("Public"), UserDataPermissionPublic);

    }

    if (!value.IsEmpty())
    {
        auto output = _UserDataPermissionMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return UserDataPermissionPrivate; // Basically critical fail
}

PlayFab::ServerModels::FUserDataRecord::~FUserDataRecord()
{

}

void PlayFab::ServerModels::FUserDataRecord::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("LastUpdated"));
    writeDatetime(LastUpdated, writer);

    if (Permission.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Permission"));
        writeUserDataPermissionEnumJSON(Permission, writer);
    }

    if (Value.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Value"));
        writer->WriteValue(Value);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserDataRecord::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> LastUpdatedValue = obj->TryGetField(TEXT("LastUpdated"));
    if (LastUpdatedValue.IsValid())
        LastUpdated = readDatetime(LastUpdatedValue);


    Permission = readUserDataPermissionFromValue(obj->TryGetField(TEXT("Permission")));

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        FString TmpValue;
        if (ValueValue->TryGetString(TmpValue)) { Value = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetCharacterDataResult::~FGetCharacterDataResult()
{

}

void PlayFab::ServerModels::FGetCharacterDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FUserDataRecord>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("DataVersion"));
    writer->WriteValue(static_cast<int64>(DataVersion));

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetCharacterDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), FUserDataRecord(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> DataVersionValue = obj->TryGetField(TEXT("DataVersion"));
    if (DataVersionValue.IsValid() && !DataVersionValue->IsNull())
    {
        uint32 TmpValue;
        if (DataVersionValue->TryGetNumber(TmpValue)) { DataVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetCharacterInventoryRequest::~FGetCharacterInventoryRequest()
{

}

void PlayFab::ServerModels::FGetCharacterInventoryRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (!CharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetCharacterInventoryRequest::CharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetCharacterInventoryRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetCharacterInventoryRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FVirtualCurrencyRechargeTime::~FVirtualCurrencyRechargeTime()
{

}

void PlayFab::ServerModels::FVirtualCurrencyRechargeTime::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("RechargeMax"));
    writer->WriteValue(RechargeMax);

    writer->WriteIdentifierPrefix(TEXT("RechargeTime"));
    writeDatetime(RechargeTime, writer);

    writer->WriteIdentifierPrefix(TEXT("SecondsToRecharge"));
    writer->WriteValue(SecondsToRecharge);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FVirtualCurrencyRechargeTime::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> RechargeMaxValue = obj->TryGetField(TEXT("RechargeMax"));
    if (RechargeMaxValue.IsValid() && !RechargeMaxValue->IsNull())
    {
        int32 TmpValue;
        if (RechargeMaxValue->TryGetNumber(TmpValue)) { RechargeMax = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RechargeTimeValue = obj->TryGetField(TEXT("RechargeTime"));
    if (RechargeTimeValue.IsValid())
        RechargeTime = readDatetime(RechargeTimeValue);


    const TSharedPtr<FJsonValue> SecondsToRechargeValue = obj->TryGetField(TEXT("SecondsToRecharge"));
    if (SecondsToRechargeValue.IsValid() && !SecondsToRechargeValue->IsNull())
    {
        int32 TmpValue;
        if (SecondsToRechargeValue->TryGetNumber(TmpValue)) { SecondsToRecharge = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetCharacterInventoryResult::~FGetCharacterInventoryResult()
{

}

void PlayFab::ServerModels::FGetCharacterInventoryResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (Inventory.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Inventory"));
        for (const FItemInstance& item : Inventory)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (VirtualCurrency.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("VirtualCurrency"));
        for (TMap<FString, int32>::TConstIterator It(VirtualCurrency); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (VirtualCurrencyRechargeTimes.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("VirtualCurrencyRechargeTimes"));
        for (TMap<FString, FVirtualCurrencyRechargeTime>::TConstIterator It(VirtualCurrencyRechargeTimes); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetCharacterInventoryResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&InventoryArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Inventory"));
    for (int32 Idx = 0; Idx < InventoryArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = InventoryArray[Idx];
        Inventory.Add(FItemInstance(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* VirtualCurrencyObject;
    if (obj->TryGetObjectField(TEXT("VirtualCurrency"), VirtualCurrencyObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*VirtualCurrencyObject)->Values); It; ++It)
        {
            int32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            VirtualCurrency.Add(It.Key(), TmpValue);
        }
    }

    const TSharedPtr<FJsonObject>* VirtualCurrencyRechargeTimesObject;
    if (obj->TryGetObjectField(TEXT("VirtualCurrencyRechargeTimes"), VirtualCurrencyRechargeTimesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*VirtualCurrencyRechargeTimesObject)->Values); It; ++It)
        {
            VirtualCurrencyRechargeTimes.Add(It.Key(), FVirtualCurrencyRechargeTime(It.Value()->AsObject()));
        }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetCharacterLeaderboardRequest::~FGetCharacterLeaderboardRequest()
{

}

void PlayFab::ServerModels::FGetCharacterLeaderboardRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CharacterType.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterType"));
        writer->WriteValue(CharacterType);
    }

    writer->WriteIdentifierPrefix(TEXT("MaxResultsCount"));
    writer->WriteValue(MaxResultsCount);

    writer->WriteIdentifierPrefix(TEXT("StartPosition"));
    writer->WriteValue(StartPosition);

    if (!StatisticName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetCharacterLeaderboardRequest::StatisticName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetCharacterLeaderboardRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterTypeValue = obj->TryGetField(TEXT("CharacterType"));
    if (CharacterTypeValue.IsValid() && !CharacterTypeValue->IsNull())
    {
        FString TmpValue;
        if (CharacterTypeValue->TryGetString(TmpValue)) { CharacterType = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MaxResultsCountValue = obj->TryGetField(TEXT("MaxResultsCount"));
    if (MaxResultsCountValue.IsValid() && !MaxResultsCountValue->IsNull())
    {
        int32 TmpValue;
        if (MaxResultsCountValue->TryGetNumber(TmpValue)) { MaxResultsCount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StartPositionValue = obj->TryGetField(TEXT("StartPosition"));
    if (StartPositionValue.IsValid() && !StartPositionValue->IsNull())
    {
        int32 TmpValue;
        if (StartPositionValue->TryGetNumber(TmpValue)) { StartPosition = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetCharacterLeaderboardResult::~FGetCharacterLeaderboardResult()
{

}

void PlayFab::ServerModels::FGetCharacterLeaderboardResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Leaderboard.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Leaderboard"));
        for (const FCharacterLeaderboardEntry& item : Leaderboard)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetCharacterLeaderboardResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&LeaderboardArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Leaderboard"));
    for (int32 Idx = 0; Idx < LeaderboardArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LeaderboardArray[Idx];
        Leaderboard.Add(FCharacterLeaderboardEntry(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetCharacterStatisticsRequest::~FGetCharacterStatisticsRequest()
{

}

void PlayFab::ServerModels::FGetCharacterStatisticsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!CharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetCharacterStatisticsRequest::CharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetCharacterStatisticsRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetCharacterStatisticsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetCharacterStatisticsResult::~FGetCharacterStatisticsResult()
{

}

void PlayFab::ServerModels::FGetCharacterStatisticsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CharacterStatistics.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CharacterStatistics"));
        for (TMap<FString, int32>::TConstIterator It(CharacterStatistics); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetCharacterStatisticsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CharacterStatisticsObject;
    if (obj->TryGetObjectField(TEXT("CharacterStatistics"), CharacterStatisticsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CharacterStatisticsObject)->Values); It; ++It)
        {
            int32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            CharacterStatistics.Add(It.Key(), TmpValue);
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetContentDownloadUrlRequest::~FGetContentDownloadUrlRequest()
{

}

void PlayFab::ServerModels::FGetContentDownloadUrlRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (HttpMethod.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("HttpMethod"));
        writer->WriteValue(HttpMethod);
    }

    if (!Key.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetContentDownloadUrlRequest::Key, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Key"));
        writer->WriteValue(Key);
    }

    if (ThruCDN.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ThruCDN"));
        writer->WriteValue(ThruCDN);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetContentDownloadUrlRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> HttpMethodValue = obj->TryGetField(TEXT("HttpMethod"));
    if (HttpMethodValue.IsValid() && !HttpMethodValue->IsNull())
    {
        FString TmpValue;
        if (HttpMethodValue->TryGetString(TmpValue)) { HttpMethod = TmpValue; }
    }

    const TSharedPtr<FJsonValue> KeyValue = obj->TryGetField(TEXT("Key"));
    if (KeyValue.IsValid() && !KeyValue->IsNull())
    {
        FString TmpValue;
        if (KeyValue->TryGetString(TmpValue)) { Key = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ThruCDNValue = obj->TryGetField(TEXT("ThruCDN"));
    if (ThruCDNValue.IsValid() && !ThruCDNValue->IsNull())
    {
        bool TmpValue;
        if (ThruCDNValue->TryGetBool(TmpValue)) { ThruCDN = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetContentDownloadUrlResult::~FGetContentDownloadUrlResult()
{

}

void PlayFab::ServerModels::FGetContentDownloadUrlResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (URL.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("URL"));
        writer->WriteValue(URL);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetContentDownloadUrlResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> URLValue = obj->TryGetField(TEXT("URL"));
    if (URLValue.IsValid() && !URLValue->IsNull())
    {
        FString TmpValue;
        if (URLValue->TryGetString(TmpValue)) { URL = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FPlayerProfileViewConstraints::~FPlayerProfileViewConstraints()
{

}

void PlayFab::ServerModels::FPlayerProfileViewConstraints::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("ShowAvatarUrl"));
    writer->WriteValue(ShowAvatarUrl);

    writer->WriteIdentifierPrefix(TEXT("ShowBannedUntil"));
    writer->WriteValue(ShowBannedUntil);

    writer->WriteIdentifierPrefix(TEXT("ShowCampaignAttributions"));
    writer->WriteValue(ShowCampaignAttributions);

    writer->WriteIdentifierPrefix(TEXT("ShowContactEmailAddresses"));
    writer->WriteValue(ShowContactEmailAddresses);

    writer->WriteIdentifierPrefix(TEXT("ShowCreated"));
    writer->WriteValue(ShowCreated);

    writer->WriteIdentifierPrefix(TEXT("ShowDisplayName"));
    writer->WriteValue(ShowDisplayName);

    writer->WriteIdentifierPrefix(TEXT("ShowExperimentVariants"));
    writer->WriteValue(ShowExperimentVariants);

    writer->WriteIdentifierPrefix(TEXT("ShowLastLogin"));
    writer->WriteValue(ShowLastLogin);

    writer->WriteIdentifierPrefix(TEXT("ShowLinkedAccounts"));
    writer->WriteValue(ShowLinkedAccounts);

    writer->WriteIdentifierPrefix(TEXT("ShowLocations"));
    writer->WriteValue(ShowLocations);

    writer->WriteIdentifierPrefix(TEXT("ShowMemberships"));
    writer->WriteValue(ShowMemberships);

    writer->WriteIdentifierPrefix(TEXT("ShowOrigination"));
    writer->WriteValue(ShowOrigination);

    writer->WriteIdentifierPrefix(TEXT("ShowPushNotificationRegistrations"));
    writer->WriteValue(ShowPushNotificationRegistrations);

    writer->WriteIdentifierPrefix(TEXT("ShowStatistics"));
    writer->WriteValue(ShowStatistics);

    writer->WriteIdentifierPrefix(TEXT("ShowTags"));
    writer->WriteValue(ShowTags);

    writer->WriteIdentifierPrefix(TEXT("ShowTotalValueToDateInUsd"));
    writer->WriteValue(ShowTotalValueToDateInUsd);

    writer->WriteIdentifierPrefix(TEXT("ShowValuesToDate"));
    writer->WriteValue(ShowValuesToDate);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FPlayerProfileViewConstraints::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ShowAvatarUrlValue = obj->TryGetField(TEXT("ShowAvatarUrl"));
    if (ShowAvatarUrlValue.IsValid() && !ShowAvatarUrlValue->IsNull())
    {
        bool TmpValue;
        if (ShowAvatarUrlValue->TryGetBool(TmpValue)) { ShowAvatarUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowBannedUntilValue = obj->TryGetField(TEXT("ShowBannedUntil"));
    if (ShowBannedUntilValue.IsValid() && !ShowBannedUntilValue->IsNull())
    {
        bool TmpValue;
        if (ShowBannedUntilValue->TryGetBool(TmpValue)) { ShowBannedUntil = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowCampaignAttributionsValue = obj->TryGetField(TEXT("ShowCampaignAttributions"));
    if (ShowCampaignAttributionsValue.IsValid() && !ShowCampaignAttributionsValue->IsNull())
    {
        bool TmpValue;
        if (ShowCampaignAttributionsValue->TryGetBool(TmpValue)) { ShowCampaignAttributions = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowContactEmailAddressesValue = obj->TryGetField(TEXT("ShowContactEmailAddresses"));
    if (ShowContactEmailAddressesValue.IsValid() && !ShowContactEmailAddressesValue->IsNull())
    {
        bool TmpValue;
        if (ShowContactEmailAddressesValue->TryGetBool(TmpValue)) { ShowContactEmailAddresses = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowCreatedValue = obj->TryGetField(TEXT("ShowCreated"));
    if (ShowCreatedValue.IsValid() && !ShowCreatedValue->IsNull())
    {
        bool TmpValue;
        if (ShowCreatedValue->TryGetBool(TmpValue)) { ShowCreated = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowDisplayNameValue = obj->TryGetField(TEXT("ShowDisplayName"));
    if (ShowDisplayNameValue.IsValid() && !ShowDisplayNameValue->IsNull())
    {
        bool TmpValue;
        if (ShowDisplayNameValue->TryGetBool(TmpValue)) { ShowDisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowExperimentVariantsValue = obj->TryGetField(TEXT("ShowExperimentVariants"));
    if (ShowExperimentVariantsValue.IsValid() && !ShowExperimentVariantsValue->IsNull())
    {
        bool TmpValue;
        if (ShowExperimentVariantsValue->TryGetBool(TmpValue)) { ShowExperimentVariants = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowLastLoginValue = obj->TryGetField(TEXT("ShowLastLogin"));
    if (ShowLastLoginValue.IsValid() && !ShowLastLoginValue->IsNull())
    {
        bool TmpValue;
        if (ShowLastLoginValue->TryGetBool(TmpValue)) { ShowLastLogin = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowLinkedAccountsValue = obj->TryGetField(TEXT("ShowLinkedAccounts"));
    if (ShowLinkedAccountsValue.IsValid() && !ShowLinkedAccountsValue->IsNull())
    {
        bool TmpValue;
        if (ShowLinkedAccountsValue->TryGetBool(TmpValue)) { ShowLinkedAccounts = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowLocationsValue = obj->TryGetField(TEXT("ShowLocations"));
    if (ShowLocationsValue.IsValid() && !ShowLocationsValue->IsNull())
    {
        bool TmpValue;
        if (ShowLocationsValue->TryGetBool(TmpValue)) { ShowLocations = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowMembershipsValue = obj->TryGetField(TEXT("ShowMemberships"));
    if (ShowMembershipsValue.IsValid() && !ShowMembershipsValue->IsNull())
    {
        bool TmpValue;
        if (ShowMembershipsValue->TryGetBool(TmpValue)) { ShowMemberships = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowOriginationValue = obj->TryGetField(TEXT("ShowOrigination"));
    if (ShowOriginationValue.IsValid() && !ShowOriginationValue->IsNull())
    {
        bool TmpValue;
        if (ShowOriginationValue->TryGetBool(TmpValue)) { ShowOrigination = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowPushNotificationRegistrationsValue = obj->TryGetField(TEXT("ShowPushNotificationRegistrations"));
    if (ShowPushNotificationRegistrationsValue.IsValid() && !ShowPushNotificationRegistrationsValue->IsNull())
    {
        bool TmpValue;
        if (ShowPushNotificationRegistrationsValue->TryGetBool(TmpValue)) { ShowPushNotificationRegistrations = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowStatisticsValue = obj->TryGetField(TEXT("ShowStatistics"));
    if (ShowStatisticsValue.IsValid() && !ShowStatisticsValue->IsNull())
    {
        bool TmpValue;
        if (ShowStatisticsValue->TryGetBool(TmpValue)) { ShowStatistics = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowTagsValue = obj->TryGetField(TEXT("ShowTags"));
    if (ShowTagsValue.IsValid() && !ShowTagsValue->IsNull())
    {
        bool TmpValue;
        if (ShowTagsValue->TryGetBool(TmpValue)) { ShowTags = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowTotalValueToDateInUsdValue = obj->TryGetField(TEXT("ShowTotalValueToDateInUsd"));
    if (ShowTotalValueToDateInUsdValue.IsValid() && !ShowTotalValueToDateInUsdValue->IsNull())
    {
        bool TmpValue;
        if (ShowTotalValueToDateInUsdValue->TryGetBool(TmpValue)) { ShowTotalValueToDateInUsd = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ShowValuesToDateValue = obj->TryGetField(TEXT("ShowValuesToDate"));
    if (ShowValuesToDateValue.IsValid() && !ShowValuesToDateValue->IsNull())
    {
        bool TmpValue;
        if (ShowValuesToDateValue->TryGetBool(TmpValue)) { ShowValuesToDate = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetFriendLeaderboardRequest::~FGetFriendLeaderboardRequest()
{
    //if (ProfileConstraints != nullptr) delete ProfileConstraints;

}

void PlayFab::ServerModels::FGetFriendLeaderboardRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (IncludeFacebookFriends.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IncludeFacebookFriends"));
        writer->WriteValue(IncludeFacebookFriends);
    }

    if (IncludeSteamFriends.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IncludeSteamFriends"));
        writer->WriteValue(IncludeSteamFriends);
    }

    writer->WriteIdentifierPrefix(TEXT("MaxResultsCount"));
    writer->WriteValue(MaxResultsCount);

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetFriendLeaderboardRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (ProfileConstraints.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("ProfileConstraints"));
        ProfileConstraints->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("StartPosition"));
    writer->WriteValue(StartPosition);

    if (!StatisticName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetFriendLeaderboardRequest::StatisticName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    if (UseSpecificVersion.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("UseSpecificVersion"));
        writer->WriteValue(UseSpecificVersion);
    }

    if (Version.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Version"));
        writer->WriteValue(Version);
    }

    if (XboxToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("XboxToken"));
        writer->WriteValue(XboxToken);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetFriendLeaderboardRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> IncludeFacebookFriendsValue = obj->TryGetField(TEXT("IncludeFacebookFriends"));
    if (IncludeFacebookFriendsValue.IsValid() && !IncludeFacebookFriendsValue->IsNull())
    {
        bool TmpValue;
        if (IncludeFacebookFriendsValue->TryGetBool(TmpValue)) { IncludeFacebookFriends = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IncludeSteamFriendsValue = obj->TryGetField(TEXT("IncludeSteamFriends"));
    if (IncludeSteamFriendsValue.IsValid() && !IncludeSteamFriendsValue->IsNull())
    {
        bool TmpValue;
        if (IncludeSteamFriendsValue->TryGetBool(TmpValue)) { IncludeSteamFriends = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MaxResultsCountValue = obj->TryGetField(TEXT("MaxResultsCount"));
    if (MaxResultsCountValue.IsValid() && !MaxResultsCountValue->IsNull())
    {
        int32 TmpValue;
        if (MaxResultsCountValue->TryGetNumber(TmpValue)) { MaxResultsCount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileConstraintsValue = obj->TryGetField(TEXT("ProfileConstraints"));
    if (ProfileConstraintsValue.IsValid() && !ProfileConstraintsValue->IsNull())
    {
        ProfileConstraints = MakeShareable(new FPlayerProfileViewConstraints(ProfileConstraintsValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> StartPositionValue = obj->TryGetField(TEXT("StartPosition"));
    if (StartPositionValue.IsValid() && !StartPositionValue->IsNull())
    {
        int32 TmpValue;
        if (StartPositionValue->TryGetNumber(TmpValue)) { StartPosition = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UseSpecificVersionValue = obj->TryGetField(TEXT("UseSpecificVersion"));
    if (UseSpecificVersionValue.IsValid() && !UseSpecificVersionValue->IsNull())
    {
        bool TmpValue;
        if (UseSpecificVersionValue->TryGetBool(TmpValue)) { UseSpecificVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        int32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    const TSharedPtr<FJsonValue> XboxTokenValue = obj->TryGetField(TEXT("XboxToken"));
    if (XboxTokenValue.IsValid() && !XboxTokenValue->IsNull())
    {
        FString TmpValue;
        if (XboxTokenValue->TryGetString(TmpValue)) { XboxToken = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetFriendsListRequest::~FGetFriendsListRequest()
{
    //if (ProfileConstraints != nullptr) delete ProfileConstraints;

}

void PlayFab::ServerModels::FGetFriendsListRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (IncludeFacebookFriends.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IncludeFacebookFriends"));
        writer->WriteValue(IncludeFacebookFriends);
    }

    if (IncludeSteamFriends.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IncludeSteamFriends"));
        writer->WriteValue(IncludeSteamFriends);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetFriendsListRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (ProfileConstraints.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("ProfileConstraints"));
        ProfileConstraints->writeJSON(writer);
    }

    if (XboxToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("XboxToken"));
        writer->WriteValue(XboxToken);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetFriendsListRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> IncludeFacebookFriendsValue = obj->TryGetField(TEXT("IncludeFacebookFriends"));
    if (IncludeFacebookFriendsValue.IsValid() && !IncludeFacebookFriendsValue->IsNull())
    {
        bool TmpValue;
        if (IncludeFacebookFriendsValue->TryGetBool(TmpValue)) { IncludeFacebookFriends = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IncludeSteamFriendsValue = obj->TryGetField(TEXT("IncludeSteamFriends"));
    if (IncludeSteamFriendsValue.IsValid() && !IncludeSteamFriendsValue->IsNull())
    {
        bool TmpValue;
        if (IncludeSteamFriendsValue->TryGetBool(TmpValue)) { IncludeSteamFriends = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileConstraintsValue = obj->TryGetField(TEXT("ProfileConstraints"));
    if (ProfileConstraintsValue.IsValid() && !ProfileConstraintsValue->IsNull())
    {
        ProfileConstraints = MakeShareable(new FPlayerProfileViewConstraints(ProfileConstraintsValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> XboxTokenValue = obj->TryGetField(TEXT("XboxToken"));
    if (XboxTokenValue.IsValid() && !XboxTokenValue->IsNull())
    {
        FString TmpValue;
        if (XboxTokenValue->TryGetString(TmpValue)) { XboxToken = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetFriendsListResult::~FGetFriendsListResult()
{

}

void PlayFab::ServerModels::FGetFriendsListResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Friends.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Friends"));
        for (const FFriendInfo& item : Friends)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetFriendsListResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&FriendsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Friends"));
    for (int32 Idx = 0; Idx < FriendsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = FriendsArray[Idx];
        Friends.Add(FFriendInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetLeaderboardAroundCharacterRequest::~FGetLeaderboardAroundCharacterRequest()
{

}

void PlayFab::ServerModels::FGetLeaderboardAroundCharacterRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!CharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetLeaderboardAroundCharacterRequest::CharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CharacterType.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterType"));
        writer->WriteValue(CharacterType);
    }

    writer->WriteIdentifierPrefix(TEXT("MaxResultsCount"));
    writer->WriteValue(MaxResultsCount);

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetLeaderboardAroundCharacterRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!StatisticName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetLeaderboardAroundCharacterRequest::StatisticName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetLeaderboardAroundCharacterRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterTypeValue = obj->TryGetField(TEXT("CharacterType"));
    if (CharacterTypeValue.IsValid() && !CharacterTypeValue->IsNull())
    {
        FString TmpValue;
        if (CharacterTypeValue->TryGetString(TmpValue)) { CharacterType = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MaxResultsCountValue = obj->TryGetField(TEXT("MaxResultsCount"));
    if (MaxResultsCountValue.IsValid() && !MaxResultsCountValue->IsNull())
    {
        int32 TmpValue;
        if (MaxResultsCountValue->TryGetNumber(TmpValue)) { MaxResultsCount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetLeaderboardAroundCharacterResult::~FGetLeaderboardAroundCharacterResult()
{

}

void PlayFab::ServerModels::FGetLeaderboardAroundCharacterResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Leaderboard.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Leaderboard"));
        for (const FCharacterLeaderboardEntry& item : Leaderboard)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetLeaderboardAroundCharacterResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&LeaderboardArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Leaderboard"));
    for (int32 Idx = 0; Idx < LeaderboardArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LeaderboardArray[Idx];
        Leaderboard.Add(FCharacterLeaderboardEntry(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetLeaderboardAroundUserRequest::~FGetLeaderboardAroundUserRequest()
{
    //if (ProfileConstraints != nullptr) delete ProfileConstraints;

}

void PlayFab::ServerModels::FGetLeaderboardAroundUserRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("MaxResultsCount"));
    writer->WriteValue(MaxResultsCount);

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetLeaderboardAroundUserRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (ProfileConstraints.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("ProfileConstraints"));
        ProfileConstraints->writeJSON(writer);
    }

    if (!StatisticName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetLeaderboardAroundUserRequest::StatisticName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    if (UseSpecificVersion.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("UseSpecificVersion"));
        writer->WriteValue(UseSpecificVersion);
    }

    if (Version.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Version"));
        writer->WriteValue(Version);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetLeaderboardAroundUserRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> MaxResultsCountValue = obj->TryGetField(TEXT("MaxResultsCount"));
    if (MaxResultsCountValue.IsValid() && !MaxResultsCountValue->IsNull())
    {
        int32 TmpValue;
        if (MaxResultsCountValue->TryGetNumber(TmpValue)) { MaxResultsCount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileConstraintsValue = obj->TryGetField(TEXT("ProfileConstraints"));
    if (ProfileConstraintsValue.IsValid() && !ProfileConstraintsValue->IsNull())
    {
        ProfileConstraints = MakeShareable(new FPlayerProfileViewConstraints(ProfileConstraintsValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UseSpecificVersionValue = obj->TryGetField(TEXT("UseSpecificVersion"));
    if (UseSpecificVersionValue.IsValid() && !UseSpecificVersionValue->IsNull())
    {
        bool TmpValue;
        if (UseSpecificVersionValue->TryGetBool(TmpValue)) { UseSpecificVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        int32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FPlayerLeaderboardEntry::~FPlayerLeaderboardEntry()
{
    //if (Profile != nullptr) delete Profile;

}

void PlayFab::ServerModels::FPlayerLeaderboardEntry::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteIdentifierPrefix(TEXT("Position"));
    writer->WriteValue(Position);

    if (Profile.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Profile"));
        Profile->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("StatValue"));
    writer->WriteValue(StatValue);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FPlayerLeaderboardEntry::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PositionValue = obj->TryGetField(TEXT("Position"));
    if (PositionValue.IsValid() && !PositionValue->IsNull())
    {
        int32 TmpValue;
        if (PositionValue->TryGetNumber(TmpValue)) { Position = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileValue = obj->TryGetField(TEXT("Profile"));
    if (ProfileValue.IsValid() && !ProfileValue->IsNull())
    {
        Profile = MakeShareable(new FPlayerProfileModel(ProfileValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> StatValueValue = obj->TryGetField(TEXT("StatValue"));
    if (StatValueValue.IsValid() && !StatValueValue->IsNull())
    {
        int32 TmpValue;
        if (StatValueValue->TryGetNumber(TmpValue)) { StatValue = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetLeaderboardAroundUserResult::~FGetLeaderboardAroundUserResult()
{

}

void PlayFab::ServerModels::FGetLeaderboardAroundUserResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Leaderboard.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Leaderboard"));
        for (const FPlayerLeaderboardEntry& item : Leaderboard)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (NextReset.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("NextReset"));
        writeDatetime(NextReset, writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Version"));
    writer->WriteValue(Version);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetLeaderboardAroundUserResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&LeaderboardArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Leaderboard"));
    for (int32 Idx = 0; Idx < LeaderboardArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LeaderboardArray[Idx];
        Leaderboard.Add(FPlayerLeaderboardEntry(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> NextResetValue = obj->TryGetField(TEXT("NextReset"));
    if (NextResetValue.IsValid())
        NextReset = readDatetime(NextResetValue);


    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        int32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetLeaderboardForUsersCharactersRequest::~FGetLeaderboardForUsersCharactersRequest()
{

}

void PlayFab::ServerModels::FGetLeaderboardForUsersCharactersRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("MaxResultsCount"));
    writer->WriteValue(MaxResultsCount);

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetLeaderboardForUsersCharactersRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!StatisticName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetLeaderboardForUsersCharactersRequest::StatisticName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetLeaderboardForUsersCharactersRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> MaxResultsCountValue = obj->TryGetField(TEXT("MaxResultsCount"));
    if (MaxResultsCountValue.IsValid() && !MaxResultsCountValue->IsNull())
    {
        int32 TmpValue;
        if (MaxResultsCountValue->TryGetNumber(TmpValue)) { MaxResultsCount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetLeaderboardForUsersCharactersResult::~FGetLeaderboardForUsersCharactersResult()
{

}

void PlayFab::ServerModels::FGetLeaderboardForUsersCharactersResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Leaderboard.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Leaderboard"));
        for (const FCharacterLeaderboardEntry& item : Leaderboard)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetLeaderboardForUsersCharactersResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&LeaderboardArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Leaderboard"));
    for (int32 Idx = 0; Idx < LeaderboardArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LeaderboardArray[Idx];
        Leaderboard.Add(FCharacterLeaderboardEntry(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetLeaderboardRequest::~FGetLeaderboardRequest()
{
    //if (ProfileConstraints != nullptr) delete ProfileConstraints;

}

void PlayFab::ServerModels::FGetLeaderboardRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("MaxResultsCount"));
    writer->WriteValue(MaxResultsCount);

    if (ProfileConstraints.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("ProfileConstraints"));
        ProfileConstraints->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("StartPosition"));
    writer->WriteValue(StartPosition);

    if (!StatisticName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetLeaderboardRequest::StatisticName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    if (UseSpecificVersion.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("UseSpecificVersion"));
        writer->WriteValue(UseSpecificVersion);
    }

    if (Version.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Version"));
        writer->WriteValue(Version);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetLeaderboardRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> MaxResultsCountValue = obj->TryGetField(TEXT("MaxResultsCount"));
    if (MaxResultsCountValue.IsValid() && !MaxResultsCountValue->IsNull())
    {
        int32 TmpValue;
        if (MaxResultsCountValue->TryGetNumber(TmpValue)) { MaxResultsCount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileConstraintsValue = obj->TryGetField(TEXT("ProfileConstraints"));
    if (ProfileConstraintsValue.IsValid() && !ProfileConstraintsValue->IsNull())
    {
        ProfileConstraints = MakeShareable(new FPlayerProfileViewConstraints(ProfileConstraintsValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> StartPositionValue = obj->TryGetField(TEXT("StartPosition"));
    if (StartPositionValue.IsValid() && !StartPositionValue->IsNull())
    {
        int32 TmpValue;
        if (StartPositionValue->TryGetNumber(TmpValue)) { StartPosition = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UseSpecificVersionValue = obj->TryGetField(TEXT("UseSpecificVersion"));
    if (UseSpecificVersionValue.IsValid() && !UseSpecificVersionValue->IsNull())
    {
        bool TmpValue;
        if (UseSpecificVersionValue->TryGetBool(TmpValue)) { UseSpecificVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        int32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetLeaderboardResult::~FGetLeaderboardResult()
{

}

void PlayFab::ServerModels::FGetLeaderboardResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Leaderboard.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Leaderboard"));
        for (const FPlayerLeaderboardEntry& item : Leaderboard)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (NextReset.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("NextReset"));
        writeDatetime(NextReset, writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Version"));
    writer->WriteValue(Version);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetLeaderboardResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&LeaderboardArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Leaderboard"));
    for (int32 Idx = 0; Idx < LeaderboardArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LeaderboardArray[Idx];
        Leaderboard.Add(FPlayerLeaderboardEntry(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> NextResetValue = obj->TryGetField(TEXT("NextReset"));
    if (NextResetValue.IsValid())
        NextReset = readDatetime(NextResetValue);


    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        int32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayerCombinedInfoRequestParams::~FGetPlayerCombinedInfoRequestParams()
{
    //if (ProfileConstraints != nullptr) delete ProfileConstraints;

}

void PlayFab::ServerModels::FGetPlayerCombinedInfoRequestParams::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("GetCharacterInventories"));
    writer->WriteValue(GetCharacterInventories);

    writer->WriteIdentifierPrefix(TEXT("GetCharacterList"));
    writer->WriteValue(GetCharacterList);

    writer->WriteIdentifierPrefix(TEXT("GetPlayerProfile"));
    writer->WriteValue(GetPlayerProfile);

    writer->WriteIdentifierPrefix(TEXT("GetPlayerStatistics"));
    writer->WriteValue(GetPlayerStatistics);

    writer->WriteIdentifierPrefix(TEXT("GetTitleData"));
    writer->WriteValue(GetTitleData);

    writer->WriteIdentifierPrefix(TEXT("GetUserAccountInfo"));
    writer->WriteValue(GetUserAccountInfo);

    writer->WriteIdentifierPrefix(TEXT("GetUserData"));
    writer->WriteValue(GetUserData);

    writer->WriteIdentifierPrefix(TEXT("GetUserInventory"));
    writer->WriteValue(GetUserInventory);

    writer->WriteIdentifierPrefix(TEXT("GetUserReadOnlyData"));
    writer->WriteValue(GetUserReadOnlyData);

    writer->WriteIdentifierPrefix(TEXT("GetUserVirtualCurrency"));
    writer->WriteValue(GetUserVirtualCurrency);

    if (PlayerStatisticNames.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PlayerStatisticNames"));
        for (const FString& item : PlayerStatisticNames)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (ProfileConstraints.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("ProfileConstraints"));
        ProfileConstraints->writeJSON(writer);
    }

    if (TitleDataKeys.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TitleDataKeys"));
        for (const FString& item : TitleDataKeys)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (UserDataKeys.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("UserDataKeys"));
        for (const FString& item : UserDataKeys)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (UserReadOnlyDataKeys.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("UserReadOnlyDataKeys"));
        for (const FString& item : UserReadOnlyDataKeys)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayerCombinedInfoRequestParams::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GetCharacterInventoriesValue = obj->TryGetField(TEXT("GetCharacterInventories"));
    if (GetCharacterInventoriesValue.IsValid() && !GetCharacterInventoriesValue->IsNull())
    {
        bool TmpValue;
        if (GetCharacterInventoriesValue->TryGetBool(TmpValue)) { GetCharacterInventories = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GetCharacterListValue = obj->TryGetField(TEXT("GetCharacterList"));
    if (GetCharacterListValue.IsValid() && !GetCharacterListValue->IsNull())
    {
        bool TmpValue;
        if (GetCharacterListValue->TryGetBool(TmpValue)) { GetCharacterList = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GetPlayerProfileValue = obj->TryGetField(TEXT("GetPlayerProfile"));
    if (GetPlayerProfileValue.IsValid() && !GetPlayerProfileValue->IsNull())
    {
        bool TmpValue;
        if (GetPlayerProfileValue->TryGetBool(TmpValue)) { GetPlayerProfile = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GetPlayerStatisticsValue = obj->TryGetField(TEXT("GetPlayerStatistics"));
    if (GetPlayerStatisticsValue.IsValid() && !GetPlayerStatisticsValue->IsNull())
    {
        bool TmpValue;
        if (GetPlayerStatisticsValue->TryGetBool(TmpValue)) { GetPlayerStatistics = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GetTitleDataValue = obj->TryGetField(TEXT("GetTitleData"));
    if (GetTitleDataValue.IsValid() && !GetTitleDataValue->IsNull())
    {
        bool TmpValue;
        if (GetTitleDataValue->TryGetBool(TmpValue)) { GetTitleData = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GetUserAccountInfoValue = obj->TryGetField(TEXT("GetUserAccountInfo"));
    if (GetUserAccountInfoValue.IsValid() && !GetUserAccountInfoValue->IsNull())
    {
        bool TmpValue;
        if (GetUserAccountInfoValue->TryGetBool(TmpValue)) { GetUserAccountInfo = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GetUserDataValue = obj->TryGetField(TEXT("GetUserData"));
    if (GetUserDataValue.IsValid() && !GetUserDataValue->IsNull())
    {
        bool TmpValue;
        if (GetUserDataValue->TryGetBool(TmpValue)) { GetUserData = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GetUserInventoryValue = obj->TryGetField(TEXT("GetUserInventory"));
    if (GetUserInventoryValue.IsValid() && !GetUserInventoryValue->IsNull())
    {
        bool TmpValue;
        if (GetUserInventoryValue->TryGetBool(TmpValue)) { GetUserInventory = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GetUserReadOnlyDataValue = obj->TryGetField(TEXT("GetUserReadOnlyData"));
    if (GetUserReadOnlyDataValue.IsValid() && !GetUserReadOnlyDataValue->IsNull())
    {
        bool TmpValue;
        if (GetUserReadOnlyDataValue->TryGetBool(TmpValue)) { GetUserReadOnlyData = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GetUserVirtualCurrencyValue = obj->TryGetField(TEXT("GetUserVirtualCurrency"));
    if (GetUserVirtualCurrencyValue.IsValid() && !GetUserVirtualCurrencyValue->IsNull())
    {
        bool TmpValue;
        if (GetUserVirtualCurrencyValue->TryGetBool(TmpValue)) { GetUserVirtualCurrency = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("PlayerStatisticNames"), PlayerStatisticNames);

    const TSharedPtr<FJsonValue> ProfileConstraintsValue = obj->TryGetField(TEXT("ProfileConstraints"));
    if (ProfileConstraintsValue.IsValid() && !ProfileConstraintsValue->IsNull())
    {
        ProfileConstraints = MakeShareable(new FPlayerProfileViewConstraints(ProfileConstraintsValue->AsObject()));
    }

    obj->TryGetStringArrayField(TEXT("TitleDataKeys"), TitleDataKeys);

    obj->TryGetStringArrayField(TEXT("UserDataKeys"), UserDataKeys);

    obj->TryGetStringArrayField(TEXT("UserReadOnlyDataKeys"), UserReadOnlyDataKeys);

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayerCombinedInfoRequest::~FGetPlayerCombinedInfoRequest()
{

}

void PlayFab::ServerModels::FGetPlayerCombinedInfoRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("InfoRequestParameters"));
    InfoRequestParameters.writeJSON(writer);

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetPlayerCombinedInfoRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayerCombinedInfoRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> InfoRequestParametersValue = obj->TryGetField(TEXT("InfoRequestParameters"));
    if (InfoRequestParametersValue.IsValid() && !InfoRequestParametersValue->IsNull())
    {
        InfoRequestParameters = FGetPlayerCombinedInfoRequestParams(InfoRequestParametersValue->AsObject());
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FStatisticValue::~FStatisticValue()
{

}

void PlayFab::ServerModels::FStatisticValue::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (StatisticName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    writer->WriteIdentifierPrefix(TEXT("Value"));
    writer->WriteValue(Value);

    writer->WriteIdentifierPrefix(TEXT("Version"));
    writer->WriteValue(static_cast<int64>(Version));

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FStatisticValue::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        int32 TmpValue;
        if (ValueValue->TryGetNumber(TmpValue)) { Value = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        uint32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayerCombinedInfoResultPayload::~FGetPlayerCombinedInfoResultPayload()
{
    //if (AccountInfo != nullptr) delete AccountInfo;
    //if (PlayerProfile != nullptr) delete PlayerProfile;

}

void PlayFab::ServerModels::FGetPlayerCombinedInfoResultPayload::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AccountInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AccountInfo"));
        AccountInfo->writeJSON(writer);
    }

    if (CharacterInventories.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("CharacterInventories"));
        for (const FCharacterInventory& item : CharacterInventories)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (CharacterList.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("CharacterList"));
        for (const FCharacterResult& item : CharacterList)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (PlayerProfile.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("PlayerProfile"));
        PlayerProfile->writeJSON(writer);
    }

    if (PlayerStatistics.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PlayerStatistics"));
        for (const FStatisticValue& item : PlayerStatistics)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (TitleData.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("TitleData"));
        for (TMap<FString, FString>::TConstIterator It(TitleData); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (UserData.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("UserData"));
        for (TMap<FString, FUserDataRecord>::TConstIterator It(UserData); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("UserDataVersion"));
    writer->WriteValue(static_cast<int64>(UserDataVersion));

    if (UserInventory.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("UserInventory"));
        for (const FItemInstance& item : UserInventory)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (UserReadOnlyData.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("UserReadOnlyData"));
        for (TMap<FString, FUserDataRecord>::TConstIterator It(UserReadOnlyData); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("UserReadOnlyDataVersion"));
    writer->WriteValue(static_cast<int64>(UserReadOnlyDataVersion));

    if (UserVirtualCurrency.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("UserVirtualCurrency"));
        for (TMap<FString, int32>::TConstIterator It(UserVirtualCurrency); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (UserVirtualCurrencyRechargeTimes.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("UserVirtualCurrencyRechargeTimes"));
        for (TMap<FString, FVirtualCurrencyRechargeTime>::TConstIterator It(UserVirtualCurrencyRechargeTimes); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayerCombinedInfoResultPayload::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AccountInfoValue = obj->TryGetField(TEXT("AccountInfo"));
    if (AccountInfoValue.IsValid() && !AccountInfoValue->IsNull())
    {
        AccountInfo = MakeShareable(new FUserAccountInfo(AccountInfoValue->AsObject()));
    }

    const TArray<TSharedPtr<FJsonValue>>&CharacterInventoriesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("CharacterInventories"));
    for (int32 Idx = 0; Idx < CharacterInventoriesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = CharacterInventoriesArray[Idx];
        CharacterInventories.Add(FCharacterInventory(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&CharacterListArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("CharacterList"));
    for (int32 Idx = 0; Idx < CharacterListArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = CharacterListArray[Idx];
        CharacterList.Add(FCharacterResult(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> PlayerProfileValue = obj->TryGetField(TEXT("PlayerProfile"));
    if (PlayerProfileValue.IsValid() && !PlayerProfileValue->IsNull())
    {
        PlayerProfile = MakeShareable(new FPlayerProfileModel(PlayerProfileValue->AsObject()));
    }

    const TArray<TSharedPtr<FJsonValue>>&PlayerStatisticsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("PlayerStatistics"));
    for (int32 Idx = 0; Idx < PlayerStatisticsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PlayerStatisticsArray[Idx];
        PlayerStatistics.Add(FStatisticValue(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* TitleDataObject;
    if (obj->TryGetObjectField(TEXT("TitleData"), TitleDataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*TitleDataObject)->Values); It; ++It)
        {
            TitleData.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonObject>* UserDataObject;
    if (obj->TryGetObjectField(TEXT("UserData"), UserDataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*UserDataObject)->Values); It; ++It)
        {
            UserData.Add(It.Key(), FUserDataRecord(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> UserDataVersionValue = obj->TryGetField(TEXT("UserDataVersion"));
    if (UserDataVersionValue.IsValid() && !UserDataVersionValue->IsNull())
    {
        uint32 TmpValue;
        if (UserDataVersionValue->TryGetNumber(TmpValue)) { UserDataVersion = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&UserInventoryArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("UserInventory"));
    for (int32 Idx = 0; Idx < UserInventoryArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = UserInventoryArray[Idx];
        UserInventory.Add(FItemInstance(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* UserReadOnlyDataObject;
    if (obj->TryGetObjectField(TEXT("UserReadOnlyData"), UserReadOnlyDataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*UserReadOnlyDataObject)->Values); It; ++It)
        {
            UserReadOnlyData.Add(It.Key(), FUserDataRecord(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> UserReadOnlyDataVersionValue = obj->TryGetField(TEXT("UserReadOnlyDataVersion"));
    if (UserReadOnlyDataVersionValue.IsValid() && !UserReadOnlyDataVersionValue->IsNull())
    {
        uint32 TmpValue;
        if (UserReadOnlyDataVersionValue->TryGetNumber(TmpValue)) { UserReadOnlyDataVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* UserVirtualCurrencyObject;
    if (obj->TryGetObjectField(TEXT("UserVirtualCurrency"), UserVirtualCurrencyObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*UserVirtualCurrencyObject)->Values); It; ++It)
        {
            int32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            UserVirtualCurrency.Add(It.Key(), TmpValue);
        }
    }

    const TSharedPtr<FJsonObject>* UserVirtualCurrencyRechargeTimesObject;
    if (obj->TryGetObjectField(TEXT("UserVirtualCurrencyRechargeTimes"), UserVirtualCurrencyRechargeTimesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*UserVirtualCurrencyRechargeTimesObject)->Values); It; ++It)
        {
            UserVirtualCurrencyRechargeTimes.Add(It.Key(), FVirtualCurrencyRechargeTime(It.Value()->AsObject()));
        }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayerCombinedInfoResult::~FGetPlayerCombinedInfoResult()
{
    //if (InfoResultPayload != nullptr) delete InfoResultPayload;

}

void PlayFab::ServerModels::FGetPlayerCombinedInfoResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (InfoResultPayload.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("InfoResultPayload"));
        InfoResultPayload->writeJSON(writer);
    }

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayerCombinedInfoResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> InfoResultPayloadValue = obj->TryGetField(TEXT("InfoResultPayload"));
    if (InfoResultPayloadValue.IsValid() && !InfoResultPayloadValue->IsNull())
    {
        InfoResultPayload = MakeShareable(new FGetPlayerCombinedInfoResultPayload(InfoResultPayloadValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayerProfileRequest::~FGetPlayerProfileRequest()
{
    //if (ProfileConstraints != nullptr) delete ProfileConstraints;

}

void PlayFab::ServerModels::FGetPlayerProfileRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetPlayerProfileRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (ProfileConstraints.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("ProfileConstraints"));
        ProfileConstraints->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayerProfileRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileConstraintsValue = obj->TryGetField(TEXT("ProfileConstraints"));
    if (ProfileConstraintsValue.IsValid() && !ProfileConstraintsValue->IsNull())
    {
        ProfileConstraints = MakeShareable(new FPlayerProfileViewConstraints(ProfileConstraintsValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayerProfileResult::~FGetPlayerProfileResult()
{
    //if (PlayerProfile != nullptr) delete PlayerProfile;

}

void PlayFab::ServerModels::FGetPlayerProfileResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PlayerProfile.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("PlayerProfile"));
        PlayerProfile->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayerProfileResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayerProfileValue = obj->TryGetField(TEXT("PlayerProfile"));
    if (PlayerProfileValue.IsValid() && !PlayerProfileValue->IsNull())
    {
        PlayerProfile = MakeShareable(new FPlayerProfileModel(PlayerProfileValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayerSegmentsResult::~FGetPlayerSegmentsResult()
{

}

void PlayFab::ServerModels::FGetPlayerSegmentsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Segments.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Segments"));
        for (const FGetSegmentResult& item : Segments)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayerSegmentsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&SegmentsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Segments"));
    for (int32 Idx = 0; Idx < SegmentsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SegmentsArray[Idx];
        Segments.Add(FGetSegmentResult(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayersInSegmentRequest::~FGetPlayersInSegmentRequest()
{

}

void PlayFab::ServerModels::FGetPlayersInSegmentRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (MaxBatchSize.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("MaxBatchSize"));
        writer->WriteValue(static_cast<int64>(MaxBatchSize));
    }

    if (SecondsToLive.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("SecondsToLive"));
        writer->WriteValue(static_cast<int64>(SecondsToLive));
    }

    if (!SegmentId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetPlayersInSegmentRequest::SegmentId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("SegmentId"));
        writer->WriteValue(SegmentId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayersInSegmentRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> MaxBatchSizeValue = obj->TryGetField(TEXT("MaxBatchSize"));
    if (MaxBatchSizeValue.IsValid() && !MaxBatchSizeValue->IsNull())
    {
        uint32 TmpValue;
        if (MaxBatchSizeValue->TryGetNumber(TmpValue)) { MaxBatchSize = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SecondsToLiveValue = obj->TryGetField(TEXT("SecondsToLive"));
    if (SecondsToLiveValue.IsValid() && !SecondsToLiveValue->IsNull())
    {
        uint32 TmpValue;
        if (SecondsToLiveValue->TryGetNumber(TmpValue)) { SecondsToLive = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SegmentIdValue = obj->TryGetField(TEXT("SegmentId"));
    if (SegmentIdValue.IsValid() && !SegmentIdValue->IsNull())
    {
        FString TmpValue;
        if (SegmentIdValue->TryGetString(TmpValue)) { SegmentId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FPlayerLinkedAccount::~FPlayerLinkedAccount()
{

}

void PlayFab::ServerModels::FPlayerLinkedAccount::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Email.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Email"));
        writer->WriteValue(Email);
    }

    if (Platform.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writeLoginIdentityProviderEnumJSON(Platform, writer);
    }

    if (PlatformUserId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlatformUserId"));
        writer->WriteValue(PlatformUserId);
    }

    if (Username.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Username"));
        writer->WriteValue(Username);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FPlayerLinkedAccount::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EmailValue = obj->TryGetField(TEXT("Email"));
    if (EmailValue.IsValid() && !EmailValue->IsNull())
    {
        FString TmpValue;
        if (EmailValue->TryGetString(TmpValue)) { Email = TmpValue; }
    }

    Platform = readLoginIdentityProviderFromValue(obj->TryGetField(TEXT("Platform")));

    const TSharedPtr<FJsonValue> PlatformUserIdValue = obj->TryGetField(TEXT("PlatformUserId"));
    if (PlatformUserIdValue.IsValid() && !PlatformUserIdValue->IsNull())
    {
        FString TmpValue;
        if (PlatformUserIdValue->TryGetString(TmpValue)) { PlatformUserId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsernameValue = obj->TryGetField(TEXT("Username"));
    if (UsernameValue.IsValid() && !UsernameValue->IsNull())
    {
        FString TmpValue;
        if (UsernameValue->TryGetString(TmpValue)) { Username = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FPlayerLocation::~FPlayerLocation()
{

}

void PlayFab::ServerModels::FPlayerLocation::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (City.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("City"));
        writer->WriteValue(City);
    }

    writer->WriteIdentifierPrefix(TEXT("ContinentCode"));
    writeContinentCodeEnumJSON(pfContinentCode, writer);

    writer->WriteIdentifierPrefix(TEXT("CountryCode"));
    writeCountryCodeEnumJSON(pfCountryCode, writer);

    if (Latitude.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Latitude"));
        writer->WriteValue(Latitude);
    }

    if (Longitude.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Longitude"));
        writer->WriteValue(Longitude);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FPlayerLocation::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CityValue = obj->TryGetField(TEXT("City"));
    if (CityValue.IsValid() && !CityValue->IsNull())
    {
        FString TmpValue;
        if (CityValue->TryGetString(TmpValue)) { City = TmpValue; }
    }

    pfContinentCode = readContinentCodeFromValue(obj->TryGetField(TEXT("ContinentCode")));

    pfCountryCode = readCountryCodeFromValue(obj->TryGetField(TEXT("CountryCode")));

    const TSharedPtr<FJsonValue> LatitudeValue = obj->TryGetField(TEXT("Latitude"));
    if (LatitudeValue.IsValid() && !LatitudeValue->IsNull())
    {
        double TmpValue;
        if (LatitudeValue->TryGetNumber(TmpValue)) { Latitude = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LongitudeValue = obj->TryGetField(TEXT("Longitude"));
    if (LongitudeValue.IsValid() && !LongitudeValue->IsNull())
    {
        double TmpValue;
        if (LongitudeValue->TryGetNumber(TmpValue)) { Longitude = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FPlayerStatistic::~FPlayerStatistic()
{

}

void PlayFab::ServerModels::FPlayerStatistic::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteIdentifierPrefix(TEXT("StatisticValue"));
    writer->WriteValue(StatisticValue);

    writer->WriteIdentifierPrefix(TEXT("StatisticVersion"));
    writer->WriteValue(StatisticVersion);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FPlayerStatistic::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StatisticValueValue = obj->TryGetField(TEXT("StatisticValue"));
    if (StatisticValueValue.IsValid() && !StatisticValueValue->IsNull())
    {
        int32 TmpValue;
        if (StatisticValueValue->TryGetNumber(TmpValue)) { StatisticValue = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StatisticVersionValue = obj->TryGetField(TEXT("StatisticVersion"));
    if (StatisticVersionValue.IsValid() && !StatisticVersionValue->IsNull())
    {
        int32 TmpValue;
        if (StatisticVersionValue->TryGetNumber(TmpValue)) { StatisticVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FPushNotificationRegistration::~FPushNotificationRegistration()
{

}

void PlayFab::ServerModels::FPushNotificationRegistration::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (NotificationEndpointARN.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NotificationEndpointARN"));
        writer->WriteValue(NotificationEndpointARN);
    }

    if (Platform.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writePushNotificationPlatformEnumJSON(Platform, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FPushNotificationRegistration::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NotificationEndpointARNValue = obj->TryGetField(TEXT("NotificationEndpointARN"));
    if (NotificationEndpointARNValue.IsValid() && !NotificationEndpointARNValue->IsNull())
    {
        FString TmpValue;
        if (NotificationEndpointARNValue->TryGetString(TmpValue)) { NotificationEndpointARN = TmpValue; }
    }

    Platform = readPushNotificationPlatformFromValue(obj->TryGetField(TEXT("Platform")));

    return HasSucceeded;
}

PlayFab::ServerModels::FPlayerProfile::~FPlayerProfile()
{

}

void PlayFab::ServerModels::FPlayerProfile::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AdCampaignAttributions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AdCampaignAttributions"));
        for (const FAdCampaignAttribution& item : AdCampaignAttributions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (AvatarUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AvatarUrl"));
        writer->WriteValue(AvatarUrl);
    }

    if (BannedUntil.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("BannedUntil"));
        writeDatetime(BannedUntil, writer);
    }

    if (ContactEmailAddresses.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ContactEmailAddresses"));
        for (const FContactEmailInfo& item : ContactEmailAddresses)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Created.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Created"));
        writeDatetime(Created, writer);
    }

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (LastLogin.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LastLogin"));
        writeDatetime(LastLogin, writer);
    }

    if (LinkedAccounts.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("LinkedAccounts"));
        for (const FPlayerLinkedAccount& item : LinkedAccounts)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Locations.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Locations"));
        for (TMap<FString, FPlayerLocation>::TConstIterator It(Locations); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    if (Origination.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Origination"));
        writeLoginIdentityProviderEnumJSON(Origination, writer);
    }

    if (PlayerExperimentVariants.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PlayerExperimentVariants"));
        for (const FString& item : PlayerExperimentVariants)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (PlayerId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayerId"));
        writer->WriteValue(PlayerId);
    }

    if (PlayerStatistics.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PlayerStatistics"));
        for (const FPlayerStatistic& item : PlayerStatistics)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (PublisherId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PublisherId"));
        writer->WriteValue(PublisherId);
    }

    if (PushNotificationRegistrations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PushNotificationRegistrations"));
        for (const FPushNotificationRegistration& item : PushNotificationRegistrations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Statistics.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Statistics"));
        for (TMap<FString, int32>::TConstIterator It(Statistics); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (TitleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitleId"));
        writer->WriteValue(TitleId);
    }

    if (TotalValueToDateInUSD.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("TotalValueToDateInUSD"));
        writer->WriteValue(static_cast<int64>(TotalValueToDateInUSD));
    }

    if (ValuesToDate.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("ValuesToDate"));
        for (TMap<FString, uint32>::TConstIterator It(ValuesToDate); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue(static_cast<int64>((*It).Value));
        }
        writer->WriteObjectEnd();
    }

    if (VirtualCurrencyBalances.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("VirtualCurrencyBalances"));
        for (TMap<FString, int32>::TConstIterator It(VirtualCurrencyBalances); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FPlayerProfile::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AdCampaignAttributionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("AdCampaignAttributions"));
    for (int32 Idx = 0; Idx < AdCampaignAttributionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AdCampaignAttributionsArray[Idx];
        AdCampaignAttributions.Add(FAdCampaignAttribution(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> AvatarUrlValue = obj->TryGetField(TEXT("AvatarUrl"));
    if (AvatarUrlValue.IsValid() && !AvatarUrlValue->IsNull())
    {
        FString TmpValue;
        if (AvatarUrlValue->TryGetString(TmpValue)) { AvatarUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> BannedUntilValue = obj->TryGetField(TEXT("BannedUntil"));
    if (BannedUntilValue.IsValid())
        BannedUntil = readDatetime(BannedUntilValue);


    const TArray<TSharedPtr<FJsonValue>>&ContactEmailAddressesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ContactEmailAddresses"));
    for (int32 Idx = 0; Idx < ContactEmailAddressesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ContactEmailAddressesArray[Idx];
        ContactEmailAddresses.Add(FContactEmailInfo(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LastLoginValue = obj->TryGetField(TEXT("LastLogin"));
    if (LastLoginValue.IsValid())
        LastLogin = readDatetime(LastLoginValue);


    const TArray<TSharedPtr<FJsonValue>>&LinkedAccountsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("LinkedAccounts"));
    for (int32 Idx = 0; Idx < LinkedAccountsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LinkedAccountsArray[Idx];
        LinkedAccounts.Add(FPlayerLinkedAccount(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* LocationsObject;
    if (obj->TryGetObjectField(TEXT("Locations"), LocationsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*LocationsObject)->Values); It; ++It)
        {
            Locations.Add(It.Key(), FPlayerLocation(It.Value()->AsObject()));
        }
    }

    Origination = readLoginIdentityProviderFromValue(obj->TryGetField(TEXT("Origination")));

    obj->TryGetStringArrayField(TEXT("PlayerExperimentVariants"), PlayerExperimentVariants);

    const TSharedPtr<FJsonValue> PlayerIdValue = obj->TryGetField(TEXT("PlayerId"));
    if (PlayerIdValue.IsValid() && !PlayerIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayerIdValue->TryGetString(TmpValue)) { PlayerId = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&PlayerStatisticsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("PlayerStatistics"));
    for (int32 Idx = 0; Idx < PlayerStatisticsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PlayerStatisticsArray[Idx];
        PlayerStatistics.Add(FPlayerStatistic(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> PublisherIdValue = obj->TryGetField(TEXT("PublisherId"));
    if (PublisherIdValue.IsValid() && !PublisherIdValue->IsNull())
    {
        FString TmpValue;
        if (PublisherIdValue->TryGetString(TmpValue)) { PublisherId = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&PushNotificationRegistrationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("PushNotificationRegistrations"));
    for (int32 Idx = 0; Idx < PushNotificationRegistrationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PushNotificationRegistrationsArray[Idx];
        PushNotificationRegistrations.Add(FPushNotificationRegistration(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* StatisticsObject;
    if (obj->TryGetObjectField(TEXT("Statistics"), StatisticsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*StatisticsObject)->Values); It; ++It)
        {
            int32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            Statistics.Add(It.Key(), TmpValue);
        }
    }

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    const TSharedPtr<FJsonValue> TitleIdValue = obj->TryGetField(TEXT("TitleId"));
    if (TitleIdValue.IsValid() && !TitleIdValue->IsNull())
    {
        FString TmpValue;
        if (TitleIdValue->TryGetString(TmpValue)) { TitleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalValueToDateInUSDValue = obj->TryGetField(TEXT("TotalValueToDateInUSD"));
    if (TotalValueToDateInUSDValue.IsValid() && !TotalValueToDateInUSDValue->IsNull())
    {
        uint32 TmpValue;
        if (TotalValueToDateInUSDValue->TryGetNumber(TmpValue)) { TotalValueToDateInUSD = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* ValuesToDateObject;
    if (obj->TryGetObjectField(TEXT("ValuesToDate"), ValuesToDateObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*ValuesToDateObject)->Values); It; ++It)
        {
            uint32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            ValuesToDate.Add(It.Key(), TmpValue);
        }
    }

    const TSharedPtr<FJsonObject>* VirtualCurrencyBalancesObject;
    if (obj->TryGetObjectField(TEXT("VirtualCurrencyBalances"), VirtualCurrencyBalancesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*VirtualCurrencyBalancesObject)->Values); It; ++It)
        {
            int32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            VirtualCurrencyBalances.Add(It.Key(), TmpValue);
        }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayersInSegmentResult::~FGetPlayersInSegmentResult()
{

}

void PlayFab::ServerModels::FGetPlayersInSegmentResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    if (PlayerProfiles.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PlayerProfiles"));
        for (const FPlayerProfile& item : PlayerProfiles)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteIdentifierPrefix(TEXT("ProfilesInSegment"));
    writer->WriteValue(ProfilesInSegment);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayersInSegmentResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&PlayerProfilesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("PlayerProfiles"));
    for (int32 Idx = 0; Idx < PlayerProfilesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PlayerProfilesArray[Idx];
        PlayerProfiles.Add(FPlayerProfile(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> ProfilesInSegmentValue = obj->TryGetField(TEXT("ProfilesInSegment"));
    if (ProfilesInSegmentValue.IsValid() && !ProfilesInSegmentValue->IsNull())
    {
        int32 TmpValue;
        if (ProfilesInSegmentValue->TryGetNumber(TmpValue)) { ProfilesInSegment = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayersSegmentsRequest::~FGetPlayersSegmentsRequest()
{

}

void PlayFab::ServerModels::FGetPlayersSegmentsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetPlayersSegmentsRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayersSegmentsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FStatisticNameVersion::~FStatisticNameVersion()
{

}

void PlayFab::ServerModels::FStatisticNameVersion::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!StatisticName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: StatisticNameVersion::StatisticName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    writer->WriteIdentifierPrefix(TEXT("Version"));
    writer->WriteValue(static_cast<int64>(Version));

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FStatisticNameVersion::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        uint32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayerStatisticsRequest::~FGetPlayerStatisticsRequest()
{

}

void PlayFab::ServerModels::FGetPlayerStatisticsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetPlayerStatisticsRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (StatisticNames.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("StatisticNames"));
        for (const FString& item : StatisticNames)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (StatisticNameVersions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("StatisticNameVersions"));
        for (const FStatisticNameVersion& item : StatisticNameVersions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayerStatisticsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("StatisticNames"), StatisticNames);

    const TArray<TSharedPtr<FJsonValue>>&StatisticNameVersionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("StatisticNameVersions"));
    for (int32 Idx = 0; Idx < StatisticNameVersionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StatisticNameVersionsArray[Idx];
        StatisticNameVersions.Add(FStatisticNameVersion(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayerStatisticsResult::~FGetPlayerStatisticsResult()
{

}

void PlayFab::ServerModels::FGetPlayerStatisticsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (Statistics.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Statistics"));
        for (const FStatisticValue& item : Statistics)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayerStatisticsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&StatisticsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Statistics"));
    for (int32 Idx = 0; Idx < StatisticsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StatisticsArray[Idx];
        Statistics.Add(FStatisticValue(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayerStatisticVersionsRequest::~FGetPlayerStatisticVersionsRequest()
{

}

void PlayFab::ServerModels::FGetPlayerStatisticVersionsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (StatisticName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayerStatisticVersionsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FPlayerStatisticVersion::~FPlayerStatisticVersion()
{

}

void PlayFab::ServerModels::FPlayerStatisticVersion::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("ActivationTime"));
    writeDatetime(ActivationTime, writer);

    if (DeactivationTime.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("DeactivationTime"));
        writeDatetime(DeactivationTime, writer);
    }

    if (ScheduledActivationTime.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ScheduledActivationTime"));
        writeDatetime(ScheduledActivationTime, writer);
    }

    if (ScheduledDeactivationTime.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ScheduledDeactivationTime"));
        writeDatetime(ScheduledDeactivationTime, writer);
    }

    if (StatisticName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    writer->WriteIdentifierPrefix(TEXT("Version"));
    writer->WriteValue(static_cast<int64>(Version));

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FPlayerStatisticVersion::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ActivationTimeValue = obj->TryGetField(TEXT("ActivationTime"));
    if (ActivationTimeValue.IsValid())
        ActivationTime = readDatetime(ActivationTimeValue);


    const TSharedPtr<FJsonValue> DeactivationTimeValue = obj->TryGetField(TEXT("DeactivationTime"));
    if (DeactivationTimeValue.IsValid())
        DeactivationTime = readDatetime(DeactivationTimeValue);


    const TSharedPtr<FJsonValue> ScheduledActivationTimeValue = obj->TryGetField(TEXT("ScheduledActivationTime"));
    if (ScheduledActivationTimeValue.IsValid())
        ScheduledActivationTime = readDatetime(ScheduledActivationTimeValue);


    const TSharedPtr<FJsonValue> ScheduledDeactivationTimeValue = obj->TryGetField(TEXT("ScheduledDeactivationTime"));
    if (ScheduledDeactivationTimeValue.IsValid())
        ScheduledDeactivationTime = readDatetime(ScheduledDeactivationTimeValue);


    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        uint32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayerStatisticVersionsResult::~FGetPlayerStatisticVersionsResult()
{

}

void PlayFab::ServerModels::FGetPlayerStatisticVersionsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (StatisticVersions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("StatisticVersions"));
        for (const FPlayerStatisticVersion& item : StatisticVersions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayerStatisticVersionsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&StatisticVersionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("StatisticVersions"));
    for (int32 Idx = 0; Idx < StatisticVersionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StatisticVersionsArray[Idx];
        StatisticVersions.Add(FPlayerStatisticVersion(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayerTagsRequest::~FGetPlayerTagsRequest()
{

}

void PlayFab::ServerModels::FGetPlayerTagsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Namespace.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Namespace"));
        writer->WriteValue(Namespace);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetPlayerTagsRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayerTagsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> NamespaceValue = obj->TryGetField(TEXT("Namespace"));
    if (NamespaceValue.IsValid() && !NamespaceValue->IsNull())
    {
        FString TmpValue;
        if (NamespaceValue->TryGetString(TmpValue)) { Namespace = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayerTagsResult::~FGetPlayerTagsResult()
{

}

void PlayFab::ServerModels::FGetPlayerTagsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetPlayerTagsResult::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteArrayStart(TEXT("Tags"));
    for (const FString& item : Tags)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayerTagsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayFabIDsFromFacebookIDsRequest::~FGetPlayFabIDsFromFacebookIDsRequest()
{

}

void PlayFab::ServerModels::FGetPlayFabIDsFromFacebookIDsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("FacebookIDs"));
    for (const FString& item : FacebookIDs)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayFabIDsFromFacebookIDsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("FacebookIDs"), FacebookIDs);

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayFabIDsFromFacebookIDsResult::~FGetPlayFabIDsFromFacebookIDsResult()
{

}

void PlayFab::ServerModels::FGetPlayFabIDsFromFacebookIDsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Data"));
        for (const FFacebookPlayFabIdPair& item : Data)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayFabIDsFromFacebookIDsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&DataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Data"));
    for (int32 Idx = 0; Idx < DataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = DataArray[Idx];
        Data.Add(FFacebookPlayFabIdPair(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayFabIDsFromFacebookInstantGamesIdsRequest::~FGetPlayFabIDsFromFacebookInstantGamesIdsRequest()
{

}

void PlayFab::ServerModels::FGetPlayFabIDsFromFacebookInstantGamesIdsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("FacebookInstantGamesIds"));
    for (const FString& item : FacebookInstantGamesIds)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayFabIDsFromFacebookInstantGamesIdsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("FacebookInstantGamesIds"), FacebookInstantGamesIds);

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayFabIDsFromFacebookInstantGamesIdsResult::~FGetPlayFabIDsFromFacebookInstantGamesIdsResult()
{

}

void PlayFab::ServerModels::FGetPlayFabIDsFromFacebookInstantGamesIdsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Data"));
        for (const FFacebookInstantGamesPlayFabIdPair& item : Data)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayFabIDsFromFacebookInstantGamesIdsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&DataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Data"));
    for (int32 Idx = 0; Idx < DataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = DataArray[Idx];
        Data.Add(FFacebookInstantGamesPlayFabIdPair(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayFabIDsFromGenericIDsRequest::~FGetPlayFabIDsFromGenericIDsRequest()
{

}

void PlayFab::ServerModels::FGetPlayFabIDsFromGenericIDsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("GenericIDs"));
    for (const FGenericServiceId& item : GenericIDs)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayFabIDsFromGenericIDsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&GenericIDsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("GenericIDs"));
    for (int32 Idx = 0; Idx < GenericIDsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = GenericIDsArray[Idx];
        GenericIDs.Add(FGenericServiceId(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayFabIDsFromGenericIDsResult::~FGetPlayFabIDsFromGenericIDsResult()
{

}

void PlayFab::ServerModels::FGetPlayFabIDsFromGenericIDsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Data"));
        for (const FGenericPlayFabIdPair& item : Data)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayFabIDsFromGenericIDsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&DataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Data"));
    for (int32 Idx = 0; Idx < DataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = DataArray[Idx];
        Data.Add(FGenericPlayFabIdPair(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest::~FGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest()
{

}

void PlayFab::ServerModels::FGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("NintendoSwitchDeviceIds"));
    for (const FString& item : NintendoSwitchDeviceIds)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("NintendoSwitchDeviceIds"), NintendoSwitchDeviceIds);

    return HasSucceeded;
}

PlayFab::ServerModels::FNintendoSwitchPlayFabIdPair::~FNintendoSwitchPlayFabIdPair()
{

}

void PlayFab::ServerModels::FNintendoSwitchPlayFabIdPair::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (NintendoSwitchDeviceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NintendoSwitchDeviceId"));
        writer->WriteValue(NintendoSwitchDeviceId);
    }

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FNintendoSwitchPlayFabIdPair::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NintendoSwitchDeviceIdValue = obj->TryGetField(TEXT("NintendoSwitchDeviceId"));
    if (NintendoSwitchDeviceIdValue.IsValid() && !NintendoSwitchDeviceIdValue->IsNull())
    {
        FString TmpValue;
        if (NintendoSwitchDeviceIdValue->TryGetString(TmpValue)) { NintendoSwitchDeviceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayFabIDsFromNintendoSwitchDeviceIdsResult::~FGetPlayFabIDsFromNintendoSwitchDeviceIdsResult()
{

}

void PlayFab::ServerModels::FGetPlayFabIDsFromNintendoSwitchDeviceIdsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Data"));
        for (const FNintendoSwitchPlayFabIdPair& item : Data)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayFabIDsFromNintendoSwitchDeviceIdsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&DataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Data"));
    for (int32 Idx = 0; Idx < DataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = DataArray[Idx];
        Data.Add(FNintendoSwitchPlayFabIdPair(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayFabIDsFromPSNAccountIDsRequest::~FGetPlayFabIDsFromPSNAccountIDsRequest()
{

}

void PlayFab::ServerModels::FGetPlayFabIDsFromPSNAccountIDsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (IssuerId.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IssuerId"));
        writer->WriteValue(IssuerId);
    }

    writer->WriteArrayStart(TEXT("PSNAccountIDs"));
    for (const FString& item : PSNAccountIDs)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayFabIDsFromPSNAccountIDsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IssuerIdValue = obj->TryGetField(TEXT("IssuerId"));
    if (IssuerIdValue.IsValid() && !IssuerIdValue->IsNull())
    {
        int32 TmpValue;
        if (IssuerIdValue->TryGetNumber(TmpValue)) { IssuerId = TmpValue; }
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("PSNAccountIDs"), PSNAccountIDs);

    return HasSucceeded;
}

PlayFab::ServerModels::FPSNAccountPlayFabIdPair::~FPSNAccountPlayFabIdPair()
{

}

void PlayFab::ServerModels::FPSNAccountPlayFabIdPair::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (PSNAccountId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PSNAccountId"));
        writer->WriteValue(PSNAccountId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FPSNAccountPlayFabIdPair::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PSNAccountIdValue = obj->TryGetField(TEXT("PSNAccountId"));
    if (PSNAccountIdValue.IsValid() && !PSNAccountIdValue->IsNull())
    {
        FString TmpValue;
        if (PSNAccountIdValue->TryGetString(TmpValue)) { PSNAccountId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayFabIDsFromPSNAccountIDsResult::~FGetPlayFabIDsFromPSNAccountIDsResult()
{

}

void PlayFab::ServerModels::FGetPlayFabIDsFromPSNAccountIDsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Data"));
        for (const FPSNAccountPlayFabIdPair& item : Data)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayFabIDsFromPSNAccountIDsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&DataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Data"));
    for (int32 Idx = 0; Idx < DataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = DataArray[Idx];
        Data.Add(FPSNAccountPlayFabIdPair(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayFabIDsFromSteamIDsRequest::~FGetPlayFabIDsFromSteamIDsRequest()
{

}

void PlayFab::ServerModels::FGetPlayFabIDsFromSteamIDsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (SteamStringIDs.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("SteamStringIDs"));
        for (const FString& item : SteamStringIDs)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayFabIDsFromSteamIDsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("SteamStringIDs"), SteamStringIDs);

    return HasSucceeded;
}

PlayFab::ServerModels::FSteamPlayFabIdPair::~FSteamPlayFabIdPair()
{

}

void PlayFab::ServerModels::FSteamPlayFabIdPair::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (SteamStringId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SteamStringId"));
        writer->WriteValue(SteamStringId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSteamPlayFabIdPair::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SteamStringIdValue = obj->TryGetField(TEXT("SteamStringId"));
    if (SteamStringIdValue.IsValid() && !SteamStringIdValue->IsNull())
    {
        FString TmpValue;
        if (SteamStringIdValue->TryGetString(TmpValue)) { SteamStringId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayFabIDsFromSteamIDsResult::~FGetPlayFabIDsFromSteamIDsResult()
{

}

void PlayFab::ServerModels::FGetPlayFabIDsFromSteamIDsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Data"));
        for (const FSteamPlayFabIdPair& item : Data)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayFabIDsFromSteamIDsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&DataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Data"));
    for (int32 Idx = 0; Idx < DataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = DataArray[Idx];
        Data.Add(FSteamPlayFabIdPair(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayFabIDsFromXboxLiveIDsRequest::~FGetPlayFabIDsFromXboxLiveIDsRequest()
{

}

void PlayFab::ServerModels::FGetPlayFabIDsFromXboxLiveIDsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Sandbox.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Sandbox"));
        writer->WriteValue(Sandbox);
    }

    writer->WriteArrayStart(TEXT("XboxLiveAccountIDs"));
    for (const FString& item : XboxLiveAccountIDs)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayFabIDsFromXboxLiveIDsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> SandboxValue = obj->TryGetField(TEXT("Sandbox"));
    if (SandboxValue.IsValid() && !SandboxValue->IsNull())
    {
        FString TmpValue;
        if (SandboxValue->TryGetString(TmpValue)) { Sandbox = TmpValue; }
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("XboxLiveAccountIDs"), XboxLiveAccountIDs);

    return HasSucceeded;
}

PlayFab::ServerModels::FXboxLiveAccountPlayFabIdPair::~FXboxLiveAccountPlayFabIdPair()
{

}

void PlayFab::ServerModels::FXboxLiveAccountPlayFabIdPair::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (XboxLiveAccountId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("XboxLiveAccountId"));
        writer->WriteValue(XboxLiveAccountId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FXboxLiveAccountPlayFabIdPair::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> XboxLiveAccountIdValue = obj->TryGetField(TEXT("XboxLiveAccountId"));
    if (XboxLiveAccountIdValue.IsValid() && !XboxLiveAccountIdValue->IsNull())
    {
        FString TmpValue;
        if (XboxLiveAccountIdValue->TryGetString(TmpValue)) { XboxLiveAccountId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPlayFabIDsFromXboxLiveIDsResult::~FGetPlayFabIDsFromXboxLiveIDsResult()
{

}

void PlayFab::ServerModels::FGetPlayFabIDsFromXboxLiveIDsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Data"));
        for (const FXboxLiveAccountPlayFabIdPair& item : Data)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPlayFabIDsFromXboxLiveIDsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&DataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Data"));
    for (int32 Idx = 0; Idx < DataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = DataArray[Idx];
        Data.Add(FXboxLiveAccountPlayFabIdPair(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetPublisherDataRequest::~FGetPublisherDataRequest()
{

}

void PlayFab::ServerModels::FGetPublisherDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("Keys"));
    for (const FString& item : Keys)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPublisherDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("Keys"), Keys);

    return HasSucceeded;
}

PlayFab::ServerModels::FGetPublisherDataResult::~FGetPublisherDataResult()
{

}

void PlayFab::ServerModels::FGetPublisherDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FString>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetPublisherDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetRandomResultTablesRequest::~FGetRandomResultTablesRequest()
{

}

void PlayFab::ServerModels::FGetRandomResultTablesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    writer->WriteArrayStart(TEXT("TableIDs"));
    for (const FString& item : TableIDs)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetRandomResultTablesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("TableIDs"), TableIDs);

    return HasSucceeded;
}

void PlayFab::ServerModels::writeResultTableNodeTypeEnumJSON(ResultTableNodeType enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case ResultTableNodeTypeItemId: writer->WriteValue(TEXT("ItemId")); break;
    case ResultTableNodeTypeTableId: writer->WriteValue(TEXT("TableId")); break;
    }
}

ServerModels::ResultTableNodeType PlayFab::ServerModels::readResultTableNodeTypeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readResultTableNodeTypeFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::ResultTableNodeType PlayFab::ServerModels::readResultTableNodeTypeFromValue(const FString& value)
{
    static TMap<FString, ResultTableNodeType> _ResultTableNodeTypeMap;
    if (_ResultTableNodeTypeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _ResultTableNodeTypeMap.Add(TEXT("ItemId"), ResultTableNodeTypeItemId);
        _ResultTableNodeTypeMap.Add(TEXT("TableId"), ResultTableNodeTypeTableId);

    }

    if (!value.IsEmpty())
    {
        auto output = _ResultTableNodeTypeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return ResultTableNodeTypeItemId; // Basically critical fail
}

PlayFab::ServerModels::FResultTableNode::~FResultTableNode()
{

}

void PlayFab::ServerModels::FResultTableNode::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!ResultItem.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ResultTableNode::ResultItem, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ResultItem"));
        writer->WriteValue(ResultItem);
    }

    writer->WriteIdentifierPrefix(TEXT("ResultItemType"));
    writeResultTableNodeTypeEnumJSON(ResultItemType, writer);

    writer->WriteIdentifierPrefix(TEXT("Weight"));
    writer->WriteValue(Weight);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FResultTableNode::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ResultItemValue = obj->TryGetField(TEXT("ResultItem"));
    if (ResultItemValue.IsValid() && !ResultItemValue->IsNull())
    {
        FString TmpValue;
        if (ResultItemValue->TryGetString(TmpValue)) { ResultItem = TmpValue; }
    }

    ResultItemType = readResultTableNodeTypeFromValue(obj->TryGetField(TEXT("ResultItemType")));

    const TSharedPtr<FJsonValue> WeightValue = obj->TryGetField(TEXT("Weight"));
    if (WeightValue.IsValid() && !WeightValue->IsNull())
    {
        int32 TmpValue;
        if (WeightValue->TryGetNumber(TmpValue)) { Weight = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRandomResultTableListing::~FRandomResultTableListing()
{

}

void PlayFab::ServerModels::FRandomResultTableListing::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    writer->WriteArrayStart(TEXT("Nodes"));
    for (const FResultTableNode& item : Nodes)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    if (!TableId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RandomResultTableListing::TableId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("TableId"));
        writer->WriteValue(TableId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRandomResultTableListing::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&NodesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Nodes"));
    for (int32 Idx = 0; Idx < NodesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = NodesArray[Idx];
        Nodes.Add(FResultTableNode(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> TableIdValue = obj->TryGetField(TEXT("TableId"));
    if (TableIdValue.IsValid() && !TableIdValue->IsNull())
    {
        FString TmpValue;
        if (TableIdValue->TryGetString(TmpValue)) { TableId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetRandomResultTablesResult::~FGetRandomResultTablesResult()
{

}

void PlayFab::ServerModels::FGetRandomResultTablesResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Tables.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Tables"));
        for (TMap<FString, FRandomResultTableListing>::TConstIterator It(Tables); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetRandomResultTablesResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* TablesObject;
    if (obj->TryGetObjectField(TEXT("Tables"), TablesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*TablesObject)->Values); It; ++It)
        {
            Tables.Add(It.Key(), FRandomResultTableListing(It.Value()->AsObject()));
        }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetServerCustomIDsFromPlayFabIDsRequest::~FGetServerCustomIDsFromPlayFabIDsRequest()
{

}

void PlayFab::ServerModels::FGetServerCustomIDsFromPlayFabIDsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("PlayFabIDs"));
    for (const FString& item : PlayFabIDs)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetServerCustomIDsFromPlayFabIDsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("PlayFabIDs"), PlayFabIDs);

    return HasSucceeded;
}

PlayFab::ServerModels::FServerCustomIDPlayFabIDPair::~FServerCustomIDPlayFabIDPair()
{

}

void PlayFab::ServerModels::FServerCustomIDPlayFabIDPair::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (ServerCustomId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ServerCustomId"));
        writer->WriteValue(ServerCustomId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FServerCustomIDPlayFabIDPair::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ServerCustomIdValue = obj->TryGetField(TEXT("ServerCustomId"));
    if (ServerCustomIdValue.IsValid() && !ServerCustomIdValue->IsNull())
    {
        FString TmpValue;
        if (ServerCustomIdValue->TryGetString(TmpValue)) { ServerCustomId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetServerCustomIDsFromPlayFabIDsResult::~FGetServerCustomIDsFromPlayFabIDsResult()
{

}

void PlayFab::ServerModels::FGetServerCustomIDsFromPlayFabIDsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Data"));
        for (const FServerCustomIDPlayFabIDPair& item : Data)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetServerCustomIDsFromPlayFabIDsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&DataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Data"));
    for (int32 Idx = 0; Idx < DataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = DataArray[Idx];
        Data.Add(FServerCustomIDPlayFabIDPair(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetSharedGroupDataRequest::~FGetSharedGroupDataRequest()
{

}

void PlayFab::ServerModels::FGetSharedGroupDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (GetMembers.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("GetMembers"));
        writer->WriteValue(GetMembers);
    }

    if (Keys.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Keys"));
        for (const FString& item : Keys)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (!SharedGroupId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetSharedGroupDataRequest::SharedGroupId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("SharedGroupId"));
        writer->WriteValue(SharedGroupId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetSharedGroupDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GetMembersValue = obj->TryGetField(TEXT("GetMembers"));
    if (GetMembersValue.IsValid() && !GetMembersValue->IsNull())
    {
        bool TmpValue;
        if (GetMembersValue->TryGetBool(TmpValue)) { GetMembers = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("Keys"), Keys);

    const TSharedPtr<FJsonValue> SharedGroupIdValue = obj->TryGetField(TEXT("SharedGroupId"));
    if (SharedGroupIdValue.IsValid() && !SharedGroupIdValue->IsNull())
    {
        FString TmpValue;
        if (SharedGroupIdValue->TryGetString(TmpValue)) { SharedGroupId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FSharedGroupDataRecord::~FSharedGroupDataRecord()
{

}

void PlayFab::ServerModels::FSharedGroupDataRecord::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("LastUpdated"));
    writeDatetime(LastUpdated, writer);

    if (LastUpdatedBy.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("LastUpdatedBy"));
        writer->WriteValue(LastUpdatedBy);
    }

    if (Permission.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Permission"));
        writeUserDataPermissionEnumJSON(Permission, writer);
    }

    if (Value.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Value"));
        writer->WriteValue(Value);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSharedGroupDataRecord::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> LastUpdatedValue = obj->TryGetField(TEXT("LastUpdated"));
    if (LastUpdatedValue.IsValid())
        LastUpdated = readDatetime(LastUpdatedValue);


    const TSharedPtr<FJsonValue> LastUpdatedByValue = obj->TryGetField(TEXT("LastUpdatedBy"));
    if (LastUpdatedByValue.IsValid() && !LastUpdatedByValue->IsNull())
    {
        FString TmpValue;
        if (LastUpdatedByValue->TryGetString(TmpValue)) { LastUpdatedBy = TmpValue; }
    }

    Permission = readUserDataPermissionFromValue(obj->TryGetField(TEXT("Permission")));

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        FString TmpValue;
        if (ValueValue->TryGetString(TmpValue)) { Value = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetSharedGroupDataResult::~FGetSharedGroupDataResult()
{

}

void PlayFab::ServerModels::FGetSharedGroupDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FSharedGroupDataRecord>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    if (Members.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Members"));
        for (const FString& item : Members)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetSharedGroupDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), FSharedGroupDataRecord(It.Value()->AsObject()));
        }
    }

    obj->TryGetStringArrayField(TEXT("Members"), Members);

    return HasSucceeded;
}

PlayFab::ServerModels::FStoreMarketingModel::~FStoreMarketingModel()
{

}

void PlayFab::ServerModels::FStoreMarketingModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (Metadata.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Metadata"));
        Metadata.writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FStoreMarketingModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MetadataValue = obj->TryGetField(TEXT("Metadata"));
    if (MetadataValue.IsValid() && !MetadataValue->IsNull())
    {
        Metadata = FJsonKeeper(MetadataValue);
    }

    return HasSucceeded;
}

void PlayFab::ServerModels::writeSourceTypeEnumJSON(SourceType enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case SourceTypeAdmin: writer->WriteValue(TEXT("Admin")); break;
    case SourceTypeBackEnd: writer->WriteValue(TEXT("BackEnd")); break;
    case SourceTypeGameClient: writer->WriteValue(TEXT("GameClient")); break;
    case SourceTypeGameServer: writer->WriteValue(TEXT("GameServer")); break;
    case SourceTypePartner: writer->WriteValue(TEXT("Partner")); break;
    case SourceTypeCustom: writer->WriteValue(TEXT("Custom")); break;
    case SourceTypeAPI: writer->WriteValue(TEXT("API")); break;
    }
}

ServerModels::SourceType PlayFab::ServerModels::readSourceTypeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readSourceTypeFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::SourceType PlayFab::ServerModels::readSourceTypeFromValue(const FString& value)
{
    static TMap<FString, SourceType> _SourceTypeMap;
    if (_SourceTypeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _SourceTypeMap.Add(TEXT("Admin"), SourceTypeAdmin);
        _SourceTypeMap.Add(TEXT("BackEnd"), SourceTypeBackEnd);
        _SourceTypeMap.Add(TEXT("GameClient"), SourceTypeGameClient);
        _SourceTypeMap.Add(TEXT("GameServer"), SourceTypeGameServer);
        _SourceTypeMap.Add(TEXT("Partner"), SourceTypePartner);
        _SourceTypeMap.Add(TEXT("Custom"), SourceTypeCustom);
        _SourceTypeMap.Add(TEXT("API"), SourceTypeAPI);

    }

    if (!value.IsEmpty())
    {
        auto output = _SourceTypeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return SourceTypeAdmin; // Basically critical fail
}

PlayFab::ServerModels::FStoreItem::~FStoreItem()
{

}

void PlayFab::ServerModels::FStoreItem::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomData.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("CustomData"));
        CustomData.writeJSON(writer);
    }

    if (DisplayPosition.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayPosition"));
        writer->WriteValue(static_cast<int64>(DisplayPosition));
    }

    if (!ItemId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: StoreItem::ItemId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (RealCurrencyPrices.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("RealCurrencyPrices"));
        for (TMap<FString, uint32>::TConstIterator It(RealCurrencyPrices); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue(static_cast<int64>((*It).Value));
        }
        writer->WriteObjectEnd();
    }

    if (VirtualCurrencyPrices.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("VirtualCurrencyPrices"));
        for (TMap<FString, uint32>::TConstIterator It(VirtualCurrencyPrices); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue(static_cast<int64>((*It).Value));
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FStoreItem::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CustomDataValue = obj->TryGetField(TEXT("CustomData"));
    if (CustomDataValue.IsValid() && !CustomDataValue->IsNull())
    {
        CustomData = FJsonKeeper(CustomDataValue);
    }

    const TSharedPtr<FJsonValue> DisplayPositionValue = obj->TryGetField(TEXT("DisplayPosition"));
    if (DisplayPositionValue.IsValid() && !DisplayPositionValue->IsNull())
    {
        uint32 TmpValue;
        if (DisplayPositionValue->TryGetNumber(TmpValue)) { DisplayPosition = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* RealCurrencyPricesObject;
    if (obj->TryGetObjectField(TEXT("RealCurrencyPrices"), RealCurrencyPricesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*RealCurrencyPricesObject)->Values); It; ++It)
        {
            uint32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            RealCurrencyPrices.Add(It.Key(), TmpValue);
        }
    }

    const TSharedPtr<FJsonObject>* VirtualCurrencyPricesObject;
    if (obj->TryGetObjectField(TEXT("VirtualCurrencyPrices"), VirtualCurrencyPricesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*VirtualCurrencyPricesObject)->Values); It; ++It)
        {
            uint32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            VirtualCurrencyPrices.Add(It.Key(), TmpValue);
        }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetStoreItemsResult::~FGetStoreItemsResult()
{
    //if (MarketingData != nullptr) delete MarketingData;

}

void PlayFab::ServerModels::FGetStoreItemsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (MarketingData.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("MarketingData"));
        MarketingData->writeJSON(writer);
    }

    if (Source.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Source"));
        writeSourceTypeEnumJSON(Source, writer);
    }

    if (Store.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Store"));
        for (const FStoreItem& item : Store)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (StoreId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StoreId"));
        writer->WriteValue(StoreId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetStoreItemsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MarketingDataValue = obj->TryGetField(TEXT("MarketingData"));
    if (MarketingDataValue.IsValid() && !MarketingDataValue->IsNull())
    {
        MarketingData = MakeShareable(new FStoreMarketingModel(MarketingDataValue->AsObject()));
    }

    Source = readSourceTypeFromValue(obj->TryGetField(TEXT("Source")));

    const TArray<TSharedPtr<FJsonValue>>&StoreArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Store"));
    for (int32 Idx = 0; Idx < StoreArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StoreArray[Idx];
        Store.Add(FStoreItem(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> StoreIdValue = obj->TryGetField(TEXT("StoreId"));
    if (StoreIdValue.IsValid() && !StoreIdValue->IsNull())
    {
        FString TmpValue;
        if (StoreIdValue->TryGetString(TmpValue)) { StoreId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetStoreItemsServerRequest::~FGetStoreItemsServerRequest()
{

}

void PlayFab::ServerModels::FGetStoreItemsServerRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!StoreId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetStoreItemsServerRequest::StoreId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("StoreId"));
        writer->WriteValue(StoreId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetStoreItemsServerRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StoreIdValue = obj->TryGetField(TEXT("StoreId"));
    if (StoreIdValue.IsValid() && !StoreIdValue->IsNull())
    {
        FString TmpValue;
        if (StoreIdValue->TryGetString(TmpValue)) { StoreId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetTimeRequest::~FGetTimeRequest()
{

}

void PlayFab::ServerModels::FGetTimeRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetTimeRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FGetTimeResult::~FGetTimeResult()
{

}

void PlayFab::ServerModels::FGetTimeResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Time"));
    writeDatetime(Time, writer);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetTimeResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> TimeValue = obj->TryGetField(TEXT("Time"));
    if (TimeValue.IsValid())
        Time = readDatetime(TimeValue);


    return HasSucceeded;
}

PlayFab::ServerModels::FGetTitleDataRequest::~FGetTitleDataRequest()
{

}

void PlayFab::ServerModels::FGetTitleDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Keys.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Keys"));
        for (const FString& item : Keys)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (OverrideLabel.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OverrideLabel"));
        writer->WriteValue(OverrideLabel);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetTitleDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("Keys"), Keys);

    const TSharedPtr<FJsonValue> OverrideLabelValue = obj->TryGetField(TEXT("OverrideLabel"));
    if (OverrideLabelValue.IsValid() && !OverrideLabelValue->IsNull())
    {
        FString TmpValue;
        if (OverrideLabelValue->TryGetString(TmpValue)) { OverrideLabel = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetTitleDataResult::~FGetTitleDataResult()
{

}

void PlayFab::ServerModels::FGetTitleDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FString>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetTitleDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetTitleNewsRequest::~FGetTitleNewsRequest()
{

}

void PlayFab::ServerModels::FGetTitleNewsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Count.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Count"));
        writer->WriteValue(Count);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetTitleNewsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CountValue = obj->TryGetField(TEXT("Count"));
    if (CountValue.IsValid() && !CountValue->IsNull())
    {
        int32 TmpValue;
        if (CountValue->TryGetNumber(TmpValue)) { Count = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FTitleNewsItem::~FTitleNewsItem()
{

}

void PlayFab::ServerModels::FTitleNewsItem::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Body.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Body"));
        writer->WriteValue(Body);
    }

    if (NewsId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NewsId"));
        writer->WriteValue(NewsId);
    }

    writer->WriteIdentifierPrefix(TEXT("Timestamp"));
    writeDatetime(Timestamp, writer);

    if (Title.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Title"));
        writer->WriteValue(Title);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FTitleNewsItem::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BodyValue = obj->TryGetField(TEXT("Body"));
    if (BodyValue.IsValid() && !BodyValue->IsNull())
    {
        FString TmpValue;
        if (BodyValue->TryGetString(TmpValue)) { Body = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NewsIdValue = obj->TryGetField(TEXT("NewsId"));
    if (NewsIdValue.IsValid() && !NewsIdValue->IsNull())
    {
        FString TmpValue;
        if (NewsIdValue->TryGetString(TmpValue)) { NewsId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TimestampValue = obj->TryGetField(TEXT("Timestamp"));
    if (TimestampValue.IsValid())
        Timestamp = readDatetime(TimestampValue);


    const TSharedPtr<FJsonValue> TitleValue = obj->TryGetField(TEXT("Title"));
    if (TitleValue.IsValid() && !TitleValue->IsNull())
    {
        FString TmpValue;
        if (TitleValue->TryGetString(TmpValue)) { Title = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetTitleNewsResult::~FGetTitleNewsResult()
{

}

void PlayFab::ServerModels::FGetTitleNewsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (News.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("News"));
        for (const FTitleNewsItem& item : News)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetTitleNewsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&NewsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("News"));
    for (int32 Idx = 0; Idx < NewsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = NewsArray[Idx];
        News.Add(FTitleNewsItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetUserAccountInfoRequest::~FGetUserAccountInfoRequest()
{

}

void PlayFab::ServerModels::FGetUserAccountInfoRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetUserAccountInfoRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetUserAccountInfoRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetUserAccountInfoResult::~FGetUserAccountInfoResult()
{
    //if (UserInfo != nullptr) delete UserInfo;

}

void PlayFab::ServerModels::FGetUserAccountInfoResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (UserInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("UserInfo"));
        UserInfo->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetUserAccountInfoResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> UserInfoValue = obj->TryGetField(TEXT("UserInfo"));
    if (UserInfoValue.IsValid() && !UserInfoValue->IsNull())
    {
        UserInfo = MakeShareable(new FUserAccountInfo(UserInfoValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetUserBansRequest::~FGetUserBansRequest()
{

}

void PlayFab::ServerModels::FGetUserBansRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetUserBansRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetUserBansRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetUserBansResult::~FGetUserBansResult()
{

}

void PlayFab::ServerModels::FGetUserBansResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BanData.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BanData"));
        for (const FBanInfo& item : BanData)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetUserBansResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BanDataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("BanData"));
    for (int32 Idx = 0; Idx < BanDataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BanDataArray[Idx];
        BanData.Add(FBanInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGetUserDataRequest::~FGetUserDataRequest()
{

}

void PlayFab::ServerModels::FGetUserDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (IfChangedFromDataVersion.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IfChangedFromDataVersion"));
        writer->WriteValue(static_cast<int64>(IfChangedFromDataVersion));
    }

    if (Keys.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Keys"));
        for (const FString& item : Keys)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetUserDataRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetUserDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IfChangedFromDataVersionValue = obj->TryGetField(TEXT("IfChangedFromDataVersion"));
    if (IfChangedFromDataVersionValue.IsValid() && !IfChangedFromDataVersionValue->IsNull())
    {
        uint32 TmpValue;
        if (IfChangedFromDataVersionValue->TryGetNumber(TmpValue)) { IfChangedFromDataVersion = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("Keys"), Keys);

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetUserDataResult::~FGetUserDataResult()
{

}

void PlayFab::ServerModels::FGetUserDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FUserDataRecord>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("DataVersion"));
    writer->WriteValue(static_cast<int64>(DataVersion));

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetUserDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), FUserDataRecord(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> DataVersionValue = obj->TryGetField(TEXT("DataVersion"));
    if (DataVersionValue.IsValid() && !DataVersionValue->IsNull())
    {
        uint32 TmpValue;
        if (DataVersionValue->TryGetNumber(TmpValue)) { DataVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetUserInventoryRequest::~FGetUserInventoryRequest()
{

}

void PlayFab::ServerModels::FGetUserInventoryRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetUserInventoryRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetUserInventoryRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGetUserInventoryResult::~FGetUserInventoryResult()
{

}

void PlayFab::ServerModels::FGetUserInventoryResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Inventory.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Inventory"));
        for (const FItemInstance& item : Inventory)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (VirtualCurrency.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("VirtualCurrency"));
        for (TMap<FString, int32>::TConstIterator It(VirtualCurrency); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (VirtualCurrencyRechargeTimes.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("VirtualCurrencyRechargeTimes"));
        for (TMap<FString, FVirtualCurrencyRechargeTime>::TConstIterator It(VirtualCurrencyRechargeTimes); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGetUserInventoryResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&InventoryArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Inventory"));
    for (int32 Idx = 0; Idx < InventoryArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = InventoryArray[Idx];
        Inventory.Add(FItemInstance(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* VirtualCurrencyObject;
    if (obj->TryGetObjectField(TEXT("VirtualCurrency"), VirtualCurrencyObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*VirtualCurrencyObject)->Values); It; ++It)
        {
            int32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            VirtualCurrency.Add(It.Key(), TmpValue);
        }
    }

    const TSharedPtr<FJsonObject>* VirtualCurrencyRechargeTimesObject;
    if (obj->TryGetObjectField(TEXT("VirtualCurrencyRechargeTimes"), VirtualCurrencyRechargeTimesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*VirtualCurrencyRechargeTimesObject)->Values); It; ++It)
        {
            VirtualCurrencyRechargeTimes.Add(It.Key(), FVirtualCurrencyRechargeTime(It.Value()->AsObject()));
        }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGrantCharacterToUserRequest::~FGrantCharacterToUserRequest()
{

}

void PlayFab::ServerModels::FGrantCharacterToUserRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!CharacterName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GrantCharacterToUserRequest::CharacterName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterName"));
        writer->WriteValue(CharacterName);
    }

    if (!CharacterType.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GrantCharacterToUserRequest::CharacterType, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterType"));
        writer->WriteValue(CharacterType);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GrantCharacterToUserRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGrantCharacterToUserRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterNameValue = obj->TryGetField(TEXT("CharacterName"));
    if (CharacterNameValue.IsValid() && !CharacterNameValue->IsNull())
    {
        FString TmpValue;
        if (CharacterNameValue->TryGetString(TmpValue)) { CharacterName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterTypeValue = obj->TryGetField(TEXT("CharacterType"));
    if (CharacterTypeValue.IsValid() && !CharacterTypeValue->IsNull())
    {
        FString TmpValue;
        if (CharacterTypeValue->TryGetString(TmpValue)) { CharacterType = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGrantCharacterToUserResult::~FGrantCharacterToUserResult()
{

}

void PlayFab::ServerModels::FGrantCharacterToUserResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGrantCharacterToUserResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGrantedItemInstance::~FGrantedItemInstance()
{

}

void PlayFab::ServerModels::FGrantedItemInstance::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Annotation.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Annotation"));
        writer->WriteValue(Annotation);
    }

    if (BundleContents.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BundleContents"));
        for (const FString& item : BundleContents)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (BundleParent.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("BundleParent"));
        writer->WriteValue(BundleParent);
    }

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CustomData.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomData"));
        for (TMap<FString, FString>::TConstIterator It(CustomData); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (Expiration.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Expiration"));
        writeDatetime(Expiration, writer);
    }

    if (ItemClass.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemClass"));
        writer->WriteValue(ItemClass);
    }

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (ItemInstanceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (PurchaseDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("PurchaseDate"));
        writeDatetime(PurchaseDate, writer);
    }

    if (RemainingUses.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("RemainingUses"));
        writer->WriteValue(RemainingUses);
    }

    writer->WriteIdentifierPrefix(TEXT("Result"));
    writer->WriteValue(Result);

    if (UnitCurrency.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("UnitCurrency"));
        writer->WriteValue(UnitCurrency);
    }

    writer->WriteIdentifierPrefix(TEXT("UnitPrice"));
    writer->WriteValue(static_cast<int64>(UnitPrice));

    if (UsesIncrementedBy.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("UsesIncrementedBy"));
        writer->WriteValue(UsesIncrementedBy);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGrantedItemInstance::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AnnotationValue = obj->TryGetField(TEXT("Annotation"));
    if (AnnotationValue.IsValid() && !AnnotationValue->IsNull())
    {
        FString TmpValue;
        if (AnnotationValue->TryGetString(TmpValue)) { Annotation = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("BundleContents"), BundleContents);

    const TSharedPtr<FJsonValue> BundleParentValue = obj->TryGetField(TEXT("BundleParent"));
    if (BundleParentValue.IsValid() && !BundleParentValue->IsNull())
    {
        FString TmpValue;
        if (BundleParentValue->TryGetString(TmpValue)) { BundleParent = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomDataObject;
    if (obj->TryGetObjectField(TEXT("CustomData"), CustomDataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomDataObject)->Values); It; ++It)
        {
            CustomData.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExpirationValue = obj->TryGetField(TEXT("Expiration"));
    if (ExpirationValue.IsValid())
        Expiration = readDatetime(ExpirationValue);


    const TSharedPtr<FJsonValue> ItemClassValue = obj->TryGetField(TEXT("ItemClass"));
    if (ItemClassValue.IsValid() && !ItemClassValue->IsNull())
    {
        FString TmpValue;
        if (ItemClassValue->TryGetString(TmpValue)) { ItemClass = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PurchaseDateValue = obj->TryGetField(TEXT("PurchaseDate"));
    if (PurchaseDateValue.IsValid())
        PurchaseDate = readDatetime(PurchaseDateValue);


    const TSharedPtr<FJsonValue> RemainingUsesValue = obj->TryGetField(TEXT("RemainingUses"));
    if (RemainingUsesValue.IsValid() && !RemainingUsesValue->IsNull())
    {
        int32 TmpValue;
        if (RemainingUsesValue->TryGetNumber(TmpValue)) { RemainingUses = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ResultValue = obj->TryGetField(TEXT("Result"));
    if (ResultValue.IsValid() && !ResultValue->IsNull())
    {
        bool TmpValue;
        if (ResultValue->TryGetBool(TmpValue)) { Result = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UnitCurrencyValue = obj->TryGetField(TEXT("UnitCurrency"));
    if (UnitCurrencyValue.IsValid() && !UnitCurrencyValue->IsNull())
    {
        FString TmpValue;
        if (UnitCurrencyValue->TryGetString(TmpValue)) { UnitCurrency = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UnitPriceValue = obj->TryGetField(TEXT("UnitPrice"));
    if (UnitPriceValue.IsValid() && !UnitPriceValue->IsNull())
    {
        uint32 TmpValue;
        if (UnitPriceValue->TryGetNumber(TmpValue)) { UnitPrice = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsesIncrementedByValue = obj->TryGetField(TEXT("UsesIncrementedBy"));
    if (UsesIncrementedByValue.IsValid() && !UsesIncrementedByValue->IsNull())
    {
        int32 TmpValue;
        if (UsesIncrementedByValue->TryGetNumber(TmpValue)) { UsesIncrementedBy = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGrantItemsToCharacterRequest::~FGrantItemsToCharacterRequest()
{

}

void PlayFab::ServerModels::FGrantItemsToCharacterRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Annotation.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Annotation"));
        writer->WriteValue(Annotation);
    }

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (!CharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GrantItemsToCharacterRequest::CharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (ItemIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ItemIds"));
        for (const FString& item : ItemIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GrantItemsToCharacterRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGrantItemsToCharacterRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AnnotationValue = obj->TryGetField(TEXT("Annotation"));
    if (AnnotationValue.IsValid() && !AnnotationValue->IsNull())
    {
        FString TmpValue;
        if (AnnotationValue->TryGetString(TmpValue)) { Annotation = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    obj->TryGetStringArrayField(TEXT("ItemIds"), ItemIds);

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGrantItemsToCharacterResult::~FGrantItemsToCharacterResult()
{

}

void PlayFab::ServerModels::FGrantItemsToCharacterResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ItemGrantResults.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ItemGrantResults"));
        for (const FGrantedItemInstance& item : ItemGrantResults)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGrantItemsToCharacterResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ItemGrantResultsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ItemGrantResults"));
    for (int32 Idx = 0; Idx < ItemGrantResultsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemGrantResultsArray[Idx];
        ItemGrantResults.Add(FGrantedItemInstance(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGrantItemsToUserRequest::~FGrantItemsToUserRequest()
{

}

void PlayFab::ServerModels::FGrantItemsToUserRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Annotation.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Annotation"));
        writer->WriteValue(Annotation);
    }

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteArrayStart(TEXT("ItemIds"));
    for (const FString& item : ItemIds)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GrantItemsToUserRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGrantItemsToUserRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AnnotationValue = obj->TryGetField(TEXT("Annotation"));
    if (AnnotationValue.IsValid() && !AnnotationValue->IsNull())
    {
        FString TmpValue;
        if (AnnotationValue->TryGetString(TmpValue)) { Annotation = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("ItemIds"), ItemIds);

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGrantItemsToUserResult::~FGrantItemsToUserResult()
{

}

void PlayFab::ServerModels::FGrantItemsToUserResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ItemGrantResults.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ItemGrantResults"));
        for (const FGrantedItemInstance& item : ItemGrantResults)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGrantItemsToUserResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ItemGrantResultsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ItemGrantResults"));
    for (int32 Idx = 0; Idx < ItemGrantResultsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemGrantResultsArray[Idx];
        ItemGrantResults.Add(FGrantedItemInstance(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FItemGrant::~FItemGrant()
{

}

void PlayFab::ServerModels::FItemGrant::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Annotation.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Annotation"));
        writer->WriteValue(Annotation);
    }

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FString>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!ItemId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ItemGrant::ItemId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (KeysToRemove.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("KeysToRemove"));
        for (const FString& item : KeysToRemove)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ItemGrant::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FItemGrant::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AnnotationValue = obj->TryGetField(TEXT("Annotation"));
    if (AnnotationValue.IsValid() && !AnnotationValue->IsNull())
    {
        FString TmpValue;
        if (AnnotationValue->TryGetString(TmpValue)) { Annotation = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("KeysToRemove"), KeysToRemove);

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FGrantItemsToUsersRequest::~FGrantItemsToUsersRequest()
{

}

void PlayFab::ServerModels::FGrantItemsToUsersRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteArrayStart(TEXT("ItemGrants"));
    for (const FItemGrant& item : ItemGrants)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGrantItemsToUsersRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TArray<TSharedPtr<FJsonValue>>&ItemGrantsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ItemGrants"));
    for (int32 Idx = 0; Idx < ItemGrantsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemGrantsArray[Idx];
        ItemGrants.Add(FItemGrant(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FGrantItemsToUsersResult::~FGrantItemsToUsersResult()
{

}

void PlayFab::ServerModels::FGrantItemsToUsersResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ItemGrantResults.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ItemGrantResults"));
        for (const FGrantedItemInstance& item : ItemGrantResults)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FGrantItemsToUsersResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ItemGrantResultsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ItemGrantResults"));
    for (int32 Idx = 0; Idx < ItemGrantResultsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemGrantResultsArray[Idx];
        ItemGrantResults.Add(FGrantedItemInstance(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FLinkPSNAccountRequest::~FLinkPSNAccountRequest()
{

}

void PlayFab::ServerModels::FLinkPSNAccountRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!AuthCode.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: LinkPSNAccountRequest::AuthCode, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("AuthCode"));
        writer->WriteValue(AuthCode);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (ForceLink.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ForceLink"));
        writer->WriteValue(ForceLink);
    }

    if (IssuerId.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IssuerId"));
        writer->WriteValue(IssuerId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: LinkPSNAccountRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!RedirectUri.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: LinkPSNAccountRequest::RedirectUri, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("RedirectUri"));
        writer->WriteValue(RedirectUri);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FLinkPSNAccountRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AuthCodeValue = obj->TryGetField(TEXT("AuthCode"));
    if (AuthCodeValue.IsValid() && !AuthCodeValue->IsNull())
    {
        FString TmpValue;
        if (AuthCodeValue->TryGetString(TmpValue)) { AuthCode = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ForceLinkValue = obj->TryGetField(TEXT("ForceLink"));
    if (ForceLinkValue.IsValid() && !ForceLinkValue->IsNull())
    {
        bool TmpValue;
        if (ForceLinkValue->TryGetBool(TmpValue)) { ForceLink = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IssuerIdValue = obj->TryGetField(TEXT("IssuerId"));
    if (IssuerIdValue.IsValid() && !IssuerIdValue->IsNull())
    {
        int32 TmpValue;
        if (IssuerIdValue->TryGetNumber(TmpValue)) { IssuerId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RedirectUriValue = obj->TryGetField(TEXT("RedirectUri"));
    if (RedirectUriValue.IsValid() && !RedirectUriValue->IsNull())
    {
        FString TmpValue;
        if (RedirectUriValue->TryGetString(TmpValue)) { RedirectUri = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FLinkPSNAccountResult::~FLinkPSNAccountResult()
{

}

void PlayFab::ServerModels::FLinkPSNAccountResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FLinkPSNAccountResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FLinkServerCustomIdRequest::~FLinkServerCustomIdRequest()
{

}

void PlayFab::ServerModels::FLinkServerCustomIdRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (ForceLink.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ForceLink"));
        writer->WriteValue(ForceLink);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: LinkServerCustomIdRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!ServerCustomId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: LinkServerCustomIdRequest::ServerCustomId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ServerCustomId"));
        writer->WriteValue(ServerCustomId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FLinkServerCustomIdRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ForceLinkValue = obj->TryGetField(TEXT("ForceLink"));
    if (ForceLinkValue.IsValid() && !ForceLinkValue->IsNull())
    {
        bool TmpValue;
        if (ForceLinkValue->TryGetBool(TmpValue)) { ForceLink = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ServerCustomIdValue = obj->TryGetField(TEXT("ServerCustomId"));
    if (ServerCustomIdValue.IsValid() && !ServerCustomIdValue->IsNull())
    {
        FString TmpValue;
        if (ServerCustomIdValue->TryGetString(TmpValue)) { ServerCustomId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FLinkServerCustomIdResult::~FLinkServerCustomIdResult()
{

}

void PlayFab::ServerModels::FLinkServerCustomIdResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FLinkServerCustomIdResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FLinkXboxAccountRequest::~FLinkXboxAccountRequest()
{

}

void PlayFab::ServerModels::FLinkXboxAccountRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (ForceLink.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ForceLink"));
        writer->WriteValue(ForceLink);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: LinkXboxAccountRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!XboxToken.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: LinkXboxAccountRequest::XboxToken, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("XboxToken"));
        writer->WriteValue(XboxToken);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FLinkXboxAccountRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ForceLinkValue = obj->TryGetField(TEXT("ForceLink"));
    if (ForceLinkValue.IsValid() && !ForceLinkValue->IsNull())
    {
        bool TmpValue;
        if (ForceLinkValue->TryGetBool(TmpValue)) { ForceLink = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> XboxTokenValue = obj->TryGetField(TEXT("XboxToken"));
    if (XboxTokenValue.IsValid() && !XboxTokenValue->IsNull())
    {
        FString TmpValue;
        if (XboxTokenValue->TryGetString(TmpValue)) { XboxToken = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FLinkXboxAccountResult::~FLinkXboxAccountResult()
{

}

void PlayFab::ServerModels::FLinkXboxAccountResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FLinkXboxAccountResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FListUsersCharactersRequest::~FListUsersCharactersRequest()
{

}

void PlayFab::ServerModels::FListUsersCharactersRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ListUsersCharactersRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FListUsersCharactersRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FListUsersCharactersResult::~FListUsersCharactersResult()
{

}

void PlayFab::ServerModels::FListUsersCharactersResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Characters.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Characters"));
        for (const FCharacterResult& item : Characters)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FListUsersCharactersResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&CharactersArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Characters"));
    for (int32 Idx = 0; Idx < CharactersArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = CharactersArray[Idx];
        Characters.Add(FCharacterResult(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FLocalizedPushNotificationProperties::~FLocalizedPushNotificationProperties()
{

}

void PlayFab::ServerModels::FLocalizedPushNotificationProperties::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Message.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Message"));
        writer->WriteValue(Message);
    }

    if (Subject.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Subject"));
        writer->WriteValue(Subject);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FLocalizedPushNotificationProperties::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> MessageValue = obj->TryGetField(TEXT("Message"));
    if (MessageValue.IsValid() && !MessageValue->IsNull())
    {
        FString TmpValue;
        if (MessageValue->TryGetString(TmpValue)) { Message = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SubjectValue = obj->TryGetField(TEXT("Subject"));
    if (SubjectValue.IsValid() && !SubjectValue->IsNull())
    {
        FString TmpValue;
        if (SubjectValue->TryGetString(TmpValue)) { Subject = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FLoginWithServerCustomIdRequest::~FLoginWithServerCustomIdRequest()
{
    //if (InfoRequestParameters != nullptr) delete InfoRequestParameters;

}

void PlayFab::ServerModels::FLoginWithServerCustomIdRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CreateAccount.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("CreateAccount"));
        writer->WriteValue(CreateAccount);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (InfoRequestParameters.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("InfoRequestParameters"));
        InfoRequestParameters->writeJSON(writer);
    }

    if (PlayerSecret.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayerSecret"));
        writer->WriteValue(PlayerSecret);
    }

    if (ServerCustomId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ServerCustomId"));
        writer->WriteValue(ServerCustomId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FLoginWithServerCustomIdRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CreateAccountValue = obj->TryGetField(TEXT("CreateAccount"));
    if (CreateAccountValue.IsValid() && !CreateAccountValue->IsNull())
    {
        bool TmpValue;
        if (CreateAccountValue->TryGetBool(TmpValue)) { CreateAccount = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> InfoRequestParametersValue = obj->TryGetField(TEXT("InfoRequestParameters"));
    if (InfoRequestParametersValue.IsValid() && !InfoRequestParametersValue->IsNull())
    {
        InfoRequestParameters = MakeShareable(new FGetPlayerCombinedInfoRequestParams(InfoRequestParametersValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> PlayerSecretValue = obj->TryGetField(TEXT("PlayerSecret"));
    if (PlayerSecretValue.IsValid() && !PlayerSecretValue->IsNull())
    {
        FString TmpValue;
        if (PlayerSecretValue->TryGetString(TmpValue)) { PlayerSecret = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ServerCustomIdValue = obj->TryGetField(TEXT("ServerCustomId"));
    if (ServerCustomIdValue.IsValid() && !ServerCustomIdValue->IsNull())
    {
        FString TmpValue;
        if (ServerCustomIdValue->TryGetString(TmpValue)) { ServerCustomId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FLoginWithXboxIdRequest::~FLoginWithXboxIdRequest()
{
    //if (InfoRequestParameters != nullptr) delete InfoRequestParameters;

}

void PlayFab::ServerModels::FLoginWithXboxIdRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CreateAccount.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("CreateAccount"));
        writer->WriteValue(CreateAccount);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (InfoRequestParameters.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("InfoRequestParameters"));
        InfoRequestParameters->writeJSON(writer);
    }

    if (!Sandbox.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: LoginWithXboxIdRequest::Sandbox, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Sandbox"));
        writer->WriteValue(Sandbox);
    }

    if (!XboxId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: LoginWithXboxIdRequest::XboxId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("XboxId"));
        writer->WriteValue(XboxId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FLoginWithXboxIdRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CreateAccountValue = obj->TryGetField(TEXT("CreateAccount"));
    if (CreateAccountValue.IsValid() && !CreateAccountValue->IsNull())
    {
        bool TmpValue;
        if (CreateAccountValue->TryGetBool(TmpValue)) { CreateAccount = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> InfoRequestParametersValue = obj->TryGetField(TEXT("InfoRequestParameters"));
    if (InfoRequestParametersValue.IsValid() && !InfoRequestParametersValue->IsNull())
    {
        InfoRequestParameters = MakeShareable(new FGetPlayerCombinedInfoRequestParams(InfoRequestParametersValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> SandboxValue = obj->TryGetField(TEXT("Sandbox"));
    if (SandboxValue.IsValid() && !SandboxValue->IsNull())
    {
        FString TmpValue;
        if (SandboxValue->TryGetString(TmpValue)) { Sandbox = TmpValue; }
    }

    const TSharedPtr<FJsonValue> XboxIdValue = obj->TryGetField(TEXT("XboxId"));
    if (XboxIdValue.IsValid() && !XboxIdValue->IsNull())
    {
        FString TmpValue;
        if (XboxIdValue->TryGetString(TmpValue)) { XboxId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FLoginWithXboxRequest::~FLoginWithXboxRequest()
{
    //if (InfoRequestParameters != nullptr) delete InfoRequestParameters;

}

void PlayFab::ServerModels::FLoginWithXboxRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CreateAccount.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("CreateAccount"));
        writer->WriteValue(CreateAccount);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (InfoRequestParameters.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("InfoRequestParameters"));
        InfoRequestParameters->writeJSON(writer);
    }

    if (!XboxToken.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: LoginWithXboxRequest::XboxToken, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("XboxToken"));
        writer->WriteValue(XboxToken);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FLoginWithXboxRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CreateAccountValue = obj->TryGetField(TEXT("CreateAccount"));
    if (CreateAccountValue.IsValid() && !CreateAccountValue->IsNull())
    {
        bool TmpValue;
        if (CreateAccountValue->TryGetBool(TmpValue)) { CreateAccount = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> InfoRequestParametersValue = obj->TryGetField(TEXT("InfoRequestParameters"));
    if (InfoRequestParametersValue.IsValid() && !InfoRequestParametersValue->IsNull())
    {
        InfoRequestParameters = MakeShareable(new FGetPlayerCombinedInfoRequestParams(InfoRequestParametersValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> XboxTokenValue = obj->TryGetField(TEXT("XboxToken"));
    if (XboxTokenValue.IsValid() && !XboxTokenValue->IsNull())
    {
        FString TmpValue;
        if (XboxTokenValue->TryGetString(TmpValue)) { XboxToken = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FModifyCharacterVirtualCurrencyResult::~FModifyCharacterVirtualCurrencyResult()
{

}

void PlayFab::ServerModels::FModifyCharacterVirtualCurrencyResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Balance"));
    writer->WriteValue(Balance);

    if (VirtualCurrency.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("VirtualCurrency"));
        writer->WriteValue(VirtualCurrency);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FModifyCharacterVirtualCurrencyResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BalanceValue = obj->TryGetField(TEXT("Balance"));
    if (BalanceValue.IsValid() && !BalanceValue->IsNull())
    {
        int32 TmpValue;
        if (BalanceValue->TryGetNumber(TmpValue)) { Balance = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VirtualCurrencyValue = obj->TryGetField(TEXT("VirtualCurrency"));
    if (VirtualCurrencyValue.IsValid() && !VirtualCurrencyValue->IsNull())
    {
        FString TmpValue;
        if (VirtualCurrencyValue->TryGetString(TmpValue)) { VirtualCurrency = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FModifyItemUsesRequest::~FModifyItemUsesRequest()
{

}

void PlayFab::ServerModels::FModifyItemUsesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!ItemInstanceId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ModifyItemUsesRequest::ItemInstanceId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ModifyItemUsesRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteIdentifierPrefix(TEXT("UsesToAdd"));
    writer->WriteValue(UsesToAdd);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FModifyItemUsesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsesToAddValue = obj->TryGetField(TEXT("UsesToAdd"));
    if (UsesToAddValue.IsValid() && !UsesToAddValue->IsNull())
    {
        int32 TmpValue;
        if (UsesToAddValue->TryGetNumber(TmpValue)) { UsesToAdd = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FModifyItemUsesResult::~FModifyItemUsesResult()
{

}

void PlayFab::ServerModels::FModifyItemUsesResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ItemInstanceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    writer->WriteIdentifierPrefix(TEXT("RemainingUses"));
    writer->WriteValue(RemainingUses);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FModifyItemUsesResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RemainingUsesValue = obj->TryGetField(TEXT("RemainingUses"));
    if (RemainingUsesValue.IsValid() && !RemainingUsesValue->IsNull())
    {
        int32 TmpValue;
        if (RemainingUsesValue->TryGetNumber(TmpValue)) { RemainingUses = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FModifyUserVirtualCurrencyResult::~FModifyUserVirtualCurrencyResult()
{

}

void PlayFab::ServerModels::FModifyUserVirtualCurrencyResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Balance"));
    writer->WriteValue(Balance);

    writer->WriteIdentifierPrefix(TEXT("BalanceChange"));
    writer->WriteValue(BalanceChange);

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (VirtualCurrency.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("VirtualCurrency"));
        writer->WriteValue(VirtualCurrency);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FModifyUserVirtualCurrencyResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BalanceValue = obj->TryGetField(TEXT("Balance"));
    if (BalanceValue.IsValid() && !BalanceValue->IsNull())
    {
        int32 TmpValue;
        if (BalanceValue->TryGetNumber(TmpValue)) { Balance = TmpValue; }
    }

    const TSharedPtr<FJsonValue> BalanceChangeValue = obj->TryGetField(TEXT("BalanceChange"));
    if (BalanceChangeValue.IsValid() && !BalanceChangeValue->IsNull())
    {
        int32 TmpValue;
        if (BalanceChangeValue->TryGetNumber(TmpValue)) { BalanceChange = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VirtualCurrencyValue = obj->TryGetField(TEXT("VirtualCurrency"));
    if (VirtualCurrencyValue.IsValid() && !VirtualCurrencyValue->IsNull())
    {
        FString TmpValue;
        if (VirtualCurrencyValue->TryGetString(TmpValue)) { VirtualCurrency = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FMoveItemToCharacterFromCharacterRequest::~FMoveItemToCharacterFromCharacterRequest()
{

}

void PlayFab::ServerModels::FMoveItemToCharacterFromCharacterRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!GivingCharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: MoveItemToCharacterFromCharacterRequest::GivingCharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("GivingCharacterId"));
        writer->WriteValue(GivingCharacterId);
    }

    if (!ItemInstanceId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: MoveItemToCharacterFromCharacterRequest::ItemInstanceId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: MoveItemToCharacterFromCharacterRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!ReceivingCharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: MoveItemToCharacterFromCharacterRequest::ReceivingCharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ReceivingCharacterId"));
        writer->WriteValue(ReceivingCharacterId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FMoveItemToCharacterFromCharacterRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GivingCharacterIdValue = obj->TryGetField(TEXT("GivingCharacterId"));
    if (GivingCharacterIdValue.IsValid() && !GivingCharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (GivingCharacterIdValue->TryGetString(TmpValue)) { GivingCharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReceivingCharacterIdValue = obj->TryGetField(TEXT("ReceivingCharacterId"));
    if (ReceivingCharacterIdValue.IsValid() && !ReceivingCharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (ReceivingCharacterIdValue->TryGetString(TmpValue)) { ReceivingCharacterId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FMoveItemToCharacterFromCharacterResult::~FMoveItemToCharacterFromCharacterResult()
{

}

void PlayFab::ServerModels::FMoveItemToCharacterFromCharacterResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FMoveItemToCharacterFromCharacterResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FMoveItemToCharacterFromUserRequest::~FMoveItemToCharacterFromUserRequest()
{

}

void PlayFab::ServerModels::FMoveItemToCharacterFromUserRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!CharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: MoveItemToCharacterFromUserRequest::CharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (!ItemInstanceId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: MoveItemToCharacterFromUserRequest::ItemInstanceId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: MoveItemToCharacterFromUserRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FMoveItemToCharacterFromUserRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FMoveItemToCharacterFromUserResult::~FMoveItemToCharacterFromUserResult()
{

}

void PlayFab::ServerModels::FMoveItemToCharacterFromUserResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FMoveItemToCharacterFromUserResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FMoveItemToUserFromCharacterRequest::~FMoveItemToUserFromCharacterRequest()
{

}

void PlayFab::ServerModels::FMoveItemToUserFromCharacterRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!CharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: MoveItemToUserFromCharacterRequest::CharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (!ItemInstanceId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: MoveItemToUserFromCharacterRequest::ItemInstanceId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: MoveItemToUserFromCharacterRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FMoveItemToUserFromCharacterRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FMoveItemToUserFromCharacterResult::~FMoveItemToUserFromCharacterResult()
{

}

void PlayFab::ServerModels::FMoveItemToUserFromCharacterResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FMoveItemToUserFromCharacterResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FNotifyMatchmakerPlayerLeftRequest::~FNotifyMatchmakerPlayerLeftRequest()
{

}

void PlayFab::ServerModels::FNotifyMatchmakerPlayerLeftRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!LobbyId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: NotifyMatchmakerPlayerLeftRequest::LobbyId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("LobbyId"));
        writer->WriteValue(LobbyId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: NotifyMatchmakerPlayerLeftRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FNotifyMatchmakerPlayerLeftRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> LobbyIdValue = obj->TryGetField(TEXT("LobbyId"));
    if (LobbyIdValue.IsValid() && !LobbyIdValue->IsNull())
    {
        FString TmpValue;
        if (LobbyIdValue->TryGetString(TmpValue)) { LobbyId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::ServerModels::writePlayerConnectionStateEnumJSON(PlayerConnectionState enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case PlayerConnectionStateUnassigned: writer->WriteValue(TEXT("Unassigned")); break;
    case PlayerConnectionStateConnecting: writer->WriteValue(TEXT("Connecting")); break;
    case PlayerConnectionStateParticipating: writer->WriteValue(TEXT("Participating")); break;
    case PlayerConnectionStateParticipated: writer->WriteValue(TEXT("Participated")); break;
    }
}

ServerModels::PlayerConnectionState PlayFab::ServerModels::readPlayerConnectionStateFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readPlayerConnectionStateFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::PlayerConnectionState PlayFab::ServerModels::readPlayerConnectionStateFromValue(const FString& value)
{
    static TMap<FString, PlayerConnectionState> _PlayerConnectionStateMap;
    if (_PlayerConnectionStateMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _PlayerConnectionStateMap.Add(TEXT("Unassigned"), PlayerConnectionStateUnassigned);
        _PlayerConnectionStateMap.Add(TEXT("Connecting"), PlayerConnectionStateConnecting);
        _PlayerConnectionStateMap.Add(TEXT("Participating"), PlayerConnectionStateParticipating);
        _PlayerConnectionStateMap.Add(TEXT("Participated"), PlayerConnectionStateParticipated);

    }

    if (!value.IsEmpty())
    {
        auto output = _PlayerConnectionStateMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return PlayerConnectionStateUnassigned; // Basically critical fail
}

PlayFab::ServerModels::FNotifyMatchmakerPlayerLeftResult::~FNotifyMatchmakerPlayerLeftResult()
{

}

void PlayFab::ServerModels::FNotifyMatchmakerPlayerLeftResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PlayerState.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("PlayerState"));
        writePlayerConnectionStateEnumJSON(PlayerState, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FNotifyMatchmakerPlayerLeftResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    PlayerState = readPlayerConnectionStateFromValue(obj->TryGetField(TEXT("PlayerState")));

    return HasSucceeded;
}

PlayFab::ServerModels::FPushNotificationPackage::~FPushNotificationPackage()
{

}

void PlayFab::ServerModels::FPushNotificationPackage::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Badge"));
    writer->WriteValue(Badge);

    if (CustomData.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CustomData"));
        writer->WriteValue(CustomData);
    }

    if (Icon.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Icon"));
        writer->WriteValue(Icon);
    }

    if (!Message.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: PushNotificationPackage::Message, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Message"));
        writer->WriteValue(Message);
    }

    if (Sound.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Sound"));
        writer->WriteValue(Sound);
    }

    if (!Title.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: PushNotificationPackage::Title, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Title"));
        writer->WriteValue(Title);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FPushNotificationPackage::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BadgeValue = obj->TryGetField(TEXT("Badge"));
    if (BadgeValue.IsValid() && !BadgeValue->IsNull())
    {
        int32 TmpValue;
        if (BadgeValue->TryGetNumber(TmpValue)) { Badge = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CustomDataValue = obj->TryGetField(TEXT("CustomData"));
    if (CustomDataValue.IsValid() && !CustomDataValue->IsNull())
    {
        FString TmpValue;
        if (CustomDataValue->TryGetString(TmpValue)) { CustomData = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IconValue = obj->TryGetField(TEXT("Icon"));
    if (IconValue.IsValid() && !IconValue->IsNull())
    {
        FString TmpValue;
        if (IconValue->TryGetString(TmpValue)) { Icon = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MessageValue = obj->TryGetField(TEXT("Message"));
    if (MessageValue.IsValid() && !MessageValue->IsNull())
    {
        FString TmpValue;
        if (MessageValue->TryGetString(TmpValue)) { Message = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SoundValue = obj->TryGetField(TEXT("Sound"));
    if (SoundValue.IsValid() && !SoundValue->IsNull())
    {
        FString TmpValue;
        if (SoundValue->TryGetString(TmpValue)) { Sound = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TitleValue = obj->TryGetField(TEXT("Title"));
    if (TitleValue.IsValid() && !TitleValue->IsNull())
    {
        FString TmpValue;
        if (TitleValue->TryGetString(TmpValue)) { Title = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRedeemCouponRequest::~FRedeemCouponRequest()
{

}

void PlayFab::ServerModels::FRedeemCouponRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (!CouponCode.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RedeemCouponRequest::CouponCode, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CouponCode"));
        writer->WriteValue(CouponCode);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RedeemCouponRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRedeemCouponRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CouponCodeValue = obj->TryGetField(TEXT("CouponCode"));
    if (CouponCodeValue.IsValid() && !CouponCodeValue->IsNull())
    {
        FString TmpValue;
        if (CouponCodeValue->TryGetString(TmpValue)) { CouponCode = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRedeemCouponResult::~FRedeemCouponResult()
{

}

void PlayFab::ServerModels::FRedeemCouponResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (GrantedItems.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("GrantedItems"));
        for (const FItemInstance& item : GrantedItems)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRedeemCouponResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&GrantedItemsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("GrantedItems"));
    for (int32 Idx = 0; Idx < GrantedItemsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = GrantedItemsArray[Idx];
        GrantedItems.Add(FItemInstance(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FRedeemMatchmakerTicketRequest::~FRedeemMatchmakerTicketRequest()
{

}

void PlayFab::ServerModels::FRedeemMatchmakerTicketRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!LobbyId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RedeemMatchmakerTicketRequest::LobbyId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("LobbyId"));
        writer->WriteValue(LobbyId);
    }

    if (!Ticket.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RedeemMatchmakerTicketRequest::Ticket, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Ticket"));
        writer->WriteValue(Ticket);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRedeemMatchmakerTicketRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> LobbyIdValue = obj->TryGetField(TEXT("LobbyId"));
    if (LobbyIdValue.IsValid() && !LobbyIdValue->IsNull())
    {
        FString TmpValue;
        if (LobbyIdValue->TryGetString(TmpValue)) { LobbyId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TicketValue = obj->TryGetField(TEXT("Ticket"));
    if (TicketValue.IsValid() && !TicketValue->IsNull())
    {
        FString TmpValue;
        if (TicketValue->TryGetString(TmpValue)) { Ticket = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRedeemMatchmakerTicketResult::~FRedeemMatchmakerTicketResult()
{
    //if (UserInfo != nullptr) delete UserInfo;

}

void PlayFab::ServerModels::FRedeemMatchmakerTicketResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Error.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Error"));
        writer->WriteValue(Error);
    }

    writer->WriteIdentifierPrefix(TEXT("TicketIsValid"));
    writer->WriteValue(TicketIsValid);

    if (UserInfo.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("UserInfo"));
        UserInfo->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRedeemMatchmakerTicketResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ErrorValue = obj->TryGetField(TEXT("Error"));
    if (ErrorValue.IsValid() && !ErrorValue->IsNull())
    {
        FString TmpValue;
        if (ErrorValue->TryGetString(TmpValue)) { Error = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TicketIsValidValue = obj->TryGetField(TEXT("TicketIsValid"));
    if (TicketIsValidValue.IsValid() && !TicketIsValidValue->IsNull())
    {
        bool TmpValue;
        if (TicketIsValidValue->TryGetBool(TmpValue)) { TicketIsValid = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UserInfoValue = obj->TryGetField(TEXT("UserInfo"));
    if (UserInfoValue.IsValid() && !UserInfoValue->IsNull())
    {
        UserInfo = MakeShareable(new FUserAccountInfo(UserInfoValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRefreshGameServerInstanceHeartbeatRequest::~FRefreshGameServerInstanceHeartbeatRequest()
{

}

void PlayFab::ServerModels::FRefreshGameServerInstanceHeartbeatRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!LobbyId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RefreshGameServerInstanceHeartbeatRequest::LobbyId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("LobbyId"));
        writer->WriteValue(LobbyId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRefreshGameServerInstanceHeartbeatRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> LobbyIdValue = obj->TryGetField(TEXT("LobbyId"));
    if (LobbyIdValue.IsValid() && !LobbyIdValue->IsNull())
    {
        FString TmpValue;
        if (LobbyIdValue->TryGetString(TmpValue)) { LobbyId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRefreshGameServerInstanceHeartbeatResult::~FRefreshGameServerInstanceHeartbeatResult()
{

}

void PlayFab::ServerModels::FRefreshGameServerInstanceHeartbeatResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRefreshGameServerInstanceHeartbeatResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

void PlayFab::ServerModels::writeRegionEnumJSON(Region enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case RegionUSCentral: writer->WriteValue(TEXT("USCentral")); break;
    case RegionUSEast: writer->WriteValue(TEXT("USEast")); break;
    case RegionEUWest: writer->WriteValue(TEXT("EUWest")); break;
    case RegionSingapore: writer->WriteValue(TEXT("Singapore")); break;
    case RegionJapan: writer->WriteValue(TEXT("Japan")); break;
    case RegionBrazil: writer->WriteValue(TEXT("Brazil")); break;
    case RegionAustralia: writer->WriteValue(TEXT("Australia")); break;
    }
}

ServerModels::Region PlayFab::ServerModels::readRegionFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readRegionFromValue(value.IsValid() ? value->AsString() : "");
}

ServerModels::Region PlayFab::ServerModels::readRegionFromValue(const FString& value)
{
    static TMap<FString, Region> _RegionMap;
    if (_RegionMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _RegionMap.Add(TEXT("USCentral"), RegionUSCentral);
        _RegionMap.Add(TEXT("USEast"), RegionUSEast);
        _RegionMap.Add(TEXT("EUWest"), RegionEUWest);
        _RegionMap.Add(TEXT("Singapore"), RegionSingapore);
        _RegionMap.Add(TEXT("Japan"), RegionJapan);
        _RegionMap.Add(TEXT("Brazil"), RegionBrazil);
        _RegionMap.Add(TEXT("Australia"), RegionAustralia);

    }

    if (!value.IsEmpty())
    {
        auto output = _RegionMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return RegionUSCentral; // Basically critical fail
}

PlayFab::ServerModels::FRegisterGameRequest::~FRegisterGameRequest()
{

}

void PlayFab::ServerModels::FRegisterGameRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Build.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RegisterGameRequest::Build, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Build"));
        writer->WriteValue(Build);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!GameMode.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RegisterGameRequest::GameMode, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("GameMode"));
        writer->WriteValue(GameMode);
    }

    if (LobbyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("LobbyId"));
        writer->WriteValue(LobbyId);
    }

    writer->WriteIdentifierPrefix(TEXT("Region"));
    writeRegionEnumJSON(pfRegion, writer);

    if (ServerIPV4Address.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ServerIPV4Address"));
        writer->WriteValue(ServerIPV4Address);
    }

    if (ServerIPV6Address.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ServerIPV6Address"));
        writer->WriteValue(ServerIPV6Address);
    }

    if (!ServerPort.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RegisterGameRequest::ServerPort, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ServerPort"));
        writer->WriteValue(ServerPort);
    }

    if (ServerPublicDNSName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ServerPublicDNSName"));
        writer->WriteValue(ServerPublicDNSName);
    }

    if (Tags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Tags"));
        for (TMap<FString, FString>::TConstIterator It(Tags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRegisterGameRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> BuildValue = obj->TryGetField(TEXT("Build"));
    if (BuildValue.IsValid() && !BuildValue->IsNull())
    {
        FString TmpValue;
        if (BuildValue->TryGetString(TmpValue)) { Build = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> GameModeValue = obj->TryGetField(TEXT("GameMode"));
    if (GameModeValue.IsValid() && !GameModeValue->IsNull())
    {
        FString TmpValue;
        if (GameModeValue->TryGetString(TmpValue)) { GameMode = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LobbyIdValue = obj->TryGetField(TEXT("LobbyId"));
    if (LobbyIdValue.IsValid() && !LobbyIdValue->IsNull())
    {
        FString TmpValue;
        if (LobbyIdValue->TryGetString(TmpValue)) { LobbyId = TmpValue; }
    }

    pfRegion = readRegionFromValue(obj->TryGetField(TEXT("Region")));

    const TSharedPtr<FJsonValue> ServerIPV4AddressValue = obj->TryGetField(TEXT("ServerIPV4Address"));
    if (ServerIPV4AddressValue.IsValid() && !ServerIPV4AddressValue->IsNull())
    {
        FString TmpValue;
        if (ServerIPV4AddressValue->TryGetString(TmpValue)) { ServerIPV4Address = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ServerIPV6AddressValue = obj->TryGetField(TEXT("ServerIPV6Address"));
    if (ServerIPV6AddressValue.IsValid() && !ServerIPV6AddressValue->IsNull())
    {
        FString TmpValue;
        if (ServerIPV6AddressValue->TryGetString(TmpValue)) { ServerIPV6Address = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ServerPortValue = obj->TryGetField(TEXT("ServerPort"));
    if (ServerPortValue.IsValid() && !ServerPortValue->IsNull())
    {
        FString TmpValue;
        if (ServerPortValue->TryGetString(TmpValue)) { ServerPort = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ServerPublicDNSNameValue = obj->TryGetField(TEXT("ServerPublicDNSName"));
    if (ServerPublicDNSNameValue.IsValid() && !ServerPublicDNSNameValue->IsNull())
    {
        FString TmpValue;
        if (ServerPublicDNSNameValue->TryGetString(TmpValue)) { ServerPublicDNSName = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* TagsObject;
    if (obj->TryGetObjectField(TEXT("Tags"), TagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*TagsObject)->Values); It; ++It)
        {
            Tags.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRegisterGameResponse::~FRegisterGameResponse()
{

}

void PlayFab::ServerModels::FRegisterGameResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (LobbyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("LobbyId"));
        writer->WriteValue(LobbyId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRegisterGameResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> LobbyIdValue = obj->TryGetField(TEXT("LobbyId"));
    if (LobbyIdValue.IsValid() && !LobbyIdValue->IsNull())
    {
        FString TmpValue;
        if (LobbyIdValue->TryGetString(TmpValue)) { LobbyId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRemoveFriendRequest::~FRemoveFriendRequest()
{

}

void PlayFab::ServerModels::FRemoveFriendRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!FriendPlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RemoveFriendRequest::FriendPlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("FriendPlayFabId"));
        writer->WriteValue(FriendPlayFabId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RemoveFriendRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRemoveFriendRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FriendPlayFabIdValue = obj->TryGetField(TEXT("FriendPlayFabId"));
    if (FriendPlayFabIdValue.IsValid() && !FriendPlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (FriendPlayFabIdValue->TryGetString(TmpValue)) { FriendPlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRemoveGenericIDRequest::~FRemoveGenericIDRequest()
{

}

void PlayFab::ServerModels::FRemoveGenericIDRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("GenericId"));
    GenericId.writeJSON(writer);

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RemoveGenericIDRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRemoveGenericIDRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GenericIdValue = obj->TryGetField(TEXT("GenericId"));
    if (GenericIdValue.IsValid() && !GenericIdValue->IsNull())
    {
        GenericId = FGenericServiceId(GenericIdValue->AsObject());
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRemovePlayerTagRequest::~FRemovePlayerTagRequest()
{

}

void PlayFab::ServerModels::FRemovePlayerTagRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RemovePlayerTagRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!TagName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RemovePlayerTagRequest::TagName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("TagName"));
        writer->WriteValue(TagName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRemovePlayerTagRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TagNameValue = obj->TryGetField(TEXT("TagName"));
    if (TagNameValue.IsValid() && !TagNameValue->IsNull())
    {
        FString TmpValue;
        if (TagNameValue->TryGetString(TmpValue)) { TagName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRemovePlayerTagResult::~FRemovePlayerTagResult()
{

}

void PlayFab::ServerModels::FRemovePlayerTagResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRemovePlayerTagResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FRemoveSharedGroupMembersRequest::~FRemoveSharedGroupMembersRequest()
{

}

void PlayFab::ServerModels::FRemoveSharedGroupMembersRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("PlayFabIds"));
    for (const FString& item : PlayFabIds)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    if (!SharedGroupId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RemoveSharedGroupMembersRequest::SharedGroupId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("SharedGroupId"));
        writer->WriteValue(SharedGroupId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRemoveSharedGroupMembersRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("PlayFabIds"), PlayFabIds);

    const TSharedPtr<FJsonValue> SharedGroupIdValue = obj->TryGetField(TEXT("SharedGroupId"));
    if (SharedGroupIdValue.IsValid() && !SharedGroupIdValue->IsNull())
    {
        FString TmpValue;
        if (SharedGroupIdValue->TryGetString(TmpValue)) { SharedGroupId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRemoveSharedGroupMembersResult::~FRemoveSharedGroupMembersResult()
{

}

void PlayFab::ServerModels::FRemoveSharedGroupMembersResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRemoveSharedGroupMembersResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FReportPlayerServerRequest::~FReportPlayerServerRequest()
{

}

void PlayFab::ServerModels::FReportPlayerServerRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Comment.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Comment"));
        writer->WriteValue(Comment);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!ReporteeId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ReportPlayerServerRequest::ReporteeId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ReporteeId"));
        writer->WriteValue(ReporteeId);
    }

    if (!ReporterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ReportPlayerServerRequest::ReporterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ReporterId"));
        writer->WriteValue(ReporterId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FReportPlayerServerRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CommentValue = obj->TryGetField(TEXT("Comment"));
    if (CommentValue.IsValid() && !CommentValue->IsNull())
    {
        FString TmpValue;
        if (CommentValue->TryGetString(TmpValue)) { Comment = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ReporteeIdValue = obj->TryGetField(TEXT("ReporteeId"));
    if (ReporteeIdValue.IsValid() && !ReporteeIdValue->IsNull())
    {
        FString TmpValue;
        if (ReporteeIdValue->TryGetString(TmpValue)) { ReporteeId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReporterIdValue = obj->TryGetField(TEXT("ReporterId"));
    if (ReporterIdValue.IsValid() && !ReporterIdValue->IsNull())
    {
        FString TmpValue;
        if (ReporterIdValue->TryGetString(TmpValue)) { ReporterId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FReportPlayerServerResult::~FReportPlayerServerResult()
{

}

void PlayFab::ServerModels::FReportPlayerServerResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("SubmissionsRemaining"));
    writer->WriteValue(SubmissionsRemaining);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FReportPlayerServerResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> SubmissionsRemainingValue = obj->TryGetField(TEXT("SubmissionsRemaining"));
    if (SubmissionsRemainingValue.IsValid() && !SubmissionsRemainingValue->IsNull())
    {
        int32 TmpValue;
        if (SubmissionsRemainingValue->TryGetNumber(TmpValue)) { SubmissionsRemaining = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRevokeAllBansForUserRequest::~FRevokeAllBansForUserRequest()
{

}

void PlayFab::ServerModels::FRevokeAllBansForUserRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RevokeAllBansForUserRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRevokeAllBansForUserRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRevokeAllBansForUserResult::~FRevokeAllBansForUserResult()
{

}

void PlayFab::ServerModels::FRevokeAllBansForUserResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BanData.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BanData"));
        for (const FBanInfo& item : BanData)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRevokeAllBansForUserResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BanDataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("BanData"));
    for (int32 Idx = 0; Idx < BanDataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BanDataArray[Idx];
        BanData.Add(FBanInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FRevokeBansRequest::~FRevokeBansRequest()
{

}

void PlayFab::ServerModels::FRevokeBansRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("BanIds"));
    for (const FString& item : BanIds)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRevokeBansRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("BanIds"), BanIds);

    return HasSucceeded;
}

PlayFab::ServerModels::FRevokeBansResult::~FRevokeBansResult()
{

}

void PlayFab::ServerModels::FRevokeBansResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BanData.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BanData"));
        for (const FBanInfo& item : BanData)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRevokeBansResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BanDataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("BanData"));
    for (int32 Idx = 0; Idx < BanDataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BanDataArray[Idx];
        BanData.Add(FBanInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FRevokeInventoryItem::~FRevokeInventoryItem()
{

}

void PlayFab::ServerModels::FRevokeInventoryItem::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (!ItemInstanceId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RevokeInventoryItem::ItemInstanceId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RevokeInventoryItem::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRevokeInventoryItem::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRevokeInventoryItemRequest::~FRevokeInventoryItemRequest()
{

}

void PlayFab::ServerModels::FRevokeInventoryItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (!ItemInstanceId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RevokeInventoryItemRequest::ItemInstanceId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RevokeInventoryItemRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRevokeInventoryItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRevokeInventoryItemsRequest::~FRevokeInventoryItemsRequest()
{

}

void PlayFab::ServerModels::FRevokeInventoryItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("Items"));
    for (const FRevokeInventoryItem& item : Items)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRevokeInventoryItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ItemsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Items"));
    for (int32 Idx = 0; Idx < ItemsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemsArray[Idx];
        Items.Add(FRevokeInventoryItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FRevokeItemError::~FRevokeItemError()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::ServerModels::FRevokeItemError::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Error.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Error"));
        writer->WriteValue(Error);
    }

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRevokeItemError::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ErrorValue = obj->TryGetField(TEXT("Error"));
    if (ErrorValue.IsValid() && !ErrorValue->IsNull())
    {
        FString TmpValue;
        if (ErrorValue->TryGetString(TmpValue)) { Error = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FRevokeInventoryItem(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FRevokeInventoryItemsResult::~FRevokeInventoryItemsResult()
{

}

void PlayFab::ServerModels::FRevokeInventoryItemsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Errors.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Errors"));
        for (const FRevokeItemError& item : Errors)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRevokeInventoryItemsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ErrorsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Errors"));
    for (int32 Idx = 0; Idx < ErrorsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ErrorsArray[Idx];
        Errors.Add(FRevokeItemError(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FRevokeInventoryResult::~FRevokeInventoryResult()
{

}

void PlayFab::ServerModels::FRevokeInventoryResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FRevokeInventoryResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FSavePushNotificationTemplateRequest::~FSavePushNotificationTemplateRequest()
{

}

void PlayFab::ServerModels::FSavePushNotificationTemplateRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AndroidPayload.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AndroidPayload"));
        writer->WriteValue(AndroidPayload);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (IOSPayload.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IOSPayload"));
        writer->WriteValue(IOSPayload);
    }

    if (LocalizedPushNotificationTemplates.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("LocalizedPushNotificationTemplates"));
        for (TMap<FString, FLocalizedPushNotificationProperties>::TConstIterator It(LocalizedPushNotificationTemplates); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SavePushNotificationTemplateRequest::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSavePushNotificationTemplateRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AndroidPayloadValue = obj->TryGetField(TEXT("AndroidPayload"));
    if (AndroidPayloadValue.IsValid() && !AndroidPayloadValue->IsNull())
    {
        FString TmpValue;
        if (AndroidPayloadValue->TryGetString(TmpValue)) { AndroidPayload = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IOSPayloadValue = obj->TryGetField(TEXT("IOSPayload"));
    if (IOSPayloadValue.IsValid() && !IOSPayloadValue->IsNull())
    {
        FString TmpValue;
        if (IOSPayloadValue->TryGetString(TmpValue)) { IOSPayload = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* LocalizedPushNotificationTemplatesObject;
    if (obj->TryGetObjectField(TEXT("LocalizedPushNotificationTemplates"), LocalizedPushNotificationTemplatesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*LocalizedPushNotificationTemplatesObject)->Values); It; ++It)
        {
            LocalizedPushNotificationTemplates.Add(It.Key(), FLocalizedPushNotificationProperties(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FSavePushNotificationTemplateResult::~FSavePushNotificationTemplateResult()
{

}

void PlayFab::ServerModels::FSavePushNotificationTemplateResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PushNotificationTemplateId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PushNotificationTemplateId"));
        writer->WriteValue(PushNotificationTemplateId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSavePushNotificationTemplateResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PushNotificationTemplateIdValue = obj->TryGetField(TEXT("PushNotificationTemplateId"));
    if (PushNotificationTemplateIdValue.IsValid() && !PushNotificationTemplateIdValue->IsNull())
    {
        FString TmpValue;
        if (PushNotificationTemplateIdValue->TryGetString(TmpValue)) { PushNotificationTemplateId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FSendCustomAccountRecoveryEmailRequest::~FSendCustomAccountRecoveryEmailRequest()
{

}

void PlayFab::ServerModels::FSendCustomAccountRecoveryEmailRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Email.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Email"));
        writer->WriteValue(Email);
    }

    if (!EmailTemplateId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SendCustomAccountRecoveryEmailRequest::EmailTemplateId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("EmailTemplateId"));
        writer->WriteValue(EmailTemplateId);
    }

    if (Username.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Username"));
        writer->WriteValue(Username);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSendCustomAccountRecoveryEmailRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EmailValue = obj->TryGetField(TEXT("Email"));
    if (EmailValue.IsValid() && !EmailValue->IsNull())
    {
        FString TmpValue;
        if (EmailValue->TryGetString(TmpValue)) { Email = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EmailTemplateIdValue = obj->TryGetField(TEXT("EmailTemplateId"));
    if (EmailTemplateIdValue.IsValid() && !EmailTemplateIdValue->IsNull())
    {
        FString TmpValue;
        if (EmailTemplateIdValue->TryGetString(TmpValue)) { EmailTemplateId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsernameValue = obj->TryGetField(TEXT("Username"));
    if (UsernameValue.IsValid() && !UsernameValue->IsNull())
    {
        FString TmpValue;
        if (UsernameValue->TryGetString(TmpValue)) { Username = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FSendCustomAccountRecoveryEmailResult::~FSendCustomAccountRecoveryEmailResult()
{

}

void PlayFab::ServerModels::FSendCustomAccountRecoveryEmailResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSendCustomAccountRecoveryEmailResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FSendEmailFromTemplateRequest::~FSendEmailFromTemplateRequest()
{

}

void PlayFab::ServerModels::FSendEmailFromTemplateRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!EmailTemplateId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SendEmailFromTemplateRequest::EmailTemplateId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("EmailTemplateId"));
        writer->WriteValue(EmailTemplateId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SendEmailFromTemplateRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSendEmailFromTemplateRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EmailTemplateIdValue = obj->TryGetField(TEXT("EmailTemplateId"));
    if (EmailTemplateIdValue.IsValid() && !EmailTemplateIdValue->IsNull())
    {
        FString TmpValue;
        if (EmailTemplateIdValue->TryGetString(TmpValue)) { EmailTemplateId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FSendEmailFromTemplateResult::~FSendEmailFromTemplateResult()
{

}

void PlayFab::ServerModels::FSendEmailFromTemplateResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSendEmailFromTemplateResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FSendPushNotificationFromTemplateRequest::~FSendPushNotificationFromTemplateRequest()
{

}

void PlayFab::ServerModels::FSendPushNotificationFromTemplateRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PushNotificationTemplateId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SendPushNotificationFromTemplateRequest::PushNotificationTemplateId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PushNotificationTemplateId"));
        writer->WriteValue(PushNotificationTemplateId);
    }

    if (!Recipient.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SendPushNotificationFromTemplateRequest::Recipient, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Recipient"));
        writer->WriteValue(Recipient);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSendPushNotificationFromTemplateRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PushNotificationTemplateIdValue = obj->TryGetField(TEXT("PushNotificationTemplateId"));
    if (PushNotificationTemplateIdValue.IsValid() && !PushNotificationTemplateIdValue->IsNull())
    {
        FString TmpValue;
        if (PushNotificationTemplateIdValue->TryGetString(TmpValue)) { PushNotificationTemplateId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RecipientValue = obj->TryGetField(TEXT("Recipient"));
    if (RecipientValue.IsValid() && !RecipientValue->IsNull())
    {
        FString TmpValue;
        if (RecipientValue->TryGetString(TmpValue)) { Recipient = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FSendPushNotificationRequest::~FSendPushNotificationRequest()
{
    //if (Package != nullptr) delete Package;

}

void PlayFab::ServerModels::FSendPushNotificationRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AdvancedPlatformDelivery.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AdvancedPlatformDelivery"));
        for (const FAdvancedPushPlatformMsg& item : AdvancedPlatformDelivery)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Message.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Message"));
        writer->WriteValue(Message);
    }

    if (Package.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Package"));
        Package->writeJSON(writer);
    }

    if (!Recipient.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SendPushNotificationRequest::Recipient, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Recipient"));
        writer->WriteValue(Recipient);
    }

    if (Subject.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Subject"));
        writer->WriteValue(Subject);
    }

    if (TargetPlatforms.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TargetPlatforms"));
        for (const PushNotificationPlatform& item : TargetPlatforms)
            writePushNotificationPlatformEnumJSON(item, writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSendPushNotificationRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AdvancedPlatformDeliveryArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("AdvancedPlatformDelivery"));
    for (int32 Idx = 0; Idx < AdvancedPlatformDeliveryArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AdvancedPlatformDeliveryArray[Idx];
        AdvancedPlatformDelivery.Add(FAdvancedPushPlatformMsg(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> MessageValue = obj->TryGetField(TEXT("Message"));
    if (MessageValue.IsValid() && !MessageValue->IsNull())
    {
        FString TmpValue;
        if (MessageValue->TryGetString(TmpValue)) { Message = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PackageValue = obj->TryGetField(TEXT("Package"));
    if (PackageValue.IsValid() && !PackageValue->IsNull())
    {
        Package = MakeShareable(new FPushNotificationPackage(PackageValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> RecipientValue = obj->TryGetField(TEXT("Recipient"));
    if (RecipientValue.IsValid() && !RecipientValue->IsNull())
    {
        FString TmpValue;
        if (RecipientValue->TryGetString(TmpValue)) { Recipient = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SubjectValue = obj->TryGetField(TEXT("Subject"));
    if (SubjectValue.IsValid() && !SubjectValue->IsNull())
    {
        FString TmpValue;
        if (SubjectValue->TryGetString(TmpValue)) { Subject = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&TargetPlatformsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("TargetPlatforms"));
    for (int32 Idx = 0; Idx < TargetPlatformsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = TargetPlatformsArray[Idx];
        TargetPlatforms.Add(readPushNotificationPlatformFromValue(CurrentItem));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FSendPushNotificationResult::~FSendPushNotificationResult()
{

}

void PlayFab::ServerModels::FSendPushNotificationResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSendPushNotificationResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FUserSettings::~FUserSettings()
{

}

void PlayFab::ServerModels::FUserSettings::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("GatherDeviceInfo"));
    writer->WriteValue(GatherDeviceInfo);

    writer->WriteIdentifierPrefix(TEXT("GatherFocusInfo"));
    writer->WriteValue(GatherFocusInfo);

    writer->WriteIdentifierPrefix(TEXT("NeedsAttribution"));
    writer->WriteValue(NeedsAttribution);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUserSettings::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GatherDeviceInfoValue = obj->TryGetField(TEXT("GatherDeviceInfo"));
    if (GatherDeviceInfoValue.IsValid() && !GatherDeviceInfoValue->IsNull())
    {
        bool TmpValue;
        if (GatherDeviceInfoValue->TryGetBool(TmpValue)) { GatherDeviceInfo = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GatherFocusInfoValue = obj->TryGetField(TEXT("GatherFocusInfo"));
    if (GatherFocusInfoValue.IsValid() && !GatherFocusInfoValue->IsNull())
    {
        bool TmpValue;
        if (GatherFocusInfoValue->TryGetBool(TmpValue)) { GatherFocusInfo = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NeedsAttributionValue = obj->TryGetField(TEXT("NeedsAttribution"));
    if (NeedsAttributionValue.IsValid() && !NeedsAttributionValue->IsNull())
    {
        bool TmpValue;
        if (NeedsAttributionValue->TryGetBool(TmpValue)) { NeedsAttribution = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FVariable::~FVariable()
{

}

void PlayFab::ServerModels::FVariable::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: Variable::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (Value.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Value"));
        writer->WriteValue(Value);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FVariable::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        FString TmpValue;
        if (ValueValue->TryGetString(TmpValue)) { Value = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FTreatmentAssignment::~FTreatmentAssignment()
{

}

void PlayFab::ServerModels::FTreatmentAssignment::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Variables.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Variables"));
        for (const FVariable& item : Variables)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Variants.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Variants"));
        for (const FString& item : Variants)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FTreatmentAssignment::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&VariablesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Variables"));
    for (int32 Idx = 0; Idx < VariablesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = VariablesArray[Idx];
        Variables.Add(FVariable(CurrentItem->AsObject()));
    }


    obj->TryGetStringArrayField(TEXT("Variants"), Variants);

    return HasSucceeded;
}

PlayFab::ServerModels::FServerLoginResult::~FServerLoginResult()
{
    //if (EntityToken != nullptr) delete EntityToken;
    //if (InfoResultPayload != nullptr) delete InfoResultPayload;
    //if (SettingsForUser != nullptr) delete SettingsForUser;
    //if (TreatmentAssignment != nullptr) delete TreatmentAssignment;

}

void PlayFab::ServerModels::FServerLoginResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (EntityToken.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("EntityToken"));
        EntityToken->writeJSON(writer);
    }

    if (InfoResultPayload.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("InfoResultPayload"));
        InfoResultPayload->writeJSON(writer);
    }

    if (LastLoginTime.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LastLoginTime"));
        writeDatetime(LastLoginTime, writer);
    }

    writer->WriteIdentifierPrefix(TEXT("NewlyCreated"));
    writer->WriteValue(NewlyCreated);

    if (PlayFabId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (SessionTicket.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SessionTicket"));
        writer->WriteValue(SessionTicket);
    }

    if (SettingsForUser.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("SettingsForUser"));
        SettingsForUser->writeJSON(writer);
    }

    if (pfTreatmentAssignment.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("TreatmentAssignment"));
        pfTreatmentAssignment->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FServerLoginResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityTokenValue = obj->TryGetField(TEXT("EntityToken"));
    if (EntityTokenValue.IsValid() && !EntityTokenValue->IsNull())
    {
        EntityToken = MakeShareable(new FEntityTokenResponse(EntityTokenValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> InfoResultPayloadValue = obj->TryGetField(TEXT("InfoResultPayload"));
    if (InfoResultPayloadValue.IsValid() && !InfoResultPayloadValue->IsNull())
    {
        InfoResultPayload = MakeShareable(new FGetPlayerCombinedInfoResultPayload(InfoResultPayloadValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> LastLoginTimeValue = obj->TryGetField(TEXT("LastLoginTime"));
    if (LastLoginTimeValue.IsValid())
        LastLoginTime = readDatetime(LastLoginTimeValue);


    const TSharedPtr<FJsonValue> NewlyCreatedValue = obj->TryGetField(TEXT("NewlyCreated"));
    if (NewlyCreatedValue.IsValid() && !NewlyCreatedValue->IsNull())
    {
        bool TmpValue;
        if (NewlyCreatedValue->TryGetBool(TmpValue)) { NewlyCreated = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SessionTicketValue = obj->TryGetField(TEXT("SessionTicket"));
    if (SessionTicketValue.IsValid() && !SessionTicketValue->IsNull())
    {
        FString TmpValue;
        if (SessionTicketValue->TryGetString(TmpValue)) { SessionTicket = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SettingsForUserValue = obj->TryGetField(TEXT("SettingsForUser"));
    if (SettingsForUserValue.IsValid() && !SettingsForUserValue->IsNull())
    {
        SettingsForUser = MakeShareable(new FUserSettings(SettingsForUserValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> TreatmentAssignmentValue = obj->TryGetField(TEXT("TreatmentAssignment"));
    if (TreatmentAssignmentValue.IsValid() && !TreatmentAssignmentValue->IsNull())
    {
        pfTreatmentAssignment = MakeShareable(new FTreatmentAssignment(TreatmentAssignmentValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FSetFriendTagsRequest::~FSetFriendTagsRequest()
{

}

void PlayFab::ServerModels::FSetFriendTagsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!FriendPlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetFriendTagsRequest::FriendPlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("FriendPlayFabId"));
        writer->WriteValue(FriendPlayFabId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetFriendTagsRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteArrayStart(TEXT("Tags"));
    for (const FString& item : Tags)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSetFriendTagsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FriendPlayFabIdValue = obj->TryGetField(TEXT("FriendPlayFabId"));
    if (FriendPlayFabIdValue.IsValid() && !FriendPlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (FriendPlayFabIdValue->TryGetString(TmpValue)) { FriendPlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    return HasSucceeded;
}

PlayFab::ServerModels::FSetGameServerInstanceDataRequest::~FSetGameServerInstanceDataRequest()
{

}

void PlayFab::ServerModels::FSetGameServerInstanceDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!GameServerData.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetGameServerInstanceDataRequest::GameServerData, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("GameServerData"));
        writer->WriteValue(GameServerData);
    }

    if (!LobbyId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetGameServerInstanceDataRequest::LobbyId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("LobbyId"));
        writer->WriteValue(LobbyId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSetGameServerInstanceDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GameServerDataValue = obj->TryGetField(TEXT("GameServerData"));
    if (GameServerDataValue.IsValid() && !GameServerDataValue->IsNull())
    {
        FString TmpValue;
        if (GameServerDataValue->TryGetString(TmpValue)) { GameServerData = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LobbyIdValue = obj->TryGetField(TEXT("LobbyId"));
    if (LobbyIdValue.IsValid() && !LobbyIdValue->IsNull())
    {
        FString TmpValue;
        if (LobbyIdValue->TryGetString(TmpValue)) { LobbyId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FSetGameServerInstanceDataResult::~FSetGameServerInstanceDataResult()
{

}

void PlayFab::ServerModels::FSetGameServerInstanceDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSetGameServerInstanceDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FSetGameServerInstanceStateRequest::~FSetGameServerInstanceStateRequest()
{

}

void PlayFab::ServerModels::FSetGameServerInstanceStateRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!LobbyId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetGameServerInstanceStateRequest::LobbyId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("LobbyId"));
        writer->WriteValue(LobbyId);
    }

    writer->WriteIdentifierPrefix(TEXT("State"));
    writeGameInstanceStateEnumJSON(State, writer);

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSetGameServerInstanceStateRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> LobbyIdValue = obj->TryGetField(TEXT("LobbyId"));
    if (LobbyIdValue.IsValid() && !LobbyIdValue->IsNull())
    {
        FString TmpValue;
        if (LobbyIdValue->TryGetString(TmpValue)) { LobbyId = TmpValue; }
    }

    State = readGameInstanceStateFromValue(obj->TryGetField(TEXT("State")));

    return HasSucceeded;
}

PlayFab::ServerModels::FSetGameServerInstanceStateResult::~FSetGameServerInstanceStateResult()
{

}

void PlayFab::ServerModels::FSetGameServerInstanceStateResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSetGameServerInstanceStateResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FSetGameServerInstanceTagsRequest::~FSetGameServerInstanceTagsRequest()
{

}

void PlayFab::ServerModels::FSetGameServerInstanceTagsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!LobbyId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetGameServerInstanceTagsRequest::LobbyId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("LobbyId"));
        writer->WriteValue(LobbyId);
    }

        writer->WriteObjectStart(TEXT("Tags"));
    for (TMap<FString, FString>::TConstIterator It(Tags); It; ++It)
    {
        writer->WriteIdentifierPrefix((*It).Key);
        writer->WriteValue((*It).Value);
    }
    writer->WriteObjectEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSetGameServerInstanceTagsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> LobbyIdValue = obj->TryGetField(TEXT("LobbyId"));
    if (LobbyIdValue.IsValid() && !LobbyIdValue->IsNull())
    {
        FString TmpValue;
        if (LobbyIdValue->TryGetString(TmpValue)) { LobbyId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* TagsObject;
    if (obj->TryGetObjectField(TEXT("Tags"), TagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*TagsObject)->Values); It; ++It)
        {
            Tags.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FSetGameServerInstanceTagsResult::~FSetGameServerInstanceTagsResult()
{

}

void PlayFab::ServerModels::FSetGameServerInstanceTagsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSetGameServerInstanceTagsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FSetPlayerSecretRequest::~FSetPlayerSecretRequest()
{

}

void PlayFab::ServerModels::FSetPlayerSecretRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PlayerSecret.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayerSecret"));
        writer->WriteValue(PlayerSecret);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetPlayerSecretRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSetPlayerSecretRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlayerSecretValue = obj->TryGetField(TEXT("PlayerSecret"));
    if (PlayerSecretValue.IsValid() && !PlayerSecretValue->IsNull())
    {
        FString TmpValue;
        if (PlayerSecretValue->TryGetString(TmpValue)) { PlayerSecret = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FSetPlayerSecretResult::~FSetPlayerSecretResult()
{

}

void PlayFab::ServerModels::FSetPlayerSecretResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSetPlayerSecretResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FSetPublisherDataRequest::~FSetPublisherDataRequest()
{

}

void PlayFab::ServerModels::FSetPublisherDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Key.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetPublisherDataRequest::Key, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Key"));
        writer->WriteValue(Key);
    }

    if (Value.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Value"));
        writer->WriteValue(Value);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSetPublisherDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> KeyValue = obj->TryGetField(TEXT("Key"));
    if (KeyValue.IsValid() && !KeyValue->IsNull())
    {
        FString TmpValue;
        if (KeyValue->TryGetString(TmpValue)) { Key = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        FString TmpValue;
        if (ValueValue->TryGetString(TmpValue)) { Value = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FSetPublisherDataResult::~FSetPublisherDataResult()
{

}

void PlayFab::ServerModels::FSetPublisherDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSetPublisherDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FSetTitleDataRequest::~FSetTitleDataRequest()
{

}

void PlayFab::ServerModels::FSetTitleDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Key.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetTitleDataRequest::Key, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Key"));
        writer->WriteValue(Key);
    }

    if (Value.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Value"));
        writer->WriteValue(Value);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSetTitleDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> KeyValue = obj->TryGetField(TEXT("Key"));
    if (KeyValue.IsValid() && !KeyValue->IsNull())
    {
        FString TmpValue;
        if (KeyValue->TryGetString(TmpValue)) { Key = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        FString TmpValue;
        if (ValueValue->TryGetString(TmpValue)) { Value = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FSetTitleDataResult::~FSetTitleDataResult()
{

}

void PlayFab::ServerModels::FSetTitleDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSetTitleDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FStatisticUpdate::~FStatisticUpdate()
{

}

void PlayFab::ServerModels::FStatisticUpdate::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!StatisticName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: StatisticUpdate::StatisticName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("StatisticName"));
        writer->WriteValue(StatisticName);
    }

    writer->WriteIdentifierPrefix(TEXT("Value"));
    writer->WriteValue(Value);

    if (Version.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Version"));
        writer->WriteValue(static_cast<int64>(Version));
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FStatisticUpdate::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> StatisticNameValue = obj->TryGetField(TEXT("StatisticName"));
    if (StatisticNameValue.IsValid() && !StatisticNameValue->IsNull())
    {
        FString TmpValue;
        if (StatisticNameValue->TryGetString(TmpValue)) { StatisticName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        int32 TmpValue;
        if (ValueValue->TryGetNumber(TmpValue)) { Value = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        uint32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FSubtractCharacterVirtualCurrencyRequest::~FSubtractCharacterVirtualCurrencyRequest()
{

}

void PlayFab::ServerModels::FSubtractCharacterVirtualCurrencyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (!CharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SubtractCharacterVirtualCurrencyRequest::CharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SubtractCharacterVirtualCurrencyRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!VirtualCurrency.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SubtractCharacterVirtualCurrencyRequest::VirtualCurrency, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("VirtualCurrency"));
        writer->WriteValue(VirtualCurrency);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSubtractCharacterVirtualCurrencyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VirtualCurrencyValue = obj->TryGetField(TEXT("VirtualCurrency"));
    if (VirtualCurrencyValue.IsValid() && !VirtualCurrencyValue->IsNull())
    {
        FString TmpValue;
        if (VirtualCurrencyValue->TryGetString(TmpValue)) { VirtualCurrency = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FSubtractUserVirtualCurrencyRequest::~FSubtractUserVirtualCurrencyRequest()
{

}

void PlayFab::ServerModels::FSubtractUserVirtualCurrencyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SubtractUserVirtualCurrencyRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!VirtualCurrency.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SubtractUserVirtualCurrencyRequest::VirtualCurrency, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("VirtualCurrency"));
        writer->WriteValue(VirtualCurrency);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FSubtractUserVirtualCurrencyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VirtualCurrencyValue = obj->TryGetField(TEXT("VirtualCurrency"));
    if (VirtualCurrencyValue.IsValid() && !VirtualCurrencyValue->IsNull())
    {
        FString TmpValue;
        if (VirtualCurrencyValue->TryGetString(TmpValue)) { VirtualCurrency = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUnlinkPSNAccountRequest::~FUnlinkPSNAccountRequest()
{

}

void PlayFab::ServerModels::FUnlinkPSNAccountRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UnlinkPSNAccountRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUnlinkPSNAccountRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUnlinkPSNAccountResult::~FUnlinkPSNAccountResult()
{

}

void PlayFab::ServerModels::FUnlinkPSNAccountResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUnlinkPSNAccountResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FUnlinkServerCustomIdRequest::~FUnlinkServerCustomIdRequest()
{

}

void PlayFab::ServerModels::FUnlinkServerCustomIdRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UnlinkServerCustomIdRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (!ServerCustomId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UnlinkServerCustomIdRequest::ServerCustomId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ServerCustomId"));
        writer->WriteValue(ServerCustomId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUnlinkServerCustomIdRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ServerCustomIdValue = obj->TryGetField(TEXT("ServerCustomId"));
    if (ServerCustomIdValue.IsValid() && !ServerCustomIdValue->IsNull())
    {
        FString TmpValue;
        if (ServerCustomIdValue->TryGetString(TmpValue)) { ServerCustomId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUnlinkServerCustomIdResult::~FUnlinkServerCustomIdResult()
{

}

void PlayFab::ServerModels::FUnlinkServerCustomIdResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUnlinkServerCustomIdResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FUnlinkXboxAccountRequest::~FUnlinkXboxAccountRequest()
{

}

void PlayFab::ServerModels::FUnlinkXboxAccountRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UnlinkXboxAccountRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUnlinkXboxAccountRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUnlinkXboxAccountResult::~FUnlinkXboxAccountResult()
{

}

void PlayFab::ServerModels::FUnlinkXboxAccountResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUnlinkXboxAccountResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FUnlockContainerInstanceRequest::~FUnlockContainerInstanceRequest()
{

}

void PlayFab::ServerModels::FUnlockContainerInstanceRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (!ContainerItemInstanceId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UnlockContainerInstanceRequest::ContainerItemInstanceId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ContainerItemInstanceId"));
        writer->WriteValue(ContainerItemInstanceId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (KeyItemInstanceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("KeyItemInstanceId"));
        writer->WriteValue(KeyItemInstanceId);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UnlockContainerInstanceRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUnlockContainerInstanceRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ContainerItemInstanceIdValue = obj->TryGetField(TEXT("ContainerItemInstanceId"));
    if (ContainerItemInstanceIdValue.IsValid() && !ContainerItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ContainerItemInstanceIdValue->TryGetString(TmpValue)) { ContainerItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> KeyItemInstanceIdValue = obj->TryGetField(TEXT("KeyItemInstanceId"));
    if (KeyItemInstanceIdValue.IsValid() && !KeyItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (KeyItemInstanceIdValue->TryGetString(TmpValue)) { KeyItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUnlockContainerItemRequest::~FUnlockContainerItemRequest()
{

}

void PlayFab::ServerModels::FUnlockContainerItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CatalogVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CatalogVersion"));
        writer->WriteValue(CatalogVersion);
    }

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (!ContainerItemId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UnlockContainerItemRequest::ContainerItemId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ContainerItemId"));
        writer->WriteValue(ContainerItemId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UnlockContainerItemRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUnlockContainerItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CatalogVersionValue = obj->TryGetField(TEXT("CatalogVersion"));
    if (CatalogVersionValue.IsValid() && !CatalogVersionValue->IsNull())
    {
        FString TmpValue;
        if (CatalogVersionValue->TryGetString(TmpValue)) { CatalogVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ContainerItemIdValue = obj->TryGetField(TEXT("ContainerItemId"));
    if (ContainerItemIdValue.IsValid() && !ContainerItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ContainerItemIdValue->TryGetString(TmpValue)) { ContainerItemId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUnlockContainerItemResult::~FUnlockContainerItemResult()
{

}

void PlayFab::ServerModels::FUnlockContainerItemResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (GrantedItems.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("GrantedItems"));
        for (const FItemInstance& item : GrantedItems)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (UnlockedItemInstanceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("UnlockedItemInstanceId"));
        writer->WriteValue(UnlockedItemInstanceId);
    }

    if (UnlockedWithItemInstanceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("UnlockedWithItemInstanceId"));
        writer->WriteValue(UnlockedWithItemInstanceId);
    }

    if (VirtualCurrency.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("VirtualCurrency"));
        for (TMap<FString, uint32>::TConstIterator It(VirtualCurrency); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue(static_cast<int64>((*It).Value));
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUnlockContainerItemResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&GrantedItemsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("GrantedItems"));
    for (int32 Idx = 0; Idx < GrantedItemsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = GrantedItemsArray[Idx];
        GrantedItems.Add(FItemInstance(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> UnlockedItemInstanceIdValue = obj->TryGetField(TEXT("UnlockedItemInstanceId"));
    if (UnlockedItemInstanceIdValue.IsValid() && !UnlockedItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (UnlockedItemInstanceIdValue->TryGetString(TmpValue)) { UnlockedItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UnlockedWithItemInstanceIdValue = obj->TryGetField(TEXT("UnlockedWithItemInstanceId"));
    if (UnlockedWithItemInstanceIdValue.IsValid() && !UnlockedWithItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (UnlockedWithItemInstanceIdValue->TryGetString(TmpValue)) { UnlockedWithItemInstanceId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* VirtualCurrencyObject;
    if (obj->TryGetObjectField(TEXT("VirtualCurrency"), VirtualCurrencyObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*VirtualCurrencyObject)->Values); It; ++It)
        {
            uint32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            VirtualCurrency.Add(It.Key(), TmpValue);
        }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUpdateAvatarUrlRequest::~FUpdateAvatarUrlRequest()
{

}

void PlayFab::ServerModels::FUpdateAvatarUrlRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!ImageUrl.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateAvatarUrlRequest::ImageUrl, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ImageUrl"));
        writer->WriteValue(ImageUrl);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateAvatarUrlRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdateAvatarUrlRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ImageUrlValue = obj->TryGetField(TEXT("ImageUrl"));
    if (ImageUrlValue.IsValid() && !ImageUrlValue->IsNull())
    {
        FString TmpValue;
        if (ImageUrlValue->TryGetString(TmpValue)) { ImageUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUpdateBanRequest::~FUpdateBanRequest()
{

}

void PlayFab::ServerModels::FUpdateBanRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Active.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Active"));
        writer->WriteValue(Active);
    }

    if (!BanId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateBanRequest::BanId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("BanId"));
        writer->WriteValue(BanId);
    }

    if (Expires.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Expires"));
        writeDatetime(Expires, writer);
    }

    if (IPAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IPAddress"));
        writer->WriteValue(IPAddress);
    }

    if (MACAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MACAddress"));
        writer->WriteValue(MACAddress);
    }

    if (Permanent.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Permanent"));
        writer->WriteValue(Permanent);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdateBanRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ActiveValue = obj->TryGetField(TEXT("Active"));
    if (ActiveValue.IsValid() && !ActiveValue->IsNull())
    {
        bool TmpValue;
        if (ActiveValue->TryGetBool(TmpValue)) { Active = TmpValue; }
    }

    const TSharedPtr<FJsonValue> BanIdValue = obj->TryGetField(TEXT("BanId"));
    if (BanIdValue.IsValid() && !BanIdValue->IsNull())
    {
        FString TmpValue;
        if (BanIdValue->TryGetString(TmpValue)) { BanId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExpiresValue = obj->TryGetField(TEXT("Expires"));
    if (ExpiresValue.IsValid())
        Expires = readDatetime(ExpiresValue);


    const TSharedPtr<FJsonValue> IPAddressValue = obj->TryGetField(TEXT("IPAddress"));
    if (IPAddressValue.IsValid() && !IPAddressValue->IsNull())
    {
        FString TmpValue;
        if (IPAddressValue->TryGetString(TmpValue)) { IPAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MACAddressValue = obj->TryGetField(TEXT("MACAddress"));
    if (MACAddressValue.IsValid() && !MACAddressValue->IsNull())
    {
        FString TmpValue;
        if (MACAddressValue->TryGetString(TmpValue)) { MACAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PermanentValue = obj->TryGetField(TEXT("Permanent"));
    if (PermanentValue.IsValid() && !PermanentValue->IsNull())
    {
        bool TmpValue;
        if (PermanentValue->TryGetBool(TmpValue)) { Permanent = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUpdateBansRequest::~FUpdateBansRequest()
{

}

void PlayFab::ServerModels::FUpdateBansRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteArrayStart(TEXT("Bans"));
    for (const FUpdateBanRequest& item : Bans)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdateBansRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BansArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Bans"));
    for (int32 Idx = 0; Idx < BansArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BansArray[Idx];
        Bans.Add(FUpdateBanRequest(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FUpdateBansResult::~FUpdateBansResult()
{

}

void PlayFab::ServerModels::FUpdateBansResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BanData.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BanData"));
        for (const FBanInfo& item : BanData)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdateBansResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BanDataArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("BanData"));
    for (int32 Idx = 0; Idx < BanDataArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BanDataArray[Idx];
        BanData.Add(FBanInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FUpdateCharacterDataRequest::~FUpdateCharacterDataRequest()
{

}

void PlayFab::ServerModels::FUpdateCharacterDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!CharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateCharacterDataRequest::CharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FString>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (KeysToRemove.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("KeysToRemove"));
        for (const FString& item : KeysToRemove)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Permission.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Permission"));
        writeUserDataPermissionEnumJSON(Permission, writer);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateCharacterDataRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdateCharacterDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), It.Value()->AsString());
        }
    }

    obj->TryGetStringArrayField(TEXT("KeysToRemove"), KeysToRemove);

    Permission = readUserDataPermissionFromValue(obj->TryGetField(TEXT("Permission")));

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUpdateCharacterDataResult::~FUpdateCharacterDataResult()
{

}

void PlayFab::ServerModels::FUpdateCharacterDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("DataVersion"));
    writer->WriteValue(static_cast<int64>(DataVersion));

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdateCharacterDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataVersionValue = obj->TryGetField(TEXT("DataVersion"));
    if (DataVersionValue.IsValid() && !DataVersionValue->IsNull())
    {
        uint32 TmpValue;
        if (DataVersionValue->TryGetNumber(TmpValue)) { DataVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUpdateCharacterStatisticsRequest::~FUpdateCharacterStatisticsRequest()
{

}

void PlayFab::ServerModels::FUpdateCharacterStatisticsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!CharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateCharacterStatisticsRequest::CharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CharacterStatistics.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CharacterStatistics"));
        for (TMap<FString, int32>::TConstIterator It(CharacterStatistics); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateCharacterStatisticsRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdateCharacterStatisticsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CharacterStatisticsObject;
    if (obj->TryGetObjectField(TEXT("CharacterStatistics"), CharacterStatisticsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CharacterStatisticsObject)->Values); It; ++It)
        {
            int32 TmpValue; It.Value()->TryGetNumber(TmpValue);
            CharacterStatistics.Add(It.Key(), TmpValue);
        }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUpdateCharacterStatisticsResult::~FUpdateCharacterStatisticsResult()
{

}

void PlayFab::ServerModels::FUpdateCharacterStatisticsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdateCharacterStatisticsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FUpdatePlayerStatisticsRequest::~FUpdatePlayerStatisticsRequest()
{

}

void PlayFab::ServerModels::FUpdatePlayerStatisticsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (ForceUpdate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ForceUpdate"));
        writer->WriteValue(ForceUpdate);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdatePlayerStatisticsRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteArrayStart(TEXT("Statistics"));
    for (const FStatisticUpdate& item : Statistics)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdatePlayerStatisticsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ForceUpdateValue = obj->TryGetField(TEXT("ForceUpdate"));
    if (ForceUpdateValue.IsValid() && !ForceUpdateValue->IsNull())
    {
        bool TmpValue;
        if (ForceUpdateValue->TryGetBool(TmpValue)) { ForceUpdate = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&StatisticsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Statistics"));
    for (int32 Idx = 0; Idx < StatisticsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StatisticsArray[Idx];
        Statistics.Add(FStatisticUpdate(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ServerModels::FUpdatePlayerStatisticsResult::~FUpdatePlayerStatisticsResult()
{

}

void PlayFab::ServerModels::FUpdatePlayerStatisticsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdatePlayerStatisticsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FUpdateSharedGroupDataRequest::~FUpdateSharedGroupDataRequest()
{

}

void PlayFab::ServerModels::FUpdateSharedGroupDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FString>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (KeysToRemove.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("KeysToRemove"));
        for (const FString& item : KeysToRemove)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Permission.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Permission"));
        writeUserDataPermissionEnumJSON(Permission, writer);
    }

    if (!SharedGroupId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateSharedGroupDataRequest::SharedGroupId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("SharedGroupId"));
        writer->WriteValue(SharedGroupId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdateSharedGroupDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), It.Value()->AsString());
        }
    }

    obj->TryGetStringArrayField(TEXT("KeysToRemove"), KeysToRemove);

    Permission = readUserDataPermissionFromValue(obj->TryGetField(TEXT("Permission")));

    const TSharedPtr<FJsonValue> SharedGroupIdValue = obj->TryGetField(TEXT("SharedGroupId"));
    if (SharedGroupIdValue.IsValid() && !SharedGroupIdValue->IsNull())
    {
        FString TmpValue;
        if (SharedGroupIdValue->TryGetString(TmpValue)) { SharedGroupId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUpdateSharedGroupDataResult::~FUpdateSharedGroupDataResult()
{

}

void PlayFab::ServerModels::FUpdateSharedGroupDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdateSharedGroupDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ServerModels::FUpdateUserDataRequest::~FUpdateUserDataRequest()
{

}

void PlayFab::ServerModels::FUpdateUserDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FString>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (KeysToRemove.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("KeysToRemove"));
        for (const FString& item : KeysToRemove)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Permission.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Permission"));
        writeUserDataPermissionEnumJSON(Permission, writer);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateUserDataRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdateUserDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), It.Value()->AsString());
        }
    }

    obj->TryGetStringArrayField(TEXT("KeysToRemove"), KeysToRemove);

    Permission = readUserDataPermissionFromValue(obj->TryGetField(TEXT("Permission")));

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUpdateUserDataResult::~FUpdateUserDataResult()
{

}

void PlayFab::ServerModels::FUpdateUserDataResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("DataVersion"));
    writer->WriteValue(static_cast<int64>(DataVersion));

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdateUserDataResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataVersionValue = obj->TryGetField(TEXT("DataVersion"));
    if (DataVersionValue.IsValid() && !DataVersionValue->IsNull())
    {
        uint32 TmpValue;
        if (DataVersionValue->TryGetNumber(TmpValue)) { DataVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUpdateUserInternalDataRequest::~FUpdateUserInternalDataRequest()
{

}

void PlayFab::ServerModels::FUpdateUserInternalDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FString>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (KeysToRemove.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("KeysToRemove"));
        for (const FString& item : KeysToRemove)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateUserInternalDataRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdateUserInternalDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), It.Value()->AsString());
        }
    }

    obj->TryGetStringArrayField(TEXT("KeysToRemove"), KeysToRemove);

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FUpdateUserInventoryItemDataRequest::~FUpdateUserInventoryItemDataRequest()
{

}

void PlayFab::ServerModels::FUpdateUserInventoryItemDataRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Data.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Data"));
        for (TMap<FString, FString>::TConstIterator It(Data); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!ItemInstanceId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateUserInventoryItemDataRequest::ItemInstanceId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ItemInstanceId"));
        writer->WriteValue(ItemInstanceId);
    }

    if (KeysToRemove.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("KeysToRemove"));
        for (const FString& item : KeysToRemove)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateUserInventoryItemDataRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FUpdateUserInventoryItemDataRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonObject>* DataObject;
    if (obj->TryGetObjectField(TEXT("Data"), DataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DataObject)->Values); It; ++It)
        {
            Data.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ItemInstanceIdValue = obj->TryGetField(TEXT("ItemInstanceId"));
    if (ItemInstanceIdValue.IsValid() && !ItemInstanceIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemInstanceIdValue->TryGetString(TmpValue)) { ItemInstanceId = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("KeysToRemove"), KeysToRemove);

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FWriteEventResponse::~FWriteEventResponse()
{

}

void PlayFab::ServerModels::FWriteEventResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (EventId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EventId"));
        writer->WriteValue(EventId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FWriteEventResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EventIdValue = obj->TryGetField(TEXT("EventId"));
    if (EventIdValue.IsValid() && !EventIdValue->IsNull())
    {
        FString TmpValue;
        if (EventIdValue->TryGetString(TmpValue)) { EventId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ServerModels::FWriteServerCharacterEventRequest::~FWriteServerCharacterEventRequest()
{

}

void PlayFab::ServerModels::FWriteServerCharacterEventRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Body.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Body"));
        for (TMap<FString, FJsonKeeper>::TConstIterator It(Body); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    if (!CharacterId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: WriteServerCharacterEventRequest::CharacterId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!EventName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: WriteServerCharacterEventRequest::EventName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("EventName"));
        writer->WriteValue(EventName);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: WriteServerCharacterEventRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (Timestamp.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Timestamp"));
        writeDatetime(Timestamp, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FWriteServerCharacterEventRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* BodyObject;
    if (obj->TryGetObjectField(TEXT("Body"), BodyObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*BodyObject)->Values); It; ++It)
        {
            Body.Add(It.Key(), FJsonKeeper(It.Value()));
        }
    }

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EventNameValue = obj->TryGetField(TEXT("EventName"));
    if (EventNameValue.IsValid() && !EventNameValue->IsNull())
    {
        FString TmpValue;
        if (EventNameValue->TryGetString(TmpValue)) { EventName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TimestampValue = obj->TryGetField(TEXT("Timestamp"));
    if (TimestampValue.IsValid())
        Timestamp = readDatetime(TimestampValue);


    return HasSucceeded;
}

PlayFab::ServerModels::FWriteServerPlayerEventRequest::~FWriteServerPlayerEventRequest()
{

}

void PlayFab::ServerModels::FWriteServerPlayerEventRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Body.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Body"));
        for (TMap<FString, FJsonKeeper>::TConstIterator It(Body); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!EventName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: WriteServerPlayerEventRequest::EventName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("EventName"));
        writer->WriteValue(EventName);
    }

    if (!PlayFabId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: WriteServerPlayerEventRequest::PlayFabId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("PlayFabId"));
        writer->WriteValue(PlayFabId);
    }

    if (Timestamp.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Timestamp"));
        writeDatetime(Timestamp, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FWriteServerPlayerEventRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* BodyObject;
    if (obj->TryGetObjectField(TEXT("Body"), BodyObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*BodyObject)->Values); It; ++It)
        {
            Body.Add(It.Key(), FJsonKeeper(It.Value()));
        }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EventNameValue = obj->TryGetField(TEXT("EventName"));
    if (EventNameValue.IsValid() && !EventNameValue->IsNull())
    {
        FString TmpValue;
        if (EventNameValue->TryGetString(TmpValue)) { EventName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlayFabIdValue = obj->TryGetField(TEXT("PlayFabId"));
    if (PlayFabIdValue.IsValid() && !PlayFabIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayFabIdValue->TryGetString(TmpValue)) { PlayFabId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TimestampValue = obj->TryGetField(TEXT("Timestamp"));
    if (TimestampValue.IsValid())
        Timestamp = readDatetime(TimestampValue);


    return HasSucceeded;
}

PlayFab::ServerModels::FWriteTitleEventRequest::~FWriteTitleEventRequest()
{

}

void PlayFab::ServerModels::FWriteTitleEventRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Body.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Body"));
        for (TMap<FString, FJsonKeeper>::TConstIterator It(Body); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!EventName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: WriteTitleEventRequest::EventName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("EventName"));
        writer->WriteValue(EventName);
    }

    if (Timestamp.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Timestamp"));
        writeDatetime(Timestamp, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ServerModels::FWriteTitleEventRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* BodyObject;
    if (obj->TryGetObjectField(TEXT("Body"), BodyObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*BodyObject)->Values); It; ++It)
        {
            Body.Add(It.Key(), FJsonKeeper(It.Value()));
        }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EventNameValue = obj->TryGetField(TEXT("EventName"));
    if (EventNameValue.IsValid() && !EventNameValue->IsNull())
    {
        FString TmpValue;
        if (EventNameValue->TryGetString(TmpValue)) { EventName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TimestampValue = obj->TryGetField(TEXT("Timestamp"));
    if (TimestampValue.IsValid())
        Timestamp = readDatetime(TimestampValue);


    return HasSucceeded;
}

