//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "Core/PlayFabError.h"
#include "Core/PlayFabAddonDataModels.h"
#include "Core/PlayFabSettings.h"
#include "PlayFabAPISettings.h"
#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"

namespace PlayFab
{
    /**
     * Main interface for PlayFab Sdk, specifically all Addon APIs
     */
    class PLAYFABCPP_API UPlayFabAddonInstanceAPI
    {
    public:
        DECLARE_DELEGATE_OneParam(FCreateOrUpdateAppleDelegate, const AddonModels::FCreateOrUpdateAppleResponse&);
        DECLARE_DELEGATE_OneParam(FCreateOrUpdateFacebookDelegate, const AddonModels::FCreateOrUpdateFacebookResponse&);
        DECLARE_DELEGATE_OneParam(FCreateOrUpdateFacebookInstantGamesDelegate, const AddonModels::FCreateOrUpdateFacebookInstantGamesResponse&);
        DECLARE_DELEGATE_OneParam(FCreateOrUpdateGoogleDelegate, const AddonModels::FCreateOrUpdateGoogleResponse&);
        DECLARE_DELEGATE_OneParam(FCreateOrUpdateKongregateDelegate, const AddonModels::FCreateOrUpdateKongregateResponse&);
        DECLARE_DELEGATE_OneParam(FCreateOrUpdateNintendoDelegate, const AddonModels::FCreateOrUpdateNintendoResponse&);
        DECLARE_DELEGATE_OneParam(FCreateOrUpdatePSNDelegate, const AddonModels::FCreateOrUpdatePSNResponse&);
        DECLARE_DELEGATE_OneParam(FCreateOrUpdateSteamDelegate, const AddonModels::FCreateOrUpdateSteamResponse&);
        DECLARE_DELEGATE_OneParam(FCreateOrUpdateTwitchDelegate, const AddonModels::FCreateOrUpdateTwitchResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteAppleDelegate, const AddonModels::FDeleteAppleResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteFacebookDelegate, const AddonModels::FDeleteFacebookResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteFacebookInstantGamesDelegate, const AddonModels::FDeleteFacebookInstantGamesResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteGoogleDelegate, const AddonModels::FDeleteGoogleResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteKongregateDelegate, const AddonModels::FDeleteKongregateResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteNintendoDelegate, const AddonModels::FDeleteNintendoResponse&);
        DECLARE_DELEGATE_OneParam(FDeletePSNDelegate, const AddonModels::FDeletePSNResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteSteamDelegate, const AddonModels::FDeleteSteamResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteTwitchDelegate, const AddonModels::FDeleteTwitchResponse&);
        DECLARE_DELEGATE_OneParam(FGetAppleDelegate, const AddonModels::FGetAppleResponse&);
        DECLARE_DELEGATE_OneParam(FGetFacebookDelegate, const AddonModels::FGetFacebookResponse&);
        DECLARE_DELEGATE_OneParam(FGetFacebookInstantGamesDelegate, const AddonModels::FGetFacebookInstantGamesResponse&);
        DECLARE_DELEGATE_OneParam(FGetGoogleDelegate, const AddonModels::FGetGoogleResponse&);
        DECLARE_DELEGATE_OneParam(FGetKongregateDelegate, const AddonModels::FGetKongregateResponse&);
        DECLARE_DELEGATE_OneParam(FGetNintendoDelegate, const AddonModels::FGetNintendoResponse&);
        DECLARE_DELEGATE_OneParam(FGetPSNDelegate, const AddonModels::FGetPSNResponse&);
        DECLARE_DELEGATE_OneParam(FGetSteamDelegate, const AddonModels::FGetSteamResponse&);
        DECLARE_DELEGATE_OneParam(FGetTwitchDelegate, const AddonModels::FGetTwitchResponse&);


    private:
        TSharedPtr<UPlayFabAPISettings> settings;
        TSharedPtr<UPlayFabAuthenticationContext> authContext;
    
    public:
        UPlayFabAddonInstanceAPI();
        explicit UPlayFabAddonInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings);
        explicit UPlayFabAddonInstanceAPI(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        UPlayFabAddonInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings, TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        ~UPlayFabAddonInstanceAPI();
        UPlayFabAddonInstanceAPI(const UPlayFabAddonInstanceAPI& source) = delete; // disable copy
        UPlayFabAddonInstanceAPI(UPlayFabAddonInstanceAPI&&) = delete; // disable move
        UPlayFabAddonInstanceAPI& operator=(const UPlayFabAddonInstanceAPI& source) = delete; // disable assignment
        UPlayFabAddonInstanceAPI& operator=(UPlayFabAddonInstanceAPI&& other) = delete; // disable move assignment

        int GetPendingCalls() const;
        TSharedPtr<UPlayFabAPISettings> GetSettings() const;
        void SetSettings(TSharedPtr<UPlayFabAPISettings> apiSettings);
        TSharedPtr<UPlayFabAuthenticationContext> GetAuthenticationContext() const;
        void SetAuthenticationContext(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        void ForgetAllCredentials();

    private:
        TSharedPtr<UPlayFabAuthenticationContext> GetOrCreateAuthenticationContext();
    
    public:


        // ------------ Generated API calls
        // Creates the Apple addon on a title, or updates it if it already exists.
        bool CreateOrUpdateApple(AddonModels::FCreateOrUpdateAppleRequest& request, const FCreateOrUpdateAppleDelegate& SuccessDelegate = FCreateOrUpdateAppleDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Creates the Facebook addon on a title, or updates it if it already exists.
        bool CreateOrUpdateFacebook(AddonModels::FCreateOrUpdateFacebookRequest& request, const FCreateOrUpdateFacebookDelegate& SuccessDelegate = FCreateOrUpdateFacebookDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Creates the Facebook Instant Games addon on a title, or updates it if it already exists.
        bool CreateOrUpdateFacebookInstantGames(AddonModels::FCreateOrUpdateFacebookInstantGamesRequest& request, const FCreateOrUpdateFacebookInstantGamesDelegate& SuccessDelegate = FCreateOrUpdateFacebookInstantGamesDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Creates the Google addon on a title, or updates it if it already exists.
        bool CreateOrUpdateGoogle(AddonModels::FCreateOrUpdateGoogleRequest& request, const FCreateOrUpdateGoogleDelegate& SuccessDelegate = FCreateOrUpdateGoogleDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Creates the Kongregate addon on a title, or updates it if it already exists.
        bool CreateOrUpdateKongregate(AddonModels::FCreateOrUpdateKongregateRequest& request, const FCreateOrUpdateKongregateDelegate& SuccessDelegate = FCreateOrUpdateKongregateDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Creates the Nintendo addon on a title, or updates it if it already exists.
        bool CreateOrUpdateNintendo(AddonModels::FCreateOrUpdateNintendoRequest& request, const FCreateOrUpdateNintendoDelegate& SuccessDelegate = FCreateOrUpdateNintendoDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Creates the PSN addon on a title, or updates it if it already exists.
        bool CreateOrUpdatePSN(AddonModels::FCreateOrUpdatePSNRequest& request, const FCreateOrUpdatePSNDelegate& SuccessDelegate = FCreateOrUpdatePSNDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Creates the Steam addon on a title, or updates it if it already exists.
        bool CreateOrUpdateSteam(AddonModels::FCreateOrUpdateSteamRequest& request, const FCreateOrUpdateSteamDelegate& SuccessDelegate = FCreateOrUpdateSteamDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Creates the Twitch addon on a title, or updates it if it already exists.
        bool CreateOrUpdateTwitch(AddonModels::FCreateOrUpdateTwitchRequest& request, const FCreateOrUpdateTwitchDelegate& SuccessDelegate = FCreateOrUpdateTwitchDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Deletes the Apple addon on a title.
        bool DeleteApple(AddonModels::FDeleteAppleRequest& request, const FDeleteAppleDelegate& SuccessDelegate = FDeleteAppleDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Deletes the Facebook addon on a title.
        bool DeleteFacebook(AddonModels::FDeleteFacebookRequest& request, const FDeleteFacebookDelegate& SuccessDelegate = FDeleteFacebookDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Deletes the Facebook addon on a title.
        bool DeleteFacebookInstantGames(AddonModels::FDeleteFacebookInstantGamesRequest& request, const FDeleteFacebookInstantGamesDelegate& SuccessDelegate = FDeleteFacebookInstantGamesDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Deletes the Google addon on a title.
        bool DeleteGoogle(AddonModels::FDeleteGoogleRequest& request, const FDeleteGoogleDelegate& SuccessDelegate = FDeleteGoogleDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Deletes the Kongregate addon on a title.
        bool DeleteKongregate(AddonModels::FDeleteKongregateRequest& request, const FDeleteKongregateDelegate& SuccessDelegate = FDeleteKongregateDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Deletes the Nintendo addon on a title.
        bool DeleteNintendo(AddonModels::FDeleteNintendoRequest& request, const FDeleteNintendoDelegate& SuccessDelegate = FDeleteNintendoDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Deletes the PSN addon on a title.
        bool DeletePSN(AddonModels::FDeletePSNRequest& request, const FDeletePSNDelegate& SuccessDelegate = FDeletePSNDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Deletes the Steam addon on a title.
        bool DeleteSteam(AddonModels::FDeleteSteamRequest& request, const FDeleteSteamDelegate& SuccessDelegate = FDeleteSteamDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Deletes the Twitch addon on a title.
        bool DeleteTwitch(AddonModels::FDeleteTwitchRequest& request, const FDeleteTwitchDelegate& SuccessDelegate = FDeleteTwitchDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets information of the Apple addon on a title, omits secrets.
        bool GetApple(AddonModels::FGetAppleRequest& request, const FGetAppleDelegate& SuccessDelegate = FGetAppleDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets information of the Facebook addon on a title, omits secrets.
        bool GetFacebook(AddonModels::FGetFacebookRequest& request, const FGetFacebookDelegate& SuccessDelegate = FGetFacebookDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets information of the Facebook Instant Games addon on a title, omits secrets.
        bool GetFacebookInstantGames(AddonModels::FGetFacebookInstantGamesRequest& request, const FGetFacebookInstantGamesDelegate& SuccessDelegate = FGetFacebookInstantGamesDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets information of the Google addon on a title, omits secrets.
        bool GetGoogle(AddonModels::FGetGoogleRequest& request, const FGetGoogleDelegate& SuccessDelegate = FGetGoogleDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets information of the Kongregate addon on a title, omits secrets.
        bool GetKongregate(AddonModels::FGetKongregateRequest& request, const FGetKongregateDelegate& SuccessDelegate = FGetKongregateDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets information of the Nintendo addon on a title, omits secrets.
        bool GetNintendo(AddonModels::FGetNintendoRequest& request, const FGetNintendoDelegate& SuccessDelegate = FGetNintendoDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets information of the PSN addon on a title, omits secrets.
        bool GetPSN(AddonModels::FGetPSNRequest& request, const FGetPSNDelegate& SuccessDelegate = FGetPSNDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets information of the Steam addon on a title, omits secrets.
        bool GetSteam(AddonModels::FGetSteamRequest& request, const FGetSteamDelegate& SuccessDelegate = FGetSteamDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets information of the Twitch addon on a title, omits secrets.
        bool GetTwitch(AddonModels::FGetTwitchRequest& request, const FGetTwitchDelegate& SuccessDelegate = FGetTwitchDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());

    private:
        // ------------ Generated result handlers
        void OnCreateOrUpdateAppleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateOrUpdateAppleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnCreateOrUpdateFacebookResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateOrUpdateFacebookDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnCreateOrUpdateFacebookInstantGamesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateOrUpdateFacebookInstantGamesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnCreateOrUpdateGoogleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateOrUpdateGoogleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnCreateOrUpdateKongregateResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateOrUpdateKongregateDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnCreateOrUpdateNintendoResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateOrUpdateNintendoDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnCreateOrUpdatePSNResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateOrUpdatePSNDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnCreateOrUpdateSteamResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateOrUpdateSteamDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnCreateOrUpdateTwitchResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateOrUpdateTwitchDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteAppleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteAppleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteFacebookResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteFacebookDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteFacebookInstantGamesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteFacebookInstantGamesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteGoogleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteGoogleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteKongregateResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteKongregateDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteNintendoResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteNintendoDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeletePSNResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeletePSNDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteSteamResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteSteamDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteTwitchResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteTwitchDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetAppleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAppleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetFacebookResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFacebookDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetFacebookInstantGamesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFacebookInstantGamesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetGoogleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetGoogleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetKongregateResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetKongregateDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetNintendoResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetNintendoDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetPSNResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPSNDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetSteamResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetSteamDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetTwitchResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetTwitchDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);

    };
};
