//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "PlayFabCppBaseModel.h"

namespace PlayFab
{
namespace AuthenticationModels
{

    struct PLAYFABCPP_API FEntityKey : public PlayFab::FPlayFabCppBaseModel
    {
        // Unique ID of the entity.
        FString Id;

        // [optional] Entity type. See https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types
        FString Type;

        FEntityKey() :
            FPlayFabCppBaseModel(),
            Id(),
            Type()
            {}

        FEntityKey(const FEntityKey& src) :
            FPlayFabCppBaseModel(),
            Id(src.Id),
            Type(src.Type)
            {}

        FEntityKey(const TSharedPtr<FJsonObject>& obj) : FEntityKey()
        {
            readFromValue(obj);
        }

        ~FEntityKey();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEntityLineage : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The Character Id of the associated entity.
        FString CharacterId;

        // [optional] The Group Id of the associated entity.
        FString GroupId;

        // [optional] The Master Player Account Id of the associated entity.
        FString MasterPlayerAccountId;

        // [optional] The Namespace Id of the associated entity.
        FString NamespaceId;

        // [optional] The Title Id of the associated entity.
        FString TitleId;

        // [optional] The Title Player Account Id of the associated entity.
        FString TitlePlayerAccountId;

        FEntityLineage() :
            FPlayFabCppBaseModel(),
            CharacterId(),
            GroupId(),
            MasterPlayerAccountId(),
            NamespaceId(),
            TitleId(),
            TitlePlayerAccountId()
            {}

        FEntityLineage(const FEntityLineage& src) :
            FPlayFabCppBaseModel(),
            CharacterId(src.CharacterId),
            GroupId(src.GroupId),
            MasterPlayerAccountId(src.MasterPlayerAccountId),
            NamespaceId(src.NamespaceId),
            TitleId(src.TitleId),
            TitlePlayerAccountId(src.TitlePlayerAccountId)
            {}

        FEntityLineage(const TSharedPtr<FJsonObject>& obj) : FEntityLineage()
        {
            readFromValue(obj);
        }

        ~FEntityLineage();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetEntityTokenRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        FGetEntityTokenRequest() :
            FPlayFabCppRequestCommon(),
            Entity(nullptr)
            {}

        FGetEntityTokenRequest(const FGetEntityTokenRequest& src) :
            FPlayFabCppRequestCommon(),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr)
            {}

        FGetEntityTokenRequest(const TSharedPtr<FJsonObject>& obj) : FGetEntityTokenRequest()
        {
            readFromValue(obj);
        }

        ~FGetEntityTokenRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetEntityTokenResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The entity id and type.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The token used to set X-EntityToken for all entity based API calls.
        FString EntityToken;

        // [optional] The time the token will expire, if it is an expiring token, in UTC.
        Boxed<FDateTime> TokenExpiration;

        FGetEntityTokenResponse() :
            FPlayFabCppResultCommon(),
            Entity(nullptr),
            EntityToken(),
            TokenExpiration()
            {}

        FGetEntityTokenResponse(const FGetEntityTokenResponse& src) :
            FPlayFabCppResultCommon(),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            EntityToken(src.EntityToken),
            TokenExpiration(src.TokenExpiration)
            {}

        FGetEntityTokenResponse(const TSharedPtr<FJsonObject>& obj) : FGetEntityTokenResponse()
        {
            readFromValue(obj);
        }

        ~FGetEntityTokenResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum LoginIdentityProvider
    {
        LoginIdentityProviderUnknown,
        LoginIdentityProviderPlayFab,
        LoginIdentityProviderCustom,
        LoginIdentityProviderGameCenter,
        LoginIdentityProviderGooglePlay,
        LoginIdentityProviderSteam,
        LoginIdentityProviderXBoxLive,
        LoginIdentityProviderPSN,
        LoginIdentityProviderKongregate,
        LoginIdentityProviderFacebook,
        LoginIdentityProviderIOSDevice,
        LoginIdentityProviderAndroidDevice,
        LoginIdentityProviderTwitch,
        LoginIdentityProviderWindowsHello,
        LoginIdentityProviderGameServer,
        LoginIdentityProviderCustomServer,
        LoginIdentityProviderNintendoSwitch,
        LoginIdentityProviderFacebookInstantGames,
        LoginIdentityProviderOpenIdConnect
    };

    PLAYFABCPP_API void writeLoginIdentityProviderEnumJSON(LoginIdentityProvider enumVal, JsonWriter& writer);
    PLAYFABCPP_API LoginIdentityProvider readLoginIdentityProviderFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API LoginIdentityProvider readLoginIdentityProviderFromValue(const FString& value);

    struct PLAYFABCPP_API FValidateEntityTokenRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // Client EntityToken
        FString EntityToken;

        FValidateEntityTokenRequest() :
            FPlayFabCppRequestCommon(),
            EntityToken()
            {}

        FValidateEntityTokenRequest(const FValidateEntityTokenRequest& src) :
            FPlayFabCppRequestCommon(),
            EntityToken(src.EntityToken)
            {}

        FValidateEntityTokenRequest(const TSharedPtr<FJsonObject>& obj) : FValidateEntityTokenRequest()
        {
            readFromValue(obj);
        }

        ~FValidateEntityTokenRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FValidateEntityTokenResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The entity id and type.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The identity provider for this entity, for the given login
        Boxed<LoginIdentityProvider> IdentityProvider;

        // [optional] The lineage of this profile.
        TSharedPtr<FEntityLineage> Lineage;

        FValidateEntityTokenResponse() :
            FPlayFabCppResultCommon(),
            Entity(nullptr),
            IdentityProvider(),
            Lineage(nullptr)
            {}

        FValidateEntityTokenResponse(const FValidateEntityTokenResponse& src) :
            FPlayFabCppResultCommon(),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            IdentityProvider(src.IdentityProvider),
            Lineage(src.Lineage.IsValid() ? MakeShareable(new FEntityLineage(*src.Lineage)) : nullptr)
            {}

        FValidateEntityTokenResponse(const TSharedPtr<FJsonObject>& obj) : FValidateEntityTokenResponse()
        {
            readFromValue(obj);
        }

        ~FValidateEntityTokenResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

}
}
