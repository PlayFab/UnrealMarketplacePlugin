//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "PlayFabCppBaseModel.h"

namespace PlayFab
{
namespace LeaderboardsModels
{

    struct PLAYFABCPP_API FLinkedStatisticColumn : public PlayFab::FPlayFabCppBaseModel
    {
        // The name of the statistic column that this leaderboard column is sourced from.
        FString LinkedStatisticColumnName;

        // The name of the statistic.
        FString LinkedStatisticName;

        FLinkedStatisticColumn() :
            FPlayFabCppBaseModel(),
            LinkedStatisticColumnName(),
            LinkedStatisticName()
            {}

        FLinkedStatisticColumn(const FLinkedStatisticColumn& src) = default;

        FLinkedStatisticColumn(const TSharedPtr<FJsonObject>& obj) : FLinkedStatisticColumn()
        {
            readFromValue(obj);
        }

        ~FLinkedStatisticColumn();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum LeaderboardSortDirection
    {
        LeaderboardSortDirectionDescending,
        LeaderboardSortDirectionAscending
    };

    PLAYFABCPP_API void writeLeaderboardSortDirectionEnumJSON(LeaderboardSortDirection enumVal, JsonWriter& writer);
    PLAYFABCPP_API LeaderboardSortDirection readLeaderboardSortDirectionFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API LeaderboardSortDirection readLeaderboardSortDirectionFromValue(const FString& value);

    struct PLAYFABCPP_API FLeaderboardColumn : public PlayFab::FPlayFabCppBaseModel
    {
        /**
         * [optional] If the value for this column is sourced from a statistic, details of the linked column. Null if the leaderboard is not
         * linked.
         */
        TSharedPtr<FLinkedStatisticColumn> pfLinkedStatisticColumn;

        // A name for the leaderboard column, unique per leaderboard definition.
        FString Name;

        // The sort direction for this column.
        LeaderboardSortDirection SortDirection;

        FLeaderboardColumn() :
            FPlayFabCppBaseModel(),
            pfLinkedStatisticColumn(nullptr),
            Name(),
            SortDirection()
            {}

        FLeaderboardColumn(const FLeaderboardColumn& src) = default;

        FLeaderboardColumn(const TSharedPtr<FJsonObject>& obj) : FLeaderboardColumn()
        {
            readFromValue(obj);
        }

        ~FLeaderboardColumn();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum ResetInterval
    {
        ResetIntervalManual,
        ResetIntervalHour,
        ResetIntervalDay,
        ResetIntervalWeek,
        ResetIntervalMonth
    };

    PLAYFABCPP_API void writeResetIntervalEnumJSON(ResetInterval enumVal, JsonWriter& writer);
    PLAYFABCPP_API ResetInterval readResetIntervalFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API ResetInterval readResetIntervalFromValue(const FString& value);

    struct PLAYFABCPP_API FVersionConfiguration : public PlayFab::FPlayFabCppBaseModel
    {
        // The maximum number of versions of this leaderboard/statistic that can be queried.
        int32 MaxQueryableVersions;

        /**
         * Reset interval that statistics or leaderboards will reset on. When using Manual intervalthe reset can only be increased
         * by calling the Increase version API. When using Hour interval the resetwill occur at the start of the next hour UTC
         * time. When using Day interval the reset will occur at thestart of the next day in UTC time. When using the Week interval
         * the reset will occur at the start ofthe next Monday in UTC time. When using Month interval the reset will occur at the
         * start of the nextmonth in UTC time.
         */
        ResetInterval pfResetInterval;

        FVersionConfiguration() :
            FPlayFabCppBaseModel(),
            MaxQueryableVersions(0),
            pfResetInterval()
            {}

        FVersionConfiguration(const FVersionConfiguration& src) = default;

        FVersionConfiguration(const TSharedPtr<FJsonObject>& obj) : FVersionConfiguration()
        {
            readFromValue(obj);
        }

        ~FVersionConfiguration();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateLeaderboardDefinitionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // Leaderboard columns describing the sort directions, cannot be changed after creation.
        TArray<FLeaderboardColumn> Columns;
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        /**
         * The entity type being represented on the leaderboard. If it doesn't correspond to the PlayFab entity types, use
         * 'external' as the type.
         */
        FString EntityType;

        // A name for the leaderboard, unique per title.
        FString Name;

        // Maximum number of entries on this leaderboard
        int32 SizeLimit;

        // The version reset configuration for the leaderboard definition.
        FVersionConfiguration pfVersionConfiguration;

        FCreateLeaderboardDefinitionRequest() :
            FPlayFabCppRequestCommon(),
            Columns(),
            CustomTags(),
            EntityType(),
            Name(),
            SizeLimit(0),
            pfVersionConfiguration()
            {}

        FCreateLeaderboardDefinitionRequest(const FCreateLeaderboardDefinitionRequest& src) = default;

        FCreateLeaderboardDefinitionRequest(const TSharedPtr<FJsonObject>& obj) : FCreateLeaderboardDefinitionRequest()
        {
            readFromValue(obj);
        }

        ~FCreateLeaderboardDefinitionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum StatisticAggregationMethod
    {
        StatisticAggregationMethodLast,
        StatisticAggregationMethodMin,
        StatisticAggregationMethodMax,
        StatisticAggregationMethodSum
    };

    PLAYFABCPP_API void writeStatisticAggregationMethodEnumJSON(StatisticAggregationMethod enumVal, JsonWriter& writer);
    PLAYFABCPP_API StatisticAggregationMethod readStatisticAggregationMethodFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API StatisticAggregationMethod readStatisticAggregationMethodFromValue(const FString& value);

    struct PLAYFABCPP_API FStatisticColumn : public PlayFab::FPlayFabCppBaseModel
    {
        // Aggregation method for calculating new value of a statistic.
        StatisticAggregationMethod AggregationMethod;

        // Name of the statistic column, as originally configured.
        FString Name;

        FStatisticColumn() :
            FPlayFabCppBaseModel(),
            AggregationMethod(),
            Name()
            {}

        FStatisticColumn(const FStatisticColumn& src) = default;

        FStatisticColumn(const TSharedPtr<FJsonObject>& obj) : FStatisticColumn()
        {
            readFromValue(obj);
        }

        ~FStatisticColumn();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateStatisticDefinitionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The columns for the statistic defining the aggregation method for each column.
        TArray<FStatisticColumn> Columns;
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity type allowed to have score(s) for this statistic.
        FString EntityType;

        // Name of the statistic. Must be less than 50 characters. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'.
        FString Name;

        // [optional] The version reset configuration for the statistic definition.
        TSharedPtr<FVersionConfiguration> pfVersionConfiguration;

        FCreateStatisticDefinitionRequest() :
            FPlayFabCppRequestCommon(),
            Columns(),
            CustomTags(),
            EntityType(),
            Name(),
            pfVersionConfiguration(nullptr)
            {}

        FCreateStatisticDefinitionRequest(const FCreateStatisticDefinitionRequest& src) = default;

        FCreateStatisticDefinitionRequest(const TSharedPtr<FJsonObject>& obj) : FCreateStatisticDefinitionRequest()
        {
            readFromValue(obj);
        }

        ~FCreateStatisticDefinitionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteLeaderboardDefinitionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The name of the leaderboard definition to delete.
        FString Name;

        FDeleteLeaderboardDefinitionRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Name()
            {}

        FDeleteLeaderboardDefinitionRequest(const FDeleteLeaderboardDefinitionRequest& src) = default;

        FDeleteLeaderboardDefinitionRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteLeaderboardDefinitionRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteLeaderboardDefinitionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteLeaderboardEntriesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The unique Ids of the entries to delete from the leaderboard.
        TArray<FString> EntityIds;
        // The name of the leaderboard.
        FString Name;

        FDeleteLeaderboardEntriesRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            EntityIds(),
            Name()
            {}

        FDeleteLeaderboardEntriesRequest(const FDeleteLeaderboardEntriesRequest& src) = default;

        FDeleteLeaderboardEntriesRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteLeaderboardEntriesRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteLeaderboardEntriesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteStatisticDefinitionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // Name of the statistic to delete.
        FString Name;

        FDeleteStatisticDefinitionRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Name()
            {}

        FDeleteStatisticDefinitionRequest(const FDeleteStatisticDefinitionRequest& src) = default;

        FDeleteStatisticDefinitionRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteStatisticDefinitionRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteStatisticDefinitionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEntityKey : public PlayFab::FPlayFabCppBaseModel
    {
        // Unique ID of the entity.
        FString Id;

        // [optional] Entity type. See https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types
        FString Type;

        FEntityKey() :
            FPlayFabCppBaseModel(),
            Id(),
            Type()
            {}

        FEntityKey(const FEntityKey& src) = default;

        FEntityKey(const TSharedPtr<FJsonObject>& obj) : FEntityKey()
        {
            readFromValue(obj);
        }

        ~FEntityKey();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FStatisticDelete : public PlayFab::FPlayFabCppBaseModel
    {
        // Name of the statistic, as originally configured.
        FString Name;

        FStatisticDelete() :
            FPlayFabCppBaseModel(),
            Name()
            {}

        FStatisticDelete(const FStatisticDelete& src) = default;

        FStatisticDelete(const TSharedPtr<FJsonObject>& obj) : FStatisticDelete()
        {
            readFromValue(obj);
        }

        ~FStatisticDelete();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteStatisticsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        // Collection of statistics to remove from this entity.
        TArray<FStatisticDelete> Statistics;
        FDeleteStatisticsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr),
            Statistics()
            {}

        FDeleteStatisticsRequest(const FDeleteStatisticsRequest& src) = default;

        FDeleteStatisticsRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteStatisticsRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteStatisticsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteStatisticsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The entity id and type.
        TSharedPtr<FEntityKey> Entity;

        FDeleteStatisticsResponse() :
            FPlayFabCppResultCommon(),
            Entity(nullptr)
            {}

        FDeleteStatisticsResponse(const FDeleteStatisticsResponse& src) = default;

        FDeleteStatisticsResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteStatisticsResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteStatisticsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEmptyResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FEmptyResponse() :
            FPlayFabCppResultCommon()
            {}

        FEmptyResponse(const FEmptyResponse& src) = default;

        FEmptyResponse(const TSharedPtr<FJsonObject>& obj) : FEmptyResponse()
        {
            readFromValue(obj);
        }

        ~FEmptyResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEntityLeaderboardEntry : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Entity's display name.
        FString DisplayName;

        // [optional] Entity identifier.
        TSharedPtr<FEntityKey> Entity;

        // The time at which the last update to the entry was recorded on the server.
        FDateTime LastUpdated;

        // [optional] An opaque blob of data stored on the leaderboard entry. Note that the metadata is not used for ranking purposes.
        FString Metadata;

        // Position on the leaderboard.
        int32 Rank;

        // [optional] Scores for the entry.
        TArray<FString> Scores;
        FEntityLeaderboardEntry() :
            FPlayFabCppBaseModel(),
            DisplayName(),
            Entity(nullptr),
            LastUpdated(0),
            Metadata(),
            Rank(0),
            Scores()
            {}

        FEntityLeaderboardEntry(const FEntityLeaderboardEntry& src) = default;

        FEntityLeaderboardEntry(const TSharedPtr<FJsonObject>& obj) : FEntityLeaderboardEntry()
        {
            readFromValue(obj);
        }

        ~FEntityLeaderboardEntry();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEntityStatisticValue : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Metadata associated with the Statistic.
        FString Metadata;

        // [optional] Statistic name
        FString Name;

        // [optional] Statistic scores
        TArray<FString> Scores;
        // Statistic version
        int32 Version;

        FEntityStatisticValue() :
            FPlayFabCppBaseModel(),
            Metadata(),
            Name(),
            Scores(),
            Version(0)
            {}

        FEntityStatisticValue(const FEntityStatisticValue& src) = default;

        FEntityStatisticValue(const TSharedPtr<FJsonObject>& obj) : FEntityStatisticValue()
        {
            readFromValue(obj);
        }

        ~FEntityStatisticValue();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEntityStatistics : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Entity key
        TSharedPtr<FEntityKey> pfEntityKey;

        // [optional] All statistics for the given entitykey
        TArray<FEntityStatisticValue> Statistics;
        FEntityStatistics() :
            FPlayFabCppBaseModel(),
            pfEntityKey(nullptr),
            Statistics()
            {}

        FEntityStatistics(const FEntityStatistics& src) = default;

        FEntityStatistics(const TSharedPtr<FJsonObject>& obj) : FEntityStatistics()
        {
            readFromValue(obj);
        }

        ~FEntityStatistics();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum ExternalFriendSources
    {
        ExternalFriendSourcesNone,
        ExternalFriendSourcesSteam,
        ExternalFriendSourcesFacebook,
        ExternalFriendSourcesXbox,
        ExternalFriendSourcesPsn,
        ExternalFriendSourcesAll
    };

    PLAYFABCPP_API void writeExternalFriendSourcesEnumJSON(ExternalFriendSources enumVal, JsonWriter& writer);
    PLAYFABCPP_API ExternalFriendSources readExternalFriendSourcesFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API ExternalFriendSources readExternalFriendSourcesFromValue(const FString& value);

    struct PLAYFABCPP_API FGetEntityLeaderboardRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // Name of the leaderboard.
        FString LeaderboardName;

        // Maximum number of results to return from the leaderboard. Minimum 1, maximum 1,000.
        uint32 PageSize;

        // [optional] Index position to start from. 1 is beginning of leaderboard.
        Boxed<uint32> StartingPosition;

        // [optional] Optional version of the leaderboard, defaults to current version.
        Boxed<uint32> Version;

        FGetEntityLeaderboardRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            LeaderboardName(),
            PageSize(0),
            StartingPosition(),
            Version()
            {}

        FGetEntityLeaderboardRequest(const FGetEntityLeaderboardRequest& src) = default;

        FGetEntityLeaderboardRequest(const TSharedPtr<FJsonObject>& obj) : FGetEntityLeaderboardRequest()
        {
            readFromValue(obj);
        }

        ~FGetEntityLeaderboardRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetEntityLeaderboardResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Leaderboard columns describing the sort directions,
        TArray<FLeaderboardColumn> Columns;
        // [optional] Individual entity rankings in the leaderboard, in sorted order by rank.
        TArray<FEntityLeaderboardEntry> Rankings;
        // Version of the leaderboard being returned.
        uint32 Version;

        FGetEntityLeaderboardResponse() :
            FPlayFabCppResultCommon(),
            Columns(),
            Rankings(),
            Version(0)
            {}

        FGetEntityLeaderboardResponse(const FGetEntityLeaderboardResponse& src) = default;

        FGetEntityLeaderboardResponse(const TSharedPtr<FJsonObject>& obj) : FGetEntityLeaderboardResponse()
        {
            readFromValue(obj);
        }

        ~FGetEntityLeaderboardResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetFriendLeaderboardForEntityRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        /**
         * [optional] Indicates which other platforms' friends should be included in the response. In HTTP, it is represented as a
         * comma-separated list of platforms.
         */
        Boxed<ExternalFriendSources> pfExternalFriendSources;

        // Name of the leaderboard.
        FString LeaderboardName;

        // [optional] Optional version of the leaderboard, defaults to current version.
        Boxed<uint32> Version;

        // [optional] Xbox token if Xbox friends should be included. Requires Xbox be configured on PlayFab.
        FString XboxToken;

        FGetFriendLeaderboardForEntityRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr),
            pfExternalFriendSources(),
            LeaderboardName(),
            Version(),
            XboxToken()
            {}

        FGetFriendLeaderboardForEntityRequest(const FGetFriendLeaderboardForEntityRequest& src) = default;

        FGetFriendLeaderboardForEntityRequest(const TSharedPtr<FJsonObject>& obj) : FGetFriendLeaderboardForEntityRequest()
        {
            readFromValue(obj);
        }

        ~FGetFriendLeaderboardForEntityRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetLeaderboardAroundEntityRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        // Name of the leaderboard.
        FString LeaderboardName;

        /**
         * Number of surrounding entries to return (in addition to specified entity). In general, the number of ranks above and
         * below will be split into half. For example, if the specified value is 10, 5 ranks above and 5 ranks below will be
         * retrieved. However, the numbers will get skewed in either direction when the specified entity is towards the top or
         * bottom of the leaderboard. Also, the number of entries returned can be lower than the value specified for entries at the
         * bottom of the leaderboard.
         */
        uint32 MaxSurroundingEntries;

        // [optional] Optional version of the leaderboard, defaults to current.
        Boxed<uint32> Version;

        FGetLeaderboardAroundEntityRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr),
            LeaderboardName(),
            MaxSurroundingEntries(0),
            Version()
            {}

        FGetLeaderboardAroundEntityRequest(const FGetLeaderboardAroundEntityRequest& src) = default;

        FGetLeaderboardAroundEntityRequest(const TSharedPtr<FJsonObject>& obj) : FGetLeaderboardAroundEntityRequest()
        {
            readFromValue(obj);
        }

        ~FGetLeaderboardAroundEntityRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetLeaderboardDefinitionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The name of the leaderboard to retrieve the definition for.
        FString Name;

        FGetLeaderboardDefinitionRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Name()
            {}

        FGetLeaderboardDefinitionRequest(const FGetLeaderboardDefinitionRequest& src) = default;

        FGetLeaderboardDefinitionRequest(const TSharedPtr<FJsonObject>& obj) : FGetLeaderboardDefinitionRequest()
        {
            readFromValue(obj);
        }

        ~FGetLeaderboardDefinitionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetLeaderboardDefinitionResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // Sort direction of the leaderboard columns, cannot be changed after creation.
        TArray<FLeaderboardColumn> Columns;
        // Created time, in UTC
        FDateTime Created;

        /**
         * The entity type being represented on the leaderboard. If it doesn't correspond to the PlayFab entity types, use
         * 'external' as the type.
         */
        FString EntityType;

        // [optional] Last time, in UTC, leaderboard version was incremented.
        Boxed<FDateTime> LastResetTime;

        // A name for the leaderboard, unique per title.
        FString Name;

        // Maximum number of entries on this leaderboard
        int32 SizeLimit;

        // Latest Leaderboard version.
        uint32 Version;

        // The version reset configuration for the leaderboard definition.
        FVersionConfiguration pfVersionConfiguration;

        FGetLeaderboardDefinitionResponse() :
            FPlayFabCppResultCommon(),
            Columns(),
            Created(0),
            EntityType(),
            LastResetTime(),
            Name(),
            SizeLimit(0),
            Version(0),
            pfVersionConfiguration()
            {}

        FGetLeaderboardDefinitionResponse(const FGetLeaderboardDefinitionResponse& src) = default;

        FGetLeaderboardDefinitionResponse(const TSharedPtr<FJsonObject>& obj) : FGetLeaderboardDefinitionResponse()
        {
            readFromValue(obj);
        }

        ~FGetLeaderboardDefinitionResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetLeaderboardForEntitiesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // Collection of Entity IDs to include in the leaderboard.
        TArray<FString> EntityIds;
        // Name of the leaderboard.
        FString LeaderboardName;

        // [optional] Optional version of the leaderboard, defaults to current.
        Boxed<uint32> Version;

        FGetLeaderboardForEntitiesRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            EntityIds(),
            LeaderboardName(),
            Version()
            {}

        FGetLeaderboardForEntitiesRequest(const FGetLeaderboardForEntitiesRequest& src) = default;

        FGetLeaderboardForEntitiesRequest(const TSharedPtr<FJsonObject>& obj) : FGetLeaderboardForEntitiesRequest()
        {
            readFromValue(obj);
        }

        ~FGetLeaderboardForEntitiesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetStatisticDefinitionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // Name of the statistic. Must be less than 50 characters.
        FString Name;

        FGetStatisticDefinitionRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Name()
            {}

        FGetStatisticDefinitionRequest(const FGetStatisticDefinitionRequest& src) = default;

        FGetStatisticDefinitionRequest(const TSharedPtr<FJsonObject>& obj) : FGetStatisticDefinitionRequest()
        {
            readFromValue(obj);
        }

        ~FGetStatisticDefinitionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetStatisticDefinitionResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The columns for the statistic defining the aggregation method for each column.
        TArray<FStatisticColumn> Columns;
        // Created time, in UTC
        FDateTime Created;

        // [optional] The entity type that can have this statistic.
        FString EntityType;

        // [optional] Last time, in UTC, statistic version was incremented.
        Boxed<FDateTime> LastResetTime;

        // [optional] The list of leaderboards that are linked to this statistic definition.
        TArray<FString> LinkedLeaderboardNames;
        // [optional] Name of the statistic.
        FString Name;

        // Statistic version.
        uint32 Version;

        // [optional] The version reset configuration for the leaderboard definition.
        TSharedPtr<FVersionConfiguration> pfVersionConfiguration;

        FGetStatisticDefinitionResponse() :
            FPlayFabCppResultCommon(),
            Columns(),
            Created(0),
            EntityType(),
            LastResetTime(),
            LinkedLeaderboardNames(),
            Name(),
            Version(0),
            pfVersionConfiguration(nullptr)
            {}

        FGetStatisticDefinitionResponse(const FGetStatisticDefinitionResponse& src) = default;

        FGetStatisticDefinitionResponse(const TSharedPtr<FJsonObject>& obj) : FGetStatisticDefinitionResponse()
        {
            readFromValue(obj);
        }

        ~FGetStatisticDefinitionResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetStatisticDefinitionsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FGetStatisticDefinitionsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FGetStatisticDefinitionsRequest(const FGetStatisticDefinitionsRequest& src) = default;

        FGetStatisticDefinitionsRequest(const TSharedPtr<FJsonObject>& obj) : FGetStatisticDefinitionsRequest()
        {
            readFromValue(obj);
        }

        ~FGetStatisticDefinitionsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FStatisticDefinition : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The columns for the statistic defining the aggregation method for each column.
        TArray<FStatisticColumn> Columns;
        // Created time, in UTC
        FDateTime Created;

        // [optional] The entity type that can have this statistic.
        FString EntityType;

        // [optional] Last time, in UTC, statistic version was incremented.
        Boxed<FDateTime> LastResetTime;

        // [optional] The list of leaderboards that are linked to this statistic definition.
        TArray<FString> LinkedLeaderboardNames;
        // [optional] Name of the statistic.
        FString Name;

        // Statistic version.
        uint32 Version;

        // [optional] The version reset configuration for the leaderboard definition.
        TSharedPtr<FVersionConfiguration> pfVersionConfiguration;

        FStatisticDefinition() :
            FPlayFabCppBaseModel(),
            Columns(),
            Created(0),
            EntityType(),
            LastResetTime(),
            LinkedLeaderboardNames(),
            Name(),
            Version(0),
            pfVersionConfiguration(nullptr)
            {}

        FStatisticDefinition(const FStatisticDefinition& src) = default;

        FStatisticDefinition(const TSharedPtr<FJsonObject>& obj) : FStatisticDefinition()
        {
            readFromValue(obj);
        }

        ~FStatisticDefinition();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetStatisticDefinitionsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] List of statistic definitions for the title.
        TArray<FStatisticDefinition> StatisticDefinitions;
        FGetStatisticDefinitionsResponse() :
            FPlayFabCppResultCommon(),
            StatisticDefinitions()
            {}

        FGetStatisticDefinitionsResponse(const FGetStatisticDefinitionsResponse& src) = default;

        FGetStatisticDefinitionsResponse(const TSharedPtr<FJsonObject>& obj) : FGetStatisticDefinitionsResponse()
        {
            readFromValue(obj);
        }

        ~FGetStatisticDefinitionsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetStatisticsForEntitiesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // Collection of Entity IDs to retrieve statistics for.
        TArray<FEntityKey> Entities;
        FGetStatisticsForEntitiesRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entities()
            {}

        FGetStatisticsForEntitiesRequest(const FGetStatisticsForEntitiesRequest& src) = default;

        FGetStatisticsForEntitiesRequest(const TSharedPtr<FJsonObject>& obj) : FGetStatisticsForEntitiesRequest()
        {
            readFromValue(obj);
        }

        ~FGetStatisticsForEntitiesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FStatisticColumnCollection : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Columns for the statistic defining the aggregation method for each column.
        TArray<FStatisticColumn> Columns;
        FStatisticColumnCollection() :
            FPlayFabCppBaseModel(),
            Columns()
            {}

        FStatisticColumnCollection(const FStatisticColumnCollection& src) = default;

        FStatisticColumnCollection(const TSharedPtr<FJsonObject>& obj) : FStatisticColumnCollection()
        {
            readFromValue(obj);
        }

        ~FStatisticColumnCollection();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetStatisticsForEntitiesResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] A mapping of statistic name to the columns defined in the corresponding definition.
        TMap<FString, FStatisticColumnCollection> ColumnDetails;
        // [optional] List of entities mapped to their statistics. Only the latest version of a statistic is returned.
        TArray<FEntityStatistics> EntitiesStatistics;
        FGetStatisticsForEntitiesResponse() :
            FPlayFabCppResultCommon(),
            ColumnDetails(),
            EntitiesStatistics()
            {}

        FGetStatisticsForEntitiesResponse(const FGetStatisticsForEntitiesResponse& src) = default;

        FGetStatisticsForEntitiesResponse(const TSharedPtr<FJsonObject>& obj) : FGetStatisticsForEntitiesResponse()
        {
            readFromValue(obj);
        }

        ~FGetStatisticsForEntitiesResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetStatisticsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        FGetStatisticsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FGetStatisticsRequest(const FGetStatisticsRequest& src) = default;

        FGetStatisticsRequest(const TSharedPtr<FJsonObject>& obj) : FGetStatisticsRequest()
        {
            readFromValue(obj);
        }

        ~FGetStatisticsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetStatisticsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] A mapping of statistic name to the columns defined in the corresponding definition.
        TMap<FString, FStatisticColumnCollection> ColumnDetails;
        // [optional] The entity id and type.
        TSharedPtr<FEntityKey> Entity;

        // [optional] List of statistics keyed by Name. Only the latest version of a statistic is returned.
        TMap<FString, FEntityStatisticValue> Statistics;
        FGetStatisticsResponse() :
            FPlayFabCppResultCommon(),
            ColumnDetails(),
            Entity(nullptr),
            Statistics()
            {}

        FGetStatisticsResponse(const FGetStatisticsResponse& src) = default;

        FGetStatisticsResponse(const TSharedPtr<FJsonObject>& obj) : FGetStatisticsResponse()
        {
            readFromValue(obj);
        }

        ~FGetStatisticsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FIncrementLeaderboardVersionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The name of the leaderboard to increment the version for.
        FString Name;

        FIncrementLeaderboardVersionRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Name()
            {}

        FIncrementLeaderboardVersionRequest(const FIncrementLeaderboardVersionRequest& src) = default;

        FIncrementLeaderboardVersionRequest(const TSharedPtr<FJsonObject>& obj) : FIncrementLeaderboardVersionRequest()
        {
            readFromValue(obj);
        }

        ~FIncrementLeaderboardVersionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FIncrementLeaderboardVersionResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // New Leaderboard version.
        uint32 Version;

        FIncrementLeaderboardVersionResponse() :
            FPlayFabCppResultCommon(),
            Version(0)
            {}

        FIncrementLeaderboardVersionResponse(const FIncrementLeaderboardVersionResponse& src) = default;

        FIncrementLeaderboardVersionResponse(const TSharedPtr<FJsonObject>& obj) : FIncrementLeaderboardVersionResponse()
        {
            readFromValue(obj);
        }

        ~FIncrementLeaderboardVersionResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FIncrementStatisticVersionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // Name of the statistic to increment the version of.
        FString Name;

        FIncrementStatisticVersionRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Name()
            {}

        FIncrementStatisticVersionRequest(const FIncrementStatisticVersionRequest& src) = default;

        FIncrementStatisticVersionRequest(const TSharedPtr<FJsonObject>& obj) : FIncrementStatisticVersionRequest()
        {
            readFromValue(obj);
        }

        ~FIncrementStatisticVersionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FIncrementStatisticVersionResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // New statistic version.
        uint32 Version;

        FIncrementStatisticVersionResponse() :
            FPlayFabCppResultCommon(),
            Version(0)
            {}

        FIncrementStatisticVersionResponse(const FIncrementStatisticVersionResponse& src) = default;

        FIncrementStatisticVersionResponse(const TSharedPtr<FJsonObject>& obj) : FIncrementStatisticVersionResponse()
        {
            readFromValue(obj);
        }

        ~FIncrementStatisticVersionResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FLeaderboardDefinition : public PlayFab::FPlayFabCppBaseModel
    {
        // Sort direction of the leaderboard columns, cannot be changed after creation.
        TArray<FLeaderboardColumn> Columns;
        // Created time, in UTC
        FDateTime Created;

        /**
         * The entity type being represented on the leaderboard. If it doesn't correspond to the PlayFab entity types, use
         * 'external' as the type.
         */
        FString EntityType;

        // [optional] Last time, in UTC, leaderboard version was incremented.
        Boxed<FDateTime> LastResetTime;

        // A name for the leaderboard, unique per title.
        FString Name;

        // Maximum number of entries on this leaderboard
        int32 SizeLimit;

        // Latest Leaderboard version.
        uint32 Version;

        // The version reset configuration for the leaderboard definition.
        FVersionConfiguration pfVersionConfiguration;

        FLeaderboardDefinition() :
            FPlayFabCppBaseModel(),
            Columns(),
            Created(0),
            EntityType(),
            LastResetTime(),
            Name(),
            SizeLimit(0),
            Version(0),
            pfVersionConfiguration()
            {}

        FLeaderboardDefinition(const FLeaderboardDefinition& src) = default;

        FLeaderboardDefinition(const TSharedPtr<FJsonObject>& obj) : FLeaderboardDefinition()
        {
            readFromValue(obj);
        }

        ~FLeaderboardDefinition();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FLeaderboardEntryUpdate : public PlayFab::FPlayFabCppBaseModel
    {
        // The unique Id for the entry. If using PlayFab Entities, this would be the entityId of the entity.
        FString EntityId;

        /**
         * [optional] Arbitrary metadata to store along side the leaderboard entry, will be returned by all Leaderboard APIs. Must be less
         * than 50 UTF8 encoded characters.
         */
        FString Metadata;

        /**
         * [optional] The scores for the leaderboard. The number of values provided here must match the number of columns in the Leaderboard
         * definition.
         */
        TArray<FString> Scores;
        FLeaderboardEntryUpdate() :
            FPlayFabCppBaseModel(),
            EntityId(),
            Metadata(),
            Scores()
            {}

        FLeaderboardEntryUpdate(const FLeaderboardEntryUpdate& src) = default;

        FLeaderboardEntryUpdate(const TSharedPtr<FJsonObject>& obj) : FLeaderboardEntryUpdate()
        {
            readFromValue(obj);
        }

        ~FLeaderboardEntryUpdate();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListLeaderboardDefinitionsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FListLeaderboardDefinitionsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FListLeaderboardDefinitionsRequest(const FListLeaderboardDefinitionsRequest& src) = default;

        FListLeaderboardDefinitionsRequest(const TSharedPtr<FJsonObject>& obj) : FListLeaderboardDefinitionsRequest()
        {
            readFromValue(obj);
        }

        ~FListLeaderboardDefinitionsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListLeaderboardDefinitionsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] List of leaderboard definitions for the title.
        TArray<FLeaderboardDefinition> LeaderboardDefinitions;
        FListLeaderboardDefinitionsResponse() :
            FPlayFabCppResultCommon(),
            LeaderboardDefinitions()
            {}

        FListLeaderboardDefinitionsResponse(const FListLeaderboardDefinitionsResponse& src) = default;

        FListLeaderboardDefinitionsResponse(const TSharedPtr<FJsonObject>& obj) : FListLeaderboardDefinitionsResponse()
        {
            readFromValue(obj);
        }

        ~FListLeaderboardDefinitionsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListStatisticDefinitionsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FListStatisticDefinitionsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FListStatisticDefinitionsRequest(const FListStatisticDefinitionsRequest& src) = default;

        FListStatisticDefinitionsRequest(const TSharedPtr<FJsonObject>& obj) : FListStatisticDefinitionsRequest()
        {
            readFromValue(obj);
        }

        ~FListStatisticDefinitionsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListStatisticDefinitionsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] List of statistic definitions for the title.
        TArray<FStatisticDefinition> StatisticDefinitions;
        FListStatisticDefinitionsResponse() :
            FPlayFabCppResultCommon(),
            CustomTags(),
            StatisticDefinitions()
            {}

        FListStatisticDefinitionsResponse(const FListStatisticDefinitionsResponse& src) = default;

        FListStatisticDefinitionsResponse(const TSharedPtr<FJsonObject>& obj) : FListStatisticDefinitionsResponse()
        {
            readFromValue(obj);
        }

        ~FListStatisticDefinitionsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FStatisticUpdate : public PlayFab::FPlayFabCppBaseModel
    {
        /**
         * [optional] Arbitrary metadata to store along side the statistic, will be returned by all Leaderboard APIs. Must be less than 50
         * UTF8 encoded characters.
         */
        FString Metadata;

        // Name of the statistic, as originally configured.
        FString Name;

        /**
         * [optional] Statistic scores for the entity. This will be used in accordance with the aggregation method configured for the
         * statistics.The maximum value allowed for each individual score is 9223372036854775807. The minimum value for each
         * individual score is -9223372036854775807The values are formatted as strings to avoid interop issues with client
         * libraries unable to handle 64bit integers.
         */
        TArray<FString> Scores;
        // [optional] Optional field to indicate the version of the statistic to set. When empty defaults to the statistic's current version.
        Boxed<uint32> Version;

        FStatisticUpdate() :
            FPlayFabCppBaseModel(),
            Metadata(),
            Name(),
            Scores(),
            Version()
            {}

        FStatisticUpdate(const FStatisticUpdate& src) = default;

        FStatisticUpdate(const TSharedPtr<FJsonObject>& obj) : FStatisticUpdate()
        {
            readFromValue(obj);
        }

        ~FStatisticUpdate();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUnlinkLeaderboardFromStatisticRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The name of the leaderboard definition to unlink.
        FString Name;

        // The name of the statistic definition to unlink.
        FString StatisticName;

        FUnlinkLeaderboardFromStatisticRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Name(),
            StatisticName()
            {}

        FUnlinkLeaderboardFromStatisticRequest(const FUnlinkLeaderboardFromStatisticRequest& src) = default;

        FUnlinkLeaderboardFromStatisticRequest(const TSharedPtr<FJsonObject>& obj) : FUnlinkLeaderboardFromStatisticRequest()
        {
            readFromValue(obj);
        }

        ~FUnlinkLeaderboardFromStatisticRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateLeaderboardEntriesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entries to add or update on the leaderboard.
        TArray<FLeaderboardEntryUpdate> Entries;
        // The name of the leaderboard.
        FString LeaderboardName;

        FUpdateLeaderboardEntriesRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entries(),
            LeaderboardName()
            {}

        FUpdateLeaderboardEntriesRequest(const FUpdateLeaderboardEntriesRequest& src) = default;

        FUpdateLeaderboardEntriesRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateLeaderboardEntriesRequest()
        {
            readFromValue(obj);
        }

        ~FUpdateLeaderboardEntriesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateStatisticsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The optional entity to perform this action on. Defaults to the currently logged in entity.
        TSharedPtr<FEntityKey> Entity;

        // Collection of statistics to update, maximum 50.
        TArray<FStatisticUpdate> Statistics;
        FUpdateStatisticsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr),
            Statistics()
            {}

        FUpdateStatisticsRequest(const FUpdateStatisticsRequest& src) = default;

        FUpdateStatisticsRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateStatisticsRequest()
        {
            readFromValue(obj);
        }

        ~FUpdateStatisticsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateStatisticsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] A mapping of statistic name to the columns defined in the corresponding definition.
        TMap<FString, FStatisticColumnCollection> ColumnDetails;
        // [optional] The entity id and type.
        TSharedPtr<FEntityKey> Entity;

        // [optional] Updated entity profile statistics.
        TMap<FString, FEntityStatisticValue> Statistics;
        FUpdateStatisticsResponse() :
            FPlayFabCppResultCommon(),
            ColumnDetails(),
            Entity(nullptr),
            Statistics()
            {}

        FUpdateStatisticsResponse(const FUpdateStatisticsResponse& src) = default;

        FUpdateStatisticsResponse(const TSharedPtr<FJsonObject>& obj) : FUpdateStatisticsResponse()
        {
            readFromValue(obj);
        }

        ~FUpdateStatisticsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

}
}
