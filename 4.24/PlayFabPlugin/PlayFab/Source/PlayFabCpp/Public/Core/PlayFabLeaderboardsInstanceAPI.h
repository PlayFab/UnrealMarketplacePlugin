//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "Core/PlayFabError.h"
#include "Core/PlayFabLeaderboardsDataModels.h"
#include "Core/PlayFabSettings.h"
#include "PlayFabAPISettings.h"
#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"

namespace PlayFab
{
    /**
     * Main interface for PlayFab Sdk, specifically all Leaderboards APIs
     */
    class PLAYFABCPP_API UPlayFabLeaderboardsInstanceAPI
    {
    public:
        DECLARE_DELEGATE_OneParam(FCreateLeaderboardDefinitionDelegate, const LeaderboardsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FCreateStatisticDefinitionDelegate, const LeaderboardsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteLeaderboardDefinitionDelegate, const LeaderboardsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteLeaderboardEntriesDelegate, const LeaderboardsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteStatisticDefinitionDelegate, const LeaderboardsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteStatisticsDelegate, const LeaderboardsModels::FDeleteStatisticsResponse&);
        DECLARE_DELEGATE_OneParam(FGetFriendLeaderboardForEntityDelegate, const LeaderboardsModels::FGetEntityLeaderboardResponse&);
        DECLARE_DELEGATE_OneParam(FGetLeaderboardDelegate, const LeaderboardsModels::FGetEntityLeaderboardResponse&);
        DECLARE_DELEGATE_OneParam(FGetLeaderboardAroundEntityDelegate, const LeaderboardsModels::FGetEntityLeaderboardResponse&);
        DECLARE_DELEGATE_OneParam(FGetLeaderboardDefinitionDelegate, const LeaderboardsModels::FGetLeaderboardDefinitionResponse&);
        DECLARE_DELEGATE_OneParam(FGetLeaderboardForEntitiesDelegate, const LeaderboardsModels::FGetEntityLeaderboardResponse&);
        DECLARE_DELEGATE_OneParam(FGetStatisticDefinitionDelegate, const LeaderboardsModels::FGetStatisticDefinitionResponse&);
        DECLARE_DELEGATE_OneParam(FGetStatisticDefinitionsDelegate, const LeaderboardsModels::FGetStatisticDefinitionsResponse&);
        DECLARE_DELEGATE_OneParam(FGetStatisticsDelegate, const LeaderboardsModels::FGetStatisticsResponse&);
        DECLARE_DELEGATE_OneParam(FGetStatisticsForEntitiesDelegate, const LeaderboardsModels::FGetStatisticsForEntitiesResponse&);
        DECLARE_DELEGATE_OneParam(FIncrementLeaderboardVersionDelegate, const LeaderboardsModels::FIncrementLeaderboardVersionResponse&);
        DECLARE_DELEGATE_OneParam(FIncrementStatisticVersionDelegate, const LeaderboardsModels::FIncrementStatisticVersionResponse&);
        DECLARE_DELEGATE_OneParam(FListLeaderboardDefinitionsDelegate, const LeaderboardsModels::FListLeaderboardDefinitionsResponse&);
        DECLARE_DELEGATE_OneParam(FListStatisticDefinitionsDelegate, const LeaderboardsModels::FListStatisticDefinitionsResponse&);
        DECLARE_DELEGATE_OneParam(FUnlinkLeaderboardFromStatisticDelegate, const LeaderboardsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FUpdateLeaderboardEntriesDelegate, const LeaderboardsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FUpdateStatisticsDelegate, const LeaderboardsModels::FUpdateStatisticsResponse&);


    private:
        TSharedPtr<UPlayFabAPISettings> settings;
        TSharedPtr<UPlayFabAuthenticationContext> authContext;
    
    public:
        UPlayFabLeaderboardsInstanceAPI();
        explicit UPlayFabLeaderboardsInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings);
        explicit UPlayFabLeaderboardsInstanceAPI(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        UPlayFabLeaderboardsInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings, TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        ~UPlayFabLeaderboardsInstanceAPI();
        UPlayFabLeaderboardsInstanceAPI(const UPlayFabLeaderboardsInstanceAPI& source) = delete; // disable copy
        UPlayFabLeaderboardsInstanceAPI(UPlayFabLeaderboardsInstanceAPI&&) = delete; // disable move
        UPlayFabLeaderboardsInstanceAPI& operator=(const UPlayFabLeaderboardsInstanceAPI& source) = delete; // disable assignment
        UPlayFabLeaderboardsInstanceAPI& operator=(UPlayFabLeaderboardsInstanceAPI&& other) = delete; // disable move assignment

        int GetPendingCalls() const;
        TSharedPtr<UPlayFabAPISettings> GetSettings() const;
        void SetSettings(TSharedPtr<UPlayFabAPISettings> apiSettings);
        TSharedPtr<UPlayFabAuthenticationContext> GetAuthenticationContext() const;
        void SetAuthenticationContext(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        void ForgetAllCredentials();

    private:
        TSharedPtr<UPlayFabAuthenticationContext> GetOrCreateAuthenticationContext();
    
    public:


        // ------------ Generated API calls
        // Creates a new leaderboard definition.
        bool CreateLeaderboardDefinition(LeaderboardsModels::FCreateLeaderboardDefinitionRequest& request, const FCreateLeaderboardDefinitionDelegate& SuccessDelegate = FCreateLeaderboardDefinitionDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Create a new entity statistic definition.
        bool CreateStatisticDefinition(LeaderboardsModels::FCreateStatisticDefinitionRequest& request, const FCreateStatisticDefinitionDelegate& SuccessDelegate = FCreateStatisticDefinitionDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Deletes a leaderboard definition.
        bool DeleteLeaderboardDefinition(LeaderboardsModels::FDeleteLeaderboardDefinitionRequest& request, const FDeleteLeaderboardDefinitionDelegate& SuccessDelegate = FDeleteLeaderboardDefinitionDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Deletes the specified entries from the given leaderboard.
        bool DeleteLeaderboardEntries(LeaderboardsModels::FDeleteLeaderboardEntriesRequest& request, const FDeleteLeaderboardEntriesDelegate& SuccessDelegate = FDeleteLeaderboardEntriesDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Delete an entity statistic definition. Will delete all statistics on entity profiles and leaderboards.
        bool DeleteStatisticDefinition(LeaderboardsModels::FDeleteStatisticDefinitionRequest& request, const FDeleteStatisticDefinitionDelegate& SuccessDelegate = FDeleteStatisticDefinitionDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Delete statistics on an entity profile. This will remove all rankings from associated leaderboards.
        bool DeleteStatistics(LeaderboardsModels::FDeleteStatisticsRequest& request, const FDeleteStatisticsDelegate& SuccessDelegate = FDeleteStatisticsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Get the friend leaderboard for the specified entity. A maximum of 100 friend entries are listed in the leaderboard.
        bool GetFriendLeaderboardForEntity(LeaderboardsModels::FGetFriendLeaderboardForEntityRequest& request, const FGetFriendLeaderboardForEntityDelegate& SuccessDelegate = FGetFriendLeaderboardForEntityDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Get the leaderboard for a specific entity type and statistic.
        bool GetLeaderboard(LeaderboardsModels::FGetEntityLeaderboardRequest& request, const FGetLeaderboardDelegate& SuccessDelegate = FGetLeaderboardDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Get the leaderboard around a specific entity.
        bool GetLeaderboardAroundEntity(LeaderboardsModels::FGetLeaderboardAroundEntityRequest& request, const FGetLeaderboardAroundEntityDelegate& SuccessDelegate = FGetLeaderboardAroundEntityDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets the specified leaderboard definition.
        bool GetLeaderboardDefinition(LeaderboardsModels::FGetLeaderboardDefinitionRequest& request, const FGetLeaderboardDefinitionDelegate& SuccessDelegate = FGetLeaderboardDefinitionDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Get the leaderboard limited to a set of entities.
        bool GetLeaderboardForEntities(LeaderboardsModels::FGetLeaderboardForEntitiesRequest& request, const FGetLeaderboardForEntitiesDelegate& SuccessDelegate = FGetLeaderboardForEntitiesDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Get current statistic definition information
        bool GetStatisticDefinition(LeaderboardsModels::FGetStatisticDefinitionRequest& request, const FGetStatisticDefinitionDelegate& SuccessDelegate = FGetStatisticDefinitionDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Get all current statistic definitions information
        bool GetStatisticDefinitions(LeaderboardsModels::FGetStatisticDefinitionsRequest& request, const FGetStatisticDefinitionsDelegate& SuccessDelegate = FGetStatisticDefinitionsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets statistics for the specified entity.
        bool GetStatistics(LeaderboardsModels::FGetStatisticsRequest& request, const FGetStatisticsDelegate& SuccessDelegate = FGetStatisticsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets statistics for the specified collection of entities.
        bool GetStatisticsForEntities(LeaderboardsModels::FGetStatisticsForEntitiesRequest& request, const FGetStatisticsForEntitiesDelegate& SuccessDelegate = FGetStatisticsForEntitiesDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Increment a leaderboard version.
        bool IncrementLeaderboardVersion(LeaderboardsModels::FIncrementLeaderboardVersionRequest& request, const FIncrementLeaderboardVersionDelegate& SuccessDelegate = FIncrementLeaderboardVersionDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Increment an entity statistic definition version.
        bool IncrementStatisticVersion(LeaderboardsModels::FIncrementStatisticVersionRequest& request, const FIncrementStatisticVersionDelegate& SuccessDelegate = FIncrementStatisticVersionDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Lists the leaderboard definitions defined for the Title.
        bool ListLeaderboardDefinitions(LeaderboardsModels::FListLeaderboardDefinitionsRequest& request, const FListLeaderboardDefinitionsDelegate& SuccessDelegate = FListLeaderboardDefinitionsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Get all current statistic definitions information
        bool ListStatisticDefinitions(LeaderboardsModels::FListStatisticDefinitionsRequest& request, const FListStatisticDefinitionsDelegate& SuccessDelegate = FListStatisticDefinitionsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Unlinks a leaderboard definition from it's linked statistic definition.
        bool UnlinkLeaderboardFromStatistic(LeaderboardsModels::FUnlinkLeaderboardFromStatisticRequest& request, const FUnlinkLeaderboardFromStatisticDelegate& SuccessDelegate = FUnlinkLeaderboardFromStatisticDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Adds or updates entries on the specified leaderboard.
        bool UpdateLeaderboardEntries(LeaderboardsModels::FUpdateLeaderboardEntriesRequest& request, const FUpdateLeaderboardEntriesDelegate& SuccessDelegate = FUpdateLeaderboardEntriesDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Update statistics on an entity profile. Depending on the statistic definition, this may result in entity being ranked on
         * various leaderboards.
         */
        bool UpdateStatistics(LeaderboardsModels::FUpdateStatisticsRequest& request, const FUpdateStatisticsDelegate& SuccessDelegate = FUpdateStatisticsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());

    private:
        // ------------ Generated result handlers
        void OnCreateLeaderboardDefinitionResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateLeaderboardDefinitionDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnCreateStatisticDefinitionResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateStatisticDefinitionDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteLeaderboardDefinitionResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteLeaderboardDefinitionDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteLeaderboardEntriesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteLeaderboardEntriesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteStatisticDefinitionResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteStatisticDefinitionDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteStatisticsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteStatisticsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetFriendLeaderboardForEntityResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFriendLeaderboardForEntityDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetLeaderboardResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLeaderboardDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetLeaderboardAroundEntityResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLeaderboardAroundEntityDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetLeaderboardDefinitionResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLeaderboardDefinitionDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetLeaderboardForEntitiesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLeaderboardForEntitiesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetStatisticDefinitionResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetStatisticDefinitionDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetStatisticDefinitionsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetStatisticDefinitionsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetStatisticsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetStatisticsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetStatisticsForEntitiesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetStatisticsForEntitiesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnIncrementLeaderboardVersionResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIncrementLeaderboardVersionDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnIncrementStatisticVersionResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIncrementStatisticVersionDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnListLeaderboardDefinitionsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListLeaderboardDefinitionsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnListStatisticDefinitionsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListStatisticDefinitionsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnUnlinkLeaderboardFromStatisticResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkLeaderboardFromStatisticDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnUpdateLeaderboardEntriesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateLeaderboardEntriesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnUpdateStatisticsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateStatisticsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);

    };
};
