//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "Core/PlayFabExperimentationDataModels.h"
#include "Core/PlayFabJsonHelpers.h"

using namespace PlayFab;
using namespace PlayFab::ExperimentationModels;

void PlayFab::ExperimentationModels::writeAnalysisTaskStateEnumJSON(AnalysisTaskState enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case AnalysisTaskStateWaiting: writer->WriteValue(TEXT("Waiting")); break;
    case AnalysisTaskStateReadyForSubmission: writer->WriteValue(TEXT("ReadyForSubmission")); break;
    case AnalysisTaskStateSubmittingToPipeline: writer->WriteValue(TEXT("SubmittingToPipeline")); break;
    case AnalysisTaskStateRunning: writer->WriteValue(TEXT("Running")); break;
    case AnalysisTaskStateCompleted: writer->WriteValue(TEXT("Completed")); break;
    case AnalysisTaskStateFailed: writer->WriteValue(TEXT("Failed")); break;
    case AnalysisTaskStateCanceled: writer->WriteValue(TEXT("Canceled")); break;
    }
}

ExperimentationModels::AnalysisTaskState PlayFab::ExperimentationModels::readAnalysisTaskStateFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readAnalysisTaskStateFromValue(value.IsValid() ? value->AsString() : "");
}

ExperimentationModels::AnalysisTaskState PlayFab::ExperimentationModels::readAnalysisTaskStateFromValue(const FString& value)
{
    static TMap<FString, AnalysisTaskState> _AnalysisTaskStateMap;
    if (_AnalysisTaskStateMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _AnalysisTaskStateMap.Add(TEXT("Waiting"), AnalysisTaskStateWaiting);
        _AnalysisTaskStateMap.Add(TEXT("ReadyForSubmission"), AnalysisTaskStateReadyForSubmission);
        _AnalysisTaskStateMap.Add(TEXT("SubmittingToPipeline"), AnalysisTaskStateSubmittingToPipeline);
        _AnalysisTaskStateMap.Add(TEXT("Running"), AnalysisTaskStateRunning);
        _AnalysisTaskStateMap.Add(TEXT("Completed"), AnalysisTaskStateCompleted);
        _AnalysisTaskStateMap.Add(TEXT("Failed"), AnalysisTaskStateFailed);
        _AnalysisTaskStateMap.Add(TEXT("Canceled"), AnalysisTaskStateCanceled);

    }

    if (!value.IsEmpty())
    {
        auto output = _AnalysisTaskStateMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return AnalysisTaskStateWaiting; // Basically critical fail
}

PlayFab::ExperimentationModels::FCreateExclusionGroupRequest::~FCreateExclusionGroupRequest()
{

}

void PlayFab::ExperimentationModels::FCreateExclusionGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateExclusionGroupRequest::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FCreateExclusionGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FCreateExclusionGroupResult::~FCreateExclusionGroupResult()
{

}

void PlayFab::ExperimentationModels::FCreateExclusionGroupResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ExclusionGroupId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ExclusionGroupId"));
        writer->WriteValue(ExclusionGroupId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FCreateExclusionGroupResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ExclusionGroupIdValue = obj->TryGetField(TEXT("ExclusionGroupId"));
    if (ExclusionGroupIdValue.IsValid() && !ExclusionGroupIdValue->IsNull())
    {
        FString TmpValue;
        if (ExclusionGroupIdValue->TryGetString(TmpValue)) { ExclusionGroupId = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::ExperimentationModels::writeExperimentTypeEnumJSON(ExperimentType enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case ExperimentTypeActive: writer->WriteValue(TEXT("Active")); break;
    case ExperimentTypeSnapshot: writer->WriteValue(TEXT("Snapshot")); break;
    }
}

ExperimentationModels::ExperimentType PlayFab::ExperimentationModels::readExperimentTypeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readExperimentTypeFromValue(value.IsValid() ? value->AsString() : "");
}

ExperimentationModels::ExperimentType PlayFab::ExperimentationModels::readExperimentTypeFromValue(const FString& value)
{
    static TMap<FString, ExperimentType> _ExperimentTypeMap;
    if (_ExperimentTypeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _ExperimentTypeMap.Add(TEXT("Active"), ExperimentTypeActive);
        _ExperimentTypeMap.Add(TEXT("Snapshot"), ExperimentTypeSnapshot);

    }

    if (!value.IsEmpty())
    {
        auto output = _ExperimentTypeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return ExperimentTypeActive; // Basically critical fail
}

PlayFab::ExperimentationModels::FVariable::~FVariable()
{

}

void PlayFab::ExperimentationModels::FVariable::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: Variable::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (Value.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Value"));
        writer->WriteValue(Value);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FVariable::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        FString TmpValue;
        if (ValueValue->TryGetString(TmpValue)) { Value = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FVariant::~FVariant()
{

}

void PlayFab::ExperimentationModels::FVariant::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteIdentifierPrefix(TEXT("IsControl"));
    writer->WriteValue(IsControl);

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: Variant::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (TitleDataOverrideLabel.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitleDataOverrideLabel"));
        writer->WriteValue(TitleDataOverrideLabel);
    }

    writer->WriteIdentifierPrefix(TEXT("TrafficPercentage"));
    writer->WriteValue(static_cast<int64>(TrafficPercentage));

    if (Variables.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Variables"));
        for (const FVariable& item : Variables)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FVariant::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IsControlValue = obj->TryGetField(TEXT("IsControl"));
    if (IsControlValue.IsValid() && !IsControlValue->IsNull())
    {
        bool TmpValue;
        if (IsControlValue->TryGetBool(TmpValue)) { IsControl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TitleDataOverrideLabelValue = obj->TryGetField(TEXT("TitleDataOverrideLabel"));
    if (TitleDataOverrideLabelValue.IsValid() && !TitleDataOverrideLabelValue->IsNull())
    {
        FString TmpValue;
        if (TitleDataOverrideLabelValue->TryGetString(TmpValue)) { TitleDataOverrideLabel = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TrafficPercentageValue = obj->TryGetField(TEXT("TrafficPercentage"));
    if (TrafficPercentageValue.IsValid() && !TrafficPercentageValue->IsNull())
    {
        uint32 TmpValue;
        if (TrafficPercentageValue->TryGetNumber(TmpValue)) { TrafficPercentage = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&VariablesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Variables"));
    for (int32 Idx = 0; Idx < VariablesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = VariablesArray[Idx];
        Variables.Add(FVariable(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ExperimentationModels::FCreateExperimentRequest::~FCreateExperimentRequest()
{

}

void PlayFab::ExperimentationModels::FCreateExperimentRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    if (Duration.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Duration"));
        writer->WriteValue(static_cast<int64>(Duration));
    }

    if (EndDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("EndDate"));
        writeDatetime(EndDate, writer);
    }

    if (ExclusionGroupId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ExclusionGroupId"));
        writer->WriteValue(ExclusionGroupId);
    }

    if (ExclusionGroupTrafficAllocation.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ExclusionGroupTrafficAllocation"));
        writer->WriteValue(static_cast<int64>(ExclusionGroupTrafficAllocation));
    }

    if (pfExperimentType.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ExperimentType"));
        writeExperimentTypeEnumJSON(pfExperimentType, writer);
    }

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateExperimentRequest::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (SegmentId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SegmentId"));
        writer->WriteValue(SegmentId);
    }

    writer->WriteIdentifierPrefix(TEXT("StartDate"));
    writeDatetime(StartDate, writer);

    if (TitlePlayerAccountTestIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TitlePlayerAccountTestIds"));
        for (const FString& item : TitlePlayerAccountTestIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteArrayStart(TEXT("Variants"));
    for (const FVariant& item : Variants)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FCreateExperimentRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DurationValue = obj->TryGetField(TEXT("Duration"));
    if (DurationValue.IsValid() && !DurationValue->IsNull())
    {
        uint32 TmpValue;
        if (DurationValue->TryGetNumber(TmpValue)) { Duration = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EndDateValue = obj->TryGetField(TEXT("EndDate"));
    if (EndDateValue.IsValid())
        EndDate = readDatetime(EndDateValue);


    const TSharedPtr<FJsonValue> ExclusionGroupIdValue = obj->TryGetField(TEXT("ExclusionGroupId"));
    if (ExclusionGroupIdValue.IsValid() && !ExclusionGroupIdValue->IsNull())
    {
        FString TmpValue;
        if (ExclusionGroupIdValue->TryGetString(TmpValue)) { ExclusionGroupId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExclusionGroupTrafficAllocationValue = obj->TryGetField(TEXT("ExclusionGroupTrafficAllocation"));
    if (ExclusionGroupTrafficAllocationValue.IsValid() && !ExclusionGroupTrafficAllocationValue->IsNull())
    {
        uint32 TmpValue;
        if (ExclusionGroupTrafficAllocationValue->TryGetNumber(TmpValue)) { ExclusionGroupTrafficAllocation = TmpValue; }
    }

    pfExperimentType = readExperimentTypeFromValue(obj->TryGetField(TEXT("ExperimentType")));

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SegmentIdValue = obj->TryGetField(TEXT("SegmentId"));
    if (SegmentIdValue.IsValid() && !SegmentIdValue->IsNull())
    {
        FString TmpValue;
        if (SegmentIdValue->TryGetString(TmpValue)) { SegmentId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StartDateValue = obj->TryGetField(TEXT("StartDate"));
    if (StartDateValue.IsValid())
        StartDate = readDatetime(StartDateValue);


    obj->TryGetStringArrayField(TEXT("TitlePlayerAccountTestIds"), TitlePlayerAccountTestIds);

    const TArray<TSharedPtr<FJsonValue>>&VariantsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Variants"));
    for (int32 Idx = 0; Idx < VariantsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = VariantsArray[Idx];
        Variants.Add(FVariant(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ExperimentationModels::FCreateExperimentResult::~FCreateExperimentResult()
{

}

void PlayFab::ExperimentationModels::FCreateExperimentResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ExperimentId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ExperimentId"));
        writer->WriteValue(ExperimentId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FCreateExperimentResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ExperimentIdValue = obj->TryGetField(TEXT("ExperimentId"));
    if (ExperimentIdValue.IsValid() && !ExperimentIdValue->IsNull())
    {
        FString TmpValue;
        if (ExperimentIdValue->TryGetString(TmpValue)) { ExperimentId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FDeleteExclusionGroupRequest::~FDeleteExclusionGroupRequest()
{

}

void PlayFab::ExperimentationModels::FDeleteExclusionGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!ExclusionGroupId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeleteExclusionGroupRequest::ExclusionGroupId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ExclusionGroupId"));
        writer->WriteValue(ExclusionGroupId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FDeleteExclusionGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ExclusionGroupIdValue = obj->TryGetField(TEXT("ExclusionGroupId"));
    if (ExclusionGroupIdValue.IsValid() && !ExclusionGroupIdValue->IsNull())
    {
        FString TmpValue;
        if (ExclusionGroupIdValue->TryGetString(TmpValue)) { ExclusionGroupId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FDeleteExperimentRequest::~FDeleteExperimentRequest()
{

}

void PlayFab::ExperimentationModels::FDeleteExperimentRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!ExperimentId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeleteExperimentRequest::ExperimentId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ExperimentId"));
        writer->WriteValue(ExperimentId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FDeleteExperimentRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ExperimentIdValue = obj->TryGetField(TEXT("ExperimentId"));
    if (ExperimentIdValue.IsValid() && !ExperimentIdValue->IsNull())
    {
        FString TmpValue;
        if (ExperimentIdValue->TryGetString(TmpValue)) { ExperimentId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FEmptyResponse::~FEmptyResponse()
{

}

void PlayFab::ExperimentationModels::FEmptyResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FEmptyResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FEntityKey::~FEntityKey()
{

}

void PlayFab::ExperimentationModels::FEntityKey::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Id.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EntityKey::Id, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FEntityKey::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FExclusionGroupTrafficAllocation::~FExclusionGroupTrafficAllocation()
{

}

void PlayFab::ExperimentationModels::FExclusionGroupTrafficAllocation::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ExperimentId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ExperimentId"));
        writer->WriteValue(ExperimentId);
    }

    writer->WriteIdentifierPrefix(TEXT("TrafficAllocation"));
    writer->WriteValue(static_cast<int64>(TrafficAllocation));

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FExclusionGroupTrafficAllocation::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ExperimentIdValue = obj->TryGetField(TEXT("ExperimentId"));
    if (ExperimentIdValue.IsValid() && !ExperimentIdValue->IsNull())
    {
        FString TmpValue;
        if (ExperimentIdValue->TryGetString(TmpValue)) { ExperimentId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TrafficAllocationValue = obj->TryGetField(TEXT("TrafficAllocation"));
    if (TrafficAllocationValue.IsValid() && !TrafficAllocationValue->IsNull())
    {
        uint32 TmpValue;
        if (TrafficAllocationValue->TryGetNumber(TmpValue)) { TrafficAllocation = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::ExperimentationModels::writeExperimentStateEnumJSON(ExperimentState enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case ExperimentStateNew: writer->WriteValue(TEXT("New")); break;
    case ExperimentStateStarted: writer->WriteValue(TEXT("Started")); break;
    case ExperimentStateStopped: writer->WriteValue(TEXT("Stopped")); break;
    case ExperimentStateDeleted: writer->WriteValue(TEXT("Deleted")); break;
    }
}

ExperimentationModels::ExperimentState PlayFab::ExperimentationModels::readExperimentStateFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readExperimentStateFromValue(value.IsValid() ? value->AsString() : "");
}

ExperimentationModels::ExperimentState PlayFab::ExperimentationModels::readExperimentStateFromValue(const FString& value)
{
    static TMap<FString, ExperimentState> _ExperimentStateMap;
    if (_ExperimentStateMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _ExperimentStateMap.Add(TEXT("New"), ExperimentStateNew);
        _ExperimentStateMap.Add(TEXT("Started"), ExperimentStateStarted);
        _ExperimentStateMap.Add(TEXT("Stopped"), ExperimentStateStopped);
        _ExperimentStateMap.Add(TEXT("Deleted"), ExperimentStateDeleted);

    }

    if (!value.IsEmpty())
    {
        auto output = _ExperimentStateMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return ExperimentStateNew; // Basically critical fail
}

PlayFab::ExperimentationModels::FExperiment::~FExperiment()
{

}

void PlayFab::ExperimentationModels::FExperiment::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    if (Duration.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Duration"));
        writer->WriteValue(static_cast<int64>(Duration));
    }

    if (EndDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("EndDate"));
        writeDatetime(EndDate, writer);
    }

    if (ExclusionGroupId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ExclusionGroupId"));
        writer->WriteValue(ExclusionGroupId);
    }

    if (ExclusionGroupTrafficAllocation.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ExclusionGroupTrafficAllocation"));
        writer->WriteValue(static_cast<int64>(ExclusionGroupTrafficAllocation));
    }

    if (pfExperimentType.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ExperimentType"));
        writeExperimentTypeEnumJSON(pfExperimentType, writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (SegmentId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SegmentId"));
        writer->WriteValue(SegmentId);
    }

    writer->WriteIdentifierPrefix(TEXT("StartDate"));
    writeDatetime(StartDate, writer);

    if (State.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("State"));
        writeExperimentStateEnumJSON(State, writer);
    }

    if (TitlePlayerAccountTestIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TitlePlayerAccountTestIds"));
        for (const FString& item : TitlePlayerAccountTestIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Variants.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Variants"));
        for (const FVariant& item : Variants)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FExperiment::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DurationValue = obj->TryGetField(TEXT("Duration"));
    if (DurationValue.IsValid() && !DurationValue->IsNull())
    {
        uint32 TmpValue;
        if (DurationValue->TryGetNumber(TmpValue)) { Duration = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EndDateValue = obj->TryGetField(TEXT("EndDate"));
    if (EndDateValue.IsValid())
        EndDate = readDatetime(EndDateValue);


    const TSharedPtr<FJsonValue> ExclusionGroupIdValue = obj->TryGetField(TEXT("ExclusionGroupId"));
    if (ExclusionGroupIdValue.IsValid() && !ExclusionGroupIdValue->IsNull())
    {
        FString TmpValue;
        if (ExclusionGroupIdValue->TryGetString(TmpValue)) { ExclusionGroupId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExclusionGroupTrafficAllocationValue = obj->TryGetField(TEXT("ExclusionGroupTrafficAllocation"));
    if (ExclusionGroupTrafficAllocationValue.IsValid() && !ExclusionGroupTrafficAllocationValue->IsNull())
    {
        uint32 TmpValue;
        if (ExclusionGroupTrafficAllocationValue->TryGetNumber(TmpValue)) { ExclusionGroupTrafficAllocation = TmpValue; }
    }

    pfExperimentType = readExperimentTypeFromValue(obj->TryGetField(TEXT("ExperimentType")));

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SegmentIdValue = obj->TryGetField(TEXT("SegmentId"));
    if (SegmentIdValue.IsValid() && !SegmentIdValue->IsNull())
    {
        FString TmpValue;
        if (SegmentIdValue->TryGetString(TmpValue)) { SegmentId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StartDateValue = obj->TryGetField(TEXT("StartDate"));
    if (StartDateValue.IsValid())
        StartDate = readDatetime(StartDateValue);


    State = readExperimentStateFromValue(obj->TryGetField(TEXT("State")));

    obj->TryGetStringArrayField(TEXT("TitlePlayerAccountTestIds"), TitlePlayerAccountTestIds);

    const TArray<TSharedPtr<FJsonValue>>&VariantsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Variants"));
    for (int32 Idx = 0; Idx < VariantsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = VariantsArray[Idx];
        Variants.Add(FVariant(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ExperimentationModels::FExperimentExclusionGroup::~FExperimentExclusionGroup()
{

}

void PlayFab::ExperimentationModels::FExperimentExclusionGroup::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    if (ExclusionGroupId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ExclusionGroupId"));
        writer->WriteValue(ExclusionGroupId);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FExperimentExclusionGroup::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExclusionGroupIdValue = obj->TryGetField(TEXT("ExclusionGroupId"));
    if (ExclusionGroupIdValue.IsValid() && !ExclusionGroupIdValue->IsNull())
    {
        FString TmpValue;
        if (ExclusionGroupIdValue->TryGetString(TmpValue)) { ExclusionGroupId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FGetExclusionGroupsRequest::~FGetExclusionGroupsRequest()
{

}

void PlayFab::ExperimentationModels::FGetExclusionGroupsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FGetExclusionGroupsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FGetExclusionGroupsResult::~FGetExclusionGroupsResult()
{

}

void PlayFab::ExperimentationModels::FGetExclusionGroupsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ExclusionGroups.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ExclusionGroups"));
        for (const FExperimentExclusionGroup& item : ExclusionGroups)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FGetExclusionGroupsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ExclusionGroupsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ExclusionGroups"));
    for (int32 Idx = 0; Idx < ExclusionGroupsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ExclusionGroupsArray[Idx];
        ExclusionGroups.Add(FExperimentExclusionGroup(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ExperimentationModels::FGetExclusionGroupTrafficRequest::~FGetExclusionGroupTrafficRequest()
{

}

void PlayFab::ExperimentationModels::FGetExclusionGroupTrafficRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!ExclusionGroupId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetExclusionGroupTrafficRequest::ExclusionGroupId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ExclusionGroupId"));
        writer->WriteValue(ExclusionGroupId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FGetExclusionGroupTrafficRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ExclusionGroupIdValue = obj->TryGetField(TEXT("ExclusionGroupId"));
    if (ExclusionGroupIdValue.IsValid() && !ExclusionGroupIdValue->IsNull())
    {
        FString TmpValue;
        if (ExclusionGroupIdValue->TryGetString(TmpValue)) { ExclusionGroupId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FGetExclusionGroupTrafficResult::~FGetExclusionGroupTrafficResult()
{

}

void PlayFab::ExperimentationModels::FGetExclusionGroupTrafficResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (TrafficAllocations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TrafficAllocations"));
        for (const FExclusionGroupTrafficAllocation& item : TrafficAllocations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FGetExclusionGroupTrafficResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&TrafficAllocationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("TrafficAllocations"));
    for (int32 Idx = 0; Idx < TrafficAllocationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = TrafficAllocationsArray[Idx];
        TrafficAllocations.Add(FExclusionGroupTrafficAllocation(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ExperimentationModels::FGetExperimentsRequest::~FGetExperimentsRequest()
{

}

void PlayFab::ExperimentationModels::FGetExperimentsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FGetExperimentsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FGetExperimentsResult::~FGetExperimentsResult()
{

}

void PlayFab::ExperimentationModels::FGetExperimentsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Experiments.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Experiments"));
        for (const FExperiment& item : Experiments)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FGetExperimentsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ExperimentsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Experiments"));
    for (int32 Idx = 0; Idx < ExperimentsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ExperimentsArray[Idx];
        Experiments.Add(FExperiment(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ExperimentationModels::FGetLatestScorecardRequest::~FGetLatestScorecardRequest()
{

}

void PlayFab::ExperimentationModels::FGetLatestScorecardRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (ExperimentId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ExperimentId"));
        writer->WriteValue(ExperimentId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FGetLatestScorecardRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ExperimentIdValue = obj->TryGetField(TEXT("ExperimentId"));
    if (ExperimentIdValue.IsValid() && !ExperimentIdValue->IsNull())
    {
        FString TmpValue;
        if (ExperimentIdValue->TryGetString(TmpValue)) { ExperimentId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FMetricData::~FMetricData()
{

}

void PlayFab::ExperimentationModels::FMetricData::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("ConfidenceIntervalEnd"));
    writer->WriteValue(ConfidenceIntervalEnd);

    writer->WriteIdentifierPrefix(TEXT("ConfidenceIntervalStart"));
    writer->WriteValue(ConfidenceIntervalStart);

    writer->WriteIdentifierPrefix(TEXT("DeltaAbsoluteChange"));
    writer->WriteValue(DeltaAbsoluteChange);

    writer->WriteIdentifierPrefix(TEXT("DeltaRelativeChange"));
    writer->WriteValue(DeltaRelativeChange);

    if (InternalName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("InternalName"));
        writer->WriteValue(InternalName);
    }

    if (Movement.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Movement"));
        writer->WriteValue(Movement);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteIdentifierPrefix(TEXT("PMove"));
    writer->WriteValue(PMove);

    writer->WriteIdentifierPrefix(TEXT("PValue"));
    writer->WriteValue(PValue);

    writer->WriteIdentifierPrefix(TEXT("PValueThreshold"));
    writer->WriteValue(PValueThreshold);

    if (StatSigLevel.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StatSigLevel"));
        writer->WriteValue(StatSigLevel);
    }

    writer->WriteIdentifierPrefix(TEXT("StdDev"));
    writer->WriteValue(StdDev);

    writer->WriteIdentifierPrefix(TEXT("Value"));
    writer->WriteValue(Value);

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FMetricData::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ConfidenceIntervalEndValue = obj->TryGetField(TEXT("ConfidenceIntervalEnd"));
    if (ConfidenceIntervalEndValue.IsValid() && !ConfidenceIntervalEndValue->IsNull())
    {
        double TmpValue;
        if (ConfidenceIntervalEndValue->TryGetNumber(TmpValue)) { ConfidenceIntervalEnd = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ConfidenceIntervalStartValue = obj->TryGetField(TEXT("ConfidenceIntervalStart"));
    if (ConfidenceIntervalStartValue.IsValid() && !ConfidenceIntervalStartValue->IsNull())
    {
        double TmpValue;
        if (ConfidenceIntervalStartValue->TryGetNumber(TmpValue)) { ConfidenceIntervalStart = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DeltaAbsoluteChangeValue = obj->TryGetField(TEXT("DeltaAbsoluteChange"));
    if (DeltaAbsoluteChangeValue.IsValid() && !DeltaAbsoluteChangeValue->IsNull())
    {
        double TmpValue;
        if (DeltaAbsoluteChangeValue->TryGetNumber(TmpValue)) { DeltaAbsoluteChange = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DeltaRelativeChangeValue = obj->TryGetField(TEXT("DeltaRelativeChange"));
    if (DeltaRelativeChangeValue.IsValid() && !DeltaRelativeChangeValue->IsNull())
    {
        double TmpValue;
        if (DeltaRelativeChangeValue->TryGetNumber(TmpValue)) { DeltaRelativeChange = TmpValue; }
    }

    const TSharedPtr<FJsonValue> InternalNameValue = obj->TryGetField(TEXT("InternalName"));
    if (InternalNameValue.IsValid() && !InternalNameValue->IsNull())
    {
        FString TmpValue;
        if (InternalNameValue->TryGetString(TmpValue)) { InternalName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MovementValue = obj->TryGetField(TEXT("Movement"));
    if (MovementValue.IsValid() && !MovementValue->IsNull())
    {
        FString TmpValue;
        if (MovementValue->TryGetString(TmpValue)) { Movement = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PMoveValue = obj->TryGetField(TEXT("PMove"));
    if (PMoveValue.IsValid() && !PMoveValue->IsNull())
    {
        double TmpValue;
        if (PMoveValue->TryGetNumber(TmpValue)) { PMove = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PValueValue = obj->TryGetField(TEXT("PValue"));
    if (PValueValue.IsValid() && !PValueValue->IsNull())
    {
        double TmpValue;
        if (PValueValue->TryGetNumber(TmpValue)) { PValue = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PValueThresholdValue = obj->TryGetField(TEXT("PValueThreshold"));
    if (PValueThresholdValue.IsValid() && !PValueThresholdValue->IsNull())
    {
        double TmpValue;
        if (PValueThresholdValue->TryGetNumber(TmpValue)) { PValueThreshold = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StatSigLevelValue = obj->TryGetField(TEXT("StatSigLevel"));
    if (StatSigLevelValue.IsValid() && !StatSigLevelValue->IsNull())
    {
        FString TmpValue;
        if (StatSigLevelValue->TryGetString(TmpValue)) { StatSigLevel = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StdDevValue = obj->TryGetField(TEXT("StdDev"));
    if (StdDevValue.IsValid() && !StdDevValue->IsNull())
    {
        double TmpValue;
        if (StdDevValue->TryGetNumber(TmpValue)) { StdDev = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        double TmpValue;
        if (ValueValue->TryGetNumber(TmpValue)) { Value = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FScorecardDataRow::~FScorecardDataRow()
{

}

void PlayFab::ExperimentationModels::FScorecardDataRow::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("IsControl"));
    writer->WriteValue(IsControl);

    if (MetricDataRows.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("MetricDataRows"));
        for (TMap<FString, FMetricData>::TConstIterator It(MetricDataRows); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("PlayerCount"));
    writer->WriteValue(static_cast<int64>(PlayerCount));

    if (VariantName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("VariantName"));
        writer->WriteValue(VariantName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FScorecardDataRow::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IsControlValue = obj->TryGetField(TEXT("IsControl"));
    if (IsControlValue.IsValid() && !IsControlValue->IsNull())
    {
        bool TmpValue;
        if (IsControlValue->TryGetBool(TmpValue)) { IsControl = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* MetricDataRowsObject;
    if (obj->TryGetObjectField(TEXT("MetricDataRows"), MetricDataRowsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*MetricDataRowsObject)->Values); It; ++It)
        {
            MetricDataRows.Add(It.Key(), FMetricData(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> PlayerCountValue = obj->TryGetField(TEXT("PlayerCount"));
    if (PlayerCountValue.IsValid() && !PlayerCountValue->IsNull())
    {
        uint32 TmpValue;
        if (PlayerCountValue->TryGetNumber(TmpValue)) { PlayerCount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VariantNameValue = obj->TryGetField(TEXT("VariantName"));
    if (VariantNameValue.IsValid() && !VariantNameValue->IsNull())
    {
        FString TmpValue;
        if (VariantNameValue->TryGetString(TmpValue)) { VariantName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FScorecard::~FScorecard()
{

}

void PlayFab::ExperimentationModels::FScorecard::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DateGenerated.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DateGenerated"));
        writer->WriteValue(DateGenerated);
    }

    if (Duration.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Duration"));
        writer->WriteValue(Duration);
    }

    writer->WriteIdentifierPrefix(TEXT("EventsProcessed"));
    writer->WriteValue(EventsProcessed);

    if (ExperimentId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ExperimentId"));
        writer->WriteValue(ExperimentId);
    }

    if (ExperimentName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ExperimentName"));
        writer->WriteValue(ExperimentName);
    }

    if (LatestJobStatus.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LatestJobStatus"));
        writeAnalysisTaskStateEnumJSON(LatestJobStatus, writer);
    }

    writer->WriteIdentifierPrefix(TEXT("SampleRatioMismatch"));
    writer->WriteValue(SampleRatioMismatch);

    if (ScorecardDataRows.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ScorecardDataRows"));
        for (const FScorecardDataRow& item : ScorecardDataRows)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FScorecard::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DateGeneratedValue = obj->TryGetField(TEXT("DateGenerated"));
    if (DateGeneratedValue.IsValid() && !DateGeneratedValue->IsNull())
    {
        FString TmpValue;
        if (DateGeneratedValue->TryGetString(TmpValue)) { DateGenerated = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DurationValue = obj->TryGetField(TEXT("Duration"));
    if (DurationValue.IsValid() && !DurationValue->IsNull())
    {
        FString TmpValue;
        if (DurationValue->TryGetString(TmpValue)) { Duration = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EventsProcessedValue = obj->TryGetField(TEXT("EventsProcessed"));
    if (EventsProcessedValue.IsValid() && !EventsProcessedValue->IsNull())
    {
        double TmpValue;
        if (EventsProcessedValue->TryGetNumber(TmpValue)) { EventsProcessed = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExperimentIdValue = obj->TryGetField(TEXT("ExperimentId"));
    if (ExperimentIdValue.IsValid() && !ExperimentIdValue->IsNull())
    {
        FString TmpValue;
        if (ExperimentIdValue->TryGetString(TmpValue)) { ExperimentId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExperimentNameValue = obj->TryGetField(TEXT("ExperimentName"));
    if (ExperimentNameValue.IsValid() && !ExperimentNameValue->IsNull())
    {
        FString TmpValue;
        if (ExperimentNameValue->TryGetString(TmpValue)) { ExperimentName = TmpValue; }
    }

    LatestJobStatus = readAnalysisTaskStateFromValue(obj->TryGetField(TEXT("LatestJobStatus")));

    const TSharedPtr<FJsonValue> SampleRatioMismatchValue = obj->TryGetField(TEXT("SampleRatioMismatch"));
    if (SampleRatioMismatchValue.IsValid() && !SampleRatioMismatchValue->IsNull())
    {
        bool TmpValue;
        if (SampleRatioMismatchValue->TryGetBool(TmpValue)) { SampleRatioMismatch = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ScorecardDataRowsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ScorecardDataRows"));
    for (int32 Idx = 0; Idx < ScorecardDataRowsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ScorecardDataRowsArray[Idx];
        ScorecardDataRows.Add(FScorecardDataRow(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ExperimentationModels::FGetLatestScorecardResult::~FGetLatestScorecardResult()
{
    //if (Scorecard != nullptr) delete Scorecard;

}

void PlayFab::ExperimentationModels::FGetLatestScorecardResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (pfScorecard.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Scorecard"));
        pfScorecard->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FGetLatestScorecardResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ScorecardValue = obj->TryGetField(TEXT("Scorecard"));
    if (ScorecardValue.IsValid() && !ScorecardValue->IsNull())
    {
        pfScorecard = MakeShareable(new FScorecard(ScorecardValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FGetTreatmentAssignmentRequest::~FGetTreatmentAssignmentRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::ExperimentationModels::FGetTreatmentAssignmentRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FGetTreatmentAssignmentRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FTreatmentAssignment::~FTreatmentAssignment()
{

}

void PlayFab::ExperimentationModels::FTreatmentAssignment::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Variables.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Variables"));
        for (const FVariable& item : Variables)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Variants.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Variants"));
        for (const FString& item : Variants)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FTreatmentAssignment::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&VariablesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Variables"));
    for (int32 Idx = 0; Idx < VariablesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = VariablesArray[Idx];
        Variables.Add(FVariable(CurrentItem->AsObject()));
    }


    obj->TryGetStringArrayField(TEXT("Variants"), Variants);

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FGetTreatmentAssignmentResult::~FGetTreatmentAssignmentResult()
{
    //if (TreatmentAssignment != nullptr) delete TreatmentAssignment;

}

void PlayFab::ExperimentationModels::FGetTreatmentAssignmentResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (pfTreatmentAssignment.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("TreatmentAssignment"));
        pfTreatmentAssignment->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FGetTreatmentAssignmentResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> TreatmentAssignmentValue = obj->TryGetField(TEXT("TreatmentAssignment"));
    if (TreatmentAssignmentValue.IsValid() && !TreatmentAssignmentValue->IsNull())
    {
        pfTreatmentAssignment = MakeShareable(new FTreatmentAssignment(TreatmentAssignmentValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FStartExperimentRequest::~FStartExperimentRequest()
{

}

void PlayFab::ExperimentationModels::FStartExperimentRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!ExperimentId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: StartExperimentRequest::ExperimentId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ExperimentId"));
        writer->WriteValue(ExperimentId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FStartExperimentRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ExperimentIdValue = obj->TryGetField(TEXT("ExperimentId"));
    if (ExperimentIdValue.IsValid() && !ExperimentIdValue->IsNull())
    {
        FString TmpValue;
        if (ExperimentIdValue->TryGetString(TmpValue)) { ExperimentId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FStopExperimentRequest::~FStopExperimentRequest()
{

}

void PlayFab::ExperimentationModels::FStopExperimentRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!ExperimentId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: StopExperimentRequest::ExperimentId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ExperimentId"));
        writer->WriteValue(ExperimentId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FStopExperimentRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ExperimentIdValue = obj->TryGetField(TEXT("ExperimentId"));
    if (ExperimentIdValue.IsValid() && !ExperimentIdValue->IsNull())
    {
        FString TmpValue;
        if (ExperimentIdValue->TryGetString(TmpValue)) { ExperimentId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FUpdateExclusionGroupRequest::~FUpdateExclusionGroupRequest()
{

}

void PlayFab::ExperimentationModels::FUpdateExclusionGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    if (!ExclusionGroupId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateExclusionGroupRequest::ExclusionGroupId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ExclusionGroupId"));
        writer->WriteValue(ExclusionGroupId);
    }

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateExclusionGroupRequest::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FUpdateExclusionGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExclusionGroupIdValue = obj->TryGetField(TEXT("ExclusionGroupId"));
    if (ExclusionGroupIdValue.IsValid() && !ExclusionGroupIdValue->IsNull())
    {
        FString TmpValue;
        if (ExclusionGroupIdValue->TryGetString(TmpValue)) { ExclusionGroupId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ExperimentationModels::FUpdateExperimentRequest::~FUpdateExperimentRequest()
{

}

void PlayFab::ExperimentationModels::FUpdateExperimentRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Description.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Description"));
        writer->WriteValue(Description);
    }

    if (Duration.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Duration"));
        writer->WriteValue(static_cast<int64>(Duration));
    }

    if (EndDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("EndDate"));
        writeDatetime(EndDate, writer);
    }

    if (ExclusionGroupId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ExclusionGroupId"));
        writer->WriteValue(ExclusionGroupId);
    }

    if (ExclusionGroupTrafficAllocation.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ExclusionGroupTrafficAllocation"));
        writer->WriteValue(static_cast<int64>(ExclusionGroupTrafficAllocation));
    }

    if (pfExperimentType.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ExperimentType"));
        writeExperimentTypeEnumJSON(pfExperimentType, writer);
    }

    if (!Id.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateExperimentRequest::Id, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateExperimentRequest::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (SegmentId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SegmentId"));
        writer->WriteValue(SegmentId);
    }

    writer->WriteIdentifierPrefix(TEXT("StartDate"));
    writeDatetime(StartDate, writer);

    if (TitlePlayerAccountTestIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TitlePlayerAccountTestIds"));
        for (const FString& item : TitlePlayerAccountTestIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteArrayStart(TEXT("Variants"));
    for (const FVariant& item : Variants)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ExperimentationModels::FUpdateExperimentRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DescriptionValue = obj->TryGetField(TEXT("Description"));
    if (DescriptionValue.IsValid() && !DescriptionValue->IsNull())
    {
        FString TmpValue;
        if (DescriptionValue->TryGetString(TmpValue)) { Description = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DurationValue = obj->TryGetField(TEXT("Duration"));
    if (DurationValue.IsValid() && !DurationValue->IsNull())
    {
        uint32 TmpValue;
        if (DurationValue->TryGetNumber(TmpValue)) { Duration = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EndDateValue = obj->TryGetField(TEXT("EndDate"));
    if (EndDateValue.IsValid())
        EndDate = readDatetime(EndDateValue);


    const TSharedPtr<FJsonValue> ExclusionGroupIdValue = obj->TryGetField(TEXT("ExclusionGroupId"));
    if (ExclusionGroupIdValue.IsValid() && !ExclusionGroupIdValue->IsNull())
    {
        FString TmpValue;
        if (ExclusionGroupIdValue->TryGetString(TmpValue)) { ExclusionGroupId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExclusionGroupTrafficAllocationValue = obj->TryGetField(TEXT("ExclusionGroupTrafficAllocation"));
    if (ExclusionGroupTrafficAllocationValue.IsValid() && !ExclusionGroupTrafficAllocationValue->IsNull())
    {
        uint32 TmpValue;
        if (ExclusionGroupTrafficAllocationValue->TryGetNumber(TmpValue)) { ExclusionGroupTrafficAllocation = TmpValue; }
    }

    pfExperimentType = readExperimentTypeFromValue(obj->TryGetField(TEXT("ExperimentType")));

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SegmentIdValue = obj->TryGetField(TEXT("SegmentId"));
    if (SegmentIdValue.IsValid() && !SegmentIdValue->IsNull())
    {
        FString TmpValue;
        if (SegmentIdValue->TryGetString(TmpValue)) { SegmentId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StartDateValue = obj->TryGetField(TEXT("StartDate"));
    if (StartDateValue.IsValid())
        StartDate = readDatetime(StartDateValue);


    obj->TryGetStringArrayField(TEXT("TitlePlayerAccountTestIds"), TitlePlayerAccountTestIds);

    const TArray<TSharedPtr<FJsonValue>>&VariantsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Variants"));
    for (int32 Idx = 0; Idx < VariantsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = VariantsArray[Idx];
        Variants.Add(FVariant(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

