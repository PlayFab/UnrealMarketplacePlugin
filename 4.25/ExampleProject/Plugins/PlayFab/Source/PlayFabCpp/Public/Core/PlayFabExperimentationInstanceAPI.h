//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "Core/PlayFabError.h"
#include "Core/PlayFabExperimentationDataModels.h"
#include "Core/PlayFabSettings.h"
#include "PlayFabAPISettings.h"
#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"

namespace PlayFab
{
    /**
     * Main interface for PlayFab Sdk, specifically all Experimentation APIs
     */
    class PLAYFABCPP_API UPlayFabExperimentationInstanceAPI
    {
    public:
        DECLARE_DELEGATE_OneParam(FCreateExclusionGroupDelegate, const ExperimentationModels::FCreateExclusionGroupResult&);
        DECLARE_DELEGATE_OneParam(FCreateExperimentDelegate, const ExperimentationModels::FCreateExperimentResult&);
        DECLARE_DELEGATE_OneParam(FDeleteExclusionGroupDelegate, const ExperimentationModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteExperimentDelegate, const ExperimentationModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FGetExclusionGroupsDelegate, const ExperimentationModels::FGetExclusionGroupsResult&);
        DECLARE_DELEGATE_OneParam(FGetExclusionGroupTrafficDelegate, const ExperimentationModels::FGetExclusionGroupTrafficResult&);
        DECLARE_DELEGATE_OneParam(FGetExperimentsDelegate, const ExperimentationModels::FGetExperimentsResult&);
        DECLARE_DELEGATE_OneParam(FGetLatestScorecardDelegate, const ExperimentationModels::FGetLatestScorecardResult&);
        DECLARE_DELEGATE_OneParam(FGetTreatmentAssignmentDelegate, const ExperimentationModels::FGetTreatmentAssignmentResult&);
        DECLARE_DELEGATE_OneParam(FStartExperimentDelegate, const ExperimentationModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FStopExperimentDelegate, const ExperimentationModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FUpdateExclusionGroupDelegate, const ExperimentationModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FUpdateExperimentDelegate, const ExperimentationModels::FEmptyResponse&);


    private:
        TSharedPtr<UPlayFabAPISettings> settings;
        TSharedPtr<UPlayFabAuthenticationContext> authContext;
    
    public:
        UPlayFabExperimentationInstanceAPI();
        explicit UPlayFabExperimentationInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings);
        explicit UPlayFabExperimentationInstanceAPI(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        UPlayFabExperimentationInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings, TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        ~UPlayFabExperimentationInstanceAPI();
        UPlayFabExperimentationInstanceAPI(const UPlayFabExperimentationInstanceAPI& source) = delete; // disable copy
        UPlayFabExperimentationInstanceAPI(UPlayFabExperimentationInstanceAPI&&) = delete; // disable move
        UPlayFabExperimentationInstanceAPI& operator=(const UPlayFabExperimentationInstanceAPI& source) = delete; // disable assignment
        UPlayFabExperimentationInstanceAPI& operator=(UPlayFabExperimentationInstanceAPI&& other) = delete; // disable move assignment

        int GetPendingCalls() const;
        TSharedPtr<UPlayFabAPISettings> GetSettings() const;
        void SetSettings(TSharedPtr<UPlayFabAPISettings> apiSettings);
        TSharedPtr<UPlayFabAuthenticationContext> GetAuthenticationContext() const;
        void SetAuthenticationContext(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        void ForgetAllCredentials();

    private:
        TSharedPtr<UPlayFabAuthenticationContext> GetOrCreateAuthenticationContext();
    
    public:


        // ------------ Generated API calls
        // Creates a new experiment exclusion group for a title.
        bool CreateExclusionGroup(ExperimentationModels::FCreateExclusionGroupRequest& request, const FCreateExclusionGroupDelegate& SuccessDelegate = FCreateExclusionGroupDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Creates a new experiment for a title.
        bool CreateExperiment(ExperimentationModels::FCreateExperimentRequest& request, const FCreateExperimentDelegate& SuccessDelegate = FCreateExperimentDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Deletes an existing exclusion group for a title.
        bool DeleteExclusionGroup(ExperimentationModels::FDeleteExclusionGroupRequest& request, const FDeleteExclusionGroupDelegate& SuccessDelegate = FDeleteExclusionGroupDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Deletes an existing experiment for a title.
        bool DeleteExperiment(ExperimentationModels::FDeleteExperimentRequest& request, const FDeleteExperimentDelegate& SuccessDelegate = FDeleteExperimentDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets the details of all exclusion groups for a title.
        bool GetExclusionGroups(ExperimentationModels::FGetExclusionGroupsRequest& request, const FGetExclusionGroupsDelegate& SuccessDelegate = FGetExclusionGroupsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets the details of all exclusion groups for a title.
        bool GetExclusionGroupTraffic(ExperimentationModels::FGetExclusionGroupTrafficRequest& request, const FGetExclusionGroupTrafficDelegate& SuccessDelegate = FGetExclusionGroupTrafficDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets the details of all experiments for a title.
        bool GetExperiments(ExperimentationModels::FGetExperimentsRequest& request, const FGetExperimentsDelegate& SuccessDelegate = FGetExperimentsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets the latest scorecard of the experiment for the title.
        bool GetLatestScorecard(ExperimentationModels::FGetLatestScorecardRequest& request, const FGetLatestScorecardDelegate& SuccessDelegate = FGetLatestScorecardDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Gets the treatment assignments for a player for every running experiment in the title.
        bool GetTreatmentAssignment(ExperimentationModels::FGetTreatmentAssignmentRequest& request, const FGetTreatmentAssignmentDelegate& SuccessDelegate = FGetTreatmentAssignmentDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Starts an existing experiment for a title.
        bool StartExperiment(ExperimentationModels::FStartExperimentRequest& request, const FStartExperimentDelegate& SuccessDelegate = FStartExperimentDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Stops an existing experiment for a title.
        bool StopExperiment(ExperimentationModels::FStopExperimentRequest& request, const FStopExperimentDelegate& SuccessDelegate = FStopExperimentDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Updates an existing exclusion group for a title.
        bool UpdateExclusionGroup(ExperimentationModels::FUpdateExclusionGroupRequest& request, const FUpdateExclusionGroupDelegate& SuccessDelegate = FUpdateExclusionGroupDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Updates an existing experiment for a title.
        bool UpdateExperiment(ExperimentationModels::FUpdateExperimentRequest& request, const FUpdateExperimentDelegate& SuccessDelegate = FUpdateExperimentDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());

    private:
        // ------------ Generated result handlers
        void OnCreateExclusionGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateExclusionGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnCreateExperimentResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateExperimentDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteExclusionGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteExclusionGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteExperimentResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteExperimentDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetExclusionGroupsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetExclusionGroupsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetExclusionGroupTrafficResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetExclusionGroupTrafficDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetExperimentsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetExperimentsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetLatestScorecardResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLatestScorecardDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetTreatmentAssignmentResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetTreatmentAssignmentDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnStartExperimentResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FStartExperimentDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnStopExperimentResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FStopExperimentDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnUpdateExclusionGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateExclusionGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnUpdateExperimentResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateExperimentDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);

    };
};
