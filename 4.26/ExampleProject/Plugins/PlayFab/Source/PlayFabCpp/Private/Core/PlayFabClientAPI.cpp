//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "Core/PlayFabClientAPI.h"
#include "Core/PlayFabSettings.h"
#include "Core/PlayFabResultHandler.h"
#include "PlayFab.h"

using namespace PlayFab;
using namespace PlayFab::ClientModels;

UPlayFabClientAPI::UPlayFabClientAPI() {}

UPlayFabClientAPI::~UPlayFabClientAPI() {}

int UPlayFabClientAPI::GetPendingCalls() const
{
    return PlayFabRequestHandler::GetPendingCalls();
}

FString UPlayFabClientAPI::GetBuildIdentifier() const
{
    return PlayFabSettings::buildIdentifier;
}

bool UPlayFabClientAPI::IsClientLoggedIn() const
{
    return !PlayFabSettings::GetClientSessionTicket().IsEmpty();
}



bool UPlayFabClientAPI::AcceptTrade(
    ClientModels::FAcceptTradeRequest& request,
    const FAcceptTradeDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/AcceptTrade"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnAcceptTradeResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnAcceptTradeResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAcceptTradeDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAcceptTradeResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::AddFriend(
    ClientModels::FAddFriendRequest& request,
    const FAddFriendDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/AddFriend"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnAddFriendResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnAddFriendResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddFriendDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAddFriendResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::AddGenericID(
    ClientModels::FAddGenericIDRequest& request,
    const FAddGenericIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/AddGenericID"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnAddGenericIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnAddGenericIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddGenericIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAddGenericIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::AddOrUpdateContactEmail(
    ClientModels::FAddOrUpdateContactEmailRequest& request,
    const FAddOrUpdateContactEmailDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/AddOrUpdateContactEmail"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnAddOrUpdateContactEmailResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnAddOrUpdateContactEmailResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddOrUpdateContactEmailDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAddOrUpdateContactEmailResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::AddSharedGroupMembers(
    ClientModels::FAddSharedGroupMembersRequest& request,
    const FAddSharedGroupMembersDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/AddSharedGroupMembers"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnAddSharedGroupMembersResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnAddSharedGroupMembersResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddSharedGroupMembersDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAddSharedGroupMembersResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::AddUsernamePassword(
    ClientModels::FAddUsernamePasswordRequest& request,
    const FAddUsernamePasswordDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/AddUsernamePassword"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnAddUsernamePasswordResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnAddUsernamePasswordResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddUsernamePasswordDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAddUsernamePasswordResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::AddUserVirtualCurrency(
    ClientModels::FAddUserVirtualCurrencyRequest& request,
    const FAddUserVirtualCurrencyDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/AddUserVirtualCurrency"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnAddUserVirtualCurrencyResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnAddUserVirtualCurrencyResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddUserVirtualCurrencyDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FModifyUserVirtualCurrencyResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::AndroidDevicePushNotificationRegistration(
    ClientModels::FAndroidDevicePushNotificationRegistrationRequest& request,
    const FAndroidDevicePushNotificationRegistrationDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/AndroidDevicePushNotificationRegistration"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnAndroidDevicePushNotificationRegistrationResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnAndroidDevicePushNotificationRegistrationResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAndroidDevicePushNotificationRegistrationDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAndroidDevicePushNotificationRegistrationResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::AttributeInstall(
    ClientModels::FAttributeInstallRequest& request,
    const FAttributeInstallDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/AttributeInstall"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnAttributeInstallResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnAttributeInstallResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAttributeInstallDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FAttributeInstallResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::CancelTrade(
    ClientModels::FCancelTradeRequest& request,
    const FCancelTradeDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/CancelTrade"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnCancelTradeResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnCancelTradeResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCancelTradeDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FCancelTradeResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::ConfirmPurchase(
    ClientModels::FConfirmPurchaseRequest& request,
    const FConfirmPurchaseDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/ConfirmPurchase"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnConfirmPurchaseResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnConfirmPurchaseResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConfirmPurchaseDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FConfirmPurchaseResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::ConsumeItem(
    ClientModels::FConsumeItemRequest& request,
    const FConsumeItemDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/ConsumeItem"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnConsumeItemResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnConsumeItemResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConsumeItemDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FConsumeItemResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::ConsumeMicrosoftStoreEntitlements(
    ClientModels::FConsumeMicrosoftStoreEntitlementsRequest& request,
    const FConsumeMicrosoftStoreEntitlementsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/ConsumeMicrosoftStoreEntitlements"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnConsumeMicrosoftStoreEntitlementsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnConsumeMicrosoftStoreEntitlementsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConsumeMicrosoftStoreEntitlementsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FConsumeMicrosoftStoreEntitlementsResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::ConsumePS5Entitlements(
    ClientModels::FConsumePS5EntitlementsRequest& request,
    const FConsumePS5EntitlementsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/ConsumePS5Entitlements"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnConsumePS5EntitlementsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnConsumePS5EntitlementsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConsumePS5EntitlementsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FConsumePS5EntitlementsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::ConsumePSNEntitlements(
    ClientModels::FConsumePSNEntitlementsRequest& request,
    const FConsumePSNEntitlementsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/ConsumePSNEntitlements"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnConsumePSNEntitlementsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnConsumePSNEntitlementsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConsumePSNEntitlementsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FConsumePSNEntitlementsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::ConsumeXboxEntitlements(
    ClientModels::FConsumeXboxEntitlementsRequest& request,
    const FConsumeXboxEntitlementsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/ConsumeXboxEntitlements"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnConsumeXboxEntitlementsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnConsumeXboxEntitlementsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FConsumeXboxEntitlementsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FConsumeXboxEntitlementsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::CreateSharedGroup(
    ClientModels::FCreateSharedGroupRequest& request,
    const FCreateSharedGroupDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/CreateSharedGroup"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnCreateSharedGroupResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnCreateSharedGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateSharedGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FCreateSharedGroupResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::ExecuteCloudScript(
    ClientModels::FExecuteCloudScriptRequest& request,
    const FExecuteCloudScriptDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/ExecuteCloudScript"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnExecuteCloudScriptResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnExecuteCloudScriptResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FExecuteCloudScriptDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FExecuteCloudScriptResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetAccountInfo(
    ClientModels::FGetAccountInfoRequest& request,
    const FGetAccountInfoDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetAccountInfo"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetAccountInfoResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetAccountInfoResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAccountInfoDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetAccountInfoResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetAdPlacements(
    ClientModels::FGetAdPlacementsRequest& request,
    const FGetAdPlacementsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetAdPlacements"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetAdPlacementsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetAdPlacementsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAdPlacementsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetAdPlacementsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetAllUsersCharacters(
    ClientModels::FListUsersCharactersRequest& request,
    const FGetAllUsersCharactersDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetAllUsersCharacters"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetAllUsersCharactersResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetAllUsersCharactersResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAllUsersCharactersDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FListUsersCharactersResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetCatalogItems(
    ClientModels::FGetCatalogItemsRequest& request,
    const FGetCatalogItemsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetCatalogItems"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetCatalogItemsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetCatalogItemsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCatalogItemsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetCatalogItemsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetCharacterData(
    ClientModels::FGetCharacterDataRequest& request,
    const FGetCharacterDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetCharacterData"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetCharacterDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetCharacterDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCharacterDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetCharacterDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetCharacterInventory(
    ClientModels::FGetCharacterInventoryRequest& request,
    const FGetCharacterInventoryDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetCharacterInventory"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetCharacterInventoryResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetCharacterInventoryResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCharacterInventoryDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetCharacterInventoryResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetCharacterLeaderboard(
    ClientModels::FGetCharacterLeaderboardRequest& request,
    const FGetCharacterLeaderboardDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetCharacterLeaderboard"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetCharacterLeaderboardResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetCharacterLeaderboardResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCharacterLeaderboardDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetCharacterLeaderboardResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetCharacterReadOnlyData(
    ClientModels::FGetCharacterDataRequest& request,
    const FGetCharacterReadOnlyDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetCharacterReadOnlyData"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetCharacterReadOnlyDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetCharacterReadOnlyDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCharacterReadOnlyDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetCharacterDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetCharacterStatistics(
    ClientModels::FGetCharacterStatisticsRequest& request,
    const FGetCharacterStatisticsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetCharacterStatistics"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetCharacterStatisticsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetCharacterStatisticsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCharacterStatisticsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetCharacterStatisticsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetContentDownloadUrl(
    ClientModels::FGetContentDownloadUrlRequest& request,
    const FGetContentDownloadUrlDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetContentDownloadUrl"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetContentDownloadUrlResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetContentDownloadUrlResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetContentDownloadUrlDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetContentDownloadUrlResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetCurrentGames(
    ClientModels::FCurrentGamesRequest& request,
    const FGetCurrentGamesDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetCurrentGames"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetCurrentGamesResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetCurrentGamesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCurrentGamesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FCurrentGamesResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetFriendLeaderboard(
    ClientModels::FGetFriendLeaderboardRequest& request,
    const FGetFriendLeaderboardDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetFriendLeaderboard"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetFriendLeaderboardResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetFriendLeaderboardResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFriendLeaderboardDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetLeaderboardResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetFriendLeaderboardAroundPlayer(
    ClientModels::FGetFriendLeaderboardAroundPlayerRequest& request,
    const FGetFriendLeaderboardAroundPlayerDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetFriendLeaderboardAroundPlayer"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetFriendLeaderboardAroundPlayerResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetFriendLeaderboardAroundPlayerResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFriendLeaderboardAroundPlayerDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetFriendLeaderboardAroundPlayerResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetFriendsList(
    ClientModels::FGetFriendsListRequest& request,
    const FGetFriendsListDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetFriendsList"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetFriendsListResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetFriendsListResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFriendsListDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetFriendsListResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetGameServerRegions(
    ClientModels::FGameServerRegionsRequest& request,
    const FGetGameServerRegionsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetGameServerRegions"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetGameServerRegionsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetGameServerRegionsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetGameServerRegionsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGameServerRegionsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetLeaderboard(
    ClientModels::FGetLeaderboardRequest& request,
    const FGetLeaderboardDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetLeaderboard"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetLeaderboardResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetLeaderboardResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLeaderboardDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetLeaderboardResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetLeaderboardAroundCharacter(
    ClientModels::FGetLeaderboardAroundCharacterRequest& request,
    const FGetLeaderboardAroundCharacterDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetLeaderboardAroundCharacter"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetLeaderboardAroundCharacterResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetLeaderboardAroundCharacterResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLeaderboardAroundCharacterDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetLeaderboardAroundCharacterResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetLeaderboardAroundPlayer(
    ClientModels::FGetLeaderboardAroundPlayerRequest& request,
    const FGetLeaderboardAroundPlayerDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetLeaderboardAroundPlayer"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetLeaderboardAroundPlayerResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetLeaderboardAroundPlayerResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLeaderboardAroundPlayerDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetLeaderboardAroundPlayerResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetLeaderboardForUserCharacters(
    ClientModels::FGetLeaderboardForUsersCharactersRequest& request,
    const FGetLeaderboardForUserCharactersDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetLeaderboardForUserCharacters"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetLeaderboardForUserCharactersResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetLeaderboardForUserCharactersResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLeaderboardForUserCharactersDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetLeaderboardForUsersCharactersResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPaymentToken(
    ClientModels::FGetPaymentTokenRequest& request,
    const FGetPaymentTokenDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPaymentToken"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPaymentTokenResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPaymentTokenResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPaymentTokenDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPaymentTokenResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPhotonAuthenticationToken(
    ClientModels::FGetPhotonAuthenticationTokenRequest& request,
    const FGetPhotonAuthenticationTokenDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPhotonAuthenticationToken"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPhotonAuthenticationTokenResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPhotonAuthenticationTokenResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPhotonAuthenticationTokenDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPhotonAuthenticationTokenResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayerCombinedInfo(
    ClientModels::FGetPlayerCombinedInfoRequest& request,
    const FGetPlayerCombinedInfoDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayerCombinedInfo"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayerCombinedInfoResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayerCombinedInfoResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerCombinedInfoDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayerCombinedInfoResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayerProfile(
    ClientModels::FGetPlayerProfileRequest& request,
    const FGetPlayerProfileDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayerProfile"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayerProfileResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayerProfileResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerProfileDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayerProfileResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayerSegments(
    const FGetPlayerSegmentsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    ClientModels::FGetPlayerSegmentsRequest emptyRequest = ClientModels::FGetPlayerSegmentsRequest();
    return UPlayFabClientAPI::GetPlayerSegments(emptyRequest, SuccessDelegate, ErrorDelegate);
}

bool UPlayFabClientAPI::GetPlayerSegments(
    ClientModels::FGetPlayerSegmentsRequest& request,
    const FGetPlayerSegmentsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayerSegments"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayerSegmentsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayerSegmentsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerSegmentsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayerSegmentsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayerStatistics(
    ClientModels::FGetPlayerStatisticsRequest& request,
    const FGetPlayerStatisticsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayerStatistics"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayerStatisticsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayerStatisticsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerStatisticsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayerStatisticsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayerStatisticVersions(
    ClientModels::FGetPlayerStatisticVersionsRequest& request,
    const FGetPlayerStatisticVersionsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayerStatisticVersions"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayerStatisticVersionsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayerStatisticVersionsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerStatisticVersionsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayerStatisticVersionsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayerTags(
    ClientModels::FGetPlayerTagsRequest& request,
    const FGetPlayerTagsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayerTags"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayerTagsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayerTagsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerTagsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayerTagsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayerTrades(
    ClientModels::FGetPlayerTradesRequest& request,
    const FGetPlayerTradesDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayerTrades"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayerTradesResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayerTradesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerTradesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayerTradesResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayFabIDsFromFacebookIDs(
    ClientModels::FGetPlayFabIDsFromFacebookIDsRequest& request,
    const FGetPlayFabIDsFromFacebookIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayFabIDsFromFacebookIDs"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayFabIDsFromFacebookIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayFabIDsFromFacebookIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromFacebookIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromFacebookIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayFabIDsFromFacebookInstantGamesIds(
    ClientModels::FGetPlayFabIDsFromFacebookInstantGamesIdsRequest& request,
    const FGetPlayFabIDsFromFacebookInstantGamesIdsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayFabIDsFromFacebookInstantGamesIds"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayFabIDsFromFacebookInstantGamesIdsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayFabIDsFromFacebookInstantGamesIdsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromFacebookInstantGamesIdsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromFacebookInstantGamesIdsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayFabIDsFromGameCenterIDs(
    ClientModels::FGetPlayFabIDsFromGameCenterIDsRequest& request,
    const FGetPlayFabIDsFromGameCenterIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayFabIDsFromGameCenterIDs"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayFabIDsFromGameCenterIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayFabIDsFromGameCenterIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromGameCenterIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromGameCenterIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayFabIDsFromGenericIDs(
    ClientModels::FGetPlayFabIDsFromGenericIDsRequest& request,
    const FGetPlayFabIDsFromGenericIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayFabIDsFromGenericIDs"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayFabIDsFromGenericIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayFabIDsFromGenericIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromGenericIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromGenericIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayFabIDsFromGoogleIDs(
    ClientModels::FGetPlayFabIDsFromGoogleIDsRequest& request,
    const FGetPlayFabIDsFromGoogleIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayFabIDsFromGoogleIDs"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayFabIDsFromGoogleIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayFabIDsFromGoogleIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromGoogleIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromGoogleIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayFabIDsFromKongregateIDs(
    ClientModels::FGetPlayFabIDsFromKongregateIDsRequest& request,
    const FGetPlayFabIDsFromKongregateIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayFabIDsFromKongregateIDs"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayFabIDsFromKongregateIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayFabIDsFromKongregateIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromKongregateIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromKongregateIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayFabIDsFromNintendoSwitchDeviceIds(
    ClientModels::FGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest& request,
    const FGetPlayFabIDsFromNintendoSwitchDeviceIdsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayFabIDsFromNintendoSwitchDeviceIds"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayFabIDsFromNintendoSwitchDeviceIdsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayFabIDsFromNintendoSwitchDeviceIdsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromNintendoSwitchDeviceIdsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromNintendoSwitchDeviceIdsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayFabIDsFromPSNAccountIDs(
    ClientModels::FGetPlayFabIDsFromPSNAccountIDsRequest& request,
    const FGetPlayFabIDsFromPSNAccountIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayFabIDsFromPSNAccountIDs"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayFabIDsFromPSNAccountIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayFabIDsFromPSNAccountIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromPSNAccountIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromPSNAccountIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayFabIDsFromSteamIDs(
    ClientModels::FGetPlayFabIDsFromSteamIDsRequest& request,
    const FGetPlayFabIDsFromSteamIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayFabIDsFromSteamIDs"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayFabIDsFromSteamIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayFabIDsFromSteamIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromSteamIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromSteamIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayFabIDsFromTwitchIDs(
    ClientModels::FGetPlayFabIDsFromTwitchIDsRequest& request,
    const FGetPlayFabIDsFromTwitchIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayFabIDsFromTwitchIDs"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayFabIDsFromTwitchIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayFabIDsFromTwitchIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromTwitchIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromTwitchIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPlayFabIDsFromXboxLiveIDs(
    ClientModels::FGetPlayFabIDsFromXboxLiveIDsRequest& request,
    const FGetPlayFabIDsFromXboxLiveIDsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPlayFabIDsFromXboxLiveIDs"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPlayFabIDsFromXboxLiveIDsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPlayFabIDsFromXboxLiveIDsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayFabIDsFromXboxLiveIDsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPlayFabIDsFromXboxLiveIDsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPublisherData(
    ClientModels::FGetPublisherDataRequest& request,
    const FGetPublisherDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPublisherData"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPublisherDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPublisherDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPublisherDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPublisherDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetPurchase(
    ClientModels::FGetPurchaseRequest& request,
    const FGetPurchaseDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetPurchase"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetPurchaseResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetPurchaseResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPurchaseDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetPurchaseResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetSharedGroupData(
    ClientModels::FGetSharedGroupDataRequest& request,
    const FGetSharedGroupDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetSharedGroupData"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetSharedGroupDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetSharedGroupDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetSharedGroupDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetSharedGroupDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetStoreItems(
    ClientModels::FGetStoreItemsRequest& request,
    const FGetStoreItemsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetStoreItems"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetStoreItemsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetStoreItemsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetStoreItemsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetStoreItemsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetTime(
    const FGetTimeDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    ClientModels::FGetTimeRequest emptyRequest = ClientModels::FGetTimeRequest();
    return UPlayFabClientAPI::GetTime(emptyRequest, SuccessDelegate, ErrorDelegate);
}

bool UPlayFabClientAPI::GetTime(
    ClientModels::FGetTimeRequest& request,
    const FGetTimeDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetTime"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetTimeResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetTimeResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetTimeDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetTimeResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetTitleData(
    ClientModels::FGetTitleDataRequest& request,
    const FGetTitleDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetTitleData"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetTitleDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetTitleDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetTitleDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetTitleDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetTitleNews(
    ClientModels::FGetTitleNewsRequest& request,
    const FGetTitleNewsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetTitleNews"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetTitleNewsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetTitleNewsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetTitleNewsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetTitleNewsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetTitlePublicKey(
    ClientModels::FGetTitlePublicKeyRequest& request,
    const FGetTitlePublicKeyDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetTitlePublicKey"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetTitlePublicKeyResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetTitlePublicKeyResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetTitlePublicKeyDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetTitlePublicKeyResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetTradeStatus(
    ClientModels::FGetTradeStatusRequest& request,
    const FGetTradeStatusDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetTradeStatus"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetTradeStatusResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetTradeStatusResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetTradeStatusDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetTradeStatusResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetUserData(
    ClientModels::FGetUserDataRequest& request,
    const FGetUserDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetUserData"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetUserDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetUserDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetUserDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetUserInventory(
    ClientModels::FGetUserInventoryRequest& request,
    const FGetUserInventoryDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetUserInventory"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetUserInventoryResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetUserInventoryResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserInventoryDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetUserInventoryResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetUserPublisherData(
    ClientModels::FGetUserDataRequest& request,
    const FGetUserPublisherDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetUserPublisherData"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetUserPublisherDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetUserPublisherDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserPublisherDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetUserDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetUserPublisherReadOnlyData(
    ClientModels::FGetUserDataRequest& request,
    const FGetUserPublisherReadOnlyDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetUserPublisherReadOnlyData"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetUserPublisherReadOnlyDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetUserPublisherReadOnlyDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserPublisherReadOnlyDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetUserDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GetUserReadOnlyData(
    ClientModels::FGetUserDataRequest& request,
    const FGetUserReadOnlyDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GetUserReadOnlyData"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGetUserReadOnlyDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGetUserReadOnlyDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUserReadOnlyDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGetUserDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::GrantCharacterToUser(
    ClientModels::FGrantCharacterToUserRequest& request,
    const FGrantCharacterToUserDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/GrantCharacterToUser"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnGrantCharacterToUserResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnGrantCharacterToUserResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGrantCharacterToUserDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FGrantCharacterToUserResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkAndroidDeviceID(
    ClientModels::FLinkAndroidDeviceIDRequest& request,
    const FLinkAndroidDeviceIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkAndroidDeviceID"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkAndroidDeviceIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkAndroidDeviceIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkAndroidDeviceIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkAndroidDeviceIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkApple(
    ClientModels::FLinkAppleRequest& request,
    const FLinkAppleDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkApple"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkAppleResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkAppleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkAppleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkCustomID(
    ClientModels::FLinkCustomIDRequest& request,
    const FLinkCustomIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkCustomID"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkCustomIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkCustomIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkCustomIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkCustomIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkFacebookAccount(
    ClientModels::FLinkFacebookAccountRequest& request,
    const FLinkFacebookAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkFacebookAccount"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkFacebookAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkFacebookAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkFacebookAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkFacebookAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkFacebookInstantGamesId(
    ClientModels::FLinkFacebookInstantGamesIdRequest& request,
    const FLinkFacebookInstantGamesIdDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkFacebookInstantGamesId"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkFacebookInstantGamesIdResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkFacebookInstantGamesIdResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkFacebookInstantGamesIdDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkFacebookInstantGamesIdResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkGameCenterAccount(
    ClientModels::FLinkGameCenterAccountRequest& request,
    const FLinkGameCenterAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkGameCenterAccount"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkGameCenterAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkGameCenterAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkGameCenterAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkGameCenterAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkGoogleAccount(
    ClientModels::FLinkGoogleAccountRequest& request,
    const FLinkGoogleAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkGoogleAccount"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkGoogleAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkGoogleAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkGoogleAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkGoogleAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkIOSDeviceID(
    ClientModels::FLinkIOSDeviceIDRequest& request,
    const FLinkIOSDeviceIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkIOSDeviceID"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkIOSDeviceIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkIOSDeviceIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkIOSDeviceIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkIOSDeviceIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkKongregate(
    ClientModels::FLinkKongregateAccountRequest& request,
    const FLinkKongregateDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkKongregate"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkKongregateResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkKongregateResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkKongregateDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkKongregateAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkNintendoServiceAccount(
    ClientModels::FLinkNintendoServiceAccountRequest& request,
    const FLinkNintendoServiceAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkNintendoServiceAccount"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkNintendoServiceAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkNintendoServiceAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkNintendoServiceAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkNintendoSwitchDeviceId(
    ClientModels::FLinkNintendoSwitchDeviceIdRequest& request,
    const FLinkNintendoSwitchDeviceIdDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkNintendoSwitchDeviceId"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkNintendoSwitchDeviceIdResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkNintendoSwitchDeviceIdResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkNintendoSwitchDeviceIdDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkNintendoSwitchDeviceIdResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkOpenIdConnect(
    ClientModels::FLinkOpenIdConnectRequest& request,
    const FLinkOpenIdConnectDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkOpenIdConnect"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkOpenIdConnectResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkOpenIdConnectResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkOpenIdConnectDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkPSNAccount(
    ClientModels::FLinkPSNAccountRequest& request,
    const FLinkPSNAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkPSNAccount"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkPSNAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkPSNAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkPSNAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkPSNAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkSteamAccount(
    ClientModels::FLinkSteamAccountRequest& request,
    const FLinkSteamAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkSteamAccount"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkSteamAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkSteamAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkSteamAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkSteamAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkTwitch(
    ClientModels::FLinkTwitchAccountRequest& request,
    const FLinkTwitchDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkTwitch"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkTwitchResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkTwitchResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkTwitchDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkTwitchAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LinkXboxAccount(
    ClientModels::FLinkXboxAccountRequest& request,
    const FLinkXboxAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LinkXboxAccount"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLinkXboxAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLinkXboxAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLinkXboxAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLinkXboxAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithAndroidDeviceID(
    ClientModels::FLoginWithAndroidDeviceIDRequest& request,
    const FLoginWithAndroidDeviceIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithAndroidDeviceID"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithAndroidDeviceIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithAndroidDeviceIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithAndroidDeviceIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithApple(
    ClientModels::FLoginWithAppleRequest& request,
    const FLoginWithAppleDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithApple"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithAppleResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithAppleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithAppleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithCustomID(
    ClientModels::FLoginWithCustomIDRequest& request,
    const FLoginWithCustomIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithCustomID"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithCustomIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithCustomIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithCustomIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithEmailAddress(
    ClientModels::FLoginWithEmailAddressRequest& request,
    const FLoginWithEmailAddressDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithEmailAddress"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithEmailAddressResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithEmailAddressResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithEmailAddressDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithFacebook(
    ClientModels::FLoginWithFacebookRequest& request,
    const FLoginWithFacebookDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithFacebook"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithFacebookResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithFacebookResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithFacebookDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithFacebookInstantGamesId(
    ClientModels::FLoginWithFacebookInstantGamesIdRequest& request,
    const FLoginWithFacebookInstantGamesIdDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithFacebookInstantGamesId"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithFacebookInstantGamesIdResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithFacebookInstantGamesIdResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithFacebookInstantGamesIdDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithGameCenter(
    ClientModels::FLoginWithGameCenterRequest& request,
    const FLoginWithGameCenterDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithGameCenter"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithGameCenterResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithGameCenterResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithGameCenterDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithGoogleAccount(
    ClientModels::FLoginWithGoogleAccountRequest& request,
    const FLoginWithGoogleAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithGoogleAccount"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithGoogleAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithGoogleAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithGoogleAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithIOSDeviceID(
    ClientModels::FLoginWithIOSDeviceIDRequest& request,
    const FLoginWithIOSDeviceIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithIOSDeviceID"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithIOSDeviceIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithIOSDeviceIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithIOSDeviceIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithKongregate(
    ClientModels::FLoginWithKongregateRequest& request,
    const FLoginWithKongregateDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithKongregate"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithKongregateResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithKongregateResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithKongregateDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithNintendoServiceAccount(
    ClientModels::FLoginWithNintendoServiceAccountRequest& request,
    const FLoginWithNintendoServiceAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithNintendoServiceAccount"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithNintendoServiceAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithNintendoServiceAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithNintendoServiceAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithNintendoSwitchDeviceId(
    ClientModels::FLoginWithNintendoSwitchDeviceIdRequest& request,
    const FLoginWithNintendoSwitchDeviceIdDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithNintendoSwitchDeviceId"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithNintendoSwitchDeviceIdResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithNintendoSwitchDeviceIdResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithNintendoSwitchDeviceIdDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithOpenIdConnect(
    ClientModels::FLoginWithOpenIdConnectRequest& request,
    const FLoginWithOpenIdConnectDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithOpenIdConnect"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithOpenIdConnectResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithOpenIdConnectResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithOpenIdConnectDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithPlayFab(
    ClientModels::FLoginWithPlayFabRequest& request,
    const FLoginWithPlayFabDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithPlayFab"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithPlayFabResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithPlayFabResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithPlayFabDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithPSN(
    ClientModels::FLoginWithPSNRequest& request,
    const FLoginWithPSNDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithPSN"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithPSNResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithPSNResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithPSNDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithSteam(
    ClientModels::FLoginWithSteamRequest& request,
    const FLoginWithSteamDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithSteam"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithSteamResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithSteamResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithSteamDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithTwitch(
    ClientModels::FLoginWithTwitchRequest& request,
    const FLoginWithTwitchDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithTwitch"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithTwitchResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithTwitchResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithTwitchDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::LoginWithXbox(
    ClientModels::FLoginWithXboxRequest& request,
    const FLoginWithXboxDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/LoginWithXbox"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnLoginWithXboxResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnLoginWithXboxResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FLoginWithXboxDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FLoginResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        outResult.AuthenticationContext = MakeSharedUObject<UPlayFabAuthenticationContext>();
        if (outResult.SessionTicket.Len() > 0) {
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
            outResult.AuthenticationContext->SetClientSessionTicket(outResult.SessionTicket);
        }
        if (outResult.EntityToken.IsValid()) {
            PlayFabSettings::SetEntityToken(outResult.EntityToken->EntityToken);
            outResult.AuthenticationContext->SetEntityToken(outResult.EntityToken->EntityToken);
        }
        if (outResult.PlayFabId.Len() > 0) {
            outResult.AuthenticationContext->SetPlayFabId(outResult.PlayFabId);
        }
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::Matchmake(
    ClientModels::FMatchmakeRequest& request,
    const FMatchmakeDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/Matchmake"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnMatchmakeResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnMatchmakeResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMatchmakeDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FMatchmakeResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::OpenTrade(
    ClientModels::FOpenTradeRequest& request,
    const FOpenTradeDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/OpenTrade"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnOpenTradeResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnOpenTradeResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FOpenTradeDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FOpenTradeResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::PayForPurchase(
    ClientModels::FPayForPurchaseRequest& request,
    const FPayForPurchaseDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/PayForPurchase"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnPayForPurchaseResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnPayForPurchaseResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPayForPurchaseDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FPayForPurchaseResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::PurchaseItem(
    ClientModels::FPurchaseItemRequest& request,
    const FPurchaseItemDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/PurchaseItem"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnPurchaseItemResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnPurchaseItemResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPurchaseItemDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FPurchaseItemResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::RedeemCoupon(
    ClientModels::FRedeemCouponRequest& request,
    const FRedeemCouponDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/RedeemCoupon"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnRedeemCouponResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnRedeemCouponResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRedeemCouponDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRedeemCouponResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::RefreshPSNAuthToken(
    ClientModels::FRefreshPSNAuthTokenRequest& request,
    const FRefreshPSNAuthTokenDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/RefreshPSNAuthToken"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnRefreshPSNAuthTokenResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnRefreshPSNAuthTokenResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRefreshPSNAuthTokenDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::RegisterForIOSPushNotification(
    ClientModels::FRegisterForIOSPushNotificationRequest& request,
    const FRegisterForIOSPushNotificationDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/RegisterForIOSPushNotification"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnRegisterForIOSPushNotificationResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnRegisterForIOSPushNotificationResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRegisterForIOSPushNotificationDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRegisterForIOSPushNotificationResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::RegisterPlayFabUser(
    ClientModels::FRegisterPlayFabUserRequest& request,
    const FRegisterPlayFabUserDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (GetDefault<UPlayFabRuntimeSettings>()->TitleId.Len() > 0)
        request.TitleId = GetDefault<UPlayFabRuntimeSettings>()->TitleId;


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/RegisterPlayFabUser"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnRegisterPlayFabUserResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnRegisterPlayFabUserResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRegisterPlayFabUserDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRegisterPlayFabUserResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        if (outResult.SessionTicket.Len() > 0)
            PlayFabSettings::SetClientSessionTicket(outResult.SessionTicket);
        

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::RemoveContactEmail(
    ClientModels::FRemoveContactEmailRequest& request,
    const FRemoveContactEmailDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/RemoveContactEmail"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnRemoveContactEmailResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnRemoveContactEmailResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveContactEmailDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRemoveContactEmailResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::RemoveFriend(
    ClientModels::FRemoveFriendRequest& request,
    const FRemoveFriendDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/RemoveFriend"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnRemoveFriendResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnRemoveFriendResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveFriendDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRemoveFriendResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::RemoveGenericID(
    ClientModels::FRemoveGenericIDRequest& request,
    const FRemoveGenericIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/RemoveGenericID"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnRemoveGenericIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnRemoveGenericIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveGenericIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRemoveGenericIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::RemoveSharedGroupMembers(
    ClientModels::FRemoveSharedGroupMembersRequest& request,
    const FRemoveSharedGroupMembersDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/RemoveSharedGroupMembers"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnRemoveSharedGroupMembersResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnRemoveSharedGroupMembersResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveSharedGroupMembersDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRemoveSharedGroupMembersResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::ReportAdActivity(
    ClientModels::FReportAdActivityRequest& request,
    const FReportAdActivityDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/ReportAdActivity"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnReportAdActivityResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnReportAdActivityResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FReportAdActivityDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FReportAdActivityResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::ReportDeviceInfo(
    ClientModels::FDeviceInfoRequest& request,
    const FReportDeviceInfoDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/ReportDeviceInfo"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnReportDeviceInfoResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnReportDeviceInfoResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FReportDeviceInfoDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::ReportPlayer(
    ClientModels::FReportPlayerClientRequest& request,
    const FReportPlayerDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/ReportPlayer"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnReportPlayerResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnReportPlayerResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FReportPlayerDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FReportPlayerClientResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::RestoreIOSPurchases(
    ClientModels::FRestoreIOSPurchasesRequest& request,
    const FRestoreIOSPurchasesDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/RestoreIOSPurchases"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnRestoreIOSPurchasesResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnRestoreIOSPurchasesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRestoreIOSPurchasesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRestoreIOSPurchasesResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::RewardAdActivity(
    ClientModels::FRewardAdActivityRequest& request,
    const FRewardAdActivityDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/RewardAdActivity"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnRewardAdActivityResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnRewardAdActivityResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRewardAdActivityDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FRewardAdActivityResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::SendAccountRecoveryEmail(
    ClientModels::FSendAccountRecoveryEmailRequest& request,
    const FSendAccountRecoveryEmailDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/SendAccountRecoveryEmail"), request.toJSONString(), TEXT(""), TEXT(""));
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnSendAccountRecoveryEmailResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnSendAccountRecoveryEmailResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSendAccountRecoveryEmailDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FSendAccountRecoveryEmailResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::SetFriendTags(
    ClientModels::FSetFriendTagsRequest& request,
    const FSetFriendTagsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/SetFriendTags"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnSetFriendTagsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnSetFriendTagsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetFriendTagsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FSetFriendTagsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::SetPlayerSecret(
    ClientModels::FSetPlayerSecretRequest& request,
    const FSetPlayerSecretDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/SetPlayerSecret"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnSetPlayerSecretResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnSetPlayerSecretResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetPlayerSecretDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FSetPlayerSecretResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::StartGame(
    ClientModels::FStartGameRequest& request,
    const FStartGameDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/StartGame"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnStartGameResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnStartGameResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FStartGameDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FStartGameResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::StartPurchase(
    ClientModels::FStartPurchaseRequest& request,
    const FStartPurchaseDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/StartPurchase"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnStartPurchaseResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnStartPurchaseResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FStartPurchaseDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FStartPurchaseResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::SubtractUserVirtualCurrency(
    ClientModels::FSubtractUserVirtualCurrencyRequest& request,
    const FSubtractUserVirtualCurrencyDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/SubtractUserVirtualCurrency"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnSubtractUserVirtualCurrencyResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnSubtractUserVirtualCurrencyResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSubtractUserVirtualCurrencyDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FModifyUserVirtualCurrencyResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkAndroidDeviceID(
    ClientModels::FUnlinkAndroidDeviceIDRequest& request,
    const FUnlinkAndroidDeviceIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkAndroidDeviceID"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkAndroidDeviceIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkAndroidDeviceIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkAndroidDeviceIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkAndroidDeviceIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkApple(
    ClientModels::FUnlinkAppleRequest& request,
    const FUnlinkAppleDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkApple"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkAppleResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkAppleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkAppleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkCustomID(
    ClientModels::FUnlinkCustomIDRequest& request,
    const FUnlinkCustomIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkCustomID"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkCustomIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkCustomIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkCustomIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkCustomIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkFacebookAccount(
    ClientModels::FUnlinkFacebookAccountRequest& request,
    const FUnlinkFacebookAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkFacebookAccount"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkFacebookAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkFacebookAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkFacebookAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkFacebookAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkFacebookInstantGamesId(
    ClientModels::FUnlinkFacebookInstantGamesIdRequest& request,
    const FUnlinkFacebookInstantGamesIdDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkFacebookInstantGamesId"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkFacebookInstantGamesIdResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkFacebookInstantGamesIdResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkFacebookInstantGamesIdDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkFacebookInstantGamesIdResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkGameCenterAccount(
    ClientModels::FUnlinkGameCenterAccountRequest& request,
    const FUnlinkGameCenterAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkGameCenterAccount"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkGameCenterAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkGameCenterAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkGameCenterAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkGameCenterAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkGoogleAccount(
    ClientModels::FUnlinkGoogleAccountRequest& request,
    const FUnlinkGoogleAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkGoogleAccount"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkGoogleAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkGoogleAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkGoogleAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkGoogleAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkIOSDeviceID(
    ClientModels::FUnlinkIOSDeviceIDRequest& request,
    const FUnlinkIOSDeviceIDDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkIOSDeviceID"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkIOSDeviceIDResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkIOSDeviceIDResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkIOSDeviceIDDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkIOSDeviceIDResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkKongregate(
    ClientModels::FUnlinkKongregateAccountRequest& request,
    const FUnlinkKongregateDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkKongregate"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkKongregateResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkKongregateResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkKongregateDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkKongregateAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkNintendoServiceAccount(
    ClientModels::FUnlinkNintendoServiceAccountRequest& request,
    const FUnlinkNintendoServiceAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkNintendoServiceAccount"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkNintendoServiceAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkNintendoServiceAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkNintendoServiceAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkNintendoSwitchDeviceId(
    ClientModels::FUnlinkNintendoSwitchDeviceIdRequest& request,
    const FUnlinkNintendoSwitchDeviceIdDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkNintendoSwitchDeviceId"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkNintendoSwitchDeviceIdResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkNintendoSwitchDeviceIdResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkNintendoSwitchDeviceIdDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkNintendoSwitchDeviceIdResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkOpenIdConnect(
    ClientModels::FUnlinkOpenIdConnectRequest& request,
    const FUnlinkOpenIdConnectDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkOpenIdConnect"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkOpenIdConnectResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkOpenIdConnectResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkOpenIdConnectDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkPSNAccount(
    ClientModels::FUnlinkPSNAccountRequest& request,
    const FUnlinkPSNAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkPSNAccount"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkPSNAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkPSNAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkPSNAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkPSNAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkSteamAccount(
    ClientModels::FUnlinkSteamAccountRequest& request,
    const FUnlinkSteamAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkSteamAccount"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkSteamAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkSteamAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkSteamAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkSteamAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkTwitch(
    ClientModels::FUnlinkTwitchAccountRequest& request,
    const FUnlinkTwitchDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkTwitch"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkTwitchResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkTwitchResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkTwitchDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkTwitchAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlinkXboxAccount(
    ClientModels::FUnlinkXboxAccountRequest& request,
    const FUnlinkXboxAccountDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlinkXboxAccount"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlinkXboxAccountResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlinkXboxAccountResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlinkXboxAccountDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlinkXboxAccountResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlockContainerInstance(
    ClientModels::FUnlockContainerInstanceRequest& request,
    const FUnlockContainerInstanceDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlockContainerInstance"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlockContainerInstanceResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlockContainerInstanceResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlockContainerInstanceDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlockContainerItemResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UnlockContainerItem(
    ClientModels::FUnlockContainerItemRequest& request,
    const FUnlockContainerItemDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UnlockContainerItem"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUnlockContainerItemResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUnlockContainerItemResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlockContainerItemDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUnlockContainerItemResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UpdateAvatarUrl(
    ClientModels::FUpdateAvatarUrlRequest& request,
    const FUpdateAvatarUrlDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UpdateAvatarUrl"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUpdateAvatarUrlResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUpdateAvatarUrlResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateAvatarUrlDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FEmptyResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UpdateCharacterData(
    ClientModels::FUpdateCharacterDataRequest& request,
    const FUpdateCharacterDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UpdateCharacterData"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUpdateCharacterDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUpdateCharacterDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateCharacterDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUpdateCharacterDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UpdateCharacterStatistics(
    ClientModels::FUpdateCharacterStatisticsRequest& request,
    const FUpdateCharacterStatisticsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UpdateCharacterStatistics"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUpdateCharacterStatisticsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUpdateCharacterStatisticsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateCharacterStatisticsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUpdateCharacterStatisticsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UpdatePlayerStatistics(
    ClientModels::FUpdatePlayerStatisticsRequest& request,
    const FUpdatePlayerStatisticsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UpdatePlayerStatistics"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUpdatePlayerStatisticsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUpdatePlayerStatisticsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdatePlayerStatisticsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUpdatePlayerStatisticsResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UpdateSharedGroupData(
    ClientModels::FUpdateSharedGroupDataRequest& request,
    const FUpdateSharedGroupDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UpdateSharedGroupData"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUpdateSharedGroupDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUpdateSharedGroupDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateSharedGroupDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUpdateSharedGroupDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UpdateUserData(
    ClientModels::FUpdateUserDataRequest& request,
    const FUpdateUserDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UpdateUserData"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUpdateUserDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUpdateUserDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateUserDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUpdateUserDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UpdateUserPublisherData(
    ClientModels::FUpdateUserDataRequest& request,
    const FUpdateUserPublisherDataDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UpdateUserPublisherData"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUpdateUserPublisherDataResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUpdateUserPublisherDataResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateUserPublisherDataDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUpdateUserDataResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::UpdateUserTitleDisplayName(
    ClientModels::FUpdateUserTitleDisplayNameRequest& request,
    const FUpdateUserTitleDisplayNameDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/UpdateUserTitleDisplayName"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnUpdateUserTitleDisplayNameResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnUpdateUserTitleDisplayNameResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateUserTitleDisplayNameDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FUpdateUserTitleDisplayNameResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::ValidateAmazonIAPReceipt(
    ClientModels::FValidateAmazonReceiptRequest& request,
    const FValidateAmazonIAPReceiptDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/ValidateAmazonIAPReceipt"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnValidateAmazonIAPReceiptResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnValidateAmazonIAPReceiptResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FValidateAmazonIAPReceiptDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FValidateAmazonReceiptResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::ValidateGooglePlayPurchase(
    ClientModels::FValidateGooglePlayPurchaseRequest& request,
    const FValidateGooglePlayPurchaseDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/ValidateGooglePlayPurchase"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnValidateGooglePlayPurchaseResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnValidateGooglePlayPurchaseResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FValidateGooglePlayPurchaseDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FValidateGooglePlayPurchaseResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::ValidateIOSReceipt(
    ClientModels::FValidateIOSReceiptRequest& request,
    const FValidateIOSReceiptDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/ValidateIOSReceipt"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnValidateIOSReceiptResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnValidateIOSReceiptResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FValidateIOSReceiptDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FValidateIOSReceiptResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::ValidateWindowsStoreReceipt(
    ClientModels::FValidateWindowsReceiptRequest& request,
    const FValidateWindowsStoreReceiptDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/ValidateWindowsStoreReceipt"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnValidateWindowsStoreReceiptResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnValidateWindowsStoreReceiptResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FValidateWindowsStoreReceiptDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FValidateWindowsReceiptResult outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::WriteCharacterEvent(
    ClientModels::FWriteClientCharacterEventRequest& request,
    const FWriteCharacterEventDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/WriteCharacterEvent"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnWriteCharacterEventResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnWriteCharacterEventResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FWriteCharacterEventDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FWriteEventResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::WritePlayerEvent(
    ClientModels::FWriteClientPlayerEventRequest& request,
    const FWritePlayerEventDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/WritePlayerEvent"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnWritePlayerEventResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnWritePlayerEventResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FWritePlayerEventDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FWriteEventResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabClientAPI::WriteTitleEvent(
    ClientModels::FWriteTitleEventRequest& request,
    const FWriteTitleEventDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString clientTicket = request.AuthenticationContext.IsValid() ? request.AuthenticationContext->GetClientSessionTicket() : PlayFabSettings::GetClientSessionTicket();
    if(clientTicket.Len() == 0) {
        UE_LOG(LogPlayFabCpp, Error, TEXT("You must log in before calling this function"));
        return false;
    }


    auto HttpRequest = PlayFabRequestHandler::SendRequest(nullptr, TEXT("/Client/WriteTitleEvent"), request.toJSONString(), TEXT("X-Authorization"), clientTicket);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabClientAPI::OnWriteTitleEventResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabClientAPI::OnWriteTitleEventResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FWriteTitleEventDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    ClientModels::FWriteEventResponse outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}
