//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "PlayFabCppBaseModel.h"

namespace PlayFab
{
namespace CloudScriptModels
{

    struct PLAYFABCPP_API FAdCampaignAttributionModel : public PlayFab::FPlayFabCppBaseModel
    {
        // UTC time stamp of attribution
        FDateTime AttributedAt;

        // [optional] Attribution campaign identifier
        FString CampaignId;

        // [optional] Attribution network name
        FString Platform;

        FAdCampaignAttributionModel() :
            FPlayFabCppBaseModel(),
            AttributedAt(0),
            CampaignId(),
            Platform()
            {}

        FAdCampaignAttributionModel(const FAdCampaignAttributionModel& src) :
            FPlayFabCppBaseModel(),
            AttributedAt(src.AttributedAt),
            CampaignId(src.CampaignId),
            Platform(src.Platform)
            {}

        FAdCampaignAttributionModel(const TSharedPtr<FJsonObject>& obj) : FAdCampaignAttributionModel()
        {
            readFromValue(obj);
        }

        ~FAdCampaignAttributionModel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum CloudScriptRevisionOption
    {
        CloudScriptRevisionOptionLive,
        CloudScriptRevisionOptionLatest,
        CloudScriptRevisionOptionSpecific
    };

    PLAYFABCPP_API void writeCloudScriptRevisionOptionEnumJSON(CloudScriptRevisionOption enumVal, JsonWriter& writer);
    PLAYFABCPP_API CloudScriptRevisionOption readCloudScriptRevisionOptionFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API CloudScriptRevisionOption readCloudScriptRevisionOptionFromValue(const FString& value);

    enum EmailVerificationStatus
    {
        EmailVerificationStatusUnverified,
        EmailVerificationStatusPending,
        EmailVerificationStatusConfirmed
    };

    PLAYFABCPP_API void writeEmailVerificationStatusEnumJSON(EmailVerificationStatus enumVal, JsonWriter& writer);
    PLAYFABCPP_API EmailVerificationStatus readEmailVerificationStatusFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API EmailVerificationStatus readEmailVerificationStatusFromValue(const FString& value);

    struct PLAYFABCPP_API FContactEmailInfoModel : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The email address
        FString EmailAddress;

        // [optional] The name of the email info data
        FString Name;

        // [optional] The verification status of the email
        Boxed<EmailVerificationStatus> VerificationStatus;

        FContactEmailInfoModel() :
            FPlayFabCppBaseModel(),
            EmailAddress(),
            Name(),
            VerificationStatus()
            {}

        FContactEmailInfoModel(const FContactEmailInfoModel& src) :
            FPlayFabCppBaseModel(),
            EmailAddress(src.EmailAddress),
            Name(src.Name),
            VerificationStatus(src.VerificationStatus)
            {}

        FContactEmailInfoModel(const TSharedPtr<FJsonObject>& obj) : FContactEmailInfoModel()
        {
            readFromValue(obj);
        }

        ~FContactEmailInfoModel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum ContinentCode
    {
        ContinentCodeAF,
        ContinentCodeAN,
        ContinentCodeAS,
        ContinentCodeEU,
        ContinentCodeNA,
        ContinentCodeOC,
        ContinentCodeSA
    };

    PLAYFABCPP_API void writeContinentCodeEnumJSON(ContinentCode enumVal, JsonWriter& writer);
    PLAYFABCPP_API ContinentCode readContinentCodeFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API ContinentCode readContinentCodeFromValue(const FString& value);

    enum CountryCode
    {
        CountryCodeAF,
        CountryCodeAX,
        CountryCodeAL,
        CountryCodeDZ,
        CountryCodeAS,
        CountryCodeAD,
        CountryCodeAO,
        CountryCodeAI,
        CountryCodeAQ,
        CountryCodeAG,
        CountryCodeAR,
        CountryCodeAM,
        CountryCodeAW,
        CountryCodeAU,
        CountryCodeAT,
        CountryCodeAZ,
        CountryCodeBS,
        CountryCodeBH,
        CountryCodeBD,
        CountryCodeBB,
        CountryCodeBY,
        CountryCodeBE,
        CountryCodeBZ,
        CountryCodeBJ,
        CountryCodeBM,
        CountryCodeBT,
        CountryCodeBO,
        CountryCodeBQ,
        CountryCodeBA,
        CountryCodeBW,
        CountryCodeBV,
        CountryCodeBR,
        CountryCodeIO,
        CountryCodeBN,
        CountryCodeBG,
        CountryCodeBF,
        CountryCodeBI,
        CountryCodeKH,
        CountryCodeCM,
        CountryCodeCA,
        CountryCodeCV,
        CountryCodeKY,
        CountryCodeCF,
        CountryCodeTD,
        CountryCodeCL,
        CountryCodeCN,
        CountryCodeCX,
        CountryCodeCC,
        CountryCodeCO,
        CountryCodeKM,
        CountryCodeCG,
        CountryCodeCD,
        CountryCodeCK,
        CountryCodeCR,
        CountryCodeCI,
        CountryCodeHR,
        CountryCodeCU,
        CountryCodeCW,
        CountryCodeCY,
        CountryCodeCZ,
        CountryCodeDK,
        CountryCodeDJ,
        CountryCodeDM,
        CountryCodeDO,
        CountryCodeEC,
        CountryCodeEG,
        CountryCodeSV,
        CountryCodeGQ,
        CountryCodeER,
        CountryCodeEE,
        CountryCodeET,
        CountryCodeFK,
        CountryCodeFO,
        CountryCodeFJ,
        CountryCodeFI,
        CountryCodeFR,
        CountryCodeGF,
        CountryCodePF,
        CountryCodeTF,
        CountryCodeGA,
        CountryCodeGM,
        CountryCodeGE,
        CountryCodeDE,
        CountryCodeGH,
        CountryCodeGI,
        CountryCodeGR,
        CountryCodeGL,
        CountryCodeGD,
        CountryCodeGP,
        CountryCodeGU,
        CountryCodeGT,
        CountryCodeGG,
        CountryCodeGN,
        CountryCodeGW,
        CountryCodeGY,
        CountryCodeHT,
        CountryCodeHM,
        CountryCodeVA,
        CountryCodeHN,
        CountryCodeHK,
        CountryCodeHU,
        CountryCodeIS,
        CountryCodeIN,
        CountryCodeID,
        CountryCodeIR,
        CountryCodeIQ,
        CountryCodeIE,
        CountryCodeIM,
        CountryCodeIL,
        CountryCodeIT,
        CountryCodeJM,
        CountryCodeJP,
        CountryCodeJE,
        CountryCodeJO,
        CountryCodeKZ,
        CountryCodeKE,
        CountryCodeKI,
        CountryCodeKP,
        CountryCodeKR,
        CountryCodeKW,
        CountryCodeKG,
        CountryCodeLA,
        CountryCodeLV,
        CountryCodeLB,
        CountryCodeLS,
        CountryCodeLR,
        CountryCodeLY,
        CountryCodeLI,
        CountryCodeLT,
        CountryCodeLU,
        CountryCodeMO,
        CountryCodeMK,
        CountryCodeMG,
        CountryCodeMW,
        CountryCodeMY,
        CountryCodeMV,
        CountryCodeML,
        CountryCodeMT,
        CountryCodeMH,
        CountryCodeMQ,
        CountryCodeMR,
        CountryCodeMU,
        CountryCodeYT,
        CountryCodeMX,
        CountryCodeFM,
        CountryCodeMD,
        CountryCodeMC,
        CountryCodeMN,
        CountryCodeME,
        CountryCodeMS,
        CountryCodeMA,
        CountryCodeMZ,
        CountryCodeMM,
        CountryCodeNA,
        CountryCodeNR,
        CountryCodeNP,
        CountryCodeNL,
        CountryCodeNC,
        CountryCodeNZ,
        CountryCodeNI,
        CountryCodeNE,
        CountryCodeNG,
        CountryCodeNU,
        CountryCodeNF,
        CountryCodeMP,
        CountryCodeNO,
        CountryCodeOM,
        CountryCodePK,
        CountryCodePW,
        CountryCodePS,
        CountryCodePA,
        CountryCodePG,
        CountryCodePY,
        CountryCodePE,
        CountryCodePH,
        CountryCodePN,
        CountryCodePL,
        CountryCodePT,
        CountryCodePR,
        CountryCodeQA,
        CountryCodeRE,
        CountryCodeRO,
        CountryCodeRU,
        CountryCodeRW,
        CountryCodeBL,
        CountryCodeSH,
        CountryCodeKN,
        CountryCodeLC,
        CountryCodeMF,
        CountryCodePM,
        CountryCodeVC,
        CountryCodeWS,
        CountryCodeSM,
        CountryCodeST,
        CountryCodeSA,
        CountryCodeSN,
        CountryCodeRS,
        CountryCodeSC,
        CountryCodeSL,
        CountryCodeSG,
        CountryCodeSX,
        CountryCodeSK,
        CountryCodeSI,
        CountryCodeSB,
        CountryCodeSO,
        CountryCodeZA,
        CountryCodeGS,
        CountryCodeSS,
        CountryCodeES,
        CountryCodeLK,
        CountryCodeSD,
        CountryCodeSR,
        CountryCodeSJ,
        CountryCodeSZ,
        CountryCodeSE,
        CountryCodeCH,
        CountryCodeSY,
        CountryCodeTW,
        CountryCodeTJ,
        CountryCodeTZ,
        CountryCodeTH,
        CountryCodeTL,
        CountryCodeTG,
        CountryCodeTK,
        CountryCodeTO,
        CountryCodeTT,
        CountryCodeTN,
        CountryCodeTR,
        CountryCodeTM,
        CountryCodeTC,
        CountryCodeTV,
        CountryCodeUG,
        CountryCodeUA,
        CountryCodeAE,
        CountryCodeGB,
        CountryCodeUS,
        CountryCodeUM,
        CountryCodeUY,
        CountryCodeUZ,
        CountryCodeVU,
        CountryCodeVE,
        CountryCodeVN,
        CountryCodeVG,
        CountryCodeVI,
        CountryCodeWF,
        CountryCodeEH,
        CountryCodeYE,
        CountryCodeZM,
        CountryCodeZW
    };

    PLAYFABCPP_API void writeCountryCodeEnumJSON(CountryCode enumVal, JsonWriter& writer);
    PLAYFABCPP_API CountryCode readCountryCodeFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API CountryCode readCountryCodeFromValue(const FString& value);

    struct PLAYFABCPP_API FEmptyResult : public PlayFab::FPlayFabCppResultCommon
    {
        FEmptyResult() :
            FPlayFabCppResultCommon()
            {}

        FEmptyResult(const FEmptyResult& src) :
            FPlayFabCppResultCommon()
            {}

        FEmptyResult(const TSharedPtr<FJsonObject>& obj) : FEmptyResult()
        {
            readFromValue(obj);
        }

        ~FEmptyResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEntityKey : public PlayFab::FPlayFabCppBaseModel
    {
        // Unique ID of the entity.
        FString Id;

        // [optional] Entity type. See https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types
        FString Type;

        FEntityKey() :
            FPlayFabCppBaseModel(),
            Id(),
            Type()
            {}

        FEntityKey(const FEntityKey& src) :
            FPlayFabCppBaseModel(),
            Id(src.Id),
            Type(src.Type)
            {}

        FEntityKey(const TSharedPtr<FJsonObject>& obj) : FEntityKey()
        {
            readFromValue(obj);
        }

        ~FEntityKey();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FScriptExecutionError : public PlayFab::FPlayFabCppBaseModel
    {
        /**
         * [optional] Error code, such as CloudScriptNotFound, JavascriptException, CloudScriptFunctionArgumentSizeExceeded,
         * CloudScriptAPIRequestCountExceeded, CloudScriptAPIRequestError, or CloudScriptHTTPRequestError
         */
        FString Error;

        // [optional] Details about the error
        FString Message;

        // [optional] Point during the execution of the script at which the error occurred, if any
        FString StackTrace;

        FScriptExecutionError() :
            FPlayFabCppBaseModel(),
            Error(),
            Message(),
            StackTrace()
            {}

        FScriptExecutionError(const FScriptExecutionError& src) :
            FPlayFabCppBaseModel(),
            Error(src.Error),
            Message(src.Message),
            StackTrace(src.StackTrace)
            {}

        FScriptExecutionError(const TSharedPtr<FJsonObject>& obj) : FScriptExecutionError()
        {
            readFromValue(obj);
        }

        ~FScriptExecutionError();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FLogStatement : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Optional object accompanying the message as contextual information
        FJsonKeeper Data;

        // [optional] 'Debug', 'Info', or 'Error'
        FString Level;

        // [optional] undefined
        FString Message;

        FLogStatement() :
            FPlayFabCppBaseModel(),
            Data(),
            Level(),
            Message()
            {}

        FLogStatement(const FLogStatement& src) :
            FPlayFabCppBaseModel(),
            Data(src.Data),
            Level(src.Level),
            Message(src.Message)
            {}

        FLogStatement(const TSharedPtr<FJsonObject>& obj) : FLogStatement()
        {
            readFromValue(obj);
        }

        ~FLogStatement();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FExecuteCloudScriptResult : public PlayFab::FPlayFabCppResultCommon
    {
        // Number of PlayFab API requests issued by the CloudScript function
        int32 APIRequestsIssued;

        // [optional] Information about the error, if any, that occurred during execution
        TSharedPtr<FScriptExecutionError> Error;

        double ExecutionTimeSeconds;

        // [optional] The name of the function that executed
        FString FunctionName;

        // [optional] The object returned from the CloudScript function, if any
        FJsonKeeper FunctionResult;

        /**
         * [optional] Flag indicating if the FunctionResult was too large and was subsequently dropped from this event. This only occurs if
         * the total event size is larger than 350KB.
         */
        Boxed<bool> FunctionResultTooLarge;

        // Number of external HTTP requests issued by the CloudScript function
        int32 HttpRequestsIssued;

        /**
         * [optional] Entries logged during the function execution. These include both entries logged in the function code using log.info()
         * and log.error() and error entries for API and HTTP request failures.
         */
        TArray<FLogStatement> Logs;
        /**
         * [optional] Flag indicating if the logs were too large and were subsequently dropped from this event. This only occurs if the total
         * event size is larger than 350KB after the FunctionResult was removed.
         */
        Boxed<bool> LogsTooLarge;

        uint32 MemoryConsumedBytes;

        /**
         * Processor time consumed while executing the function. This does not include time spent waiting on API calls or HTTP
         * requests.
         */
        double ProcessorTimeSeconds;

        // The revision of the CloudScript that executed
        int32 Revision;

        FExecuteCloudScriptResult() :
            FPlayFabCppResultCommon(),
            APIRequestsIssued(0),
            Error(nullptr),
            ExecutionTimeSeconds(0),
            FunctionName(),
            FunctionResult(),
            FunctionResultTooLarge(),
            HttpRequestsIssued(0),
            Logs(),
            LogsTooLarge(),
            MemoryConsumedBytes(0),
            ProcessorTimeSeconds(0),
            Revision(0)
            {}

        FExecuteCloudScriptResult(const FExecuteCloudScriptResult& src) :
            FPlayFabCppResultCommon(),
            APIRequestsIssued(src.APIRequestsIssued),
            Error(src.Error.IsValid() ? MakeShareable(new FScriptExecutionError(*src.Error)) : nullptr),
            ExecutionTimeSeconds(src.ExecutionTimeSeconds),
            FunctionName(src.FunctionName),
            FunctionResult(src.FunctionResult),
            FunctionResultTooLarge(src.FunctionResultTooLarge),
            HttpRequestsIssued(src.HttpRequestsIssued),
            Logs(src.Logs),
            LogsTooLarge(src.LogsTooLarge),
            MemoryConsumedBytes(src.MemoryConsumedBytes),
            ProcessorTimeSeconds(src.ProcessorTimeSeconds),
            Revision(src.Revision)
            {}

        FExecuteCloudScriptResult(const TSharedPtr<FJsonObject>& obj) : FExecuteCloudScriptResult()
        {
            readFromValue(obj);
        }

        ~FExecuteCloudScriptResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FExecuteEntityCloudScriptRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // The name of the CloudScript function to execute
        FString FunctionName;

        // [optional] Object that is passed in to the function as the first argument
        FJsonKeeper FunctionParameter;

        /**
         * [optional] Generate a 'entity_executed_cloudscript' PlayStream event containing the results of the function execution and other
         * contextual information. This event will show up in the PlayStream debugger console for the player in Game Manager.
         */
        Boxed<bool> GeneratePlayStreamEvent;

        /**
         * [optional] Option for which revision of the CloudScript to execute. 'Latest' executes the most recently created revision, 'Live'
         * executes the current live, published revision, and 'Specific' executes the specified revision. The default value is
         * 'Specific', if the SpecificRevision parameter is specified, otherwise it is 'Live'.
         */
        Boxed<CloudScriptRevisionOption> RevisionSelection;

        // [optional] The specific revision to execute, when RevisionSelection is set to 'Specific'
        Boxed<int32> SpecificRevision;

        FExecuteEntityCloudScriptRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr),
            FunctionName(),
            FunctionParameter(),
            GeneratePlayStreamEvent(),
            RevisionSelection(),
            SpecificRevision()
            {}

        FExecuteEntityCloudScriptRequest(const FExecuteEntityCloudScriptRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            FunctionName(src.FunctionName),
            FunctionParameter(src.FunctionParameter),
            GeneratePlayStreamEvent(src.GeneratePlayStreamEvent),
            RevisionSelection(src.RevisionSelection),
            SpecificRevision(src.SpecificRevision)
            {}

        FExecuteEntityCloudScriptRequest(const TSharedPtr<FJsonObject>& obj) : FExecuteEntityCloudScriptRequest()
        {
            readFromValue(obj);
        }

        ~FExecuteEntityCloudScriptRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FExecuteFunctionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // The name of the CloudScript function to execute
        FString FunctionName;

        // [optional] Object that is passed in to the function as the FunctionArgument field of the FunctionExecutionContext data structure
        FJsonKeeper FunctionParameter;

        /**
         * [optional] Generate a 'entity_executed_cloudscript_function' PlayStream event containing the results of the function execution and
         * other contextual information. This event will show up in the PlayStream debugger console for the player in Game Manager.
         */
        Boxed<bool> GeneratePlayStreamEvent;

        FExecuteFunctionRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr),
            FunctionName(),
            FunctionParameter(),
            GeneratePlayStreamEvent()
            {}

        FExecuteFunctionRequest(const FExecuteFunctionRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            FunctionName(src.FunctionName),
            FunctionParameter(src.FunctionParameter),
            GeneratePlayStreamEvent(src.GeneratePlayStreamEvent)
            {}

        FExecuteFunctionRequest(const TSharedPtr<FJsonObject>& obj) : FExecuteFunctionRequest()
        {
            readFromValue(obj);
        }

        ~FExecuteFunctionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FFunctionExecutionError : public PlayFab::FPlayFabCppBaseModel
    {
        /**
         * [optional] Error code, such as CloudScriptAzureFunctionsExecutionTimeLimitExceeded, CloudScriptAzureFunctionsArgumentSizeExceeded,
         * CloudScriptAzureFunctionsReturnSizeExceeded or CloudScriptAzureFunctionsHTTPRequestError
         */
        FString Error;

        // [optional] Details about the error
        FString Message;

        // [optional] Point during the execution of the function at which the error occurred, if any
        FString StackTrace;

        FFunctionExecutionError() :
            FPlayFabCppBaseModel(),
            Error(),
            Message(),
            StackTrace()
            {}

        FFunctionExecutionError(const FFunctionExecutionError& src) :
            FPlayFabCppBaseModel(),
            Error(src.Error),
            Message(src.Message),
            StackTrace(src.StackTrace)
            {}

        FFunctionExecutionError(const TSharedPtr<FJsonObject>& obj) : FFunctionExecutionError()
        {
            readFromValue(obj);
        }

        ~FFunctionExecutionError();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FExecuteFunctionResult : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Error from the CloudScript Azure Function.
        TSharedPtr<FFunctionExecutionError> Error;

        // The amount of time the function took to execute
        int32 ExecutionTimeMilliseconds;

        // [optional] The name of the function that executed
        FString FunctionName;

        // [optional] The object returned from the function, if any
        FJsonKeeper FunctionResult;

        // [optional] Flag indicating if the FunctionResult was too large and was subsequently dropped from this event.
        Boxed<bool> FunctionResultTooLarge;

        FExecuteFunctionResult() :
            FPlayFabCppResultCommon(),
            Error(nullptr),
            ExecutionTimeMilliseconds(0),
            FunctionName(),
            FunctionResult(),
            FunctionResultTooLarge()
            {}

        FExecuteFunctionResult(const FExecuteFunctionResult& src) :
            FPlayFabCppResultCommon(),
            Error(src.Error.IsValid() ? MakeShareable(new FFunctionExecutionError(*src.Error)) : nullptr),
            ExecutionTimeMilliseconds(src.ExecutionTimeMilliseconds),
            FunctionName(src.FunctionName),
            FunctionResult(src.FunctionResult),
            FunctionResultTooLarge(src.FunctionResultTooLarge)
            {}

        FExecuteFunctionResult(const TSharedPtr<FJsonObject>& obj) : FExecuteFunctionResult()
        {
            readFromValue(obj);
        }

        ~FExecuteFunctionResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FFunctionModel : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The address of the function.
        FString FunctionAddress;

        // [optional] The name the function was registered under.
        FString FunctionName;

        // [optional] The trigger type for the function.
        FString TriggerType;

        FFunctionModel() :
            FPlayFabCppBaseModel(),
            FunctionAddress(),
            FunctionName(),
            TriggerType()
            {}

        FFunctionModel(const FFunctionModel& src) :
            FPlayFabCppBaseModel(),
            FunctionAddress(src.FunctionAddress),
            FunctionName(src.FunctionName),
            TriggerType(src.TriggerType)
            {}

        FFunctionModel(const TSharedPtr<FJsonObject>& obj) : FFunctionModel()
        {
            readFromValue(obj);
        }

        ~FFunctionModel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FHttpFunctionModel : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The name the function was registered under.
        FString FunctionName;

        // [optional] The URL of the function.
        FString FunctionUrl;

        FHttpFunctionModel() :
            FPlayFabCppBaseModel(),
            FunctionName(),
            FunctionUrl()
            {}

        FHttpFunctionModel(const FHttpFunctionModel& src) :
            FPlayFabCppBaseModel(),
            FunctionName(src.FunctionName),
            FunctionUrl(src.FunctionUrl)
            {}

        FHttpFunctionModel(const TSharedPtr<FJsonObject>& obj) : FHttpFunctionModel()
        {
            readFromValue(obj);
        }

        ~FHttpFunctionModel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum LoginIdentityProvider
    {
        LoginIdentityProviderUnknown,
        LoginIdentityProviderPlayFab,
        LoginIdentityProviderCustom,
        LoginIdentityProviderGameCenter,
        LoginIdentityProviderGooglePlay,
        LoginIdentityProviderSteam,
        LoginIdentityProviderXBoxLive,
        LoginIdentityProviderPSN,
        LoginIdentityProviderKongregate,
        LoginIdentityProviderFacebook,
        LoginIdentityProviderIOSDevice,
        LoginIdentityProviderAndroidDevice,
        LoginIdentityProviderTwitch,
        LoginIdentityProviderWindowsHello,
        LoginIdentityProviderGameServer,
        LoginIdentityProviderCustomServer,
        LoginIdentityProviderNintendoSwitch,
        LoginIdentityProviderFacebookInstantGames,
        LoginIdentityProviderOpenIdConnect,
        LoginIdentityProviderApple,
        LoginIdentityProviderNintendoSwitchAccount
    };

    PLAYFABCPP_API void writeLoginIdentityProviderEnumJSON(LoginIdentityProvider enumVal, JsonWriter& writer);
    PLAYFABCPP_API LoginIdentityProvider readLoginIdentityProviderFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API LoginIdentityProvider readLoginIdentityProviderFromValue(const FString& value);

    struct PLAYFABCPP_API FLinkedPlatformAccountModel : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Linked account email of the user on the platform, if available
        FString Email;

        // [optional] Authentication platform
        Boxed<LoginIdentityProvider> Platform;

        // [optional] Unique account identifier of the user on the platform
        FString PlatformUserId;

        // [optional] Linked account username of the user on the platform, if available
        FString Username;

        FLinkedPlatformAccountModel() :
            FPlayFabCppBaseModel(),
            Email(),
            Platform(),
            PlatformUserId(),
            Username()
            {}

        FLinkedPlatformAccountModel(const FLinkedPlatformAccountModel& src) :
            FPlayFabCppBaseModel(),
            Email(src.Email),
            Platform(src.Platform),
            PlatformUserId(src.PlatformUserId),
            Username(src.Username)
            {}

        FLinkedPlatformAccountModel(const TSharedPtr<FJsonObject>& obj) : FLinkedPlatformAccountModel()
        {
            readFromValue(obj);
        }

        ~FLinkedPlatformAccountModel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListFunctionsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FListFunctionsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FListFunctionsRequest(const FListFunctionsRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags)
            {}

        FListFunctionsRequest(const TSharedPtr<FJsonObject>& obj) : FListFunctionsRequest()
        {
            readFromValue(obj);
        }

        ~FListFunctionsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListFunctionsResult : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of functions that are currently registered for the title.
        TArray<FFunctionModel> Functions;
        FListFunctionsResult() :
            FPlayFabCppResultCommon(),
            Functions()
            {}

        FListFunctionsResult(const FListFunctionsResult& src) :
            FPlayFabCppResultCommon(),
            Functions(src.Functions)
            {}

        FListFunctionsResult(const TSharedPtr<FJsonObject>& obj) : FListFunctionsResult()
        {
            readFromValue(obj);
        }

        ~FListFunctionsResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListHttpFunctionsResult : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of HTTP triggered functions that are currently registered for the title.
        TArray<FHttpFunctionModel> Functions;
        FListHttpFunctionsResult() :
            FPlayFabCppResultCommon(),
            Functions()
            {}

        FListHttpFunctionsResult(const FListHttpFunctionsResult& src) :
            FPlayFabCppResultCommon(),
            Functions(src.Functions)
            {}

        FListHttpFunctionsResult(const TSharedPtr<FJsonObject>& obj) : FListHttpFunctionsResult()
        {
            readFromValue(obj);
        }

        ~FListHttpFunctionsResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FQueuedFunctionModel : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The connection string for the Azure Storage Account that hosts the queue.
        FString ConnectionString;

        // [optional] The name the function was registered under.
        FString FunctionName;

        // [optional] The name of the queue that triggers the Azure Function.
        FString QueueName;

        FQueuedFunctionModel() :
            FPlayFabCppBaseModel(),
            ConnectionString(),
            FunctionName(),
            QueueName()
            {}

        FQueuedFunctionModel(const FQueuedFunctionModel& src) :
            FPlayFabCppBaseModel(),
            ConnectionString(src.ConnectionString),
            FunctionName(src.FunctionName),
            QueueName(src.QueueName)
            {}

        FQueuedFunctionModel(const TSharedPtr<FJsonObject>& obj) : FQueuedFunctionModel()
        {
            readFromValue(obj);
        }

        ~FQueuedFunctionModel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListQueuedFunctionsResult : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of Queue triggered functions that are currently registered for the title.
        TArray<FQueuedFunctionModel> Functions;
        FListQueuedFunctionsResult() :
            FPlayFabCppResultCommon(),
            Functions()
            {}

        FListQueuedFunctionsResult(const FListQueuedFunctionsResult& src) :
            FPlayFabCppResultCommon(),
            Functions(src.Functions)
            {}

        FListQueuedFunctionsResult(const TSharedPtr<FJsonObject>& obj) : FListQueuedFunctionsResult()
        {
            readFromValue(obj);
        }

        ~FListQueuedFunctionsResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FLocationModel : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] City name.
        FString City;

        // [optional] The two-character continent code for this location
        Boxed<ContinentCode> pfContinentCode;

        // [optional] The two-character ISO 3166-1 country code for the country associated with the location
        Boxed<CountryCode> pfCountryCode;

        // [optional] Latitude coordinate of the geographic location.
        Boxed<double> Latitude;

        // [optional] Longitude coordinate of the geographic location.
        Boxed<double> Longitude;

        FLocationModel() :
            FPlayFabCppBaseModel(),
            City(),
            pfContinentCode(),
            pfCountryCode(),
            Latitude(),
            Longitude()
            {}

        FLocationModel(const FLocationModel& src) :
            FPlayFabCppBaseModel(),
            City(src.City),
            pfContinentCode(src.pfContinentCode),
            pfCountryCode(src.pfCountryCode),
            Latitude(src.Latitude),
            Longitude(src.Longitude)
            {}

        FLocationModel(const TSharedPtr<FJsonObject>& obj) : FLocationModel()
        {
            readFromValue(obj);
        }

        ~FLocationModel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum SubscriptionProviderStatus
    {
        SubscriptionProviderStatusNoError,
        SubscriptionProviderStatusCancelled,
        SubscriptionProviderStatusUnknownError,
        SubscriptionProviderStatusBillingError,
        SubscriptionProviderStatusProductUnavailable,
        SubscriptionProviderStatusCustomerDidNotAcceptPriceChange,
        SubscriptionProviderStatusFreeTrial,
        SubscriptionProviderStatusPaymentPending
    };

    PLAYFABCPP_API void writeSubscriptionProviderStatusEnumJSON(SubscriptionProviderStatus enumVal, JsonWriter& writer);
    PLAYFABCPP_API SubscriptionProviderStatus readSubscriptionProviderStatusFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API SubscriptionProviderStatus readSubscriptionProviderStatusFromValue(const FString& value);

    struct PLAYFABCPP_API FSubscriptionModel : public PlayFab::FPlayFabCppBaseModel
    {
        // When this subscription expires.
        FDateTime Expiration;

        // The time the subscription was orignially purchased
        FDateTime InitialSubscriptionTime;

        // Whether this subscription is currently active. That is, if Expiration > now.
        bool IsActive;

        // [optional] The status of this subscription, according to the subscription provider.
        Boxed<SubscriptionProviderStatus> Status;

        // [optional] The id for this subscription
        FString SubscriptionId;

        // [optional] The item id for this subscription from the primary catalog
        FString SubscriptionItemId;

        // [optional] The provider for this subscription. Apple or Google Play are supported today.
        FString SubscriptionProvider;

        FSubscriptionModel() :
            FPlayFabCppBaseModel(),
            Expiration(0),
            InitialSubscriptionTime(0),
            IsActive(false),
            Status(),
            SubscriptionId(),
            SubscriptionItemId(),
            SubscriptionProvider()
            {}

        FSubscriptionModel(const FSubscriptionModel& src) :
            FPlayFabCppBaseModel(),
            Expiration(src.Expiration),
            InitialSubscriptionTime(src.InitialSubscriptionTime),
            IsActive(src.IsActive),
            Status(src.Status),
            SubscriptionId(src.SubscriptionId),
            SubscriptionItemId(src.SubscriptionItemId),
            SubscriptionProvider(src.SubscriptionProvider)
            {}

        FSubscriptionModel(const TSharedPtr<FJsonObject>& obj) : FSubscriptionModel()
        {
            readFromValue(obj);
        }

        ~FSubscriptionModel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FMembershipModel : public PlayFab::FPlayFabCppBaseModel
    {
        // Whether this membership is active. That is, whether the MembershipExpiration time has been reached.
        bool IsActive;

        // The time this membership expires
        FDateTime MembershipExpiration;

        // [optional] The id of the membership
        FString MembershipId;

        /**
         * [optional] Membership expirations can be explicitly overridden (via game manager or the admin api). If this membership has been
         * overridden, this will be the new expiration time.
         */
        Boxed<FDateTime> OverrideExpiration;

        // [optional] Whether the override expiration is set.
        Boxed<bool> OverrideIsSet;

        // [optional] The list of subscriptions that this player has for this membership
        TArray<FSubscriptionModel> Subscriptions;
        FMembershipModel() :
            FPlayFabCppBaseModel(),
            IsActive(false),
            MembershipExpiration(0),
            MembershipId(),
            OverrideExpiration(),
            OverrideIsSet(),
            Subscriptions()
            {}

        FMembershipModel(const FMembershipModel& src) :
            FPlayFabCppBaseModel(),
            IsActive(src.IsActive),
            MembershipExpiration(src.MembershipExpiration),
            MembershipId(src.MembershipId),
            OverrideExpiration(src.OverrideExpiration),
            OverrideIsSet(src.OverrideIsSet),
            Subscriptions(src.Subscriptions)
            {}

        FMembershipModel(const TSharedPtr<FJsonObject>& obj) : FMembershipModel()
        {
            readFromValue(obj);
        }

        ~FMembershipModel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FNameIdentifier : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Id Identifier, if present
        FString Id;

        // [optional] Name Identifier, if present
        FString Name;

        FNameIdentifier() :
            FPlayFabCppBaseModel(),
            Id(),
            Name()
            {}

        FNameIdentifier(const FNameIdentifier& src) :
            FPlayFabCppBaseModel(),
            Id(src.Id),
            Name(src.Name)
            {}

        FNameIdentifier(const TSharedPtr<FJsonObject>& obj) : FNameIdentifier()
        {
            readFromValue(obj);
        }

        ~FNameIdentifier();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum PushNotificationPlatform
    {
        PushNotificationPlatformApplePushNotificationService,
        PushNotificationPlatformGoogleCloudMessaging
    };

    PLAYFABCPP_API void writePushNotificationPlatformEnumJSON(PushNotificationPlatform enumVal, JsonWriter& writer);
    PLAYFABCPP_API PushNotificationPlatform readPushNotificationPlatformFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API PushNotificationPlatform readPushNotificationPlatformFromValue(const FString& value);

    struct PLAYFABCPP_API FPushNotificationRegistrationModel : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Notification configured endpoint
        FString NotificationEndpointARN;

        // [optional] Push notification platform
        Boxed<PushNotificationPlatform> Platform;

        FPushNotificationRegistrationModel() :
            FPlayFabCppBaseModel(),
            NotificationEndpointARN(),
            Platform()
            {}

        FPushNotificationRegistrationModel(const FPushNotificationRegistrationModel& src) :
            FPlayFabCppBaseModel(),
            NotificationEndpointARN(src.NotificationEndpointARN),
            Platform(src.Platform)
            {}

        FPushNotificationRegistrationModel(const TSharedPtr<FJsonObject>& obj) : FPushNotificationRegistrationModel()
        {
            readFromValue(obj);
        }

        ~FPushNotificationRegistrationModel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FStatisticModel : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Statistic name
        FString Name;

        // Statistic value
        int32 Value;

        // Statistic version (0 if not a versioned statistic)
        int32 Version;

        FStatisticModel() :
            FPlayFabCppBaseModel(),
            Name(),
            Value(0),
            Version(0)
            {}

        FStatisticModel(const FStatisticModel& src) :
            FPlayFabCppBaseModel(),
            Name(src.Name),
            Value(src.Value),
            Version(src.Version)
            {}

        FStatisticModel(const TSharedPtr<FJsonObject>& obj) : FStatisticModel()
        {
            readFromValue(obj);
        }

        ~FStatisticModel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FTagModel : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Full value of the tag, including namespace
        FString TagValue;

        FTagModel() :
            FPlayFabCppBaseModel(),
            TagValue()
            {}

        FTagModel(const FTagModel& src) :
            FPlayFabCppBaseModel(),
            TagValue(src.TagValue)
            {}

        FTagModel(const TSharedPtr<FJsonObject>& obj) : FTagModel()
        {
            readFromValue(obj);
        }

        ~FTagModel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FValueToDateModel : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] ISO 4217 code of the currency used in the purchases
        FString Currency;

        /**
         * Total value of the purchases in a whole number of 1/100 monetary units. For example, 999 indicates nine dollars and
         * ninety-nine cents when Currency is 'USD')
         */
        uint32 TotalValue;

        /**
         * [optional] Total value of the purchases in a string representation of decimal monetary units. For example, '9.99' indicates nine
         * dollars and ninety-nine cents when Currency is 'USD'.
         */
        FString TotalValueAsDecimal;

        FValueToDateModel() :
            FPlayFabCppBaseModel(),
            Currency(),
            TotalValue(0),
            TotalValueAsDecimal()
            {}

        FValueToDateModel(const FValueToDateModel& src) :
            FPlayFabCppBaseModel(),
            Currency(src.Currency),
            TotalValue(src.TotalValue),
            TotalValueAsDecimal(src.TotalValueAsDecimal)
            {}

        FValueToDateModel(const TSharedPtr<FJsonObject>& obj) : FValueToDateModel()
        {
            readFromValue(obj);
        }

        ~FValueToDateModel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPlayerProfileModel : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] List of advertising campaigns the player has been attributed to
        TArray<FAdCampaignAttributionModel> AdCampaignAttributions;
        // [optional] URL of the player's avatar image
        FString AvatarUrl;

        // [optional] If the player is currently banned, the UTC Date when the ban expires
        Boxed<FDateTime> BannedUntil;

        // [optional] List of all contact email info associated with the player account
        TArray<FContactEmailInfoModel> ContactEmailAddresses;
        // [optional] Player record created
        Boxed<FDateTime> Created;

        // [optional] Player display name
        FString DisplayName;

        // [optional] List of experiment variants for the player.
        TArray<FString> ExperimentVariants;
        // [optional] UTC time when the player most recently logged in to the title
        Boxed<FDateTime> LastLogin;

        // [optional] List of all authentication systems linked to this player account
        TArray<FLinkedPlatformAccountModel> LinkedAccounts;
        // [optional] List of geographic locations from which the player has logged in to the title
        TArray<FLocationModel> Locations;
        // [optional] List of memberships for the player, along with whether are expired.
        TArray<FMembershipModel> Memberships;
        // [optional] Player account origination
        Boxed<LoginIdentityProvider> Origination;

        // [optional] PlayFab player account unique identifier
        FString PlayerId;

        // [optional] Publisher this player belongs to
        FString PublisherId;

        // [optional] List of configured end points registered for sending the player push notifications
        TArray<FPushNotificationRegistrationModel> PushNotificationRegistrations;
        // [optional] List of leaderboard statistic values for the player
        TArray<FStatisticModel> Statistics;
        // [optional] List of player's tags for segmentation
        TArray<FTagModel> Tags;
        // [optional] Title ID this player profile applies to
        FString TitleId;

        /**
         * [optional] Sum of the player's purchases made with real-money currencies, converted to US dollars equivalent and represented as a
         * whole number of cents (1/100 USD). For example, 999 indicates nine dollars and ninety-nine cents.
         */
        Boxed<uint32> TotalValueToDateInUSD;

        // [optional] List of the player's lifetime purchase totals, summed by real-money currency
        TArray<FValueToDateModel> ValuesToDate;
        FPlayerProfileModel() :
            FPlayFabCppBaseModel(),
            AdCampaignAttributions(),
            AvatarUrl(),
            BannedUntil(),
            ContactEmailAddresses(),
            Created(),
            DisplayName(),
            ExperimentVariants(),
            LastLogin(),
            LinkedAccounts(),
            Locations(),
            Memberships(),
            Origination(),
            PlayerId(),
            PublisherId(),
            PushNotificationRegistrations(),
            Statistics(),
            Tags(),
            TitleId(),
            TotalValueToDateInUSD(),
            ValuesToDate()
            {}

        FPlayerProfileModel(const FPlayerProfileModel& src) :
            FPlayFabCppBaseModel(),
            AdCampaignAttributions(src.AdCampaignAttributions),
            AvatarUrl(src.AvatarUrl),
            BannedUntil(src.BannedUntil),
            ContactEmailAddresses(src.ContactEmailAddresses),
            Created(src.Created),
            DisplayName(src.DisplayName),
            ExperimentVariants(src.ExperimentVariants),
            LastLogin(src.LastLogin),
            LinkedAccounts(src.LinkedAccounts),
            Locations(src.Locations),
            Memberships(src.Memberships),
            Origination(src.Origination),
            PlayerId(src.PlayerId),
            PublisherId(src.PublisherId),
            PushNotificationRegistrations(src.PushNotificationRegistrations),
            Statistics(src.Statistics),
            Tags(src.Tags),
            TitleId(src.TitleId),
            TotalValueToDateInUSD(src.TotalValueToDateInUSD),
            ValuesToDate(src.ValuesToDate)
            {}

        FPlayerProfileModel(const TSharedPtr<FJsonObject>& obj) : FPlayerProfileModel()
        {
            readFromValue(obj);
        }

        ~FPlayerProfileModel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPlayStreamEventEnvelopeModel : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The ID of the entity the event is about.
        FString EntityId;

        // [optional] The type of the entity the event is about.
        FString EntityType;

        // [optional] Data specific to this event.
        FString EventData;

        // [optional] The name of the event.
        FString EventName;

        // [optional] The namespace of the event.
        FString EventNamespace;

        // [optional] Settings for the event.
        FString EventSettings;

        FPlayStreamEventEnvelopeModel() :
            FPlayFabCppBaseModel(),
            EntityId(),
            EntityType(),
            EventData(),
            EventName(),
            EventNamespace(),
            EventSettings()
            {}

        FPlayStreamEventEnvelopeModel(const FPlayStreamEventEnvelopeModel& src) :
            FPlayFabCppBaseModel(),
            EntityId(src.EntityId),
            EntityType(src.EntityType),
            EventData(src.EventData),
            EventName(src.EventName),
            EventNamespace(src.EventNamespace),
            EventSettings(src.EventSettings)
            {}

        FPlayStreamEventEnvelopeModel(const TSharedPtr<FJsonObject>& obj) : FPlayStreamEventEnvelopeModel()
        {
            readFromValue(obj);
        }

        ~FPlayStreamEventEnvelopeModel();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPostFunctionResultForEntityTriggeredActionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        // The result of the function execution.
        FExecuteFunctionResult FunctionResult;

        FPostFunctionResultForEntityTriggeredActionRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            FunctionResult()
            {}

        FPostFunctionResultForEntityTriggeredActionRequest(const FPostFunctionResultForEntityTriggeredActionRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            FunctionResult(src.FunctionResult)
            {}

        FPostFunctionResultForEntityTriggeredActionRequest(const TSharedPtr<FJsonObject>& obj) : FPostFunctionResultForEntityTriggeredActionRequest()
        {
            readFromValue(obj);
        }

        ~FPostFunctionResultForEntityTriggeredActionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPostFunctionResultForFunctionExecutionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        // The result of the function execution.
        FExecuteFunctionResult FunctionResult;

        FPostFunctionResultForFunctionExecutionRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            FunctionResult()
            {}

        FPostFunctionResultForFunctionExecutionRequest(const FPostFunctionResultForFunctionExecutionRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            FunctionResult(src.FunctionResult)
            {}

        FPostFunctionResultForFunctionExecutionRequest(const TSharedPtr<FJsonObject>& obj) : FPostFunctionResultForFunctionExecutionRequest()
        {
            readFromValue(obj);
        }

        ~FPostFunctionResultForFunctionExecutionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPostFunctionResultForPlayerTriggeredActionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // The result of the function execution.
        FExecuteFunctionResult FunctionResult;

        // The player profile the function was invoked with.
        FPlayerProfileModel PlayerProfile;

        // [optional] The triggering PlayStream event, if any, that caused the function to be invoked.
        TSharedPtr<FPlayStreamEventEnvelopeModel> PlayStreamEventEnvelope;

        FPostFunctionResultForPlayerTriggeredActionRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr),
            FunctionResult(),
            PlayerProfile(),
            PlayStreamEventEnvelope(nullptr)
            {}

        FPostFunctionResultForPlayerTriggeredActionRequest(const FPostFunctionResultForPlayerTriggeredActionRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            FunctionResult(src.FunctionResult),
            PlayerProfile(src.PlayerProfile),
            PlayStreamEventEnvelope(src.PlayStreamEventEnvelope.IsValid() ? MakeShareable(new FPlayStreamEventEnvelopeModel(*src.PlayStreamEventEnvelope)) : nullptr)
            {}

        FPostFunctionResultForPlayerTriggeredActionRequest(const TSharedPtr<FJsonObject>& obj) : FPostFunctionResultForPlayerTriggeredActionRequest()
        {
            readFromValue(obj);
        }

        ~FPostFunctionResultForPlayerTriggeredActionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPostFunctionResultForScheduledTaskRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        // The result of the function execution
        FExecuteFunctionResult FunctionResult;

        // The id of the scheduled task that invoked the function.
        FNameIdentifier ScheduledTaskId;

        FPostFunctionResultForScheduledTaskRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            FunctionResult(),
            ScheduledTaskId()
            {}

        FPostFunctionResultForScheduledTaskRequest(const FPostFunctionResultForScheduledTaskRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            FunctionResult(src.FunctionResult),
            ScheduledTaskId(src.ScheduledTaskId)
            {}

        FPostFunctionResultForScheduledTaskRequest(const TSharedPtr<FJsonObject>& obj) : FPostFunctionResultForScheduledTaskRequest()
        {
            readFromValue(obj);
        }

        ~FPostFunctionResultForScheduledTaskRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRegisterHttpFunctionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The name of the function to register
        FString FunctionName;

        // Full URL for Azure Function that implements the function.
        FString FunctionUrl;

        FRegisterHttpFunctionRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            FunctionName(),
            FunctionUrl()
            {}

        FRegisterHttpFunctionRequest(const FRegisterHttpFunctionRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            FunctionName(src.FunctionName),
            FunctionUrl(src.FunctionUrl)
            {}

        FRegisterHttpFunctionRequest(const TSharedPtr<FJsonObject>& obj) : FRegisterHttpFunctionRequest()
        {
            readFromValue(obj);
        }

        ~FRegisterHttpFunctionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRegisterQueuedFunctionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // A connection string for the storage account that hosts the queue for the Azure Function.
        FString ConnectionString;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The name of the function to register
        FString FunctionName;

        // The name of the queue for the Azure Function.
        FString QueueName;

        FRegisterQueuedFunctionRequest() :
            FPlayFabCppRequestCommon(),
            ConnectionString(),
            CustomTags(),
            FunctionName(),
            QueueName()
            {}

        FRegisterQueuedFunctionRequest(const FRegisterQueuedFunctionRequest& src) :
            FPlayFabCppRequestCommon(),
            ConnectionString(src.ConnectionString),
            CustomTags(src.CustomTags),
            FunctionName(src.FunctionName),
            QueueName(src.QueueName)
            {}

        FRegisterQueuedFunctionRequest(const TSharedPtr<FJsonObject>& obj) : FRegisterQueuedFunctionRequest()
        {
            readFromValue(obj);
        }

        ~FRegisterQueuedFunctionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum TriggerType
    {
        TriggerTypeHTTP,
        TriggerTypeQueue
    };

    PLAYFABCPP_API void writeTriggerTypeEnumJSON(TriggerType enumVal, JsonWriter& writer);
    PLAYFABCPP_API TriggerType readTriggerTypeFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API TriggerType readTriggerTypeFromValue(const FString& value);

    struct PLAYFABCPP_API FUnregisterFunctionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The name of the function to unregister
        FString FunctionName;

        FUnregisterFunctionRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            FunctionName()
            {}

        FUnregisterFunctionRequest(const FUnregisterFunctionRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            FunctionName(src.FunctionName)
            {}

        FUnregisterFunctionRequest(const TSharedPtr<FJsonObject>& obj) : FUnregisterFunctionRequest()
        {
            readFromValue(obj);
        }

        ~FUnregisterFunctionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

}
}
