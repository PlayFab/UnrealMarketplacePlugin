//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "PlayFabCppBaseModel.h"

namespace PlayFab
{
namespace EconomyModels
{

    struct PLAYFABCPP_API FAlternateId : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Type of the alternate ID.
        FString Type;

        // [optional] Value of the alternate ID.
        FString Value;

        FAlternateId() :
            FPlayFabCppBaseModel(),
            Type(),
            Value()
            {}

        FAlternateId(const FAlternateId& src) = default;

        FAlternateId(const TSharedPtr<FJsonObject>& obj) : FAlternateId()
        {
            readFromValue(obj);
        }

        ~FAlternateId();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInventoryItemReference : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The inventory item alternate id the request applies to.
        TSharedPtr<FAlternateId> pfAlternateId;

        // [optional] The inventory item id the request applies to.
        FString Id;

        // [optional] The inventory stack id the request should redeem to. (Default="default")
        FString StackId;

        FInventoryItemReference() :
            FPlayFabCppBaseModel(),
            pfAlternateId(nullptr),
            Id(),
            StackId()
            {}

        FInventoryItemReference(const FInventoryItemReference& src) = default;

        FInventoryItemReference(const TSharedPtr<FJsonObject>& obj) : FInventoryItemReference()
        {
            readFromValue(obj);
        }

        ~FInventoryItemReference();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FAddInventoryItemsOperation : public PlayFab::FPlayFabCppBaseModel
    {
        // The amount to add to the current item amount.
        int32 Amount;

        // [optional] The inventory item the operation applies to.
        TSharedPtr<FInventoryItemReference> Item;

        FAddInventoryItemsOperation() :
            FPlayFabCppBaseModel(),
            Amount(0),
            Item(nullptr)
            {}

        FAddInventoryItemsOperation(const FAddInventoryItemsOperation& src) = default;

        FAddInventoryItemsOperation(const TSharedPtr<FJsonObject>& obj) : FAddInventoryItemsOperation()
        {
            readFromValue(obj);
        }

        ~FAddInventoryItemsOperation();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEntityKey : public PlayFab::FPlayFabCppBaseModel
    {
        // Unique ID of the entity.
        FString Id;

        // [optional] Entity type. See https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types
        FString Type;

        FEntityKey() :
            FPlayFabCppBaseModel(),
            Id(),
            Type()
            {}

        FEntityKey(const FEntityKey& src) = default;

        FEntityKey(const TSharedPtr<FJsonObject>& obj) : FEntityKey()
        {
            readFromValue(obj);
        }

        ~FEntityKey();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FAddInventoryItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The amount to add for the current item.
        int32 Amount;

        // [optional] The id of the entity's collection to perform this action on. (Default="default")
        FString CollectionId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The Idempotency ID for this request.
        FString IdempotencyId;

        // [optional] The inventory item the request applies to.
        TSharedPtr<FInventoryItemReference> Item;

        FAddInventoryItemsRequest() :
            FPlayFabCppRequestCommon(),
            Amount(0),
            CollectionId(),
            CustomTags(),
            Entity(nullptr),
            IdempotencyId(),
            Item(nullptr)
            {}

        FAddInventoryItemsRequest(const FAddInventoryItemsRequest& src) = default;

        FAddInventoryItemsRequest(const TSharedPtr<FJsonObject>& obj) : FAddInventoryItemsRequest()
        {
            readFromValue(obj);
        }

        ~FAddInventoryItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FAddInventoryItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The idempotency id used in the request.
        FString IdempotencyId;

        // [optional] The ids of transactions that occurred as a result of the request.
        TArray<FString> TransactionIds;
        FAddInventoryItemsResponse() :
            FPlayFabCppResultCommon(),
            IdempotencyId(),
            TransactionIds()
            {}

        FAddInventoryItemsResponse(const FAddInventoryItemsResponse& src) = default;

        FAddInventoryItemsResponse(const TSharedPtr<FJsonObject>& obj) : FAddInventoryItemsResponse()
        {
            readFromValue(obj);
        }

        ~FAddInventoryItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogAlternateId : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Type of the alternate ID.
        FString Type;

        // [optional] Value of the alternate ID.
        FString Value;

        FCatalogAlternateId() :
            FPlayFabCppBaseModel(),
            Type(),
            Value()
            {}

        FCatalogAlternateId(const FCatalogAlternateId& src) = default;

        FCatalogAlternateId(const TSharedPtr<FJsonObject>& obj) : FCatalogAlternateId()
        {
            readFromValue(obj);
        }

        ~FCatalogAlternateId();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogSpecificConfig : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The set of content types that will be used for validation.
        TArray<FString> ContentTypes;
        // [optional] The set of tags that will be used for validation.
        TArray<FString> Tags;
        FCatalogSpecificConfig() :
            FPlayFabCppBaseModel(),
            ContentTypes(),
            Tags()
            {}

        FCatalogSpecificConfig(const FCatalogSpecificConfig& src) = default;

        FCatalogSpecificConfig(const TSharedPtr<FJsonObject>& obj) : FCatalogSpecificConfig()
        {
            readFromValue(obj);
        }

        ~FCatalogSpecificConfig();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeepLinkFormat : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The format of the deep link to return. The format should contain '{id}' to represent where the item ID should be placed.
        FString Format;

        // [optional] The target platform for the deep link.
        FString Platform;

        FDeepLinkFormat() :
            FPlayFabCppBaseModel(),
            Format(),
            Platform()
            {}

        FDeepLinkFormat(const FDeepLinkFormat& src) = default;

        FDeepLinkFormat(const TSharedPtr<FJsonObject>& obj) : FDeepLinkFormat()
        {
            readFromValue(obj);
        }

        ~FDeepLinkFormat();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum DisplayPropertyType
    {
        DisplayPropertyTypeNone,
        DisplayPropertyTypeQueryDateTime,
        DisplayPropertyTypeQueryDouble,
        DisplayPropertyTypeQueryString,
        DisplayPropertyTypeSearchString
    };

    PLAYFABCPP_API void writeDisplayPropertyTypeEnumJSON(DisplayPropertyType enumVal, JsonWriter& writer);
    PLAYFABCPP_API DisplayPropertyType readDisplayPropertyTypeFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API DisplayPropertyType readDisplayPropertyTypeFromValue(const FString& value);

    struct PLAYFABCPP_API FDisplayPropertyIndexInfo : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The property name in the 'DisplayProperties' property to be indexed.
        FString Name;

        // [optional] The type of the property to be indexed.
        Boxed<DisplayPropertyType> Type;

        FDisplayPropertyIndexInfo() :
            FPlayFabCppBaseModel(),
            Name(),
            Type()
            {}

        FDisplayPropertyIndexInfo(const FDisplayPropertyIndexInfo& src) = default;

        FDisplayPropertyIndexInfo(const TSharedPtr<FJsonObject>& obj) : FDisplayPropertyIndexInfo()
        {
            readFromValue(obj);
        }

        ~FDisplayPropertyIndexInfo();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FFileConfig : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The set of content types that will be used for validation.
        TArray<FString> ContentTypes;
        // [optional] The set of tags that will be used for validation.
        TArray<FString> Tags;
        FFileConfig() :
            FPlayFabCppBaseModel(),
            ContentTypes(),
            Tags()
            {}

        FFileConfig(const FFileConfig& src) = default;

        FFileConfig(const TSharedPtr<FJsonObject>& obj) : FFileConfig()
        {
            readFromValue(obj);
        }

        ~FFileConfig();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FImageConfig : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The set of tags that will be used for validation.
        TArray<FString> Tags;
        FImageConfig() :
            FPlayFabCppBaseModel(),
            Tags()
            {}

        FImageConfig(const FImageConfig& src) = default;

        FImageConfig(const TSharedPtr<FJsonObject>& obj) : FImageConfig()
        {
            readFromValue(obj);
        }

        ~FImageConfig();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUserGeneratedContentSpecificConfig : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The set of content types that will be used for validation.
        TArray<FString> ContentTypes;
        // [optional] The set of tags that will be used for validation.
        TArray<FString> Tags;
        FUserGeneratedContentSpecificConfig() :
            FPlayFabCppBaseModel(),
            ContentTypes(),
            Tags()
            {}

        FUserGeneratedContentSpecificConfig(const FUserGeneratedContentSpecificConfig& src) = default;

        FUserGeneratedContentSpecificConfig(const TSharedPtr<FJsonObject>& obj) : FUserGeneratedContentSpecificConfig()
        {
            readFromValue(obj);
        }

        ~FUserGeneratedContentSpecificConfig();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogConfig : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] A list of player entity keys that will have admin permissions.
        TArray<FEntityKey> AdminEntities;
        // [optional] The set of configuration that only applies to catalog items.
        TSharedPtr<FCatalogSpecificConfig> Catalog;

        // [optional] A list of deep link formats.
        TArray<FDeepLinkFormat> DeepLinkFormats;
        // [optional] A list of display properties to index.
        TArray<FDisplayPropertyIndexInfo> DisplayPropertyIndexInfos;
        // [optional] The set of configuration that only applies to Files.
        TSharedPtr<FFileConfig> File;

        // [optional] The set of configuration that only applies to Images.
        TSharedPtr<FImageConfig> Image;

        // Flag defining whether catalog is enabled.
        bool IsCatalogEnabled;

        // [optional] A list of Platforms that can be applied to catalog items.
        TArray<FString> Platforms;
        // [optional] A set of player entity keys that are allowed to review content.
        TArray<FEntityKey> ReviewerEntities;
        // [optional] The set of configuration that only applies to user generated contents.
        TSharedPtr<FUserGeneratedContentSpecificConfig> UserGeneratedContent;

        FCatalogConfig() :
            FPlayFabCppBaseModel(),
            AdminEntities(),
            Catalog(nullptr),
            DeepLinkFormats(),
            DisplayPropertyIndexInfos(),
            File(nullptr),
            Image(nullptr),
            IsCatalogEnabled(false),
            Platforms(),
            ReviewerEntities(),
            UserGeneratedContent(nullptr)
            {}

        FCatalogConfig(const FCatalogConfig& src) = default;

        FCatalogConfig(const TSharedPtr<FJsonObject>& obj) : FCatalogConfig()
        {
            readFromValue(obj);
        }

        ~FCatalogConfig();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FContent : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The content unique ID.
        FString Id;

        // [optional] The maximum client version that this content is compatible with.
        FString MaxClientVersion;

        // [optional] The minimum client version that this content is compatible with.
        FString MinClientVersion;

        // [optional] The list of tags that are associated with this content.
        TArray<FString> Tags;
        // [optional] The client-defined type of the content.
        FString Type;

        // [optional] The Azure CDN URL for retrieval of the catalog item binary content.
        FString Url;

        FContent() :
            FPlayFabCppBaseModel(),
            Id(),
            MaxClientVersion(),
            MinClientVersion(),
            Tags(),
            Type(),
            Url()
            {}

        FContent(const FContent& src) = default;

        FContent(const TSharedPtr<FJsonObject>& obj) : FContent()
        {
            readFromValue(obj);
        }

        ~FContent();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeepLink : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Target platform for this deep link.
        FString Platform;

        // [optional] The deep link for this platform.
        FString Url;

        FDeepLink() :
            FPlayFabCppBaseModel(),
            Platform(),
            Url()
            {}

        FDeepLink(const FDeepLink& src) = default;

        FDeepLink(const TSharedPtr<FJsonObject>& obj) : FDeepLink()
        {
            readFromValue(obj);
        }

        ~FDeepLink();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FImage : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The image unique ID.
        FString Id;

        // [optional] The client-defined tag associated with this image.
        FString Tag;

        // [optional] The client-defined type of this image.
        FString Type;

        // [optional] The URL for retrieval of the image.
        FString Url;

        FImage() :
            FPlayFabCppBaseModel(),
            Id(),
            Tag(),
            Type(),
            Url()
            {}

        FImage(const FImage& src) = default;

        FImage(const TSharedPtr<FJsonObject>& obj) : FImage()
        {
            readFromValue(obj);
        }

        ~FImage();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogPriceAmount : public PlayFab::FPlayFabCppBaseModel
    {
        // The amount of the price.
        int32 Amount;

        // [optional] The Item Id of the price.
        FString ItemId;

        FCatalogPriceAmount() :
            FPlayFabCppBaseModel(),
            Amount(0),
            ItemId()
            {}

        FCatalogPriceAmount(const FCatalogPriceAmount& src) = default;

        FCatalogPriceAmount(const TSharedPtr<FJsonObject>& obj) : FCatalogPriceAmount()
        {
            readFromValue(obj);
        }

        ~FCatalogPriceAmount();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogPrice : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The amounts of the catalog item price.
        TArray<FCatalogPriceAmount> Amounts;
        FCatalogPrice() :
            FPlayFabCppBaseModel(),
            Amounts()
            {}

        FCatalogPrice(const FCatalogPrice& src) = default;

        FCatalogPrice(const TSharedPtr<FJsonObject>& obj) : FCatalogPrice()
        {
            readFromValue(obj);
        }

        ~FCatalogPrice();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogPriceOptions : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Prices of the catalog item.
        TArray<FCatalogPrice> Prices;
        FCatalogPriceOptions() :
            FPlayFabCppBaseModel(),
            Prices()
            {}

        FCatalogPriceOptions(const FCatalogPriceOptions& src) = default;

        FCatalogPriceOptions(const TSharedPtr<FJsonObject>& obj) : FCatalogPriceOptions()
        {
            readFromValue(obj);
        }

        ~FCatalogPriceOptions();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogItemReference : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The amount of the catalog item.
        Boxed<int32> Amount;

        // [optional] The unique ID of the catalog item.
        FString Id;

        // [optional] The prices the catalog item can be purchased for.
        TSharedPtr<FCatalogPriceOptions> PriceOptions;

        FCatalogItemReference() :
            FPlayFabCppBaseModel(),
            Amount(),
            Id(),
            PriceOptions(nullptr)
            {}

        FCatalogItemReference(const FCatalogItemReference& src) = default;

        FCatalogItemReference(const TSharedPtr<FJsonObject>& obj) : FCatalogItemReference()
        {
            readFromValue(obj);
        }

        ~FCatalogItemReference();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FKeywordSet : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] A list of localized keywords.
        TArray<FString> Values;
        FKeywordSet() :
            FPlayFabCppBaseModel(),
            Values()
            {}

        FKeywordSet(const FKeywordSet& src) = default;

        FKeywordSet(const TSharedPtr<FJsonObject>& obj) : FKeywordSet()
        {
            readFromValue(obj);
        }

        ~FKeywordSet();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum ModerationStatus
    {
        ModerationStatusUnknown,
        ModerationStatusAwaitingModeration,
        ModerationStatusApproved,
        ModerationStatusRejected
    };

    PLAYFABCPP_API void writeModerationStatusEnumJSON(ModerationStatus enumVal, JsonWriter& writer);
    PLAYFABCPP_API ModerationStatus readModerationStatusFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API ModerationStatus readModerationStatusFromValue(const FString& value);

    struct PLAYFABCPP_API FModerationState : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The date and time this moderation state was last updated.
        Boxed<FDateTime> LastModifiedDate;

        // [optional] The current stated reason for the associated item being moderated.
        FString Reason;

        // [optional] The current moderation status for the associated item.
        Boxed<ModerationStatus> Status;

        FModerationState() :
            FPlayFabCppBaseModel(),
            LastModifiedDate(),
            Reason(),
            Status()
            {}

        FModerationState(const FModerationState& src) = default;

        FModerationState(const TSharedPtr<FJsonObject>& obj) : FModerationState()
        {
            readFromValue(obj);
        }

        ~FModerationState();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRating : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The average rating for this item.
        Boxed<float> Average;

        // [optional] The total count of 1 star ratings for this item.
        Boxed<int32> Count1Star;

        // [optional] The total count of 2 star ratings for this item.
        Boxed<int32> Count2Star;

        // [optional] The total count of 3 star ratings for this item.
        Boxed<int32> Count3Star;

        // [optional] The total count of 4 star ratings for this item.
        Boxed<int32> Count4Star;

        // [optional] The total count of 5 star ratings for this item.
        Boxed<int32> Count5Star;

        // [optional] The total count of ratings for this item.
        Boxed<int32> TotalCount;

        FRating() :
            FPlayFabCppBaseModel(),
            Average(),
            Count1Star(),
            Count2Star(),
            Count3Star(),
            Count4Star(),
            Count5Star(),
            TotalCount()
            {}

        FRating(const FRating& src) = default;

        FRating(const TSharedPtr<FJsonObject>& obj) : FRating()
        {
            readFromValue(obj);
        }

        ~FRating();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FFilterOptions : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The OData filter utilized. Mutually exclusive with 'IncludeAllItems'.
        FString Filter;

        // [optional] The flag that overrides the filter and allows for returning all catalog items. Mutually exclusive with 'Filter'.
        Boxed<bool> IncludeAllItems;

        FFilterOptions() :
            FPlayFabCppBaseModel(),
            Filter(),
            IncludeAllItems()
            {}

        FFilterOptions(const FFilterOptions& src) = default;

        FFilterOptions(const TSharedPtr<FJsonObject>& obj) : FFilterOptions()
        {
            readFromValue(obj);
        }

        ~FFilterOptions();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogPriceAmountOverride : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The exact value that should be utilized in the override.
        Boxed<int32> FixedValue;

        // [optional] The id of the item this override should utilize.
        FString ItemId;

        /**
         * [optional] The multiplier that will be applied to the base Catalog value to determine what value should be utilized in the
         * override.
         */
        Boxed<double> Multiplier;

        FCatalogPriceAmountOverride() :
            FPlayFabCppBaseModel(),
            FixedValue(),
            ItemId(),
            Multiplier()
            {}

        FCatalogPriceAmountOverride(const FCatalogPriceAmountOverride& src) = default;

        FCatalogPriceAmountOverride(const TSharedPtr<FJsonObject>& obj) : FCatalogPriceAmountOverride()
        {
            readFromValue(obj);
        }

        ~FCatalogPriceAmountOverride();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogPriceOverride : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The currency amounts utilized in the override for a singular price.
        TArray<FCatalogPriceAmountOverride> Amounts;
        FCatalogPriceOverride() :
            FPlayFabCppBaseModel(),
            Amounts()
            {}

        FCatalogPriceOverride(const FCatalogPriceOverride& src) = default;

        FCatalogPriceOverride(const TSharedPtr<FJsonObject>& obj) : FCatalogPriceOverride()
        {
            readFromValue(obj);
        }

        ~FCatalogPriceOverride();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogPriceOptionsOverride : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The prices utilized in the override.
        TArray<FCatalogPriceOverride> Prices;
        FCatalogPriceOptionsOverride() :
            FPlayFabCppBaseModel(),
            Prices()
            {}

        FCatalogPriceOptionsOverride(const FCatalogPriceOptionsOverride& src) = default;

        FCatalogPriceOptionsOverride(const TSharedPtr<FJsonObject>& obj) : FCatalogPriceOptionsOverride()
        {
            readFromValue(obj);
        }

        ~FCatalogPriceOptionsOverride();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FStoreDetails : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The options for the filter in filter-based stores. These options are mutually exclusive with item references.
        TSharedPtr<FFilterOptions> pfFilterOptions;

        // [optional] The global prices utilized in the store. These options are mutually exclusive with price options in item references.
        TSharedPtr<FCatalogPriceOptionsOverride> PriceOptionsOverride;

        FStoreDetails() :
            FPlayFabCppBaseModel(),
            pfFilterOptions(nullptr),
            PriceOptionsOverride(nullptr)
            {}

        FStoreDetails(const FStoreDetails& src) = default;

        FStoreDetails(const TSharedPtr<FJsonObject>& obj) : FStoreDetails()
        {
            readFromValue(obj);
        }

        ~FStoreDetails();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCatalogItem : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The alternate IDs associated with this item.
        TArray<FCatalogAlternateId> AlternateIds;
        // [optional] The set of contents associated with this item.
        TArray<FContent> Contents;
        // [optional] The client-defined type of the item.
        FString ContentType;

        // [optional] The date and time when this item was created.
        Boxed<FDateTime> CreationDate;

        // [optional] The ID of the creator of this catalog item.
        TSharedPtr<FEntityKey> CreatorEntity;

        // [optional] The set of platform specific deep links for this item.
        TArray<FDeepLink> DeepLinks;
        /**
         * [optional] A dictionary of localized descriptions. Key is language code and localized string is the value. The neutral locale is
         * required.
         */
        TMap<FString, FString> Description;
        // [optional] Game specific properties for display purposes. This is an arbitrary JSON blob.
        FJsonKeeper DisplayProperties;

        // [optional] The user provided version of the item for display purposes.
        FString DisplayVersion;

        // [optional] The date of when the item will cease to be available. If not provided then the product will be available indefinitely.
        Boxed<FDateTime> EndDate;

        // [optional] The current ETag value that can be used for optimistic concurrency in the If-None-Match header.
        FString ETag;

        // [optional] The unique ID of the item.
        FString Id;

        // [optional] The images associated with this item. Images can be thumbnails or screenshots.
        TArray<FImage> Images;
        // [optional] Indicates if the item is hidden.
        Boxed<bool> IsHidden;

        // [optional] The item references associated with this item.
        TArray<FCatalogItemReference> ItemReferences;
        // [optional] A dictionary of localized keywords. Key is language code and localized list of keywords is the value.
        TMap<FString, FKeywordSet> Keywords;
        // [optional] The date and time this item was last updated.
        Boxed<FDateTime> LastModifiedDate;

        // [optional] The moderation state for this item.
        TSharedPtr<FModerationState> Moderation;

        // [optional] The platforms supported by this item.
        TArray<FString> Platforms;
        // [optional] The base price of this item.
        TSharedPtr<FCatalogPriceOptions> PriceOptions;

        // [optional] Rating summary for this item.
        TSharedPtr<FRating> pfRating;

        // [optional] The date of when the item will be available. If not provided then the product will appear immediately.
        Boxed<FDateTime> StartDate;

        // [optional] Optional details for stores items.
        TSharedPtr<FStoreDetails> pfStoreDetails;

        // [optional] The list of tags that are associated with this item.
        TArray<FString> Tags;
        /**
         * [optional] A dictionary of localized titles. Key is language code and localized string is the value. The neutral locale is
         * required.
         */
        TMap<FString, FString> Title;
        // [optional] The high-level type of the item. The following item types are supported: bundle, catalogItem, currency, store, ugc.
        FString Type;

        FCatalogItem() :
            FPlayFabCppBaseModel(),
            AlternateIds(),
            Contents(),
            ContentType(),
            CreationDate(),
            CreatorEntity(nullptr),
            DeepLinks(),
            Description(),
            DisplayProperties(),
            DisplayVersion(),
            EndDate(),
            ETag(),
            Id(),
            Images(),
            IsHidden(),
            ItemReferences(),
            Keywords(),
            LastModifiedDate(),
            Moderation(nullptr),
            Platforms(),
            PriceOptions(nullptr),
            pfRating(nullptr),
            StartDate(),
            pfStoreDetails(nullptr),
            Tags(),
            Title(),
            Type()
            {}

        FCatalogItem(const FCatalogItem& src) = default;

        FCatalogItem(const TSharedPtr<FJsonObject>& obj) : FCatalogItem()
        {
            readFromValue(obj);
        }

        ~FCatalogItem();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum ConcernCategory
    {
        ConcernCategoryNone,
        ConcernCategoryOffensiveContent,
        ConcernCategoryChildExploitation,
        ConcernCategoryMalwareOrVirus,
        ConcernCategoryPrivacyConcerns,
        ConcernCategoryMisleadingApp,
        ConcernCategoryPoorPerformance,
        ConcernCategoryReviewResponse,
        ConcernCategorySpamAdvertising,
        ConcernCategoryProfanity
    };

    PLAYFABCPP_API void writeConcernCategoryEnumJSON(ConcernCategory enumVal, JsonWriter& writer);
    PLAYFABCPP_API ConcernCategory readConcernCategoryFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API ConcernCategory readConcernCategoryFromValue(const FString& value);

    struct PLAYFABCPP_API FContentFeed : public PlayFab::FPlayFabCppBaseModel
    {
        FContentFeed() :
            FPlayFabCppBaseModel()
            {}

        FContentFeed(const FContentFeed& src) = default;

        FContentFeed(const TSharedPtr<FJsonObject>& obj) : FContentFeed()
        {
            readFromValue(obj);
        }

        ~FContentFeed();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum CountryCode
    {
        CountryCodeAF,
        CountryCodeAX,
        CountryCodeAL,
        CountryCodeDZ,
        CountryCodeAS,
        CountryCodeAD,
        CountryCodeAO,
        CountryCodeAI,
        CountryCodeAQ,
        CountryCodeAG,
        CountryCodeAR,
        CountryCodeAM,
        CountryCodeAW,
        CountryCodeAU,
        CountryCodeAT,
        CountryCodeAZ,
        CountryCodeBS,
        CountryCodeBH,
        CountryCodeBD,
        CountryCodeBB,
        CountryCodeBY,
        CountryCodeBE,
        CountryCodeBZ,
        CountryCodeBJ,
        CountryCodeBM,
        CountryCodeBT,
        CountryCodeBO,
        CountryCodeBQ,
        CountryCodeBA,
        CountryCodeBW,
        CountryCodeBV,
        CountryCodeBR,
        CountryCodeIO,
        CountryCodeBN,
        CountryCodeBG,
        CountryCodeBF,
        CountryCodeBI,
        CountryCodeKH,
        CountryCodeCM,
        CountryCodeCA,
        CountryCodeCV,
        CountryCodeKY,
        CountryCodeCF,
        CountryCodeTD,
        CountryCodeCL,
        CountryCodeCN,
        CountryCodeCX,
        CountryCodeCC,
        CountryCodeCO,
        CountryCodeKM,
        CountryCodeCG,
        CountryCodeCD,
        CountryCodeCK,
        CountryCodeCR,
        CountryCodeCI,
        CountryCodeHR,
        CountryCodeCU,
        CountryCodeCW,
        CountryCodeCY,
        CountryCodeCZ,
        CountryCodeDK,
        CountryCodeDJ,
        CountryCodeDM,
        CountryCodeDO,
        CountryCodeEC,
        CountryCodeEG,
        CountryCodeSV,
        CountryCodeGQ,
        CountryCodeER,
        CountryCodeEE,
        CountryCodeET,
        CountryCodeFK,
        CountryCodeFO,
        CountryCodeFJ,
        CountryCodeFI,
        CountryCodeFR,
        CountryCodeGF,
        CountryCodePF,
        CountryCodeTF,
        CountryCodeGA,
        CountryCodeGM,
        CountryCodeGE,
        CountryCodeDE,
        CountryCodeGH,
        CountryCodeGI,
        CountryCodeGR,
        CountryCodeGL,
        CountryCodeGD,
        CountryCodeGP,
        CountryCodeGU,
        CountryCodeGT,
        CountryCodeGG,
        CountryCodeGN,
        CountryCodeGW,
        CountryCodeGY,
        CountryCodeHT,
        CountryCodeHM,
        CountryCodeVA,
        CountryCodeHN,
        CountryCodeHK,
        CountryCodeHU,
        CountryCodeIS,
        CountryCodeIN,
        CountryCodeID,
        CountryCodeIR,
        CountryCodeIQ,
        CountryCodeIE,
        CountryCodeIM,
        CountryCodeIL,
        CountryCodeIT,
        CountryCodeJM,
        CountryCodeJP,
        CountryCodeJE,
        CountryCodeJO,
        CountryCodeKZ,
        CountryCodeKE,
        CountryCodeKI,
        CountryCodeKP,
        CountryCodeKR,
        CountryCodeKW,
        CountryCodeKG,
        CountryCodeLA,
        CountryCodeLV,
        CountryCodeLB,
        CountryCodeLS,
        CountryCodeLR,
        CountryCodeLY,
        CountryCodeLI,
        CountryCodeLT,
        CountryCodeLU,
        CountryCodeMO,
        CountryCodeMK,
        CountryCodeMG,
        CountryCodeMW,
        CountryCodeMY,
        CountryCodeMV,
        CountryCodeML,
        CountryCodeMT,
        CountryCodeMH,
        CountryCodeMQ,
        CountryCodeMR,
        CountryCodeMU,
        CountryCodeYT,
        CountryCodeMX,
        CountryCodeFM,
        CountryCodeMD,
        CountryCodeMC,
        CountryCodeMN,
        CountryCodeME,
        CountryCodeMS,
        CountryCodeMA,
        CountryCodeMZ,
        CountryCodeMM,
        CountryCodeNA,
        CountryCodeNR,
        CountryCodeNP,
        CountryCodeNL,
        CountryCodeNC,
        CountryCodeNZ,
        CountryCodeNI,
        CountryCodeNE,
        CountryCodeNG,
        CountryCodeNU,
        CountryCodeNF,
        CountryCodeMP,
        CountryCodeNO,
        CountryCodeOM,
        CountryCodePK,
        CountryCodePW,
        CountryCodePS,
        CountryCodePA,
        CountryCodePG,
        CountryCodePY,
        CountryCodePE,
        CountryCodePH,
        CountryCodePN,
        CountryCodePL,
        CountryCodePT,
        CountryCodePR,
        CountryCodeQA,
        CountryCodeRE,
        CountryCodeRO,
        CountryCodeRU,
        CountryCodeRW,
        CountryCodeBL,
        CountryCodeSH,
        CountryCodeKN,
        CountryCodeLC,
        CountryCodeMF,
        CountryCodePM,
        CountryCodeVC,
        CountryCodeWS,
        CountryCodeSM,
        CountryCodeST,
        CountryCodeSA,
        CountryCodeSN,
        CountryCodeRS,
        CountryCodeSC,
        CountryCodeSL,
        CountryCodeSG,
        CountryCodeSX,
        CountryCodeSK,
        CountryCodeSI,
        CountryCodeSB,
        CountryCodeSO,
        CountryCodeZA,
        CountryCodeGS,
        CountryCodeSS,
        CountryCodeES,
        CountryCodeLK,
        CountryCodeSD,
        CountryCodeSR,
        CountryCodeSJ,
        CountryCodeSZ,
        CountryCodeSE,
        CountryCodeCH,
        CountryCodeSY,
        CountryCodeTW,
        CountryCodeTJ,
        CountryCodeTZ,
        CountryCodeTH,
        CountryCodeTL,
        CountryCodeTG,
        CountryCodeTK,
        CountryCodeTO,
        CountryCodeTT,
        CountryCodeTN,
        CountryCodeTR,
        CountryCodeTM,
        CountryCodeTC,
        CountryCodeTV,
        CountryCodeUG,
        CountryCodeUA,
        CountryCodeAE,
        CountryCodeGB,
        CountryCodeUS,
        CountryCodeUM,
        CountryCodeUY,
        CountryCodeUZ,
        CountryCodeVU,
        CountryCodeVE,
        CountryCodeVN,
        CountryCodeVG,
        CountryCodeVI,
        CountryCodeWF,
        CountryCodeEH,
        CountryCodeYE,
        CountryCodeZM,
        CountryCodeZW
    };

    PLAYFABCPP_API void writeCountryCodeEnumJSON(CountryCode enumVal, JsonWriter& writer);
    PLAYFABCPP_API CountryCode readCountryCodeFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API CountryCode readCountryCodeFromValue(const FString& value);

    struct PLAYFABCPP_API FCreateDraftItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] Metadata describing the new catalog item to be created.
        TSharedPtr<FCatalogItem> Item;

        // Whether the item should be published immediately.
        bool Publish;

        FCreateDraftItemRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Item(nullptr),
            Publish(false)
            {}

        FCreateDraftItemRequest(const FCreateDraftItemRequest& src) = default;

        FCreateDraftItemRequest(const TSharedPtr<FJsonObject>& obj) : FCreateDraftItemRequest()
        {
            readFromValue(obj);
        }

        ~FCreateDraftItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateDraftItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Updated metadata describing the catalog item just created.
        TSharedPtr<FCatalogItem> Item;

        FCreateDraftItemResponse() :
            FPlayFabCppResultCommon(),
            Item(nullptr)
            {}

        FCreateDraftItemResponse(const FCreateDraftItemResponse& src) = default;

        FCreateDraftItemResponse(const TSharedPtr<FJsonObject>& obj) : FCreateDraftItemResponse()
        {
            readFromValue(obj);
        }

        ~FCreateDraftItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUploadInfo : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Name of the file to be uploaded.
        FString FileName;

        FUploadInfo() :
            FPlayFabCppBaseModel(),
            FileName()
            {}

        FUploadInfo(const FUploadInfo& src) = default;

        FUploadInfo(const TSharedPtr<FJsonObject>& obj) : FUploadInfo()
        {
            readFromValue(obj);
        }

        ~FUploadInfo();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateUploadUrlsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] Description of the files to be uploaded by the client.
        TArray<FUploadInfo> Files;
        FCreateUploadUrlsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Files()
            {}

        FCreateUploadUrlsRequest(const FCreateUploadUrlsRequest& src) = default;

        FCreateUploadUrlsRequest(const TSharedPtr<FJsonObject>& obj) : FCreateUploadUrlsRequest()
        {
            readFromValue(obj);
        }

        ~FCreateUploadUrlsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUploadUrlMetadata : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Name of the file for which this upload URL was requested.
        FString FileName;

        // [optional] Unique ID for the binary content to be uploaded to the target URL.
        FString Id;

        // [optional] URL for the binary content to be uploaded to.
        FString Url;

        FUploadUrlMetadata() :
            FPlayFabCppBaseModel(),
            FileName(),
            Id(),
            Url()
            {}

        FUploadUrlMetadata(const FUploadUrlMetadata& src) = default;

        FUploadUrlMetadata(const TSharedPtr<FJsonObject>& obj) : FUploadUrlMetadata()
        {
            readFromValue(obj);
        }

        ~FUploadUrlMetadata();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateUploadUrlsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] List of URLs metadata for the files to be uploaded by the client.
        TArray<FUploadUrlMetadata> UploadUrls;
        FCreateUploadUrlsResponse() :
            FPlayFabCppResultCommon(),
            UploadUrls()
            {}

        FCreateUploadUrlsResponse(const FCreateUploadUrlsResponse& src) = default;

        FCreateUploadUrlsResponse(const TSharedPtr<FJsonObject>& obj) : FCreateUploadUrlsResponse()
        {
            readFromValue(obj);
        }

        ~FCreateUploadUrlsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteEntityItemReviewsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        FDeleteEntityItemReviewsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FDeleteEntityItemReviewsRequest(const FDeleteEntityItemReviewsRequest& src) = default;

        FDeleteEntityItemReviewsRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteEntityItemReviewsRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteEntityItemReviewsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteEntityItemReviewsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FDeleteEntityItemReviewsResponse() :
            FPlayFabCppResultCommon()
            {}

        FDeleteEntityItemReviewsResponse(const FDeleteEntityItemReviewsResponse& src) = default;

        FDeleteEntityItemReviewsResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteEntityItemReviewsResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteEntityItemReviewsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteInventoryCollectionRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The inventory collection id the request applies to.
        FString CollectionId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity the request is about. Set to the caller by default.
        TSharedPtr<FEntityKey> Entity;

        FDeleteInventoryCollectionRequest() :
            FPlayFabCppRequestCommon(),
            CollectionId(),
            CustomTags(),
            Entity(nullptr)
            {}

        FDeleteInventoryCollectionRequest(const FDeleteInventoryCollectionRequest& src) = default;

        FDeleteInventoryCollectionRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteInventoryCollectionRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteInventoryCollectionRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteInventoryCollectionResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FDeleteInventoryCollectionResponse() :
            FPlayFabCppResultCommon()
            {}

        FDeleteInventoryCollectionResponse(const FDeleteInventoryCollectionResponse& src) = default;

        FDeleteInventoryCollectionResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteInventoryCollectionResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteInventoryCollectionResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteInventoryItemsOperation : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The inventory item the operation applies to.
        TSharedPtr<FInventoryItemReference> Item;

        FDeleteInventoryItemsOperation() :
            FPlayFabCppBaseModel(),
            Item(nullptr)
            {}

        FDeleteInventoryItemsOperation(const FDeleteInventoryItemsOperation& src) = default;

        FDeleteInventoryItemsOperation(const TSharedPtr<FJsonObject>& obj) : FDeleteInventoryItemsOperation()
        {
            readFromValue(obj);
        }

        ~FDeleteInventoryItemsOperation();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteInventoryItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The id of the entity's collection to perform this action on. (Default="default")
        FString CollectionId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The Idempotency ID for this request.
        FString IdempotencyId;

        // [optional] The inventory item the request applies to.
        TSharedPtr<FInventoryItemReference> Item;

        FDeleteInventoryItemsRequest() :
            FPlayFabCppRequestCommon(),
            CollectionId(),
            CustomTags(),
            Entity(nullptr),
            IdempotencyId(),
            Item(nullptr)
            {}

        FDeleteInventoryItemsRequest(const FDeleteInventoryItemsRequest& src) = default;

        FDeleteInventoryItemsRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteInventoryItemsRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteInventoryItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteInventoryItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The idempotency id used in the request.
        FString IdempotencyId;

        // [optional] The ids of transactions that occurred as a result of the request.
        TArray<FString> TransactionIds;
        FDeleteInventoryItemsResponse() :
            FPlayFabCppResultCommon(),
            IdempotencyId(),
            TransactionIds()
            {}

        FDeleteInventoryItemsResponse(const FDeleteInventoryItemsResponse& src) = default;

        FDeleteInventoryItemsResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteInventoryItemsResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteInventoryItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The unique ID of the item.
        FString Id;

        FDeleteItemRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            Id()
            {}

        FDeleteItemRequest(const FDeleteItemRequest& src) = default;

        FDeleteItemRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteItemRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FDeleteItemResponse() :
            FPlayFabCppResultCommon()
            {}

        FDeleteItemResponse(const FDeleteItemResponse& src) = default;

        FDeleteItemResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteItemResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPurchasePriceAmount : public PlayFab::FPlayFabCppBaseModel
    {
        // The amount of the inventory item to use in the purchase .
        int32 Amount;

        // [optional] The inventory item id to use in the purchase .
        FString ItemId;

        // [optional] The inventory stack id the to use in the purchase. Set to "default" by default
        FString StackId;

        FPurchasePriceAmount() :
            FPlayFabCppBaseModel(),
            Amount(0),
            ItemId(),
            StackId()
            {}

        FPurchasePriceAmount(const FPurchasePriceAmount& src) = default;

        FPurchasePriceAmount(const TSharedPtr<FJsonObject>& obj) : FPurchasePriceAmount()
        {
            readFromValue(obj);
        }

        ~FPurchasePriceAmount();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPurchaseInventoryItemsOperation : public PlayFab::FPlayFabCppBaseModel
    {
        // The amount to purchase.
        int32 Amount;

        /**
         * Indicates whether stacks reduced to an amount of 0 during the operation should be deleted from the inventory. (Default =
         * false)
         */
        bool DeleteEmptyStacks;

        // [optional] The inventory item the operation applies to.
        TSharedPtr<FInventoryItemReference> Item;

        /**
         * [optional] The per-item price the item is expected to be purchased at. This must match a value configured in the Catalog or
         * specified Store.
         */
        TArray<FPurchasePriceAmount> PriceAmounts;
        // [optional] The id of the Store to purchase the item from.
        FString StoreId;

        FPurchaseInventoryItemsOperation() :
            FPlayFabCppBaseModel(),
            Amount(0),
            DeleteEmptyStacks(false),
            Item(nullptr),
            PriceAmounts(),
            StoreId()
            {}

        FPurchaseInventoryItemsOperation(const FPurchaseInventoryItemsOperation& src) = default;

        FPurchaseInventoryItemsOperation(const TSharedPtr<FJsonObject>& obj) : FPurchaseInventoryItemsOperation()
        {
            readFromValue(obj);
        }

        ~FPurchaseInventoryItemsOperation();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSubtractInventoryItemsOperation : public PlayFab::FPlayFabCppBaseModel
    {
        // The amount to subtract from the current item amount.
        int32 Amount;

        /**
         * Indicates whether stacks reduced to an amount of 0 during the request should be deleted from the inventory. (Default =
         * false).
         */
        bool DeleteEmptyStacks;

        // [optional] The inventory item the operation applies to.
        TSharedPtr<FInventoryItemReference> Item;

        FSubtractInventoryItemsOperation() :
            FPlayFabCppBaseModel(),
            Amount(0),
            DeleteEmptyStacks(false),
            Item(nullptr)
            {}

        FSubtractInventoryItemsOperation(const FSubtractInventoryItemsOperation& src) = default;

        FSubtractInventoryItemsOperation(const TSharedPtr<FJsonObject>& obj) : FSubtractInventoryItemsOperation()
        {
            readFromValue(obj);
        }

        ~FSubtractInventoryItemsOperation();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FTransferInventoryItemsOperation : public PlayFab::FPlayFabCppBaseModel
    {
        // The amount to transfer.
        int32 Amount;

        /**
         * Indicates whether stacks reduced to an amount of 0 during the operation should be deleted from the inventory. (Default =
         * false)
         */
        bool DeleteEmptyStacks;

        // [optional] The inventory item the operation is transferring from.
        TSharedPtr<FInventoryItemReference> GivingItem;

        // [optional] The inventory item the operation is transferring to.
        TSharedPtr<FInventoryItemReference> ReceivingItem;

        FTransferInventoryItemsOperation() :
            FPlayFabCppBaseModel(),
            Amount(0),
            DeleteEmptyStacks(false),
            GivingItem(nullptr),
            ReceivingItem(nullptr)
            {}

        FTransferInventoryItemsOperation(const FTransferInventoryItemsOperation& src) = default;

        FTransferInventoryItemsOperation(const TSharedPtr<FJsonObject>& obj) : FTransferInventoryItemsOperation()
        {
            readFromValue(obj);
        }

        ~FTransferInventoryItemsOperation();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInventoryItem : public PlayFab::FPlayFabCppBaseModel
    {
        // The amount of the item.
        int32 Amount;

        // [optional] The id of the item. This should correspond to the item id in the catalog.
        FString Id;

        // [optional] The stack id of the item.
        FString StackId;

        // [optional] The type of the item. This should correspond to the item type in the catalog.
        FString Type;

        FInventoryItem() :
            FPlayFabCppBaseModel(),
            Amount(0),
            Id(),
            StackId(),
            Type()
            {}

        FInventoryItem(const FInventoryItem& src) = default;

        FInventoryItem(const TSharedPtr<FJsonObject>& obj) : FInventoryItem()
        {
            readFromValue(obj);
        }

        ~FInventoryItem();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateInventoryItemsOperation : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The inventory item to update with the specified values.
        TSharedPtr<FInventoryItem> Item;

        FUpdateInventoryItemsOperation() :
            FPlayFabCppBaseModel(),
            Item(nullptr)
            {}

        FUpdateInventoryItemsOperation(const FUpdateInventoryItemsOperation& src) = default;

        FUpdateInventoryItemsOperation(const TSharedPtr<FJsonObject>& obj) : FUpdateInventoryItemsOperation()
        {
            readFromValue(obj);
        }

        ~FUpdateInventoryItemsOperation();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInventoryOperation : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The add operation.
        TSharedPtr<FAddInventoryItemsOperation> Add;

        // [optional] The delete operation.
        TSharedPtr<FDeleteInventoryItemsOperation> Delete;

        // [optional] The purchase operation.
        TSharedPtr<FPurchaseInventoryItemsOperation> Purchase;

        // [optional] The subtract operation.
        TSharedPtr<FSubtractInventoryItemsOperation> Subtract;

        // [optional] The transfer operation.
        TSharedPtr<FTransferInventoryItemsOperation> Transfer;

        // [optional] The update operation.
        TSharedPtr<FUpdateInventoryItemsOperation> Update;

        FInventoryOperation() :
            FPlayFabCppBaseModel(),
            Add(nullptr),
            Delete(nullptr),
            Purchase(nullptr),
            Subtract(nullptr),
            Transfer(nullptr),
            Update(nullptr)
            {}

        FInventoryOperation(const FInventoryOperation& src) = default;

        FInventoryOperation(const TSharedPtr<FJsonObject>& obj) : FInventoryOperation()
        {
            readFromValue(obj);
        }

        ~FInventoryOperation();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FExecuteInventoryOperationsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The id of the entity's collection to perform this action on. (Default="default")
        FString CollectionId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The Idempotency ID for this request.
        FString IdempotencyId;

        /**
         * [optional] The operations to run transactionally. The operations will be executed in-order sequentially and will succeed or fail as
         * a batch.
         */
        TArray<FInventoryOperation> Operations;
        FExecuteInventoryOperationsRequest() :
            FPlayFabCppRequestCommon(),
            CollectionId(),
            CustomTags(),
            Entity(nullptr),
            IdempotencyId(),
            Operations()
            {}

        FExecuteInventoryOperationsRequest(const FExecuteInventoryOperationsRequest& src) = default;

        FExecuteInventoryOperationsRequest(const TSharedPtr<FJsonObject>& obj) : FExecuteInventoryOperationsRequest()
        {
            readFromValue(obj);
        }

        ~FExecuteInventoryOperationsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FExecuteInventoryOperationsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The idempotency id used in the request.
        FString IdempotencyId;

        // [optional] The ids of the transactions that occurred as a result of the request.
        TArray<FString> TransactionIds;
        FExecuteInventoryOperationsResponse() :
            FPlayFabCppResultCommon(),
            IdempotencyId(),
            TransactionIds()
            {}

        FExecuteInventoryOperationsResponse(const FExecuteInventoryOperationsResponse& src) = default;

        FExecuteInventoryOperationsResponse(const TSharedPtr<FJsonObject>& obj) : FExecuteInventoryOperationsResponse()
        {
            readFromValue(obj);
        }

        ~FExecuteInventoryOperationsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetCatalogConfigRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FGetCatalogConfigRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FGetCatalogConfigRequest(const FGetCatalogConfigRequest& src) = default;

        FGetCatalogConfigRequest(const TSharedPtr<FJsonObject>& obj) : FGetCatalogConfigRequest()
        {
            readFromValue(obj);
        }

        ~FGetCatalogConfigRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetCatalogConfigResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The catalog configuration.
        TSharedPtr<FCatalogConfig> Config;

        FGetCatalogConfigResponse() :
            FPlayFabCppResultCommon(),
            Config(nullptr)
            {}

        FGetCatalogConfigResponse(const FGetCatalogConfigResponse& src) = default;

        FGetCatalogConfigResponse(const TSharedPtr<FJsonObject>& obj) : FGetCatalogConfigResponse()
        {
            readFromValue(obj);
        }

        ~FGetCatalogConfigResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetDraftItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The unique ID of the item.
        FString Id;

        FGetDraftItemRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            Id()
            {}

        FGetDraftItemRequest(const FGetDraftItemRequest& src) = default;

        FGetDraftItemRequest(const TSharedPtr<FJsonObject>& obj) : FGetDraftItemRequest()
        {
            readFromValue(obj);
        }

        ~FGetDraftItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetDraftItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Full metadata of the catalog item requested.
        TSharedPtr<FCatalogItem> Item;

        FGetDraftItemResponse() :
            FPlayFabCppResultCommon(),
            Item(nullptr)
            {}

        FGetDraftItemResponse(const FGetDraftItemResponse& src) = default;

        FGetDraftItemResponse(const TSharedPtr<FJsonObject>& obj) : FGetDraftItemResponse()
        {
            readFromValue(obj);
        }

        ~FGetDraftItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetDraftItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] List of item alternate IDs.
        TArray<FCatalogAlternateId> AlternateIds;
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] List of Item Ids.
        TArray<FString> Ids;
        FGetDraftItemsRequest() :
            FPlayFabCppRequestCommon(),
            AlternateIds(),
            CustomTags(),
            Entity(nullptr),
            Ids()
            {}

        FGetDraftItemsRequest(const FGetDraftItemsRequest& src) = default;

        FGetDraftItemsRequest(const TSharedPtr<FJsonObject>& obj) : FGetDraftItemsRequest()
        {
            readFromValue(obj);
        }

        ~FGetDraftItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetDraftItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] An opaque token used to retrieve the next page of items, if any are available.
        FString ContinuationToken;

        // [optional] A set of items created by the entity.
        TArray<FCatalogItem> Items;
        FGetDraftItemsResponse() :
            FPlayFabCppResultCommon(),
            ContinuationToken(),
            Items()
            {}

        FGetDraftItemsResponse(const FGetDraftItemsResponse& src) = default;

        FGetDraftItemsResponse(const TSharedPtr<FJsonObject>& obj) : FGetDraftItemsResponse()
        {
            readFromValue(obj);
        }

        ~FGetDraftItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetEntityDraftItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        /**
         * [optional] An opaque token used to retrieve the next page of items created by the caller, if any are available. Should be null on
         * initial request.
         */
        FString ContinuationToken;

        // Number of items to retrieve. Maximum page size is 10.
        int32 Count;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] OData Filter to specify ItemType.
        FString Filter;

        FGetEntityDraftItemsRequest() :
            FPlayFabCppRequestCommon(),
            ContinuationToken(),
            Count(0),
            CustomTags(),
            Entity(nullptr),
            Filter()
            {}

        FGetEntityDraftItemsRequest(const FGetEntityDraftItemsRequest& src) = default;

        FGetEntityDraftItemsRequest(const TSharedPtr<FJsonObject>& obj) : FGetEntityDraftItemsRequest()
        {
            readFromValue(obj);
        }

        ~FGetEntityDraftItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetEntityDraftItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] An opaque token used to retrieve the next page of items, if any are available.
        FString ContinuationToken;

        // [optional] A set of items created by the entity.
        TArray<FCatalogItem> Items;
        FGetEntityDraftItemsResponse() :
            FPlayFabCppResultCommon(),
            ContinuationToken(),
            Items()
            {}

        FGetEntityDraftItemsResponse(const FGetEntityDraftItemsResponse& src) = default;

        FGetEntityDraftItemsResponse(const TSharedPtr<FJsonObject>& obj) : FGetEntityDraftItemsResponse()
        {
            readFromValue(obj);
        }

        ~FGetEntityDraftItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetEntityItemReviewRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The unique ID of the item.
        FString Id;

        FGetEntityItemReviewRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            Id()
            {}

        FGetEntityItemReviewRequest(const FGetEntityItemReviewRequest& src) = default;

        FGetEntityItemReviewRequest(const TSharedPtr<FJsonObject>& obj) : FGetEntityItemReviewRequest()
        {
            readFromValue(obj);
        }

        ~FGetEntityItemReviewRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReview : public PlayFab::FPlayFabCppBaseModel
    {
        // The number of negative helpfulness votes for this review.
        int32 HelpfulNegative;

        // The number of positive helpfulness votes for this review.
        int32 HelpfulPositive;

        // Indicates whether the review author has the item installed.
        bool IsInstalled;

        // [optional] The ID of the item being reviewed.
        FString ItemId;

        // [optional] The version of the item being reviewed.
        FString ItemVersion;

        // [optional] The locale for which this review was submitted in.
        FString Locale;

        // Star rating associated with this review.
        int32 Rating;

        // [optional] The ID of the author of the review.
        TSharedPtr<FEntityKey> ReviewerEntity;

        // [optional] Deprecated. Use ReviewerEntity instead. This property will be removed in a future release.
        FString ReviewerId;

        // [optional] The ID of the review.
        FString ReviewId;

        // [optional] The full text of this review.
        FString ReviewText;

        // The date and time this review was last submitted.
        FDateTime Submitted;

        // [optional] The title of this review.
        FString Title;

        FReview() :
            FPlayFabCppBaseModel(),
            HelpfulNegative(0),
            HelpfulPositive(0),
            IsInstalled(false),
            ItemId(),
            ItemVersion(),
            Locale(),
            Rating(0),
            ReviewerEntity(nullptr),
            ReviewerId(),
            ReviewId(),
            ReviewText(),
            Submitted(0),
            Title()
            {}

        FReview(const FReview& src) = default;

        FReview(const TSharedPtr<FJsonObject>& obj) : FReview()
        {
            readFromValue(obj);
        }

        ~FReview();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetEntityItemReviewResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The review the entity submitted for the requested item.
        TSharedPtr<FReview> pfReview;

        FGetEntityItemReviewResponse() :
            FPlayFabCppResultCommon(),
            pfReview(nullptr)
            {}

        FGetEntityItemReviewResponse(const FGetEntityItemReviewResponse& src) = default;

        FGetEntityItemReviewResponse(const TSharedPtr<FJsonObject>& obj) : FGetEntityItemReviewResponse()
        {
            readFromValue(obj);
        }

        ~FGetEntityItemReviewResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetInventoryCollectionIdsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An opaque token used to retrieve the next page of collection ids, if any are available.
        FString ContinuationToken;

        // Number of items to retrieve. (Default = 10)
        int32 Count;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity the request is about. Set to the caller by default.
        TSharedPtr<FEntityKey> Entity;

        FGetInventoryCollectionIdsRequest() :
            FPlayFabCppRequestCommon(),
            ContinuationToken(),
            Count(0),
            CustomTags(),
            Entity(nullptr)
            {}

        FGetInventoryCollectionIdsRequest(const FGetInventoryCollectionIdsRequest& src) = default;

        FGetInventoryCollectionIdsRequest(const TSharedPtr<FJsonObject>& obj) : FGetInventoryCollectionIdsRequest()
        {
            readFromValue(obj);
        }

        ~FGetInventoryCollectionIdsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetInventoryCollectionIdsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The requested inventory collection ids.
        TArray<FString> CollectionIds;
        // [optional] An opaque token used to retrieve the next page of collection ids, if any are available.
        FString ContinuationToken;

        FGetInventoryCollectionIdsResponse() :
            FPlayFabCppResultCommon(),
            CollectionIds(),
            ContinuationToken()
            {}

        FGetInventoryCollectionIdsResponse(const FGetInventoryCollectionIdsResponse& src) = default;

        FGetInventoryCollectionIdsResponse(const TSharedPtr<FJsonObject>& obj) : FGetInventoryCollectionIdsResponse()
        {
            readFromValue(obj);
        }

        ~FGetInventoryCollectionIdsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetInventoryItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The id of the entity's collection to perform this action on. (Default="default")
        FString CollectionId;

        /**
         * [optional] An opaque token used to retrieve the next page of items in the inventory, if any are available. Should be null on
         * initial request.
         */
        FString ContinuationToken;

        // Number of items to retrieve. Maximum page size is 50. (Default=10)
        int32 Count;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The filters to limit what is returned to the client.
        FString Filter;

        FGetInventoryItemsRequest() :
            FPlayFabCppRequestCommon(),
            CollectionId(),
            ContinuationToken(),
            Count(0),
            CustomTags(),
            Entity(nullptr),
            Filter()
            {}

        FGetInventoryItemsRequest(const FGetInventoryItemsRequest& src) = default;

        FGetInventoryItemsRequest(const TSharedPtr<FJsonObject>& obj) : FGetInventoryItemsRequest()
        {
            readFromValue(obj);
        }

        ~FGetInventoryItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetInventoryItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] An opaque token used to retrieve the next page of items, if any are available.
        FString ContinuationToken;

        // [optional] The requested inventory items.
        TArray<FInventoryItem> Items;
        FGetInventoryItemsResponse() :
            FPlayFabCppResultCommon(),
            ContinuationToken(),
            Items()
            {}

        FGetInventoryItemsResponse(const FGetInventoryItemsResponse& src) = default;

        FGetInventoryItemsResponse(const TSharedPtr<FJsonObject>& obj) : FGetInventoryItemsResponse()
        {
            readFromValue(obj);
        }

        ~FGetInventoryItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemContainersRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        /**
         * [optional] An opaque token used to retrieve the next page of items in the inventory, if any are available. Should be null on
         * initial request.
         */
        FString ContinuationToken;

        // Number of items to retrieve. Maximum page size is 25.
        int32 Count;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The unique ID of the item.
        FString Id;

        FGetItemContainersRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            ContinuationToken(),
            Count(0),
            CustomTags(),
            Entity(nullptr),
            Id()
            {}

        FGetItemContainersRequest(const FGetItemContainersRequest& src) = default;

        FGetItemContainersRequest(const TSharedPtr<FJsonObject>& obj) : FGetItemContainersRequest()
        {
            readFromValue(obj);
        }

        ~FGetItemContainersRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemContainersResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] List of Bundles and Stores containing the requested items.
        TArray<FCatalogItem> Containers;
        // [optional] An opaque token used to retrieve the next page of items, if any are available.
        FString ContinuationToken;

        FGetItemContainersResponse() :
            FPlayFabCppResultCommon(),
            Containers(),
            ContinuationToken()
            {}

        FGetItemContainersResponse(const FGetItemContainersResponse& src) = default;

        FGetItemContainersResponse(const TSharedPtr<FJsonObject>& obj) : FGetItemContainersResponse()
        {
            readFromValue(obj);
        }

        ~FGetItemContainersResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemModerationStateRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The unique ID of the item.
        FString Id;

        FGetItemModerationStateRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Id()
            {}

        FGetItemModerationStateRequest(const FGetItemModerationStateRequest& src) = default;

        FGetItemModerationStateRequest(const TSharedPtr<FJsonObject>& obj) : FGetItemModerationStateRequest()
        {
            readFromValue(obj);
        }

        ~FGetItemModerationStateRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemModerationStateResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The current moderation state for the requested item.
        TSharedPtr<FModerationState> State;

        FGetItemModerationStateResponse() :
            FPlayFabCppResultCommon(),
            State(nullptr)
            {}

        FGetItemModerationStateResponse(const FGetItemModerationStateResponse& src) = default;

        FGetItemModerationStateResponse(const TSharedPtr<FJsonObject>& obj) : FGetItemModerationStateResponse()
        {
            readFromValue(obj);
        }

        ~FGetItemModerationStateResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemPublishStatusRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The unique ID of the item.
        FString Id;

        FGetItemPublishStatusRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            Id()
            {}

        FGetItemPublishStatusRequest(const FGetItemPublishStatusRequest& src) = default;

        FGetItemPublishStatusRequest(const TSharedPtr<FJsonObject>& obj) : FGetItemPublishStatusRequest()
        {
            readFromValue(obj);
        }

        ~FGetItemPublishStatusRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum PublishResult
    {
        PublishResultUnknown,
        PublishResultPending,
        PublishResultSucceeded,
        PublishResultFailed,
        PublishResultCanceled
    };

    PLAYFABCPP_API void writePublishResultEnumJSON(PublishResult enumVal, JsonWriter& writer);
    PLAYFABCPP_API PublishResult readPublishResultFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API PublishResult readPublishResultFromValue(const FString& value);

    struct PLAYFABCPP_API FGetItemPublishStatusResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] High level status of the published item.
        Boxed<PublishResult> Result;

        // [optional] Descriptive message about the current status of the publish.
        FString StatusMessage;

        FGetItemPublishStatusResponse() :
            FPlayFabCppResultCommon(),
            Result(),
            StatusMessage()
            {}

        FGetItemPublishStatusResponse(const FGetItemPublishStatusResponse& src) = default;

        FGetItemPublishStatusResponse(const TSharedPtr<FJsonObject>& obj) : FGetItemPublishStatusResponse()
        {
            readFromValue(obj);
        }

        ~FGetItemPublishStatusResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The unique ID of the item.
        FString Id;

        FGetItemRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            Id()
            {}

        FGetItemRequest(const FGetItemRequest& src) = default;

        FGetItemRequest(const TSharedPtr<FJsonObject>& obj) : FGetItemRequest()
        {
            readFromValue(obj);
        }

        ~FGetItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The item result.
        TSharedPtr<FCatalogItem> Item;

        FGetItemResponse() :
            FPlayFabCppResultCommon(),
            Item(nullptr)
            {}

        FGetItemResponse(const FGetItemResponse& src) = default;

        FGetItemResponse(const TSharedPtr<FJsonObject>& obj) : FGetItemResponse()
        {
            readFromValue(obj);
        }

        ~FGetItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemReviewsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] An opaque token used to retrieve the next page of items, if any are available.
        FString ContinuationToken;

        // Number of items to retrieve. Maximum page size is 200. If not specified, defaults to 10.
        int32 Count;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The unique ID of the item.
        FString Id;

        // [optional] An OData orderBy used to order the results of the query.
        FString OrderBy;

        FGetItemReviewsRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            ContinuationToken(),
            Count(0),
            CustomTags(),
            Id(),
            OrderBy()
            {}

        FGetItemReviewsRequest(const FGetItemReviewsRequest& src) = default;

        FGetItemReviewsRequest(const TSharedPtr<FJsonObject>& obj) : FGetItemReviewsRequest()
        {
            readFromValue(obj);
        }

        ~FGetItemReviewsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemReviewsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] An opaque token used to retrieve the next page of items, if any are available.
        FString ContinuationToken;

        // [optional] The paginated set of results.
        TArray<FReview> Reviews;
        FGetItemReviewsResponse() :
            FPlayFabCppResultCommon(),
            ContinuationToken(),
            Reviews()
            {}

        FGetItemReviewsResponse(const FGetItemReviewsResponse& src) = default;

        FGetItemReviewsResponse(const TSharedPtr<FJsonObject>& obj) : FGetItemReviewsResponse()
        {
            readFromValue(obj);
        }

        ~FGetItemReviewsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemReviewSummaryRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The unique ID of the item.
        FString Id;

        FGetItemReviewSummaryRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Id()
            {}

        FGetItemReviewSummaryRequest(const FGetItemReviewSummaryRequest& src) = default;

        FGetItemReviewSummaryRequest(const TSharedPtr<FJsonObject>& obj) : FGetItemReviewSummaryRequest()
        {
            readFromValue(obj);
        }

        ~FGetItemReviewSummaryRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemReviewSummaryResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The least favorable review for this item.
        TSharedPtr<FReview> LeastFavorableReview;

        // [optional] The most favorable review for this item.
        TSharedPtr<FReview> MostFavorableReview;

        // [optional] The summary of ratings associated with this item.
        TSharedPtr<FRating> pfRating;

        // The total number of reviews associated with this item.
        int32 ReviewsCount;

        FGetItemReviewSummaryResponse() :
            FPlayFabCppResultCommon(),
            LeastFavorableReview(nullptr),
            MostFavorableReview(nullptr),
            pfRating(nullptr),
            ReviewsCount(0)
            {}

        FGetItemReviewSummaryResponse(const FGetItemReviewSummaryResponse& src) = default;

        FGetItemReviewSummaryResponse(const TSharedPtr<FJsonObject>& obj) : FGetItemReviewSummaryResponse()
        {
            readFromValue(obj);
        }

        ~FGetItemReviewSummaryResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] List of item alternate IDs.
        TArray<FCatalogAlternateId> AlternateIds;
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] List of Item Ids.
        TArray<FString> Ids;
        FGetItemsRequest() :
            FPlayFabCppRequestCommon(),
            AlternateIds(),
            CustomTags(),
            Entity(nullptr),
            Ids()
            {}

        FGetItemsRequest(const FGetItemsRequest& src) = default;

        FGetItemsRequest(const TSharedPtr<FJsonObject>& obj) : FGetItemsRequest()
        {
            readFromValue(obj);
        }

        ~FGetItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Metadata of set of items.
        TArray<FCatalogItem> Items;
        FGetItemsResponse() :
            FPlayFabCppResultCommon(),
            Items()
            {}

        FGetItemsResponse(const FGetItemsResponse& src) = default;

        FGetItemsResponse(const TSharedPtr<FJsonObject>& obj) : FGetItemsResponse()
        {
            readFromValue(obj);
        }

        ~FGetItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetMicrosoftStoreAccessTokensRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FGetMicrosoftStoreAccessTokensRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags()
            {}

        FGetMicrosoftStoreAccessTokensRequest(const FGetMicrosoftStoreAccessTokensRequest& src) = default;

        FGetMicrosoftStoreAccessTokensRequest(const TSharedPtr<FJsonObject>& obj) : FGetMicrosoftStoreAccessTokensRequest()
        {
            readFromValue(obj);
        }

        ~FGetMicrosoftStoreAccessTokensRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetMicrosoftStoreAccessTokensResponse : public PlayFab::FPlayFabCppResultCommon
    {
        /**
         * [optional] The collections access token for calling https://onestore.microsoft.com/b2b/keys/create/collections to obtain a
         * CollectionsIdKey for the user
         */
        FString CollectionsAccessToken;

        // The date the collections access token expires
        FDateTime CollectionsAccessTokenExpirationDate;

        FGetMicrosoftStoreAccessTokensResponse() :
            FPlayFabCppResultCommon(),
            CollectionsAccessToken(),
            CollectionsAccessTokenExpirationDate(0)
            {}

        FGetMicrosoftStoreAccessTokensResponse(const FGetMicrosoftStoreAccessTokensResponse& src) = default;

        FGetMicrosoftStoreAccessTokensResponse(const TSharedPtr<FJsonObject>& obj) : FGetMicrosoftStoreAccessTokensResponse()
        {
            readFromValue(obj);
        }

        ~FGetMicrosoftStoreAccessTokensResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGooglePlayProductPurchase : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The Product ID (SKU) of the InApp product purchased from the Google Play store.
        FString ProductId;

        // [optional] The token provided to the player's device when the product was purchased
        FString Token;

        FGooglePlayProductPurchase() :
            FPlayFabCppBaseModel(),
            ProductId(),
            Token()
            {}

        FGooglePlayProductPurchase(const FGooglePlayProductPurchase& src) = default;

        FGooglePlayProductPurchase(const TSharedPtr<FJsonObject>& obj) : FGooglePlayProductPurchase()
        {
            readFromValue(obj);
        }

        ~FGooglePlayProductPurchase();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum HelpfulnessVote
    {
        HelpfulnessVoteNone,
        HelpfulnessVoteUnHelpful,
        HelpfulnessVoteHelpful
    };

    PLAYFABCPP_API void writeHelpfulnessVoteEnumJSON(HelpfulnessVote enumVal, JsonWriter& writer);
    PLAYFABCPP_API HelpfulnessVote readHelpfulnessVoteFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API HelpfulnessVote readHelpfulnessVoteFromValue(const FString& value);

    struct PLAYFABCPP_API FPayoutDetails : public PlayFab::FPlayFabCppBaseModel
    {
        FPayoutDetails() :
            FPlayFabCppBaseModel()
            {}

        FPayoutDetails(const FPayoutDetails& src) = default;

        FPayoutDetails(const TSharedPtr<FJsonObject>& obj) : FPayoutDetails()
        {
            readFromValue(obj);
        }

        ~FPayoutDetails();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPublishDraftItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        /**
         * [optional] ETag of the catalog item to published from the working catalog to the public catalog. Used for optimistic concurrency.
         * If the provided ETag does not match the ETag in the current working catalog, the request will be rejected. If not
         * provided, the current version of the document in the working catalog will be published.
         */
        FString ETag;

        // [optional] The unique ID of the item.
        FString Id;

        FPublishDraftItemRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            ETag(),
            Id()
            {}

        FPublishDraftItemRequest(const FPublishDraftItemRequest& src) = default;

        FPublishDraftItemRequest(const TSharedPtr<FJsonObject>& obj) : FPublishDraftItemRequest()
        {
            readFromValue(obj);
        }

        ~FPublishDraftItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPublishDraftItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FPublishDraftItemResponse() :
            FPlayFabCppResultCommon()
            {}

        FPublishDraftItemResponse(const FPublishDraftItemResponse& src) = default;

        FPublishDraftItemResponse(const TSharedPtr<FJsonObject>& obj) : FPublishDraftItemResponse()
        {
            readFromValue(obj);
        }

        ~FPublishDraftItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPurchaseInventoryItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The amount to purchase.
        int32 Amount;

        // [optional] The id of the entity's collection to perform this action on. (Default="default")
        FString CollectionId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        /**
         * Indicates whether stacks reduced to an amount of 0 during the request should be deleted from the inventory.
         * (Default=false)
         */
        bool DeleteEmptyStacks;

        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The Idempotency ID for this request.
        FString IdempotencyId;

        // [optional] The inventory item the request applies to.
        TSharedPtr<FInventoryItemReference> Item;

        /**
         * [optional] The per-item price the item is expected to be purchased at. This must match a value configured in the Catalog or
         * specified Store.
         */
        TArray<FPurchasePriceAmount> PriceAmounts;
        // [optional] The id of the Store to purchase the item from.
        FString StoreId;

        FPurchaseInventoryItemsRequest() :
            FPlayFabCppRequestCommon(),
            Amount(0),
            CollectionId(),
            CustomTags(),
            DeleteEmptyStacks(false),
            Entity(nullptr),
            IdempotencyId(),
            Item(nullptr),
            PriceAmounts(),
            StoreId()
            {}

        FPurchaseInventoryItemsRequest(const FPurchaseInventoryItemsRequest& src) = default;

        FPurchaseInventoryItemsRequest(const TSharedPtr<FJsonObject>& obj) : FPurchaseInventoryItemsRequest()
        {
            readFromValue(obj);
        }

        ~FPurchaseInventoryItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPurchaseInventoryItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The idempotency id used in the request.
        FString IdempotencyId;

        // [optional] The ids of transactions that occurred as a result of the request.
        TArray<FString> TransactionIds;
        FPurchaseInventoryItemsResponse() :
            FPlayFabCppResultCommon(),
            IdempotencyId(),
            TransactionIds()
            {}

        FPurchaseInventoryItemsResponse(const FPurchaseInventoryItemsResponse& src) = default;

        FPurchaseInventoryItemsResponse(const TSharedPtr<FJsonObject>& obj) : FPurchaseInventoryItemsResponse()
        {
            readFromValue(obj);
        }

        ~FPurchaseInventoryItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FPurchaseOverride : public PlayFab::FPlayFabCppBaseModel
    {
        FPurchaseOverride() :
            FPlayFabCppBaseModel()
            {}

        FPurchaseOverride(const FPurchaseOverride& src) = default;

        FPurchaseOverride(const TSharedPtr<FJsonObject>& obj) : FPurchaseOverride()
        {
            readFromValue(obj);
        }

        ~FPurchaseOverride();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRedeemAppleAppStoreInventoryItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The id of the entity's collection to perform this action on. (Default="default")
        FString CollectionId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The receipt provided by the Apple marketplace upon successful purchase.
        FString Receipt;

        FRedeemAppleAppStoreInventoryItemsRequest() :
            FPlayFabCppRequestCommon(),
            CollectionId(),
            CustomTags(),
            Entity(nullptr),
            Receipt()
            {}

        FRedeemAppleAppStoreInventoryItemsRequest(const FRedeemAppleAppStoreInventoryItemsRequest& src) = default;

        FRedeemAppleAppStoreInventoryItemsRequest(const TSharedPtr<FJsonObject>& obj) : FRedeemAppleAppStoreInventoryItemsRequest()
        {
            readFromValue(obj);
        }

        ~FRedeemAppleAppStoreInventoryItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRedemptionFailure : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The marketplace failure code.
        FString FailureCode;

        // [optional] The marketplace error details explaining why the offer failed to redeem.
        FString FailureDetails;

        // [optional] The transaction id in the external marketplace.
        FString MarketplaceTransactionId;

        // [optional] The ID of the offer being redeemed.
        FString OfferId;

        FRedemptionFailure() :
            FPlayFabCppBaseModel(),
            FailureCode(),
            FailureDetails(),
            MarketplaceTransactionId(),
            OfferId()
            {}

        FRedemptionFailure(const FRedemptionFailure& src) = default;

        FRedemptionFailure(const TSharedPtr<FJsonObject>& obj) : FRedemptionFailure()
        {
            readFromValue(obj);
        }

        ~FRedemptionFailure();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRedemptionSuccess : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The transaction id in the external marketplace.
        FString MarketplaceTransactionId;

        // [optional] The ID of the offer being redeemed.
        FString OfferId;

        // The timestamp for when the redeem was completed.
        FDateTime SuccessTimestamp;

        FRedemptionSuccess() :
            FPlayFabCppBaseModel(),
            MarketplaceTransactionId(),
            OfferId(),
            SuccessTimestamp(0)
            {}

        FRedemptionSuccess(const FRedemptionSuccess& src) = default;

        FRedemptionSuccess(const TSharedPtr<FJsonObject>& obj) : FRedemptionSuccess()
        {
            readFromValue(obj);
        }

        ~FRedemptionSuccess();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRedeemAppleAppStoreInventoryItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of failed redemptions from the external marketplace.
        TArray<FRedemptionFailure> Failed;
        // [optional] The list of successful redemptions from the external marketplace.
        TArray<FRedemptionSuccess> Succeeded;
        // [optional] The Transaction IDs associated with the inventory modifications
        TArray<FString> TransactionIds;
        FRedeemAppleAppStoreInventoryItemsResponse() :
            FPlayFabCppResultCommon(),
            Failed(),
            Succeeded(),
            TransactionIds()
            {}

        FRedeemAppleAppStoreInventoryItemsResponse(const FRedeemAppleAppStoreInventoryItemsResponse& src) = default;

        FRedeemAppleAppStoreInventoryItemsResponse(const TSharedPtr<FJsonObject>& obj) : FRedeemAppleAppStoreInventoryItemsResponse()
        {
            readFromValue(obj);
        }

        ~FRedeemAppleAppStoreInventoryItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRedeemGooglePlayInventoryItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The id of the entity's collection to perform this action on. (Default="default")
        FString CollectionId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The list of purchases to redeem
        TArray<FGooglePlayProductPurchase> Purchases;
        FRedeemGooglePlayInventoryItemsRequest() :
            FPlayFabCppRequestCommon(),
            CollectionId(),
            CustomTags(),
            Entity(nullptr),
            Purchases()
            {}

        FRedeemGooglePlayInventoryItemsRequest(const FRedeemGooglePlayInventoryItemsRequest& src) = default;

        FRedeemGooglePlayInventoryItemsRequest(const TSharedPtr<FJsonObject>& obj) : FRedeemGooglePlayInventoryItemsRequest()
        {
            readFromValue(obj);
        }

        ~FRedeemGooglePlayInventoryItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRedeemGooglePlayInventoryItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of failed redemptions from the external marketplace.
        TArray<FRedemptionFailure> Failed;
        // [optional] The list of successful redemptions from the external marketplace.
        TArray<FRedemptionSuccess> Succeeded;
        // [optional] The Transaction IDs associated with the inventory modifications
        TArray<FString> TransactionIds;
        FRedeemGooglePlayInventoryItemsResponse() :
            FPlayFabCppResultCommon(),
            Failed(),
            Succeeded(),
            TransactionIds()
            {}

        FRedeemGooglePlayInventoryItemsResponse(const FRedeemGooglePlayInventoryItemsResponse& src) = default;

        FRedeemGooglePlayInventoryItemsResponse(const TSharedPtr<FJsonObject>& obj) : FRedeemGooglePlayInventoryItemsResponse()
        {
            readFromValue(obj);
        }

        ~FRedeemGooglePlayInventoryItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRedeemMicrosoftStoreInventoryItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The id of the entity's collection to perform this action on. (Default="default")
        FString CollectionId;

        // [optional] The OneStore Collections Id Key used for AAD authentication.
        FString CollectionsIdKey;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] Xbox Token used for delegated business partner authentication.
        FString XboxToken;

        FRedeemMicrosoftStoreInventoryItemsRequest() :
            FPlayFabCppRequestCommon(),
            CollectionId(),
            CollectionsIdKey(),
            CustomTags(),
            Entity(nullptr),
            XboxToken()
            {}

        FRedeemMicrosoftStoreInventoryItemsRequest(const FRedeemMicrosoftStoreInventoryItemsRequest& src) = default;

        FRedeemMicrosoftStoreInventoryItemsRequest(const TSharedPtr<FJsonObject>& obj) : FRedeemMicrosoftStoreInventoryItemsRequest()
        {
            readFromValue(obj);
        }

        ~FRedeemMicrosoftStoreInventoryItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRedeemMicrosoftStoreInventoryItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of failed redemptions from the external marketplace.
        TArray<FRedemptionFailure> Failed;
        // [optional] The list of successful redemptions from the external marketplace.
        TArray<FRedemptionSuccess> Succeeded;
        // [optional] The Transaction IDs associated with the inventory modifications
        TArray<FString> TransactionIds;
        FRedeemMicrosoftStoreInventoryItemsResponse() :
            FPlayFabCppResultCommon(),
            Failed(),
            Succeeded(),
            TransactionIds()
            {}

        FRedeemMicrosoftStoreInventoryItemsResponse(const FRedeemMicrosoftStoreInventoryItemsResponse& src) = default;

        FRedeemMicrosoftStoreInventoryItemsResponse(const TSharedPtr<FJsonObject>& obj) : FRedeemMicrosoftStoreInventoryItemsResponse()
        {
            readFromValue(obj);
        }

        ~FRedeemMicrosoftStoreInventoryItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRedeemNintendoEShopInventoryItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The id of the entity's collection to perform this action on. (Default="default")
        FString CollectionId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The Nintendo provided token authorizing redemption
        FString NintendoServiceAccountIdToken;

        FRedeemNintendoEShopInventoryItemsRequest() :
            FPlayFabCppRequestCommon(),
            CollectionId(),
            CustomTags(),
            Entity(nullptr),
            NintendoServiceAccountIdToken()
            {}

        FRedeemNintendoEShopInventoryItemsRequest(const FRedeemNintendoEShopInventoryItemsRequest& src) = default;

        FRedeemNintendoEShopInventoryItemsRequest(const TSharedPtr<FJsonObject>& obj) : FRedeemNintendoEShopInventoryItemsRequest()
        {
            readFromValue(obj);
        }

        ~FRedeemNintendoEShopInventoryItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRedeemNintendoEShopInventoryItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of failed redemptions from the external marketplace.
        TArray<FRedemptionFailure> Failed;
        // [optional] The list of successful redemptions from the external marketplace.
        TArray<FRedemptionSuccess> Succeeded;
        // [optional] The Transaction IDs associated with the inventory modifications
        TArray<FString> TransactionIds;
        FRedeemNintendoEShopInventoryItemsResponse() :
            FPlayFabCppResultCommon(),
            Failed(),
            Succeeded(),
            TransactionIds()
            {}

        FRedeemNintendoEShopInventoryItemsResponse(const FRedeemNintendoEShopInventoryItemsResponse& src) = default;

        FRedeemNintendoEShopInventoryItemsResponse(const TSharedPtr<FJsonObject>& obj) : FRedeemNintendoEShopInventoryItemsResponse()
        {
            readFromValue(obj);
        }

        ~FRedeemNintendoEShopInventoryItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRedeemPlayStationStoreInventoryItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] Authorization code provided by the PlayStation OAuth provider.
        FString AuthorizationCode;

        // [optional] The id of the entity's collection to perform this action on. (Default="default")
        FString CollectionId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] Optional Service Label to pass into the request.
        FString ServiceLabel;

        FRedeemPlayStationStoreInventoryItemsRequest() :
            FPlayFabCppRequestCommon(),
            AuthorizationCode(),
            CollectionId(),
            CustomTags(),
            Entity(nullptr),
            ServiceLabel()
            {}

        FRedeemPlayStationStoreInventoryItemsRequest(const FRedeemPlayStationStoreInventoryItemsRequest& src) = default;

        FRedeemPlayStationStoreInventoryItemsRequest(const TSharedPtr<FJsonObject>& obj) : FRedeemPlayStationStoreInventoryItemsRequest()
        {
            readFromValue(obj);
        }

        ~FRedeemPlayStationStoreInventoryItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRedeemPlayStationStoreInventoryItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of failed redemptions from the external marketplace.
        TArray<FRedemptionFailure> Failed;
        // [optional] The list of successful redemptions from the external marketplace.
        TArray<FRedemptionSuccess> Succeeded;
        // [optional] The Transaction IDs associated with the inventory modifications
        TArray<FString> TransactionIds;
        FRedeemPlayStationStoreInventoryItemsResponse() :
            FPlayFabCppResultCommon(),
            Failed(),
            Succeeded(),
            TransactionIds()
            {}

        FRedeemPlayStationStoreInventoryItemsResponse(const FRedeemPlayStationStoreInventoryItemsResponse& src) = default;

        FRedeemPlayStationStoreInventoryItemsResponse(const TSharedPtr<FJsonObject>& obj) : FRedeemPlayStationStoreInventoryItemsResponse()
        {
            readFromValue(obj);
        }

        ~FRedeemPlayStationStoreInventoryItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRedeemSteamInventoryItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The id of the entity's collection to perform this action on. (Default="default")
        FString CollectionId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        FRedeemSteamInventoryItemsRequest() :
            FPlayFabCppRequestCommon(),
            CollectionId(),
            CustomTags(),
            Entity(nullptr)
            {}

        FRedeemSteamInventoryItemsRequest(const FRedeemSteamInventoryItemsRequest& src) = default;

        FRedeemSteamInventoryItemsRequest(const TSharedPtr<FJsonObject>& obj) : FRedeemSteamInventoryItemsRequest()
        {
            readFromValue(obj);
        }

        ~FRedeemSteamInventoryItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRedeemSteamInventoryItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of failed redemptions from the external marketplace.
        TArray<FRedemptionFailure> Failed;
        // [optional] The list of successful redemptions from the external marketplace.
        TArray<FRedemptionSuccess> Succeeded;
        // [optional] The Transaction IDs associated with the inventory modifications
        TArray<FString> TransactionIds;
        FRedeemSteamInventoryItemsResponse() :
            FPlayFabCppResultCommon(),
            Failed(),
            Succeeded(),
            TransactionIds()
            {}

        FRedeemSteamInventoryItemsResponse(const FRedeemSteamInventoryItemsResponse& src) = default;

        FRedeemSteamInventoryItemsResponse(const TSharedPtr<FJsonObject>& obj) : FRedeemSteamInventoryItemsResponse()
        {
            readFromValue(obj);
        }

        ~FRedeemSteamInventoryItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReportItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] Category of concern for this report.
        Boxed<ConcernCategory> pfConcernCategory;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The unique ID of the item.
        FString Id;

        // [optional] The string reason for this report.
        FString Reason;

        FReportItemRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            pfConcernCategory(),
            CustomTags(),
            Entity(nullptr),
            Id(),
            Reason()
            {}

        FReportItemRequest(const FReportItemRequest& src) = default;

        FReportItemRequest(const TSharedPtr<FJsonObject>& obj) : FReportItemRequest()
        {
            readFromValue(obj);
        }

        ~FReportItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReportItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FReportItemResponse() :
            FPlayFabCppResultCommon()
            {}

        FReportItemResponse(const FReportItemResponse& src) = default;

        FReportItemResponse(const TSharedPtr<FJsonObject>& obj) : FReportItemResponse()
        {
            readFromValue(obj);
        }

        ~FReportItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReportItemReviewRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID of the item associated with the review.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The reason this review is being reported.
        Boxed<ConcernCategory> pfConcernCategory;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The string ID of the item associated with the review.
        FString ItemId;

        // [optional] The string reason for this report.
        FString Reason;

        // [optional] The ID of the review to submit a report for.
        FString ReviewId;

        FReportItemReviewRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            pfConcernCategory(),
            CustomTags(),
            Entity(nullptr),
            ItemId(),
            Reason(),
            ReviewId()
            {}

        FReportItemReviewRequest(const FReportItemReviewRequest& src) = default;

        FReportItemReviewRequest(const TSharedPtr<FJsonObject>& obj) : FReportItemReviewRequest()
        {
            readFromValue(obj);
        }

        ~FReportItemReviewRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReportItemReviewResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FReportItemReviewResponse() :
            FPlayFabCppResultCommon()
            {}

        FReportItemReviewResponse(const FReportItemReviewResponse& src) = default;

        FReportItemReviewResponse(const TSharedPtr<FJsonObject>& obj) : FReportItemReviewResponse()
        {
            readFromValue(obj);
        }

        ~FReportItemReviewResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReviewItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The unique ID of the item.
        FString Id;

        // [optional] The review to submit.
        TSharedPtr<FReview> pfReview;

        FReviewItemRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            Id(),
            pfReview(nullptr)
            {}

        FReviewItemRequest(const FReviewItemRequest& src) = default;

        FReviewItemRequest(const TSharedPtr<FJsonObject>& obj) : FReviewItemRequest()
        {
            readFromValue(obj);
        }

        ~FReviewItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReviewItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FReviewItemResponse() :
            FPlayFabCppResultCommon()
            {}

        FReviewItemResponse(const FReviewItemResponse& src) = default;

        FReviewItemResponse(const TSharedPtr<FJsonObject>& obj) : FReviewItemResponse()
        {
            readFromValue(obj);
        }

        ~FReviewItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FReviewTakedown : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The ID of the item associated with the review to take down.
        FString ItemId;

        // [optional] The ID of the review to take down.
        FString ReviewId;

        FReviewTakedown() :
            FPlayFabCppBaseModel(),
            AlternateId(nullptr),
            ItemId(),
            ReviewId()
            {}

        FReviewTakedown(const FReviewTakedown& src) = default;

        FReviewTakedown(const TSharedPtr<FJsonObject>& obj) : FReviewTakedown()
        {
            readFromValue(obj);
        }

        ~FReviewTakedown();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FScanResult : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The URL of the item which failed the scan.
        FString Url;

        FScanResult() :
            FPlayFabCppBaseModel(),
            Url()
            {}

        FScanResult(const FScanResult& src) = default;

        FScanResult(const TSharedPtr<FJsonObject>& obj) : FScanResult()
        {
            readFromValue(obj);
        }

        ~FScanResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FStoreReference : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] An alternate ID of the store.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The unique ID of the store.
        FString Id;

        FStoreReference() :
            FPlayFabCppBaseModel(),
            AlternateId(nullptr),
            Id()
            {}

        FStoreReference(const FStoreReference& src) = default;

        FStoreReference(const TSharedPtr<FJsonObject>& obj) : FStoreReference()
        {
            readFromValue(obj);
        }

        ~FStoreReference();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSearchItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An opaque token used to retrieve the next page of items, if any are available.
        FString ContinuationToken;

        // Number of items to retrieve. Maximum page size is 50. Default value is 10.
        int32 Count;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] An OData filter used to refine the search query.
        FString Filter;

        // [optional] An OData orderBy used to order the results of the search query.
        FString OrderBy;

        // [optional] The text to search for.
        FString Search;

        /**
         * [optional] An OData select query option used to augment the search results. If not defined, the default search result metadata will
         * be returned.
         */
        FString Select;

        // [optional] The store to restrict the search request to.
        TSharedPtr<FStoreReference> Store;

        FSearchItemsRequest() :
            FPlayFabCppRequestCommon(),
            ContinuationToken(),
            Count(0),
            CustomTags(),
            Entity(nullptr),
            Filter(),
            OrderBy(),
            Search(),
            Select(),
            Store(nullptr)
            {}

        FSearchItemsRequest(const FSearchItemsRequest& src) = default;

        FSearchItemsRequest(const TSharedPtr<FJsonObject>& obj) : FSearchItemsRequest()
        {
            readFromValue(obj);
        }

        ~FSearchItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSearchItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] An opaque token used to retrieve the next page of items, if any are available.
        FString ContinuationToken;

        // [optional] The paginated set of results for the search query.
        TArray<FCatalogItem> Items;
        FSearchItemsResponse() :
            FPlayFabCppResultCommon(),
            ContinuationToken(),
            Items()
            {}

        FSearchItemsResponse(const FSearchItemsResponse& src) = default;

        FSearchItemsResponse(const TSharedPtr<FJsonObject>& obj) : FSearchItemsResponse()
        {
            readFromValue(obj);
        }

        ~FSearchItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSetItemModerationStateRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID associated with this item.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The unique ID of the item.
        FString Id;

        // [optional] The reason for the moderation state change for the associated item.
        FString Reason;

        // [optional] The status to set for the associated item.
        Boxed<ModerationStatus> Status;

        FSetItemModerationStateRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Id(),
            Reason(),
            Status()
            {}

        FSetItemModerationStateRequest(const FSetItemModerationStateRequest& src) = default;

        FSetItemModerationStateRequest(const TSharedPtr<FJsonObject>& obj) : FSetItemModerationStateRequest()
        {
            readFromValue(obj);
        }

        ~FSetItemModerationStateRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSetItemModerationStateResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FSetItemModerationStateResponse() :
            FPlayFabCppResultCommon()
            {}

        FSetItemModerationStateResponse(const FSetItemModerationStateResponse& src) = default;

        FSetItemModerationStateResponse(const TSharedPtr<FJsonObject>& obj) : FSetItemModerationStateResponse()
        {
            readFromValue(obj);
        }

        ~FSetItemModerationStateResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSubmitItemReviewVoteRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] An alternate ID of the item associated with the review.
        TSharedPtr<FCatalogAlternateId> AlternateId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The string ID of the item associated with the review.
        FString ItemId;

        // [optional] The ID of the review to submit a helpfulness vote for.
        FString ReviewId;

        // [optional] The helpfulness vote of the review.
        Boxed<HelpfulnessVote> Vote;

        FSubmitItemReviewVoteRequest() :
            FPlayFabCppRequestCommon(),
            AlternateId(nullptr),
            CustomTags(),
            Entity(nullptr),
            ItemId(),
            ReviewId(),
            Vote()
            {}

        FSubmitItemReviewVoteRequest(const FSubmitItemReviewVoteRequest& src) = default;

        FSubmitItemReviewVoteRequest(const TSharedPtr<FJsonObject>& obj) : FSubmitItemReviewVoteRequest()
        {
            readFromValue(obj);
        }

        ~FSubmitItemReviewVoteRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSubmitItemReviewVoteResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FSubmitItemReviewVoteResponse() :
            FPlayFabCppResultCommon()
            {}

        FSubmitItemReviewVoteResponse(const FSubmitItemReviewVoteResponse& src) = default;

        FSubmitItemReviewVoteResponse(const TSharedPtr<FJsonObject>& obj) : FSubmitItemReviewVoteResponse()
        {
            readFromValue(obj);
        }

        ~FSubmitItemReviewVoteResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSubscriptionDetails : public PlayFab::FPlayFabCppBaseModel
    {
        // The length of time that the subscription will last in seconds.
        double DurationInSeconds;

        FSubscriptionDetails() :
            FPlayFabCppBaseModel(),
            DurationInSeconds(0)
            {}

        FSubscriptionDetails(const FSubscriptionDetails& src) = default;

        FSubscriptionDetails(const TSharedPtr<FJsonObject>& obj) : FSubscriptionDetails()
        {
            readFromValue(obj);
        }

        ~FSubscriptionDetails();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSubtractInventoryItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The amount to add for the current item.
        int32 Amount;

        // [optional] The id of the entity's collection to perform this action on. (Default="default")
        FString CollectionId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        /**
         * Indicates whether stacks reduced to an amount of 0 during the request should be deleted from the inventory.
         * (Default=false)
         */
        bool DeleteEmptyStacks;

        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The Idempotency ID for this request.
        FString IdempotencyId;

        // [optional] The inventory item the request applies to.
        TSharedPtr<FInventoryItemReference> Item;

        FSubtractInventoryItemsRequest() :
            FPlayFabCppRequestCommon(),
            Amount(0),
            CollectionId(),
            CustomTags(),
            DeleteEmptyStacks(false),
            Entity(nullptr),
            IdempotencyId(),
            Item(nullptr)
            {}

        FSubtractInventoryItemsRequest(const FSubtractInventoryItemsRequest& src) = default;

        FSubtractInventoryItemsRequest(const TSharedPtr<FJsonObject>& obj) : FSubtractInventoryItemsRequest()
        {
            readFromValue(obj);
        }

        ~FSubtractInventoryItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSubtractInventoryItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The idempotency id used in the request.
        FString IdempotencyId;

        // [optional] The ids of transactions that occurred as a result of the request.
        TArray<FString> TransactionIds;
        FSubtractInventoryItemsResponse() :
            FPlayFabCppResultCommon(),
            IdempotencyId(),
            TransactionIds()
            {}

        FSubtractInventoryItemsResponse(const FSubtractInventoryItemsResponse& src) = default;

        FSubtractInventoryItemsResponse(const TSharedPtr<FJsonObject>& obj) : FSubtractInventoryItemsResponse()
        {
            readFromValue(obj);
        }

        ~FSubtractInventoryItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FTakedownItemReviewsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The set of reviews to take down.
        TArray<FReviewTakedown> Reviews;
        FTakedownItemReviewsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Reviews()
            {}

        FTakedownItemReviewsRequest(const FTakedownItemReviewsRequest& src) = default;

        FTakedownItemReviewsRequest(const TSharedPtr<FJsonObject>& obj) : FTakedownItemReviewsRequest()
        {
            readFromValue(obj);
        }

        ~FTakedownItemReviewsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FTakedownItemReviewsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FTakedownItemReviewsResponse() :
            FPlayFabCppResultCommon()
            {}

        FTakedownItemReviewsResponse(const FTakedownItemReviewsResponse& src) = default;

        FTakedownItemReviewsResponse(const TSharedPtr<FJsonObject>& obj) : FTakedownItemReviewsResponse()
        {
            readFromValue(obj);
        }

        ~FTakedownItemReviewsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FTransferInventoryItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // The amount to transfer .
        int32 Amount;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        /**
         * Indicates whether stacks reduced to an amount of 0 during the request should be deleted from the inventory. (Default =
         * false)
         */
        bool DeleteEmptyStacks;

        // [optional] The inventory collection id the request is transferring from. (Default="default")
        FString GivingCollectionId;

        // [optional] The entity the request is transferring from. Set to the caller by default.
        TSharedPtr<FEntityKey> GivingEntity;

        // [optional] The inventory item the request is transferring from.
        TSharedPtr<FInventoryItemReference> GivingItem;

        // [optional] The idempotency id for the request.
        FString IdempotencyId;

        // [optional] The inventory collection id the request is transferring to. (Default="default")
        FString ReceivingCollectionId;

        // [optional] The entity the request is transferring to. Set to the caller by default.
        TSharedPtr<FEntityKey> ReceivingEntity;

        // [optional] The inventory item the request is transferring to.
        TSharedPtr<FInventoryItemReference> ReceivingItem;

        FTransferInventoryItemsRequest() :
            FPlayFabCppRequestCommon(),
            Amount(0),
            CustomTags(),
            DeleteEmptyStacks(false),
            GivingCollectionId(),
            GivingEntity(nullptr),
            GivingItem(nullptr),
            IdempotencyId(),
            ReceivingCollectionId(),
            ReceivingEntity(nullptr),
            ReceivingItem(nullptr)
            {}

        FTransferInventoryItemsRequest(const FTransferInventoryItemsRequest& src) = default;

        FTransferInventoryItemsRequest(const TSharedPtr<FJsonObject>& obj) : FTransferInventoryItemsRequest()
        {
            readFromValue(obj);
        }

        ~FTransferInventoryItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FTransferInventoryItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The ids of transactions that occurred as a result of the request's giving action.
        TArray<FString> GivingTransactionIds;
        // [optional] The idempotency id for the request.
        FString IdempotencyId;

        // [optional] The ids of transactions that occurred as a result of the request's receiving action.
        TArray<FString> ReceivingTransactionIds;
        FTransferInventoryItemsResponse() :
            FPlayFabCppResultCommon(),
            GivingTransactionIds(),
            IdempotencyId(),
            ReceivingTransactionIds()
            {}

        FTransferInventoryItemsResponse(const FTransferInventoryItemsResponse& src) = default;

        FTransferInventoryItemsResponse(const TSharedPtr<FJsonObject>& obj) : FTransferInventoryItemsResponse()
        {
            readFromValue(obj);
        }

        ~FTransferInventoryItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateCatalogConfigRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The updated catalog configuration.
        TSharedPtr<FCatalogConfig> Config;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        FUpdateCatalogConfigRequest() :
            FPlayFabCppRequestCommon(),
            Config(nullptr),
            CustomTags()
            {}

        FUpdateCatalogConfigRequest(const FUpdateCatalogConfigRequest& src) = default;

        FUpdateCatalogConfigRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateCatalogConfigRequest()
        {
            readFromValue(obj);
        }

        ~FUpdateCatalogConfigRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateCatalogConfigResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FUpdateCatalogConfigResponse() :
            FPlayFabCppResultCommon()
            {}

        FUpdateCatalogConfigResponse(const FUpdateCatalogConfigResponse& src) = default;

        FUpdateCatalogConfigResponse(const TSharedPtr<FJsonObject>& obj) : FUpdateCatalogConfigResponse()
        {
            readFromValue(obj);
        }

        ~FUpdateCatalogConfigResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateDraftItemRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] Updated metadata describing the catalog item to be updated.
        TSharedPtr<FCatalogItem> Item;

        // Whether the item should be published immediately.
        bool Publish;

        FUpdateDraftItemRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Item(nullptr),
            Publish(false)
            {}

        FUpdateDraftItemRequest(const FUpdateDraftItemRequest& src) = default;

        FUpdateDraftItemRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateDraftItemRequest()
        {
            readFromValue(obj);
        }

        ~FUpdateDraftItemRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateDraftItemResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Updated metadata describing the catalog item just updated.
        TSharedPtr<FCatalogItem> Item;

        FUpdateDraftItemResponse() :
            FPlayFabCppResultCommon(),
            Item(nullptr)
            {}

        FUpdateDraftItemResponse(const FUpdateDraftItemResponse& src) = default;

        FUpdateDraftItemResponse(const TSharedPtr<FJsonObject>& obj) : FUpdateDraftItemResponse()
        {
            readFromValue(obj);
        }

        ~FUpdateDraftItemResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateInventoryItemsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The id of the entity's collection to perform this action on. (Default="default")
        FString CollectionId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // [optional] The Idempotency ID for this request.
        FString IdempotencyId;

        // [optional] The inventory item to update with the specified values.
        TSharedPtr<FInventoryItem> Item;

        FUpdateInventoryItemsRequest() :
            FPlayFabCppRequestCommon(),
            CollectionId(),
            CustomTags(),
            Entity(nullptr),
            IdempotencyId(),
            Item(nullptr)
            {}

        FUpdateInventoryItemsRequest(const FUpdateInventoryItemsRequest& src) = default;

        FUpdateInventoryItemsRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateInventoryItemsRequest()
        {
            readFromValue(obj);
        }

        ~FUpdateInventoryItemsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateInventoryItemsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The idempotency id used in the request.
        FString IdempotencyId;

        // [optional] The ids of transactions that occurred as a result of the request.
        TArray<FString> TransactionIds;
        FUpdateInventoryItemsResponse() :
            FPlayFabCppResultCommon(),
            IdempotencyId(),
            TransactionIds()
            {}

        FUpdateInventoryItemsResponse(const FUpdateInventoryItemsResponse& src) = default;

        FUpdateInventoryItemsResponse(const TSharedPtr<FJsonObject>& obj) : FUpdateInventoryItemsResponse()
        {
            readFromValue(obj);
        }

        ~FUpdateInventoryItemsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

}
}
