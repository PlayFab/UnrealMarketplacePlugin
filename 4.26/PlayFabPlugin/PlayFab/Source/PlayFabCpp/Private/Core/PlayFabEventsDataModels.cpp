//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "Core/PlayFabEventsDataModels.h"
#include "Core/PlayFabJsonHelpers.h"

using namespace PlayFab;
using namespace PlayFab::EventsModels;

PlayFab::EventsModels::FEntityKey::~FEntityKey()
{

}

void PlayFab::EventsModels::FEntityKey::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Id.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EntityKey::Id, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FEntityKey::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FCreateTelemetryKeyRequest::~FCreateTelemetryKeyRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EventsModels::FCreateTelemetryKeyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (!KeyName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateTelemetryKeyRequest::KeyName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("KeyName"));
        writer->WriteValue(KeyName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FCreateTelemetryKeyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> KeyNameValue = obj->TryGetField(TEXT("KeyName"));
    if (KeyNameValue.IsValid() && !KeyNameValue->IsNull())
    {
        FString TmpValue;
        if (KeyNameValue->TryGetString(TmpValue)) { KeyName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FTelemetryKeyDetails::~FTelemetryKeyDetails()
{

}

void PlayFab::EventsModels::FTelemetryKeyDetails::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("CreateTime"));
    writeDatetime(CreateTime, writer);

    writer->WriteIdentifierPrefix(TEXT("IsActive"));
    writer->WriteValue(IsActive);

    if (KeyValue.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("KeyValue"));
        writer->WriteValue(KeyValue);
    }

    writer->WriteIdentifierPrefix(TEXT("LastUpdateTime"));
    writeDatetime(LastUpdateTime, writer);

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FTelemetryKeyDetails::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CreateTimeValue = obj->TryGetField(TEXT("CreateTime"));
    if (CreateTimeValue.IsValid())
        CreateTime = readDatetime(CreateTimeValue);


    const TSharedPtr<FJsonValue> IsActiveValue = obj->TryGetField(TEXT("IsActive"));
    if (IsActiveValue.IsValid() && !IsActiveValue->IsNull())
    {
        bool TmpValue;
        if (IsActiveValue->TryGetBool(TmpValue)) { IsActive = TmpValue; }
    }

    const TSharedPtr<FJsonValue> KeyValueValue = obj->TryGetField(TEXT("KeyValue"));
    if (KeyValueValue.IsValid() && !KeyValueValue->IsNull())
    {
        FString TmpValue;
        if (KeyValueValue->TryGetString(TmpValue)) { KeyValue = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LastUpdateTimeValue = obj->TryGetField(TEXT("LastUpdateTime"));
    if (LastUpdateTimeValue.IsValid())
        LastUpdateTime = readDatetime(LastUpdateTimeValue);


    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FCreateTelemetryKeyResponse::~FCreateTelemetryKeyResponse()
{
    //if (NewKeyDetails != nullptr) delete NewKeyDetails;

}

void PlayFab::EventsModels::FCreateTelemetryKeyResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (NewKeyDetails.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("NewKeyDetails"));
        NewKeyDetails->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FCreateTelemetryKeyResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NewKeyDetailsValue = obj->TryGetField(TEXT("NewKeyDetails"));
    if (NewKeyDetailsValue.IsValid() && !NewKeyDetailsValue->IsNull())
    {
        NewKeyDetails = MakeShareable(new FTelemetryKeyDetails(NewKeyDetailsValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FDataConnectionAzureBlobSettings::~FDataConnectionAzureBlobSettings()
{

}

void PlayFab::EventsModels::FDataConnectionAzureBlobSettings::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AccountName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AccountName"));
        writer->WriteValue(AccountName);
    }

    if (ContainerName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContainerName"));
        writer->WriteValue(ContainerName);
    }

    if (TenantId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TenantId"));
        writer->WriteValue(TenantId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FDataConnectionAzureBlobSettings::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AccountNameValue = obj->TryGetField(TEXT("AccountName"));
    if (AccountNameValue.IsValid() && !AccountNameValue->IsNull())
    {
        FString TmpValue;
        if (AccountNameValue->TryGetString(TmpValue)) { AccountName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ContainerNameValue = obj->TryGetField(TEXT("ContainerName"));
    if (ContainerNameValue.IsValid() && !ContainerNameValue->IsNull())
    {
        FString TmpValue;
        if (ContainerNameValue->TryGetString(TmpValue)) { ContainerName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TenantIdValue = obj->TryGetField(TEXT("TenantId"));
    if (TenantIdValue.IsValid() && !TenantIdValue->IsNull())
    {
        FString TmpValue;
        if (TenantIdValue->TryGetString(TmpValue)) { TenantId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FDataConnectionAzureDataExplorerSettings::~FDataConnectionAzureDataExplorerSettings()
{

}

void PlayFab::EventsModels::FDataConnectionAzureDataExplorerSettings::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ClusterUri.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ClusterUri"));
        writer->WriteValue(ClusterUri);
    }

    if (Database.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Database"));
        writer->WriteValue(Database);
    }

    if (Table.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Table"));
        writer->WriteValue(Table);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FDataConnectionAzureDataExplorerSettings::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ClusterUriValue = obj->TryGetField(TEXT("ClusterUri"));
    if (ClusterUriValue.IsValid() && !ClusterUriValue->IsNull())
    {
        FString TmpValue;
        if (ClusterUriValue->TryGetString(TmpValue)) { ClusterUri = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DatabaseValue = obj->TryGetField(TEXT("Database"));
    if (DatabaseValue.IsValid() && !DatabaseValue->IsNull())
    {
        FString TmpValue;
        if (DatabaseValue->TryGetString(TmpValue)) { Database = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TableValue = obj->TryGetField(TEXT("Table"));
    if (TableValue.IsValid() && !TableValue->IsNull())
    {
        FString TmpValue;
        if (TableValue->TryGetString(TmpValue)) { Table = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FDataConnectionFabricKQLSettings::~FDataConnectionFabricKQLSettings()
{

}

void PlayFab::EventsModels::FDataConnectionFabricKQLSettings::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ClusterUri.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ClusterUri"));
        writer->WriteValue(ClusterUri);
    }

    if (Database.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Database"));
        writer->WriteValue(Database);
    }

    if (Table.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Table"));
        writer->WriteValue(Table);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FDataConnectionFabricKQLSettings::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ClusterUriValue = obj->TryGetField(TEXT("ClusterUri"));
    if (ClusterUriValue.IsValid() && !ClusterUriValue->IsNull())
    {
        FString TmpValue;
        if (ClusterUriValue->TryGetString(TmpValue)) { ClusterUri = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DatabaseValue = obj->TryGetField(TEXT("Database"));
    if (DatabaseValue.IsValid() && !DatabaseValue->IsNull())
    {
        FString TmpValue;
        if (DatabaseValue->TryGetString(TmpValue)) { Database = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TableValue = obj->TryGetField(TEXT("Table"));
    if (TableValue.IsValid() && !TableValue->IsNull())
    {
        FString TmpValue;
        if (TableValue->TryGetString(TmpValue)) { Table = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FDataConnectionSettings::~FDataConnectionSettings()
{
    //if (AzureBlobSettings != nullptr) delete AzureBlobSettings;
    //if (AzureDataExplorerSettings != nullptr) delete AzureDataExplorerSettings;
    //if (AzureFabricKQLSettings != nullptr) delete AzureFabricKQLSettings;

}

void PlayFab::EventsModels::FDataConnectionSettings::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AzureBlobSettings.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AzureBlobSettings"));
        AzureBlobSettings->writeJSON(writer);
    }

    if (AzureDataExplorerSettings.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AzureDataExplorerSettings"));
        AzureDataExplorerSettings->writeJSON(writer);
    }

    if (AzureFabricKQLSettings.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AzureFabricKQLSettings"));
        AzureFabricKQLSettings->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FDataConnectionSettings::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AzureBlobSettingsValue = obj->TryGetField(TEXT("AzureBlobSettings"));
    if (AzureBlobSettingsValue.IsValid() && !AzureBlobSettingsValue->IsNull())
    {
        AzureBlobSettings = MakeShareable(new FDataConnectionAzureBlobSettings(AzureBlobSettingsValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> AzureDataExplorerSettingsValue = obj->TryGetField(TEXT("AzureDataExplorerSettings"));
    if (AzureDataExplorerSettingsValue.IsValid() && !AzureDataExplorerSettingsValue->IsNull())
    {
        AzureDataExplorerSettings = MakeShareable(new FDataConnectionAzureDataExplorerSettings(AzureDataExplorerSettingsValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> AzureFabricKQLSettingsValue = obj->TryGetField(TEXT("AzureFabricKQLSettings"));
    if (AzureFabricKQLSettingsValue.IsValid() && !AzureFabricKQLSettingsValue->IsNull())
    {
        AzureFabricKQLSettings = MakeShareable(new FDataConnectionFabricKQLSettings(AzureFabricKQLSettingsValue->AsObject()));
    }

    return HasSucceeded;
}

void PlayFab::EventsModels::writeDataConnectionErrorStateEnumJSON(DataConnectionErrorState enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case DataConnectionErrorStateOK: writer->WriteValue(TEXT("OK")); break;
    case DataConnectionErrorStateError: writer->WriteValue(TEXT("Error")); break;
    }
}

EventsModels::DataConnectionErrorState PlayFab::EventsModels::readDataConnectionErrorStateFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readDataConnectionErrorStateFromValue(value.IsValid() ? value->AsString() : "");
}

EventsModels::DataConnectionErrorState PlayFab::EventsModels::readDataConnectionErrorStateFromValue(const FString& value)
{
    static TMap<FString, DataConnectionErrorState> _DataConnectionErrorStateMap;
    if (_DataConnectionErrorStateMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _DataConnectionErrorStateMap.Add(TEXT("OK"), DataConnectionErrorStateOK);
        _DataConnectionErrorStateMap.Add(TEXT("Error"), DataConnectionErrorStateError);

    }

    if (!value.IsEmpty())
    {
        auto output = _DataConnectionErrorStateMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return DataConnectionErrorStateOK; // Basically critical fail
}

PlayFab::EventsModels::FDataConnectionStatusDetails::~FDataConnectionStatusDetails()
{

}

void PlayFab::EventsModels::FDataConnectionStatusDetails::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Error.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Error"));
        writer->WriteValue(Error);
    }

    if (ErrorMessage.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorMessage"));
        writer->WriteValue(ErrorMessage);
    }

    if (MostRecentErrorTime.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("MostRecentErrorTime"));
        writeDatetime(MostRecentErrorTime, writer);
    }

    if (State.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("State"));
        writeDataConnectionErrorStateEnumJSON(State, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FDataConnectionStatusDetails::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ErrorValue = obj->TryGetField(TEXT("Error"));
    if (ErrorValue.IsValid() && !ErrorValue->IsNull())
    {
        FString TmpValue;
        if (ErrorValue->TryGetString(TmpValue)) { Error = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ErrorMessageValue = obj->TryGetField(TEXT("ErrorMessage"));
    if (ErrorMessageValue.IsValid() && !ErrorMessageValue->IsNull())
    {
        FString TmpValue;
        if (ErrorMessageValue->TryGetString(TmpValue)) { ErrorMessage = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MostRecentErrorTimeValue = obj->TryGetField(TEXT("MostRecentErrorTime"));
    if (MostRecentErrorTimeValue.IsValid())
        MostRecentErrorTime = readDatetime(MostRecentErrorTimeValue);


    State = readDataConnectionErrorStateFromValue(obj->TryGetField(TEXT("State")));

    return HasSucceeded;
}

void PlayFab::EventsModels::writeDataConnectionTypeEnumJSON(DataConnectionType enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case DataConnectionTypeAzureBlobStorage: writer->WriteValue(TEXT("AzureBlobStorage")); break;
    case DataConnectionTypeAzureDataExplorer: writer->WriteValue(TEXT("AzureDataExplorer")); break;
    case DataConnectionTypeFabricKQL: writer->WriteValue(TEXT("FabricKQL")); break;
    }
}

EventsModels::DataConnectionType PlayFab::EventsModels::readDataConnectionTypeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readDataConnectionTypeFromValue(value.IsValid() ? value->AsString() : "");
}

EventsModels::DataConnectionType PlayFab::EventsModels::readDataConnectionTypeFromValue(const FString& value)
{
    static TMap<FString, DataConnectionType> _DataConnectionTypeMap;
    if (_DataConnectionTypeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _DataConnectionTypeMap.Add(TEXT("AzureBlobStorage"), DataConnectionTypeAzureBlobStorage);
        _DataConnectionTypeMap.Add(TEXT("AzureDataExplorer"), DataConnectionTypeAzureDataExplorer);
        _DataConnectionTypeMap.Add(TEXT("FabricKQL"), DataConnectionTypeFabricKQL);

    }

    if (!value.IsEmpty())
    {
        auto output = _DataConnectionTypeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return DataConnectionTypeAzureBlobStorage; // Basically critical fail
}

PlayFab::EventsModels::FDataConnectionDetails::~FDataConnectionDetails()
{
    //if (Status != nullptr) delete Status;

}

void PlayFab::EventsModels::FDataConnectionDetails::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("ConnectionSettings"));
    ConnectionSettings.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("IsActive"));
    writer->WriteValue(IsActive);

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DataConnectionDetails::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (Status.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        Status->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Type"));
    writeDataConnectionTypeEnumJSON(Type, writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FDataConnectionDetails::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ConnectionSettingsValue = obj->TryGetField(TEXT("ConnectionSettings"));
    if (ConnectionSettingsValue.IsValid() && !ConnectionSettingsValue->IsNull())
    {
        ConnectionSettings = FDataConnectionSettings(ConnectionSettingsValue->AsObject());
    }

    const TSharedPtr<FJsonValue> IsActiveValue = obj->TryGetField(TEXT("IsActive"));
    if (IsActiveValue.IsValid() && !IsActiveValue->IsNull())
    {
        bool TmpValue;
        if (IsActiveValue->TryGetBool(TmpValue)) { IsActive = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StatusValue = obj->TryGetField(TEXT("Status"));
    if (StatusValue.IsValid() && !StatusValue->IsNull())
    {
        Status = MakeShareable(new FDataConnectionStatusDetails(StatusValue->AsObject()));
    }

    Type = readDataConnectionTypeFromValue(obj->TryGetField(TEXT("Type")));

    return HasSucceeded;
}

PlayFab::EventsModels::FDeleteDataConnectionRequest::~FDeleteDataConnectionRequest()
{

}

void PlayFab::EventsModels::FDeleteDataConnectionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeleteDataConnectionRequest::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FDeleteDataConnectionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FDeleteDataConnectionResponse::~FDeleteDataConnectionResponse()
{

}

void PlayFab::EventsModels::FDeleteDataConnectionResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("WasDeleted"));
    writer->WriteValue(WasDeleted);

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FDeleteDataConnectionResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> WasDeletedValue = obj->TryGetField(TEXT("WasDeleted"));
    if (WasDeletedValue.IsValid() && !WasDeletedValue->IsNull())
    {
        bool TmpValue;
        if (WasDeletedValue->TryGetBool(TmpValue)) { WasDeleted = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FDeleteTelemetryKeyRequest::~FDeleteTelemetryKeyRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EventsModels::FDeleteTelemetryKeyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (!KeyName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: DeleteTelemetryKeyRequest::KeyName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("KeyName"));
        writer->WriteValue(KeyName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FDeleteTelemetryKeyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> KeyNameValue = obj->TryGetField(TEXT("KeyName"));
    if (KeyNameValue.IsValid() && !KeyNameValue->IsNull())
    {
        FString TmpValue;
        if (KeyNameValue->TryGetString(TmpValue)) { KeyName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FDeleteTelemetryKeyResponse::~FDeleteTelemetryKeyResponse()
{

}

void PlayFab::EventsModels::FDeleteTelemetryKeyResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("WasKeyDeleted"));
    writer->WriteValue(WasKeyDeleted);

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FDeleteTelemetryKeyResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> WasKeyDeletedValue = obj->TryGetField(TEXT("WasKeyDeleted"));
    if (WasKeyDeletedValue.IsValid() && !WasKeyDeletedValue->IsNull())
    {
        bool TmpValue;
        if (WasKeyDeletedValue->TryGetBool(TmpValue)) { WasKeyDeleted = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FEventContents::~FEventContents()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EventsModels::FEventContents::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (!EventNamespace.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EventContents::EventNamespace, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("EventNamespace"));
        writer->WriteValue(EventNamespace);
    }

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EventContents::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (OriginalId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OriginalId"));
        writer->WriteValue(OriginalId);
    }

    if (OriginalTimestamp.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("OriginalTimestamp"));
        writeDatetime(OriginalTimestamp, writer);
    }

    if (Payload.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Payload"));
        Payload.writeJSON(writer);
    }

    if (PayloadJSON.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PayloadJSON"));
        writer->WriteValue(PayloadJSON);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FEventContents::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> EventNamespaceValue = obj->TryGetField(TEXT("EventNamespace"));
    if (EventNamespaceValue.IsValid() && !EventNamespaceValue->IsNull())
    {
        FString TmpValue;
        if (EventNamespaceValue->TryGetString(TmpValue)) { EventNamespace = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OriginalIdValue = obj->TryGetField(TEXT("OriginalId"));
    if (OriginalIdValue.IsValid() && !OriginalIdValue->IsNull())
    {
        FString TmpValue;
        if (OriginalIdValue->TryGetString(TmpValue)) { OriginalId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OriginalTimestampValue = obj->TryGetField(TEXT("OriginalTimestamp"));
    if (OriginalTimestampValue.IsValid())
        OriginalTimestamp = readDatetime(OriginalTimestampValue);


    const TSharedPtr<FJsonValue> PayloadValue = obj->TryGetField(TEXT("Payload"));
    if (PayloadValue.IsValid() && !PayloadValue->IsNull())
    {
        Payload = FJsonKeeper(PayloadValue);
    }

    const TSharedPtr<FJsonValue> PayloadJSONValue = obj->TryGetField(TEXT("PayloadJSON"));
    if (PayloadJSONValue.IsValid() && !PayloadJSONValue->IsNull())
    {
        FString TmpValue;
        if (PayloadJSONValue->TryGetString(TmpValue)) { PayloadJSON = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FGetDataConnectionRequest::~FGetDataConnectionRequest()
{

}

void PlayFab::EventsModels::FGetDataConnectionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetDataConnectionRequest::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FGetDataConnectionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FGetDataConnectionResponse::~FGetDataConnectionResponse()
{
    //if (DataConnection != nullptr) delete DataConnection;

}

void PlayFab::EventsModels::FGetDataConnectionResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DataConnection.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("DataConnection"));
        DataConnection->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FGetDataConnectionResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataConnectionValue = obj->TryGetField(TEXT("DataConnection"));
    if (DataConnectionValue.IsValid() && !DataConnectionValue->IsNull())
    {
        DataConnection = MakeShareable(new FDataConnectionDetails(DataConnectionValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FGetTelemetryKeyRequest::~FGetTelemetryKeyRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EventsModels::FGetTelemetryKeyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (!KeyName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: GetTelemetryKeyRequest::KeyName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("KeyName"));
        writer->WriteValue(KeyName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FGetTelemetryKeyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> KeyNameValue = obj->TryGetField(TEXT("KeyName"));
    if (KeyNameValue.IsValid() && !KeyNameValue->IsNull())
    {
        FString TmpValue;
        if (KeyNameValue->TryGetString(TmpValue)) { KeyName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FGetTelemetryKeyResponse::~FGetTelemetryKeyResponse()
{
    //if (KeyDetails != nullptr) delete KeyDetails;

}

void PlayFab::EventsModels::FGetTelemetryKeyResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (KeyDetails.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("KeyDetails"));
        KeyDetails->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FGetTelemetryKeyResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> KeyDetailsValue = obj->TryGetField(TEXT("KeyDetails"));
    if (KeyDetailsValue.IsValid() && !KeyDetailsValue->IsNull())
    {
        KeyDetails = MakeShareable(new FTelemetryKeyDetails(KeyDetailsValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FListDataConnectionsRequest::~FListDataConnectionsRequest()
{

}

void PlayFab::EventsModels::FListDataConnectionsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FListDataConnectionsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FListDataConnectionsResponse::~FListDataConnectionsResponse()
{

}

void PlayFab::EventsModels::FListDataConnectionsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DataConnections.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("DataConnections"));
        for (const FDataConnectionDetails& item : DataConnections)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FListDataConnectionsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&DataConnectionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("DataConnections"));
    for (int32 Idx = 0; Idx < DataConnectionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = DataConnectionsArray[Idx];
        DataConnections.Add(FDataConnectionDetails(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EventsModels::FListTelemetryKeysRequest::~FListTelemetryKeysRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EventsModels::FListTelemetryKeysRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FListTelemetryKeysRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FListTelemetryKeysResponse::~FListTelemetryKeysResponse()
{

}

void PlayFab::EventsModels::FListTelemetryKeysResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (KeyDetails.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("KeyDetails"));
        for (const FTelemetryKeyDetails& item : KeyDetails)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FListTelemetryKeysResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&KeyDetailsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("KeyDetails"));
    for (int32 Idx = 0; Idx < KeyDetailsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = KeyDetailsArray[Idx];
        KeyDetails.Add(FTelemetryKeyDetails(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EventsModels::FSetDataConnectionActiveRequest::~FSetDataConnectionActiveRequest()
{

}

void PlayFab::EventsModels::FSetDataConnectionActiveRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Active"));
    writer->WriteValue(Active);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetDataConnectionActiveRequest::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FSetDataConnectionActiveRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ActiveValue = obj->TryGetField(TEXT("Active"));
    if (ActiveValue.IsValid() && !ActiveValue->IsNull())
    {
        bool TmpValue;
        if (ActiveValue->TryGetBool(TmpValue)) { Active = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FSetDataConnectionActiveResponse::~FSetDataConnectionActiveResponse()
{
    //if (DataConnection != nullptr) delete DataConnection;

}

void PlayFab::EventsModels::FSetDataConnectionActiveResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DataConnection.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("DataConnection"));
        DataConnection->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("WasUpdated"));
    writer->WriteValue(WasUpdated);

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FSetDataConnectionActiveResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataConnectionValue = obj->TryGetField(TEXT("DataConnection"));
    if (DataConnectionValue.IsValid() && !DataConnectionValue->IsNull())
    {
        DataConnection = MakeShareable(new FDataConnectionDetails(DataConnectionValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> WasUpdatedValue = obj->TryGetField(TEXT("WasUpdated"));
    if (WasUpdatedValue.IsValid() && !WasUpdatedValue->IsNull())
    {
        bool TmpValue;
        if (WasUpdatedValue->TryGetBool(TmpValue)) { WasUpdated = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FSetDataConnectionRequest::~FSetDataConnectionRequest()
{

}

void PlayFab::EventsModels::FSetDataConnectionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("ConnectionSettings"));
    ConnectionSettings.writeJSON(writer);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("IsActive"));
    writer->WriteValue(IsActive);

    if (!Name.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetDataConnectionRequest::Name, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteIdentifierPrefix(TEXT("Type"));
    writeDataConnectionTypeEnumJSON(Type, writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FSetDataConnectionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ConnectionSettingsValue = obj->TryGetField(TEXT("ConnectionSettings"));
    if (ConnectionSettingsValue.IsValid() && !ConnectionSettingsValue->IsNull())
    {
        ConnectionSettings = FDataConnectionSettings(ConnectionSettingsValue->AsObject());
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> IsActiveValue = obj->TryGetField(TEXT("IsActive"));
    if (IsActiveValue.IsValid() && !IsActiveValue->IsNull())
    {
        bool TmpValue;
        if (IsActiveValue->TryGetBool(TmpValue)) { IsActive = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    Type = readDataConnectionTypeFromValue(obj->TryGetField(TEXT("Type")));

    return HasSucceeded;
}

PlayFab::EventsModels::FSetDataConnectionResponse::~FSetDataConnectionResponse()
{
    //if (DataConnection != nullptr) delete DataConnection;

}

void PlayFab::EventsModels::FSetDataConnectionResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DataConnection.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("DataConnection"));
        DataConnection->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FSetDataConnectionResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataConnectionValue = obj->TryGetField(TEXT("DataConnection"));
    if (DataConnectionValue.IsValid() && !DataConnectionValue->IsNull())
    {
        DataConnection = MakeShareable(new FDataConnectionDetails(DataConnectionValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FSetTelemetryKeyActiveRequest::~FSetTelemetryKeyActiveRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EventsModels::FSetTelemetryKeyActiveRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Active"));
    writer->WriteValue(Active);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (!KeyName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetTelemetryKeyActiveRequest::KeyName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("KeyName"));
        writer->WriteValue(KeyName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FSetTelemetryKeyActiveRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ActiveValue = obj->TryGetField(TEXT("Active"));
    if (ActiveValue.IsValid() && !ActiveValue->IsNull())
    {
        bool TmpValue;
        if (ActiveValue->TryGetBool(TmpValue)) { Active = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> KeyNameValue = obj->TryGetField(TEXT("KeyName"));
    if (KeyNameValue.IsValid() && !KeyNameValue->IsNull())
    {
        FString TmpValue;
        if (KeyNameValue->TryGetString(TmpValue)) { KeyName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FSetTelemetryKeyActiveResponse::~FSetTelemetryKeyActiveResponse()
{
    //if (KeyDetails != nullptr) delete KeyDetails;

}

void PlayFab::EventsModels::FSetTelemetryKeyActiveResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (KeyDetails.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("KeyDetails"));
        KeyDetails->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("WasKeyUpdated"));
    writer->WriteValue(WasKeyUpdated);

    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FSetTelemetryKeyActiveResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> KeyDetailsValue = obj->TryGetField(TEXT("KeyDetails"));
    if (KeyDetailsValue.IsValid() && !KeyDetailsValue->IsNull())
    {
        KeyDetails = MakeShareable(new FTelemetryKeyDetails(KeyDetailsValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> WasKeyUpdatedValue = obj->TryGetField(TEXT("WasKeyUpdated"));
    if (WasKeyUpdatedValue.IsValid() && !WasKeyUpdatedValue->IsNull())
    {
        bool TmpValue;
        if (WasKeyUpdatedValue->TryGetBool(TmpValue)) { WasKeyUpdated = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EventsModels::FWriteEventsRequest::~FWriteEventsRequest()
{

}

void PlayFab::EventsModels::FWriteEventsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteArrayStart(TEXT("Events"));
    for (const FEventContents& item : Events)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FWriteEventsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TArray<TSharedPtr<FJsonValue>>&EventsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Events"));
    for (int32 Idx = 0; Idx < EventsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = EventsArray[Idx];
        Events.Add(FEventContents(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EventsModels::FWriteEventsResponse::~FWriteEventsResponse()
{

}

void PlayFab::EventsModels::FWriteEventsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AssignedEventIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AssignedEventIds"));
        for (const FString& item : AssignedEventIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EventsModels::FWriteEventsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("AssignedEventIds"), AssignedEventIds);

    return HasSucceeded;
}

