//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "Core/PlayFabInsightsDataModels.h"
#include "Core/PlayFabJsonHelpers.h"

using namespace PlayFab;
using namespace PlayFab::InsightsModels;

PlayFab::InsightsModels::FInsightsEmptyRequest::~FInsightsEmptyRequest()
{

}

void PlayFab::InsightsModels::FInsightsEmptyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::InsightsModels::FInsightsEmptyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::InsightsModels::FInsightsPerformanceLevel::~FInsightsPerformanceLevel()
{

}

void PlayFab::InsightsModels::FInsightsPerformanceLevel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("ActiveEventExports"));
    writer->WriteValue(ActiveEventExports);

    writer->WriteIdentifierPrefix(TEXT("CacheSizeMB"));
    writer->WriteValue(CacheSizeMB);

    writer->WriteIdentifierPrefix(TEXT("Concurrency"));
    writer->WriteValue(Concurrency);

    writer->WriteIdentifierPrefix(TEXT("CreditsPerMinute"));
    writer->WriteValue(CreditsPerMinute);

    writer->WriteIdentifierPrefix(TEXT("EventsPerSecond"));
    writer->WriteValue(EventsPerSecond);

    writer->WriteIdentifierPrefix(TEXT("Level"));
    writer->WriteValue(Level);

    writer->WriteIdentifierPrefix(TEXT("MaxMemoryPerQueryMB"));
    writer->WriteValue(MaxMemoryPerQueryMB);

    writer->WriteIdentifierPrefix(TEXT("VirtualCpuCores"));
    writer->WriteValue(VirtualCpuCores);

    writer->WriteObjectEnd();
}

bool PlayFab::InsightsModels::FInsightsPerformanceLevel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ActiveEventExportsValue = obj->TryGetField(TEXT("ActiveEventExports"));
    if (ActiveEventExportsValue.IsValid() && !ActiveEventExportsValue->IsNull())
    {
        int32 TmpValue;
        if (ActiveEventExportsValue->TryGetNumber(TmpValue)) { ActiveEventExports = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CacheSizeMBValue = obj->TryGetField(TEXT("CacheSizeMB"));
    if (CacheSizeMBValue.IsValid() && !CacheSizeMBValue->IsNull())
    {
        int32 TmpValue;
        if (CacheSizeMBValue->TryGetNumber(TmpValue)) { CacheSizeMB = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ConcurrencyValue = obj->TryGetField(TEXT("Concurrency"));
    if (ConcurrencyValue.IsValid() && !ConcurrencyValue->IsNull())
    {
        int32 TmpValue;
        if (ConcurrencyValue->TryGetNumber(TmpValue)) { Concurrency = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreditsPerMinuteValue = obj->TryGetField(TEXT("CreditsPerMinute"));
    if (CreditsPerMinuteValue.IsValid() && !CreditsPerMinuteValue->IsNull())
    {
        double TmpValue;
        if (CreditsPerMinuteValue->TryGetNumber(TmpValue)) { CreditsPerMinute = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EventsPerSecondValue = obj->TryGetField(TEXT("EventsPerSecond"));
    if (EventsPerSecondValue.IsValid() && !EventsPerSecondValue->IsNull())
    {
        int32 TmpValue;
        if (EventsPerSecondValue->TryGetNumber(TmpValue)) { EventsPerSecond = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LevelValue = obj->TryGetField(TEXT("Level"));
    if (LevelValue.IsValid() && !LevelValue->IsNull())
    {
        int32 TmpValue;
        if (LevelValue->TryGetNumber(TmpValue)) { Level = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MaxMemoryPerQueryMBValue = obj->TryGetField(TEXT("MaxMemoryPerQueryMB"));
    if (MaxMemoryPerQueryMBValue.IsValid() && !MaxMemoryPerQueryMBValue->IsNull())
    {
        int32 TmpValue;
        if (MaxMemoryPerQueryMBValue->TryGetNumber(TmpValue)) { MaxMemoryPerQueryMB = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VirtualCpuCoresValue = obj->TryGetField(TEXT("VirtualCpuCores"));
    if (VirtualCpuCoresValue.IsValid() && !VirtualCpuCoresValue->IsNull())
    {
        int32 TmpValue;
        if (VirtualCpuCoresValue->TryGetNumber(TmpValue)) { VirtualCpuCores = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::InsightsModels::FInsightsGetLimitsResponse::~FInsightsGetLimitsResponse()
{

}

void PlayFab::InsightsModels::FInsightsGetLimitsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("DefaultPerformanceLevel"));
    writer->WriteValue(DefaultPerformanceLevel);

    writer->WriteIdentifierPrefix(TEXT("DefaultStorageRetentionDays"));
    writer->WriteValue(DefaultStorageRetentionDays);

    writer->WriteIdentifierPrefix(TEXT("StorageMaxRetentionDays"));
    writer->WriteValue(StorageMaxRetentionDays);

    writer->WriteIdentifierPrefix(TEXT("StorageMinRetentionDays"));
    writer->WriteValue(StorageMinRetentionDays);

    if (SubMeters.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("SubMeters"));
        for (const FInsightsPerformanceLevel& item : SubMeters)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::InsightsModels::FInsightsGetLimitsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DefaultPerformanceLevelValue = obj->TryGetField(TEXT("DefaultPerformanceLevel"));
    if (DefaultPerformanceLevelValue.IsValid() && !DefaultPerformanceLevelValue->IsNull())
    {
        int32 TmpValue;
        if (DefaultPerformanceLevelValue->TryGetNumber(TmpValue)) { DefaultPerformanceLevel = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DefaultStorageRetentionDaysValue = obj->TryGetField(TEXT("DefaultStorageRetentionDays"));
    if (DefaultStorageRetentionDaysValue.IsValid() && !DefaultStorageRetentionDaysValue->IsNull())
    {
        int32 TmpValue;
        if (DefaultStorageRetentionDaysValue->TryGetNumber(TmpValue)) { DefaultStorageRetentionDays = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StorageMaxRetentionDaysValue = obj->TryGetField(TEXT("StorageMaxRetentionDays"));
    if (StorageMaxRetentionDaysValue.IsValid() && !StorageMaxRetentionDaysValue->IsNull())
    {
        int32 TmpValue;
        if (StorageMaxRetentionDaysValue->TryGetNumber(TmpValue)) { StorageMaxRetentionDays = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StorageMinRetentionDaysValue = obj->TryGetField(TEXT("StorageMinRetentionDays"));
    if (StorageMinRetentionDaysValue.IsValid() && !StorageMinRetentionDaysValue->IsNull())
    {
        int32 TmpValue;
        if (StorageMinRetentionDaysValue->TryGetNumber(TmpValue)) { StorageMinRetentionDays = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&SubMetersArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("SubMeters"));
    for (int32 Idx = 0; Idx < SubMetersArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SubMetersArray[Idx];
        SubMeters.Add(FInsightsPerformanceLevel(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::InsightsModels::FInsightsGetOperationStatusResponse::~FInsightsGetOperationStatusResponse()
{

}

void PlayFab::InsightsModels::FInsightsGetOperationStatusResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Message.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Message"));
        writer->WriteValue(Message);
    }

    writer->WriteIdentifierPrefix(TEXT("OperationCompletedTime"));
    writeDatetime(OperationCompletedTime, writer);

    if (OperationId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OperationId"));
        writer->WriteValue(OperationId);
    }

    writer->WriteIdentifierPrefix(TEXT("OperationLastUpdated"));
    writeDatetime(OperationLastUpdated, writer);

    writer->WriteIdentifierPrefix(TEXT("OperationStartedTime"));
    writeDatetime(OperationStartedTime, writer);

    if (OperationType.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OperationType"));
        writer->WriteValue(OperationType);
    }

    writer->WriteIdentifierPrefix(TEXT("OperationValue"));
    writer->WriteValue(OperationValue);

    if (Status.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        writer->WriteValue(Status);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::InsightsModels::FInsightsGetOperationStatusResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> MessageValue = obj->TryGetField(TEXT("Message"));
    if (MessageValue.IsValid() && !MessageValue->IsNull())
    {
        FString TmpValue;
        if (MessageValue->TryGetString(TmpValue)) { Message = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OperationCompletedTimeValue = obj->TryGetField(TEXT("OperationCompletedTime"));
    if (OperationCompletedTimeValue.IsValid())
        OperationCompletedTime = readDatetime(OperationCompletedTimeValue);


    const TSharedPtr<FJsonValue> OperationIdValue = obj->TryGetField(TEXT("OperationId"));
    if (OperationIdValue.IsValid() && !OperationIdValue->IsNull())
    {
        FString TmpValue;
        if (OperationIdValue->TryGetString(TmpValue)) { OperationId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OperationLastUpdatedValue = obj->TryGetField(TEXT("OperationLastUpdated"));
    if (OperationLastUpdatedValue.IsValid())
        OperationLastUpdated = readDatetime(OperationLastUpdatedValue);


    const TSharedPtr<FJsonValue> OperationStartedTimeValue = obj->TryGetField(TEXT("OperationStartedTime"));
    if (OperationStartedTimeValue.IsValid())
        OperationStartedTime = readDatetime(OperationStartedTimeValue);


    const TSharedPtr<FJsonValue> OperationTypeValue = obj->TryGetField(TEXT("OperationType"));
    if (OperationTypeValue.IsValid() && !OperationTypeValue->IsNull())
    {
        FString TmpValue;
        if (OperationTypeValue->TryGetString(TmpValue)) { OperationType = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OperationValueValue = obj->TryGetField(TEXT("OperationValue"));
    if (OperationValueValue.IsValid() && !OperationValueValue->IsNull())
    {
        int32 TmpValue;
        if (OperationValueValue->TryGetNumber(TmpValue)) { OperationValue = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StatusValue = obj->TryGetField(TEXT("Status"));
    if (StatusValue.IsValid() && !StatusValue->IsNull())
    {
        FString TmpValue;
        if (StatusValue->TryGetString(TmpValue)) { Status = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::InsightsModels::FInsightsGetDetailsResponse::~FInsightsGetDetailsResponse()
{
    //if (Limits != nullptr) delete Limits;

}

void PlayFab::InsightsModels::FInsightsGetDetailsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("DataUsageMb"));
    writer->WriteValue(static_cast<int64>(DataUsageMb));

    if (ErrorMessage.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorMessage"));
        writer->WriteValue(ErrorMessage);
    }

    if (Limits.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Limits"));
        Limits->writeJSON(writer);
    }

    if (PendingOperations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PendingOperations"));
        for (const FInsightsGetOperationStatusResponse& item : PendingOperations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteIdentifierPrefix(TEXT("PerformanceLevel"));
    writer->WriteValue(PerformanceLevel);

    writer->WriteIdentifierPrefix(TEXT("RetentionDays"));
    writer->WriteValue(RetentionDays);

    writer->WriteObjectEnd();
}

bool PlayFab::InsightsModels::FInsightsGetDetailsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataUsageMbValue = obj->TryGetField(TEXT("DataUsageMb"));
    if (DataUsageMbValue.IsValid() && !DataUsageMbValue->IsNull())
    {
        uint32 TmpValue;
        if (DataUsageMbValue->TryGetNumber(TmpValue)) { DataUsageMb = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ErrorMessageValue = obj->TryGetField(TEXT("ErrorMessage"));
    if (ErrorMessageValue.IsValid() && !ErrorMessageValue->IsNull())
    {
        FString TmpValue;
        if (ErrorMessageValue->TryGetString(TmpValue)) { ErrorMessage = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LimitsValue = obj->TryGetField(TEXT("Limits"));
    if (LimitsValue.IsValid() && !LimitsValue->IsNull())
    {
        Limits = MakeShareable(new FInsightsGetLimitsResponse(LimitsValue->AsObject()));
    }

    const TArray<TSharedPtr<FJsonValue>>&PendingOperationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("PendingOperations"));
    for (int32 Idx = 0; Idx < PendingOperationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PendingOperationsArray[Idx];
        PendingOperations.Add(FInsightsGetOperationStatusResponse(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> PerformanceLevelValue = obj->TryGetField(TEXT("PerformanceLevel"));
    if (PerformanceLevelValue.IsValid() && !PerformanceLevelValue->IsNull())
    {
        int32 TmpValue;
        if (PerformanceLevelValue->TryGetNumber(TmpValue)) { PerformanceLevel = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RetentionDaysValue = obj->TryGetField(TEXT("RetentionDays"));
    if (RetentionDaysValue.IsValid() && !RetentionDaysValue->IsNull())
    {
        int32 TmpValue;
        if (RetentionDaysValue->TryGetNumber(TmpValue)) { RetentionDays = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::InsightsModels::FInsightsGetOperationStatusRequest::~FInsightsGetOperationStatusRequest()
{

}

void PlayFab::InsightsModels::FInsightsGetOperationStatusRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (OperationId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OperationId"));
        writer->WriteValue(OperationId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::InsightsModels::FInsightsGetOperationStatusRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> OperationIdValue = obj->TryGetField(TEXT("OperationId"));
    if (OperationIdValue.IsValid() && !OperationIdValue->IsNull())
    {
        FString TmpValue;
        if (OperationIdValue->TryGetString(TmpValue)) { OperationId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::InsightsModels::FInsightsGetPendingOperationsRequest::~FInsightsGetPendingOperationsRequest()
{

}

void PlayFab::InsightsModels::FInsightsGetPendingOperationsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (OperationType.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OperationType"));
        writer->WriteValue(OperationType);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::InsightsModels::FInsightsGetPendingOperationsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> OperationTypeValue = obj->TryGetField(TEXT("OperationType"));
    if (OperationTypeValue.IsValid() && !OperationTypeValue->IsNull())
    {
        FString TmpValue;
        if (OperationTypeValue->TryGetString(TmpValue)) { OperationType = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::InsightsModels::FInsightsGetPendingOperationsResponse::~FInsightsGetPendingOperationsResponse()
{

}

void PlayFab::InsightsModels::FInsightsGetPendingOperationsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (PendingOperations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PendingOperations"));
        for (const FInsightsGetOperationStatusResponse& item : PendingOperations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::InsightsModels::FInsightsGetPendingOperationsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&PendingOperationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("PendingOperations"));
    for (int32 Idx = 0; Idx < PendingOperationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PendingOperationsArray[Idx];
        PendingOperations.Add(FInsightsGetOperationStatusResponse(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::InsightsModels::FInsightsOperationResponse::~FInsightsOperationResponse()
{

}

void PlayFab::InsightsModels::FInsightsOperationResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Message.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Message"));
        writer->WriteValue(Message);
    }

    if (OperationId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OperationId"));
        writer->WriteValue(OperationId);
    }

    if (OperationType.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OperationType"));
        writer->WriteValue(OperationType);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::InsightsModels::FInsightsOperationResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> MessageValue = obj->TryGetField(TEXT("Message"));
    if (MessageValue.IsValid() && !MessageValue->IsNull())
    {
        FString TmpValue;
        if (MessageValue->TryGetString(TmpValue)) { Message = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OperationIdValue = obj->TryGetField(TEXT("OperationId"));
    if (OperationIdValue.IsValid() && !OperationIdValue->IsNull())
    {
        FString TmpValue;
        if (OperationIdValue->TryGetString(TmpValue)) { OperationId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OperationTypeValue = obj->TryGetField(TEXT("OperationType"));
    if (OperationTypeValue.IsValid() && !OperationTypeValue->IsNull())
    {
        FString TmpValue;
        if (OperationTypeValue->TryGetString(TmpValue)) { OperationType = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::InsightsModels::FInsightsSetPerformanceRequest::~FInsightsSetPerformanceRequest()
{

}

void PlayFab::InsightsModels::FInsightsSetPerformanceRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("PerformanceLevel"));
    writer->WriteValue(PerformanceLevel);

    writer->WriteObjectEnd();
}

bool PlayFab::InsightsModels::FInsightsSetPerformanceRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> PerformanceLevelValue = obj->TryGetField(TEXT("PerformanceLevel"));
    if (PerformanceLevelValue.IsValid() && !PerformanceLevelValue->IsNull())
    {
        int32 TmpValue;
        if (PerformanceLevelValue->TryGetNumber(TmpValue)) { PerformanceLevel = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::InsightsModels::FInsightsSetStorageRetentionRequest::~FInsightsSetStorageRetentionRequest()
{

}

void PlayFab::InsightsModels::FInsightsSetStorageRetentionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("RetentionDays"));
    writer->WriteValue(RetentionDays);

    writer->WriteObjectEnd();
}

bool PlayFab::InsightsModels::FInsightsSetStorageRetentionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> RetentionDaysValue = obj->TryGetField(TEXT("RetentionDays"));
    if (RetentionDaysValue.IsValid() && !RetentionDaysValue->IsNull())
    {
        int32 TmpValue;
        if (RetentionDaysValue->TryGetNumber(TmpValue)) { RetentionDays = TmpValue; }
    }

    return HasSucceeded;
}

