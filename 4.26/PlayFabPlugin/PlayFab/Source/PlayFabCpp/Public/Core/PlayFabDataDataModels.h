//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "PlayFabCppBaseModel.h"

namespace PlayFab
{
namespace DataModels
{

    struct PLAYFABCPP_API FEntityKey : public PlayFab::FPlayFabCppBaseModel
    {
        // Unique ID of the entity.
        FString Id;

        // [optional] Entity type. See https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types
        FString Type;

        FEntityKey() :
            FPlayFabCppBaseModel(),
            Id(),
            Type()
            {}

        FEntityKey(const FEntityKey& src) :
            FPlayFabCppBaseModel(),
            Id(src.Id),
            Type(src.Type)
            {}

        FEntityKey(const TSharedPtr<FJsonObject>& obj) : FEntityKey()
        {
            readFromValue(obj);
        }

        ~FEntityKey();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FAbortFileUploadsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        // Names of the files to have their pending uploads aborted.
        TArray<FString> FileNames;
        /**
         * [optional] The expected version of the profile, if set and doesn't match the current version of the profile the operation will not
         * be performed.
         */
        Boxed<int32> ProfileVersion;

        FAbortFileUploadsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            FileNames(),
            ProfileVersion()
            {}

        FAbortFileUploadsRequest(const FAbortFileUploadsRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            FileNames(src.FileNames),
            ProfileVersion(src.ProfileVersion)
            {}

        FAbortFileUploadsRequest(const TSharedPtr<FJsonObject>& obj) : FAbortFileUploadsRequest()
        {
            readFromValue(obj);
        }

        ~FAbortFileUploadsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FAbortFileUploadsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The entity id and type.
        TSharedPtr<FEntityKey> Entity;

        // The current version of the profile, can be used for concurrency control during updates.
        int32 ProfileVersion;

        FAbortFileUploadsResponse() :
            FPlayFabCppResultCommon(),
            Entity(nullptr),
            ProfileVersion(0)
            {}

        FAbortFileUploadsResponse(const FAbortFileUploadsResponse& src) :
            FPlayFabCppResultCommon(),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            ProfileVersion(src.ProfileVersion)
            {}

        FAbortFileUploadsResponse(const TSharedPtr<FJsonObject>& obj) : FAbortFileUploadsResponse()
        {
            readFromValue(obj);
        }

        ~FAbortFileUploadsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteFilesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        // Names of the files to be deleted.
        TArray<FString> FileNames;
        /**
         * [optional] The expected version of the profile, if set and doesn't match the current version of the profile the operation will not
         * be performed.
         */
        Boxed<int32> ProfileVersion;

        FDeleteFilesRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            FileNames(),
            ProfileVersion()
            {}

        FDeleteFilesRequest(const FDeleteFilesRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            FileNames(src.FileNames),
            ProfileVersion(src.ProfileVersion)
            {}

        FDeleteFilesRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteFilesRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteFilesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteFilesResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The entity id and type.
        TSharedPtr<FEntityKey> Entity;

        // The current version of the profile, can be used for concurrency control during updates.
        int32 ProfileVersion;

        FDeleteFilesResponse() :
            FPlayFabCppResultCommon(),
            Entity(nullptr),
            ProfileVersion(0)
            {}

        FDeleteFilesResponse(const FDeleteFilesResponse& src) :
            FPlayFabCppResultCommon(),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            ProfileVersion(src.ProfileVersion)
            {}

        FDeleteFilesResponse(const TSharedPtr<FJsonObject>& obj) : FDeleteFilesResponse()
        {
            readFromValue(obj);
        }

        ~FDeleteFilesResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FFinalizeFileUploadsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        // Names of the files to be finalized. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'
        TArray<FString> FileNames;
        // The current version of the profile, can be used for concurrency control during updates.
        int32 ProfileVersion;

        FFinalizeFileUploadsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            FileNames(),
            ProfileVersion(0)
            {}

        FFinalizeFileUploadsRequest(const FFinalizeFileUploadsRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            FileNames(src.FileNames),
            ProfileVersion(src.ProfileVersion)
            {}

        FFinalizeFileUploadsRequest(const TSharedPtr<FJsonObject>& obj) : FFinalizeFileUploadsRequest()
        {
            readFromValue(obj);
        }

        ~FFinalizeFileUploadsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetFileMetadata : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Checksum value for the file
        FString Checksum;

        // [optional] Download URL where the file can be retrieved
        FString DownloadUrl;

        // [optional] Name of the file
        FString FileName;

        // Last UTC time the file was modified
        FDateTime LastModified;

        // Storage service's reported byte count
        int32 Size;

        FGetFileMetadata() :
            FPlayFabCppBaseModel(),
            Checksum(),
            DownloadUrl(),
            FileName(),
            LastModified(0),
            Size(0)
            {}

        FGetFileMetadata(const FGetFileMetadata& src) :
            FPlayFabCppBaseModel(),
            Checksum(src.Checksum),
            DownloadUrl(src.DownloadUrl),
            FileName(src.FileName),
            LastModified(src.LastModified),
            Size(src.Size)
            {}

        FGetFileMetadata(const TSharedPtr<FJsonObject>& obj) : FGetFileMetadata()
        {
            readFromValue(obj);
        }

        ~FGetFileMetadata();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FFinalizeFileUploadsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The entity id and type.
        TSharedPtr<FEntityKey> Entity;

        // [optional] Collection of metadata for the entity's files
        TMap<FString, FGetFileMetadata> Metadata;
        // The current version of the profile, can be used for concurrency control during updates.
        int32 ProfileVersion;

        FFinalizeFileUploadsResponse() :
            FPlayFabCppResultCommon(),
            Entity(nullptr),
            Metadata(),
            ProfileVersion(0)
            {}

        FFinalizeFileUploadsResponse(const FFinalizeFileUploadsResponse& src) :
            FPlayFabCppResultCommon(),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            Metadata(src.Metadata),
            ProfileVersion(src.ProfileVersion)
            {}

        FFinalizeFileUploadsResponse(const TSharedPtr<FJsonObject>& obj) : FFinalizeFileUploadsResponse()
        {
            readFromValue(obj);
        }

        ~FFinalizeFileUploadsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetFilesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        FGetFilesRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity()
            {}

        FGetFilesRequest(const FGetFilesRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity)
            {}

        FGetFilesRequest(const TSharedPtr<FJsonObject>& obj) : FGetFilesRequest()
        {
            readFromValue(obj);
        }

        ~FGetFilesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetFilesResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The entity id and type.
        TSharedPtr<FEntityKey> Entity;

        // [optional] Collection of metadata for the entity's files
        TMap<FString, FGetFileMetadata> Metadata;
        // The current version of the profile, can be used for concurrency control during updates.
        int32 ProfileVersion;

        FGetFilesResponse() :
            FPlayFabCppResultCommon(),
            Entity(nullptr),
            Metadata(),
            ProfileVersion(0)
            {}

        FGetFilesResponse(const FGetFilesResponse& src) :
            FPlayFabCppResultCommon(),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            Metadata(src.Metadata),
            ProfileVersion(src.ProfileVersion)
            {}

        FGetFilesResponse(const TSharedPtr<FJsonObject>& obj) : FGetFilesResponse()
        {
            readFromValue(obj);
        }

        ~FGetFilesResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetObjectsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        /**
         * [optional] Determines whether the object will be returned as an escaped JSON string or as a un-escaped JSON object. Default is JSON
         * object.
         */
        Boxed<bool> EscapeObject;

        FGetObjectsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            EscapeObject()
            {}

        FGetObjectsRequest(const FGetObjectsRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            EscapeObject(src.EscapeObject)
            {}

        FGetObjectsRequest(const TSharedPtr<FJsonObject>& obj) : FGetObjectsRequest()
        {
            readFromValue(obj);
        }

        ~FGetObjectsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FObjectResult : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Un-escaped JSON object, if EscapeObject false or default.
        FJsonKeeper DataObject;

        // [optional] Escaped string JSON body of the object, if EscapeObject is true.
        FString EscapedDataObject;

        // [optional] Name of the object. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'
        FString ObjectName;

        FObjectResult() :
            FPlayFabCppBaseModel(),
            DataObject(),
            EscapedDataObject(),
            ObjectName()
            {}

        FObjectResult(const FObjectResult& src) :
            FPlayFabCppBaseModel(),
            DataObject(src.DataObject),
            EscapedDataObject(src.EscapedDataObject),
            ObjectName(src.ObjectName)
            {}

        FObjectResult(const TSharedPtr<FJsonObject>& obj) : FObjectResult()
        {
            readFromValue(obj);
        }

        ~FObjectResult();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetObjectsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The entity id and type.
        TSharedPtr<FEntityKey> Entity;

        // [optional] Requested objects that the calling entity has access to
        TMap<FString, FObjectResult> Objects;
        // The current version of the profile, can be used for concurrency control during updates.
        int32 ProfileVersion;

        FGetObjectsResponse() :
            FPlayFabCppResultCommon(),
            Entity(nullptr),
            Objects(),
            ProfileVersion(0)
            {}

        FGetObjectsResponse(const FGetObjectsResponse& src) :
            FPlayFabCppResultCommon(),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            Objects(src.Objects),
            ProfileVersion(src.ProfileVersion)
            {}

        FGetObjectsResponse(const TSharedPtr<FJsonObject>& obj) : FGetObjectsResponse()
        {
            readFromValue(obj);
        }

        ~FGetObjectsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInitiateFileUploadMetadata : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Name of the file.
        FString FileName;

        // [optional] Location the data should be sent to via an HTTP PUT operation.
        FString UploadUrl;

        FInitiateFileUploadMetadata() :
            FPlayFabCppBaseModel(),
            FileName(),
            UploadUrl()
            {}

        FInitiateFileUploadMetadata(const FInitiateFileUploadMetadata& src) :
            FPlayFabCppBaseModel(),
            FileName(src.FileName),
            UploadUrl(src.UploadUrl)
            {}

        FInitiateFileUploadMetadata(const TSharedPtr<FJsonObject>& obj) : FInitiateFileUploadMetadata()
        {
            readFromValue(obj);
        }

        ~FInitiateFileUploadMetadata();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInitiateFileUploadsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        // Names of the files to be set. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'
        TArray<FString> FileNames;
        /**
         * [optional] The expected version of the profile, if set and doesn't match the current version of the profile the operation will not
         * be performed.
         */
        Boxed<int32> ProfileVersion;

        FInitiateFileUploadsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            FileNames(),
            ProfileVersion()
            {}

        FInitiateFileUploadsRequest(const FInitiateFileUploadsRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            FileNames(src.FileNames),
            ProfileVersion(src.ProfileVersion)
            {}

        FInitiateFileUploadsRequest(const TSharedPtr<FJsonObject>& obj) : FInitiateFileUploadsRequest()
        {
            readFromValue(obj);
        }

        ~FInitiateFileUploadsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInitiateFileUploadsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The entity id and type.
        TSharedPtr<FEntityKey> Entity;

        // The current version of the profile, can be used for concurrency control during updates.
        int32 ProfileVersion;

        // [optional] Collection of file names and upload urls
        TArray<FInitiateFileUploadMetadata> UploadDetails;
        FInitiateFileUploadsResponse() :
            FPlayFabCppResultCommon(),
            Entity(nullptr),
            ProfileVersion(0),
            UploadDetails()
            {}

        FInitiateFileUploadsResponse(const FInitiateFileUploadsResponse& src) :
            FPlayFabCppResultCommon(),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            ProfileVersion(src.ProfileVersion),
            UploadDetails(src.UploadDetails)
            {}

        FInitiateFileUploadsResponse(const TSharedPtr<FJsonObject>& obj) : FInitiateFileUploadsResponse()
        {
            readFromValue(obj);
        }

        ~FInitiateFileUploadsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum OperationTypes
    {
        OperationTypesCreated,
        OperationTypesUpdated,
        OperationTypesDeleted,
        OperationTypesNone
    };

    PLAYFABCPP_API void writeOperationTypesEnumJSON(OperationTypes enumVal, JsonWriter& writer);
    PLAYFABCPP_API OperationTypes readOperationTypesFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API OperationTypes readOperationTypesFromValue(const FString& value);

    struct PLAYFABCPP_API FSetObject : public PlayFab::FPlayFabCppBaseModel
    {
        /**
         * [optional] Body of the object to be saved. If empty and DeleteObject is true object will be deleted if it exists, or no operation
         * will occur if it does not exist. Only one of Object or EscapedDataObject fields may be used.
         */
        FJsonKeeper DataObject;

        // [optional] Flag to indicate that this object should be deleted. Both DataObject and EscapedDataObject must not be set as well.
        Boxed<bool> DeleteObject;

        /**
         * [optional] Body of the object to be saved as an escaped JSON string. If empty and DeleteObject is true object will be deleted if it
         * exists, or no operation will occur if it does not exist. Only one of DataObject or EscapedDataObject fields may be used.
         */
        FString EscapedDataObject;

        // Name of object. Restricted to a-Z, 0-9, '(', ')', '_', '-' and '.'.
        FString ObjectName;

        FSetObject() :
            FPlayFabCppBaseModel(),
            DataObject(),
            DeleteObject(),
            EscapedDataObject(),
            ObjectName()
            {}

        FSetObject(const FSetObject& src) :
            FPlayFabCppBaseModel(),
            DataObject(src.DataObject),
            DeleteObject(src.DeleteObject),
            EscapedDataObject(src.EscapedDataObject),
            ObjectName(src.ObjectName)
            {}

        FSetObject(const TSharedPtr<FJsonObject>& obj) : FSetObject()
        {
            readFromValue(obj);
        }

        ~FSetObject();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSetObjectInfo : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Name of the object
        FString ObjectName;

        // [optional] Optional reason to explain why the operation was the result that it was.
        FString OperationReason;

        // [optional] Indicates which operation was completed, either Created, Updated, Deleted or None.
        Boxed<OperationTypes> SetResult;

        FSetObjectInfo() :
            FPlayFabCppBaseModel(),
            ObjectName(),
            OperationReason(),
            SetResult()
            {}

        FSetObjectInfo(const FSetObjectInfo& src) :
            FPlayFabCppBaseModel(),
            ObjectName(src.ObjectName),
            OperationReason(src.OperationReason),
            SetResult(src.SetResult)
            {}

        FSetObjectInfo(const TSharedPtr<FJsonObject>& obj) : FSetObjectInfo()
        {
            readFromValue(obj);
        }

        ~FSetObjectInfo();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSetObjectsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        /**
         * [optional] Optional field used for concurrency control. By specifying the previously returned value of ProfileVersion from
         * GetProfile API, you can ensure that the object set will only be performed if the profile has not been updated by any
         * other clients since the version you last loaded.
         */
        Boxed<int32> ExpectedProfileVersion;

        // Collection of objects to set on the profile.
        TArray<FSetObject> Objects;
        FSetObjectsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            ExpectedProfileVersion(),
            Objects()
            {}

        FSetObjectsRequest(const FSetObjectsRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            ExpectedProfileVersion(src.ExpectedProfileVersion),
            Objects(src.Objects)
            {}

        FSetObjectsRequest(const TSharedPtr<FJsonObject>& obj) : FSetObjectsRequest()
        {
            readFromValue(obj);
        }

        ~FSetObjectsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FSetObjectsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // New version of the entity profile.
        int32 ProfileVersion;

        // [optional] New version of the entity profile.
        TArray<FSetObjectInfo> SetResults;
        FSetObjectsResponse() :
            FPlayFabCppResultCommon(),
            ProfileVersion(0),
            SetResults()
            {}

        FSetObjectsResponse(const FSetObjectsResponse& src) :
            FPlayFabCppResultCommon(),
            ProfileVersion(src.ProfileVersion),
            SetResults(src.SetResults)
            {}

        FSetObjectsResponse(const TSharedPtr<FJsonObject>& obj) : FSetObjectsResponse()
        {
            readFromValue(obj);
        }

        ~FSetObjectsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

}
}
