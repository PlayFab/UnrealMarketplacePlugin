//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "PlayFabCppBaseModel.h"

namespace PlayFab
{
namespace GroupsModels
{

    struct PLAYFABCPP_API FEntityKey : public PlayFab::FPlayFabCppBaseModel
    {
        // Unique ID of the entity.
        FString Id;

        // [optional] Entity type. See https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types
        FString Type;

        FEntityKey() :
            FPlayFabCppBaseModel(),
            Id(),
            Type()
            {}

        FEntityKey(const FEntityKey& src) :
            FPlayFabCppBaseModel(),
            Id(src.Id),
            Type(src.Type)
            {}

        FEntityKey(const TSharedPtr<FJsonObject>& obj) : FEntityKey()
        {
            readFromValue(obj);
        }

        ~FEntityKey();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FAcceptGroupApplicationRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        /**
         * Optional. Type of the entity to accept as. If specified, must be the same entity as the claimant or an entity that is a
         * child of the claimant entity. Defaults to the claimant entity.
         */
        FEntityKey Entity;

        // The identifier of the group
        FEntityKey Group;

        FAcceptGroupApplicationRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            Group()
            {}

        FAcceptGroupApplicationRequest(const FAcceptGroupApplicationRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            Group(src.Group)
            {}

        FAcceptGroupApplicationRequest(const TSharedPtr<FJsonObject>& obj) : FAcceptGroupApplicationRequest()
        {
            readFromValue(obj);
        }

        ~FAcceptGroupApplicationRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FAcceptGroupInvitationRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // The identifier of the group
        FEntityKey Group;

        FAcceptGroupInvitationRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr),
            Group()
            {}

        FAcceptGroupInvitationRequest(const FAcceptGroupInvitationRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            Group(src.Group)
            {}

        FAcceptGroupInvitationRequest(const TSharedPtr<FJsonObject>& obj) : FAcceptGroupInvitationRequest()
        {
            readFromValue(obj);
        }

        ~FAcceptGroupInvitationRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FAddMembersRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The identifier of the group
        FEntityKey Group;

        // List of entities to add to the group. Only entities of type title_player_account and character may be added to groups.
        TArray<FEntityKey> Members;
        /**
         * [optional] Optional: The ID of the existing role to add the entities to. If this is not specified, the default member role for the
         * group will be used. Role IDs must be between 1 and 64 characters long.
         */
        FString RoleId;

        FAddMembersRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Group(),
            Members(),
            RoleId()
            {}

        FAddMembersRequest(const FAddMembersRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Group(src.Group),
            Members(src.Members),
            RoleId(src.RoleId)
            {}

        FAddMembersRequest(const TSharedPtr<FJsonObject>& obj) : FAddMembersRequest()
        {
            readFromValue(obj);
        }

        ~FAddMembersRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FApplyToGroupRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] Optional, default true. Automatically accept an outstanding invitation if one exists instead of creating an application
        Boxed<bool> AutoAcceptOutstandingInvite;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // The identifier of the group
        FEntityKey Group;

        FApplyToGroupRequest() :
            FPlayFabCppRequestCommon(),
            AutoAcceptOutstandingInvite(),
            CustomTags(),
            Entity(nullptr),
            Group()
            {}

        FApplyToGroupRequest(const FApplyToGroupRequest& src) :
            FPlayFabCppRequestCommon(),
            AutoAcceptOutstandingInvite(src.AutoAcceptOutstandingInvite),
            CustomTags(src.CustomTags),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            Group(src.Group)
            {}

        FApplyToGroupRequest(const TSharedPtr<FJsonObject>& obj) : FApplyToGroupRequest()
        {
            readFromValue(obj);
        }

        ~FApplyToGroupRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEntityWithLineage : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The entity key for the specified entity
        TSharedPtr<FEntityKey> Key;

        // [optional] Dictionary of entity keys for related entities. Dictionary key is entity type.
        TMap<FString, FEntityKey> Lineage;
        FEntityWithLineage() :
            FPlayFabCppBaseModel(),
            Key(nullptr),
            Lineage()
            {}

        FEntityWithLineage(const FEntityWithLineage& src) :
            FPlayFabCppBaseModel(),
            Key(src.Key.IsValid() ? MakeShareable(new FEntityKey(*src.Key)) : nullptr),
            Lineage(src.Lineage)
            {}

        FEntityWithLineage(const TSharedPtr<FJsonObject>& obj) : FEntityWithLineage()
        {
            readFromValue(obj);
        }

        ~FEntityWithLineage();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FApplyToGroupResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Type of entity that requested membership
        TSharedPtr<FEntityWithLineage> Entity;

        // When the application to join will expire and be deleted
        FDateTime Expires;

        // [optional] ID of the group that the entity requesting membership to
        TSharedPtr<FEntityKey> Group;

        FApplyToGroupResponse() :
            FPlayFabCppResultCommon(),
            Entity(nullptr),
            Expires(0),
            Group(nullptr)
            {}

        FApplyToGroupResponse(const FApplyToGroupResponse& src) :
            FPlayFabCppResultCommon(),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityWithLineage(*src.Entity)) : nullptr),
            Expires(src.Expires),
            Group(src.Group.IsValid() ? MakeShareable(new FEntityKey(*src.Group)) : nullptr)
            {}

        FApplyToGroupResponse(const TSharedPtr<FJsonObject>& obj) : FApplyToGroupResponse()
        {
            readFromValue(obj);
        }

        ~FApplyToGroupResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FBlockEntityRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        // The identifier of the group
        FEntityKey Group;

        FBlockEntityRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            Group()
            {}

        FBlockEntityRequest(const FBlockEntityRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            Group(src.Group)
            {}

        FBlockEntityRequest(const TSharedPtr<FJsonObject>& obj) : FBlockEntityRequest()
        {
            readFromValue(obj);
        }

        ~FBlockEntityRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FChangeMemberRoleRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        /**
         * [optional] The ID of the role that the entities will become a member of. This must be an existing role. Role IDs must be between 1
         * and 64 characters long.
         */
        FString DestinationRoleId;

        // The identifier of the group
        FEntityKey Group;

        /**
         * List of entities to move between roles in the group. All entities in this list must be members of the group and origin
         * role.
         */
        TArray<FEntityKey> Members;
        // The ID of the role that the entities currently are a member of. Role IDs must be between 1 and 64 characters long.
        FString OriginRoleId;

        FChangeMemberRoleRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            DestinationRoleId(),
            Group(),
            Members(),
            OriginRoleId()
            {}

        FChangeMemberRoleRequest(const FChangeMemberRoleRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            DestinationRoleId(src.DestinationRoleId),
            Group(src.Group),
            Members(src.Members),
            OriginRoleId(src.OriginRoleId)
            {}

        FChangeMemberRoleRequest(const TSharedPtr<FJsonObject>& obj) : FChangeMemberRoleRequest()
        {
            readFromValue(obj);
        }

        ~FChangeMemberRoleRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateGroupRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        // The name of the group. This is unique at the title level by default.
        FString GroupName;

        FCreateGroupRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr),
            GroupName()
            {}

        FCreateGroupRequest(const FCreateGroupRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr),
            GroupName(src.GroupName)
            {}

        FCreateGroupRequest(const TSharedPtr<FJsonObject>& obj) : FCreateGroupRequest()
        {
            readFromValue(obj);
        }

        ~FCreateGroupRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateGroupResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The ID of the administrator role for the group.
        FString AdminRoleId;

        // The server date and time the group was created.
        FDateTime Created;

        // The identifier of the group
        FEntityKey Group;

        // [optional] The name of the group.
        FString GroupName;

        // [optional] The ID of the default member role for the group.
        FString MemberRoleId;

        // The current version of the profile, can be used for concurrency control during updates.
        int32 ProfileVersion;

        // [optional] The list of roles and names that belong to the group.
        TMap<FString, FString> Roles;
        FCreateGroupResponse() :
            FPlayFabCppResultCommon(),
            AdminRoleId(),
            Created(0),
            Group(),
            GroupName(),
            MemberRoleId(),
            ProfileVersion(0),
            Roles()
            {}

        FCreateGroupResponse(const FCreateGroupResponse& src) :
            FPlayFabCppResultCommon(),
            AdminRoleId(src.AdminRoleId),
            Created(src.Created),
            Group(src.Group),
            GroupName(src.GroupName),
            MemberRoleId(src.MemberRoleId),
            ProfileVersion(src.ProfileVersion),
            Roles(src.Roles)
            {}

        FCreateGroupResponse(const TSharedPtr<FJsonObject>& obj) : FCreateGroupResponse()
        {
            readFromValue(obj);
        }

        ~FCreateGroupResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateGroupRoleRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The identifier of the group
        FEntityKey Group;

        /**
         * The ID of the role. This must be unique within the group and cannot be changed. Role IDs must be between 1 and 64
         * characters long.
         */
        FString RoleId;

        /**
         * The name of the role. This must be unique within the group and can be changed later. Role names must be between 1 and
         * 100 characters long
         */
        FString RoleName;

        FCreateGroupRoleRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Group(),
            RoleId(),
            RoleName()
            {}

        FCreateGroupRoleRequest(const FCreateGroupRoleRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Group(src.Group),
            RoleId(src.RoleId),
            RoleName(src.RoleName)
            {}

        FCreateGroupRoleRequest(const TSharedPtr<FJsonObject>& obj) : FCreateGroupRoleRequest()
        {
            readFromValue(obj);
        }

        ~FCreateGroupRoleRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FCreateGroupRoleResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // The current version of the group profile, can be used for concurrency control during updates.
        int32 ProfileVersion;

        // [optional] ID for the role
        FString RoleId;

        // [optional] The name of the role
        FString RoleName;

        FCreateGroupRoleResponse() :
            FPlayFabCppResultCommon(),
            ProfileVersion(0),
            RoleId(),
            RoleName()
            {}

        FCreateGroupRoleResponse(const FCreateGroupRoleResponse& src) :
            FPlayFabCppResultCommon(),
            ProfileVersion(src.ProfileVersion),
            RoleId(src.RoleId),
            RoleName(src.RoleName)
            {}

        FCreateGroupRoleResponse(const TSharedPtr<FJsonObject>& obj) : FCreateGroupRoleResponse()
        {
            readFromValue(obj);
        }

        ~FCreateGroupRoleResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteGroupRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // ID of the group or role to remove
        FEntityKey Group;

        FDeleteGroupRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Group()
            {}

        FDeleteGroupRequest(const FDeleteGroupRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Group(src.Group)
            {}

        FDeleteGroupRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteGroupRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteGroupRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FDeleteRoleRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The identifier of the group
        FEntityKey Group;

        // [optional] The ID of the role to delete. Role IDs must be between 1 and 64 characters long.
        FString RoleId;

        FDeleteRoleRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Group(),
            RoleId()
            {}

        FDeleteRoleRequest(const FDeleteRoleRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Group(src.Group),
            RoleId(src.RoleId)
            {}

        FDeleteRoleRequest(const TSharedPtr<FJsonObject>& obj) : FDeleteRoleRequest()
        {
            readFromValue(obj);
        }

        ~FDeleteRoleRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEmptyResponse : public PlayFab::FPlayFabCppResultCommon
    {
        FEmptyResponse() :
            FPlayFabCppResultCommon()
            {}

        FEmptyResponse(const FEmptyResponse& src) :
            FPlayFabCppResultCommon()
            {}

        FEmptyResponse(const TSharedPtr<FJsonObject>& obj) : FEmptyResponse()
        {
            readFromValue(obj);
        }

        ~FEmptyResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEntityMemberRole : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The list of members in the role
        TArray<FEntityWithLineage> Members;
        // [optional] The ID of the role.
        FString RoleId;

        // [optional] The name of the role
        FString RoleName;

        FEntityMemberRole() :
            FPlayFabCppBaseModel(),
            Members(),
            RoleId(),
            RoleName()
            {}

        FEntityMemberRole(const FEntityMemberRole& src) :
            FPlayFabCppBaseModel(),
            Members(src.Members),
            RoleId(src.RoleId),
            RoleName(src.RoleName)
            {}

        FEntityMemberRole(const TSharedPtr<FJsonObject>& obj) : FEntityMemberRole()
        {
            readFromValue(obj);
        }

        ~FEntityMemberRole();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetGroupRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The identifier of the group
        TSharedPtr<FEntityKey> Group;

        // [optional] The full name of the group
        FString GroupName;

        FGetGroupRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Group(nullptr),
            GroupName()
            {}

        FGetGroupRequest(const FGetGroupRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Group(src.Group.IsValid() ? MakeShareable(new FEntityKey(*src.Group)) : nullptr),
            GroupName(src.GroupName)
            {}

        FGetGroupRequest(const TSharedPtr<FJsonObject>& obj) : FGetGroupRequest()
        {
            readFromValue(obj);
        }

        ~FGetGroupRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGetGroupResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The ID of the administrator role for the group.
        FString AdminRoleId;

        // The server date and time the group was created.
        FDateTime Created;

        // The identifier of the group
        FEntityKey Group;

        // [optional] The name of the group.
        FString GroupName;

        // [optional] The ID of the default member role for the group.
        FString MemberRoleId;

        // The current version of the profile, can be used for concurrency control during updates.
        int32 ProfileVersion;

        // [optional] The list of roles and names that belong to the group.
        TMap<FString, FString> Roles;
        FGetGroupResponse() :
            FPlayFabCppResultCommon(),
            AdminRoleId(),
            Created(0),
            Group(),
            GroupName(),
            MemberRoleId(),
            ProfileVersion(0),
            Roles()
            {}

        FGetGroupResponse(const FGetGroupResponse& src) :
            FPlayFabCppResultCommon(),
            AdminRoleId(src.AdminRoleId),
            Created(src.Created),
            Group(src.Group),
            GroupName(src.GroupName),
            MemberRoleId(src.MemberRoleId),
            ProfileVersion(src.ProfileVersion),
            Roles(src.Roles)
            {}

        FGetGroupResponse(const TSharedPtr<FJsonObject>& obj) : FGetGroupResponse()
        {
            readFromValue(obj);
        }

        ~FGetGroupResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGroupApplication : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] Type of entity that requested membership
        TSharedPtr<FEntityWithLineage> Entity;

        // When the application to join will expire and be deleted
        FDateTime Expires;

        // [optional] ID of the group that the entity requesting membership to
        TSharedPtr<FEntityKey> Group;

        FGroupApplication() :
            FPlayFabCppBaseModel(),
            Entity(nullptr),
            Expires(0),
            Group(nullptr)
            {}

        FGroupApplication(const FGroupApplication& src) :
            FPlayFabCppBaseModel(),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityWithLineage(*src.Entity)) : nullptr),
            Expires(src.Expires),
            Group(src.Group.IsValid() ? MakeShareable(new FEntityKey(*src.Group)) : nullptr)
            {}

        FGroupApplication(const TSharedPtr<FJsonObject>& obj) : FGroupApplication()
        {
            readFromValue(obj);
        }

        ~FGroupApplication();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGroupBlock : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] The entity that is blocked
        TSharedPtr<FEntityWithLineage> Entity;

        // ID of the group that the entity is blocked from
        FEntityKey Group;

        FGroupBlock() :
            FPlayFabCppBaseModel(),
            Entity(nullptr),
            Group()
            {}

        FGroupBlock(const FGroupBlock& src) :
            FPlayFabCppBaseModel(),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityWithLineage(*src.Entity)) : nullptr),
            Group(src.Group)
            {}

        FGroupBlock(const TSharedPtr<FJsonObject>& obj) : FGroupBlock()
        {
            readFromValue(obj);
        }

        ~FGroupBlock();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGroupInvitation : public PlayFab::FPlayFabCppBaseModel
    {
        // When the invitation will expire and be deleted
        FDateTime Expires;

        // [optional] The group that the entity invited to
        TSharedPtr<FEntityKey> Group;

        // [optional] The entity that created the invitation
        TSharedPtr<FEntityWithLineage> InvitedByEntity;

        // [optional] The entity that is invited
        TSharedPtr<FEntityWithLineage> InvitedEntity;

        // [optional] ID of the role in the group to assign the user to.
        FString RoleId;

        FGroupInvitation() :
            FPlayFabCppBaseModel(),
            Expires(0),
            Group(nullptr),
            InvitedByEntity(nullptr),
            InvitedEntity(nullptr),
            RoleId()
            {}

        FGroupInvitation(const FGroupInvitation& src) :
            FPlayFabCppBaseModel(),
            Expires(src.Expires),
            Group(src.Group.IsValid() ? MakeShareable(new FEntityKey(*src.Group)) : nullptr),
            InvitedByEntity(src.InvitedByEntity.IsValid() ? MakeShareable(new FEntityWithLineage(*src.InvitedByEntity)) : nullptr),
            InvitedEntity(src.InvitedEntity.IsValid() ? MakeShareable(new FEntityWithLineage(*src.InvitedEntity)) : nullptr),
            RoleId(src.RoleId)
            {}

        FGroupInvitation(const TSharedPtr<FJsonObject>& obj) : FGroupInvitation()
        {
            readFromValue(obj);
        }

        ~FGroupInvitation();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGroupRole : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] ID for the role
        FString RoleId;

        // [optional] The name of the role
        FString RoleName;

        FGroupRole() :
            FPlayFabCppBaseModel(),
            RoleId(),
            RoleName()
            {}

        FGroupRole(const FGroupRole& src) :
            FPlayFabCppBaseModel(),
            RoleId(src.RoleId),
            RoleName(src.RoleName)
            {}

        FGroupRole(const TSharedPtr<FJsonObject>& obj) : FGroupRole()
        {
            readFromValue(obj);
        }

        ~FGroupRole();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FGroupWithRoles : public PlayFab::FPlayFabCppBaseModel
    {
        // [optional] ID for the group
        TSharedPtr<FEntityKey> Group;

        // [optional] The name of the group
        FString GroupName;

        // The current version of the profile, can be used for concurrency control during updates.
        int32 ProfileVersion;

        // [optional] The list of roles within the group
        TArray<FGroupRole> Roles;
        FGroupWithRoles() :
            FPlayFabCppBaseModel(),
            Group(nullptr),
            GroupName(),
            ProfileVersion(0),
            Roles()
            {}

        FGroupWithRoles(const FGroupWithRoles& src) :
            FPlayFabCppBaseModel(),
            Group(src.Group.IsValid() ? MakeShareable(new FEntityKey(*src.Group)) : nullptr),
            GroupName(src.GroupName),
            ProfileVersion(src.ProfileVersion),
            Roles(src.Roles)
            {}

        FGroupWithRoles(const TSharedPtr<FJsonObject>& obj) : FGroupWithRoles()
        {
            readFromValue(obj);
        }

        ~FGroupWithRoles();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInviteToGroupRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] Optional, default true. Automatically accept an application if one exists instead of creating an invitation
        Boxed<bool> AutoAcceptOutstandingApplication;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        // The identifier of the group
        FEntityKey Group;

        /**
         * [optional] Optional. ID of an existing a role in the group to assign the user to. The group's default member role is used if this
         * is not specified. Role IDs must be between 1 and 64 characters long.
         */
        FString RoleId;

        FInviteToGroupRequest() :
            FPlayFabCppRequestCommon(),
            AutoAcceptOutstandingApplication(),
            CustomTags(),
            Entity(),
            Group(),
            RoleId()
            {}

        FInviteToGroupRequest(const FInviteToGroupRequest& src) :
            FPlayFabCppRequestCommon(),
            AutoAcceptOutstandingApplication(src.AutoAcceptOutstandingApplication),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            Group(src.Group),
            RoleId(src.RoleId)
            {}

        FInviteToGroupRequest(const TSharedPtr<FJsonObject>& obj) : FInviteToGroupRequest()
        {
            readFromValue(obj);
        }

        ~FInviteToGroupRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FInviteToGroupResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // When the invitation will expire and be deleted
        FDateTime Expires;

        // [optional] The group that the entity invited to
        TSharedPtr<FEntityKey> Group;

        // [optional] The entity that created the invitation
        TSharedPtr<FEntityWithLineage> InvitedByEntity;

        // [optional] The entity that is invited
        TSharedPtr<FEntityWithLineage> InvitedEntity;

        // [optional] ID of the role in the group to assign the user to.
        FString RoleId;

        FInviteToGroupResponse() :
            FPlayFabCppResultCommon(),
            Expires(0),
            Group(nullptr),
            InvitedByEntity(nullptr),
            InvitedEntity(nullptr),
            RoleId()
            {}

        FInviteToGroupResponse(const FInviteToGroupResponse& src) :
            FPlayFabCppResultCommon(),
            Expires(src.Expires),
            Group(src.Group.IsValid() ? MakeShareable(new FEntityKey(*src.Group)) : nullptr),
            InvitedByEntity(src.InvitedByEntity.IsValid() ? MakeShareable(new FEntityWithLineage(*src.InvitedByEntity)) : nullptr),
            InvitedEntity(src.InvitedEntity.IsValid() ? MakeShareable(new FEntityWithLineage(*src.InvitedEntity)) : nullptr),
            RoleId(src.RoleId)
            {}

        FInviteToGroupResponse(const TSharedPtr<FJsonObject>& obj) : FInviteToGroupResponse()
        {
            readFromValue(obj);
        }

        ~FInviteToGroupResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FIsMemberRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        // The identifier of the group
        FEntityKey Group;

        /**
         * [optional] Optional: ID of the role to check membership of. Defaults to any role (that is, check to see if the entity is a member
         * of the group in any capacity) if not specified.
         */
        FString RoleId;

        FIsMemberRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            Group(),
            RoleId()
            {}

        FIsMemberRequest(const FIsMemberRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            Group(src.Group),
            RoleId(src.RoleId)
            {}

        FIsMemberRequest(const TSharedPtr<FJsonObject>& obj) : FIsMemberRequest()
        {
            readFromValue(obj);
        }

        ~FIsMemberRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FIsMemberResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // A value indicating whether or not the entity is a member.
        bool IsMember;

        FIsMemberResponse() :
            FPlayFabCppResultCommon(),
            IsMember(false)
            {}

        FIsMemberResponse(const FIsMemberResponse& src) :
            FPlayFabCppResultCommon(),
            IsMember(src.IsMember)
            {}

        FIsMemberResponse(const TSharedPtr<FJsonObject>& obj) : FIsMemberResponse()
        {
            readFromValue(obj);
        }

        ~FIsMemberResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListGroupApplicationsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The identifier of the group
        FEntityKey Group;

        FListGroupApplicationsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Group()
            {}

        FListGroupApplicationsRequest(const FListGroupApplicationsRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Group(src.Group)
            {}

        FListGroupApplicationsRequest(const TSharedPtr<FJsonObject>& obj) : FListGroupApplicationsRequest()
        {
            readFromValue(obj);
        }

        ~FListGroupApplicationsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListGroupApplicationsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The requested list of applications to the group.
        TArray<FGroupApplication> Applications;
        FListGroupApplicationsResponse() :
            FPlayFabCppResultCommon(),
            Applications()
            {}

        FListGroupApplicationsResponse(const FListGroupApplicationsResponse& src) :
            FPlayFabCppResultCommon(),
            Applications(src.Applications)
            {}

        FListGroupApplicationsResponse(const TSharedPtr<FJsonObject>& obj) : FListGroupApplicationsResponse()
        {
            readFromValue(obj);
        }

        ~FListGroupApplicationsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListGroupBlocksRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The identifier of the group
        FEntityKey Group;

        FListGroupBlocksRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Group()
            {}

        FListGroupBlocksRequest(const FListGroupBlocksRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Group(src.Group)
            {}

        FListGroupBlocksRequest(const TSharedPtr<FJsonObject>& obj) : FListGroupBlocksRequest()
        {
            readFromValue(obj);
        }

        ~FListGroupBlocksRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListGroupBlocksResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The requested list blocked entities.
        TArray<FGroupBlock> BlockedEntities;
        FListGroupBlocksResponse() :
            FPlayFabCppResultCommon(),
            BlockedEntities()
            {}

        FListGroupBlocksResponse(const FListGroupBlocksResponse& src) :
            FPlayFabCppResultCommon(),
            BlockedEntities(src.BlockedEntities)
            {}

        FListGroupBlocksResponse(const TSharedPtr<FJsonObject>& obj) : FListGroupBlocksResponse()
        {
            readFromValue(obj);
        }

        ~FListGroupBlocksResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListGroupInvitationsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The identifier of the group
        FEntityKey Group;

        FListGroupInvitationsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Group()
            {}

        FListGroupInvitationsRequest(const FListGroupInvitationsRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Group(src.Group)
            {}

        FListGroupInvitationsRequest(const TSharedPtr<FJsonObject>& obj) : FListGroupInvitationsRequest()
        {
            readFromValue(obj);
        }

        ~FListGroupInvitationsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListGroupInvitationsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The requested list of group invitations.
        TArray<FGroupInvitation> Invitations;
        FListGroupInvitationsResponse() :
            FPlayFabCppResultCommon(),
            Invitations()
            {}

        FListGroupInvitationsResponse(const FListGroupInvitationsResponse& src) :
            FPlayFabCppResultCommon(),
            Invitations(src.Invitations)
            {}

        FListGroupInvitationsResponse(const TSharedPtr<FJsonObject>& obj) : FListGroupInvitationsResponse()
        {
            readFromValue(obj);
        }

        ~FListGroupInvitationsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListGroupMembersRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // ID of the group to list the members and roles for
        FEntityKey Group;

        FListGroupMembersRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Group()
            {}

        FListGroupMembersRequest(const FListGroupMembersRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Group(src.Group)
            {}

        FListGroupMembersRequest(const TSharedPtr<FJsonObject>& obj) : FListGroupMembersRequest()
        {
            readFromValue(obj);
        }

        ~FListGroupMembersRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListGroupMembersResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The requested list of roles and member entity IDs.
        TArray<FEntityMemberRole> Members;
        FListGroupMembersResponse() :
            FPlayFabCppResultCommon(),
            Members()
            {}

        FListGroupMembersResponse(const FListGroupMembersResponse& src) :
            FPlayFabCppResultCommon(),
            Members(src.Members)
            {}

        FListGroupMembersResponse(const TSharedPtr<FJsonObject>& obj) : FListGroupMembersResponse()
        {
            readFromValue(obj);
        }

        ~FListGroupMembersResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListMembershipOpportunitiesRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        FListMembershipOpportunitiesRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FListMembershipOpportunitiesRequest(const FListMembershipOpportunitiesRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr)
            {}

        FListMembershipOpportunitiesRequest(const TSharedPtr<FJsonObject>& obj) : FListMembershipOpportunitiesRequest()
        {
            readFromValue(obj);
        }

        ~FListMembershipOpportunitiesRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListMembershipOpportunitiesResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The requested list of group applications.
        TArray<FGroupApplication> Applications;
        // [optional] The requested list of group invitations.
        TArray<FGroupInvitation> Invitations;
        FListMembershipOpportunitiesResponse() :
            FPlayFabCppResultCommon(),
            Applications(),
            Invitations()
            {}

        FListMembershipOpportunitiesResponse(const FListMembershipOpportunitiesResponse& src) :
            FPlayFabCppResultCommon(),
            Applications(src.Applications),
            Invitations(src.Invitations)
            {}

        FListMembershipOpportunitiesResponse(const TSharedPtr<FJsonObject>& obj) : FListMembershipOpportunitiesResponse()
        {
            readFromValue(obj);
        }

        ~FListMembershipOpportunitiesResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListMembershipRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // [optional] The entity to perform this action on.
        TSharedPtr<FEntityKey> Entity;

        FListMembershipRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(nullptr)
            {}

        FListMembershipRequest(const FListMembershipRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity.IsValid() ? MakeShareable(new FEntityKey(*src.Entity)) : nullptr)
            {}

        FListMembershipRequest(const TSharedPtr<FJsonObject>& obj) : FListMembershipRequest()
        {
            readFromValue(obj);
        }

        ~FListMembershipRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FListMembershipResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] The list of groups
        TArray<FGroupWithRoles> Groups;
        FListMembershipResponse() :
            FPlayFabCppResultCommon(),
            Groups()
            {}

        FListMembershipResponse(const FListMembershipResponse& src) :
            FPlayFabCppResultCommon(),
            Groups(src.Groups)
            {}

        FListMembershipResponse(const TSharedPtr<FJsonObject>& obj) : FListMembershipResponse()
        {
            readFromValue(obj);
        }

        ~FListMembershipResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum OperationTypes
    {
        OperationTypesCreated,
        OperationTypesUpdated,
        OperationTypesDeleted,
        OperationTypesNone
    };

    PLAYFABCPP_API void writeOperationTypesEnumJSON(OperationTypes enumVal, JsonWriter& writer);
    PLAYFABCPP_API OperationTypes readOperationTypesFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API OperationTypes readOperationTypesFromValue(const FString& value);

    struct PLAYFABCPP_API FRemoveGroupApplicationRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        // The identifier of the group
        FEntityKey Group;

        FRemoveGroupApplicationRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            Group()
            {}

        FRemoveGroupApplicationRequest(const FRemoveGroupApplicationRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            Group(src.Group)
            {}

        FRemoveGroupApplicationRequest(const TSharedPtr<FJsonObject>& obj) : FRemoveGroupApplicationRequest()
        {
            readFromValue(obj);
        }

        ~FRemoveGroupApplicationRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRemoveGroupInvitationRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        // The identifier of the group
        FEntityKey Group;

        FRemoveGroupInvitationRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            Group()
            {}

        FRemoveGroupInvitationRequest(const FRemoveGroupInvitationRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            Group(src.Group)
            {}

        FRemoveGroupInvitationRequest(const TSharedPtr<FJsonObject>& obj) : FRemoveGroupInvitationRequest()
        {
            readFromValue(obj);
        }

        ~FRemoveGroupInvitationRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FRemoveMembersRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The identifier of the group
        FEntityKey Group;

        // List of entities to remove
        TArray<FEntityKey> Members;
        // [optional] The ID of the role to remove the entities from.
        FString RoleId;

        FRemoveMembersRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Group(),
            Members(),
            RoleId()
            {}

        FRemoveMembersRequest(const FRemoveMembersRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Group(src.Group),
            Members(src.Members),
            RoleId(src.RoleId)
            {}

        FRemoveMembersRequest(const TSharedPtr<FJsonObject>& obj) : FRemoveMembersRequest()
        {
            readFromValue(obj);
        }

        ~FRemoveMembersRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUnblockEntityRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // The entity to perform this action on.
        FEntityKey Entity;

        // The identifier of the group
        FEntityKey Group;

        FUnblockEntityRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Entity(),
            Group()
            {}

        FUnblockEntityRequest(const FUnblockEntityRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            Entity(src.Entity),
            Group(src.Group)
            {}

        FUnblockEntityRequest(const TSharedPtr<FJsonObject>& obj) : FUnblockEntityRequest()
        {
            readFromValue(obj);
        }

        ~FUnblockEntityRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateGroupRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] Optional: the ID of an existing role to set as the new administrator role for the group
        FString AdminRoleId;

        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        /**
         * [optional] Optional field used for concurrency control. By specifying the previously returned value of ProfileVersion from the
         * GetGroup API, you can ensure that the group data update will only be performed if the group has not been updated by any
         * other clients since the version you last loaded.
         */
        Boxed<int32> ExpectedProfileVersion;

        // The identifier of the group
        FEntityKey Group;

        // [optional] Optional: the new name of the group
        FString GroupName;

        // [optional] Optional: the ID of an existing role to set as the new member role for the group
        FString MemberRoleId;

        FUpdateGroupRequest() :
            FPlayFabCppRequestCommon(),
            AdminRoleId(),
            CustomTags(),
            ExpectedProfileVersion(),
            Group(),
            GroupName(),
            MemberRoleId()
            {}

        FUpdateGroupRequest(const FUpdateGroupRequest& src) :
            FPlayFabCppRequestCommon(),
            AdminRoleId(src.AdminRoleId),
            CustomTags(src.CustomTags),
            ExpectedProfileVersion(src.ExpectedProfileVersion),
            Group(src.Group),
            GroupName(src.GroupName),
            MemberRoleId(src.MemberRoleId)
            {}

        FUpdateGroupRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateGroupRequest()
        {
            readFromValue(obj);
        }

        ~FUpdateGroupRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateGroupResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Optional reason to explain why the operation was the result that it was.
        FString OperationReason;

        // New version of the group data.
        int32 ProfileVersion;

        // [optional] Indicates which operation was completed, either Created, Updated, Deleted or None.
        Boxed<OperationTypes> SetResult;

        FUpdateGroupResponse() :
            FPlayFabCppResultCommon(),
            OperationReason(),
            ProfileVersion(0),
            SetResult()
            {}

        FUpdateGroupResponse(const FUpdateGroupResponse& src) :
            FPlayFabCppResultCommon(),
            OperationReason(src.OperationReason),
            ProfileVersion(src.ProfileVersion),
            SetResult(src.SetResult)
            {}

        FUpdateGroupResponse(const TSharedPtr<FJsonObject>& obj) : FUpdateGroupResponse()
        {
            readFromValue(obj);
        }

        ~FUpdateGroupResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateGroupRoleRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        /**
         * [optional] Optional field used for concurrency control. By specifying the previously returned value of ProfileVersion from the
         * GetGroup API, you can ensure that the group data update will only be performed if the group has not been updated by any
         * other clients since the version you last loaded.
         */
        Boxed<int32> ExpectedProfileVersion;

        // The identifier of the group
        FEntityKey Group;

        // [optional] ID of the role to update. Role IDs must be between 1 and 64 characters long.
        FString RoleId;

        // The new name of the role
        FString RoleName;

        FUpdateGroupRoleRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            ExpectedProfileVersion(),
            Group(),
            RoleId(),
            RoleName()
            {}

        FUpdateGroupRoleRequest(const FUpdateGroupRoleRequest& src) :
            FPlayFabCppRequestCommon(),
            CustomTags(src.CustomTags),
            ExpectedProfileVersion(src.ExpectedProfileVersion),
            Group(src.Group),
            RoleId(src.RoleId),
            RoleName(src.RoleName)
            {}

        FUpdateGroupRoleRequest(const TSharedPtr<FJsonObject>& obj) : FUpdateGroupRoleRequest()
        {
            readFromValue(obj);
        }

        ~FUpdateGroupRoleRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FUpdateGroupRoleResponse : public PlayFab::FPlayFabCppResultCommon
    {
        // [optional] Optional reason to explain why the operation was the result that it was.
        FString OperationReason;

        // New version of the role data.
        int32 ProfileVersion;

        // [optional] Indicates which operation was completed, either Created, Updated, Deleted or None.
        Boxed<OperationTypes> SetResult;

        FUpdateGroupRoleResponse() :
            FPlayFabCppResultCommon(),
            OperationReason(),
            ProfileVersion(0),
            SetResult()
            {}

        FUpdateGroupRoleResponse(const FUpdateGroupRoleResponse& src) :
            FPlayFabCppResultCommon(),
            OperationReason(src.OperationReason),
            ProfileVersion(src.ProfileVersion),
            SetResult(src.SetResult)
            {}

        FUpdateGroupRoleResponse(const TSharedPtr<FJsonObject>& obj) : FUpdateGroupRoleResponse()
        {
            readFromValue(obj);
        }

        ~FUpdateGroupRoleResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

}
}
