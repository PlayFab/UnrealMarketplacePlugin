//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "Core/PlayFabError.h"
#include "Core/PlayFabMatchmakerDataModels.h"
#include "Core/PlayFabSettings.h"
#include "PlayFabAPISettings.h"
#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"

namespace PlayFab
{
    /**
     * Main interface for PlayFab Sdk, specifically all Matchmaker APIs
     */
    class PLAYFABCPP_API UPlayFabMatchmakerInstanceAPI
    {
    public:
        DECLARE_DELEGATE_OneParam(FAuthUserDelegate, const MatchmakerModels::FAuthUserResponse&);
        DECLARE_DELEGATE_OneParam(FPlayerJoinedDelegate, const MatchmakerModels::FPlayerJoinedResponse&);
        DECLARE_DELEGATE_OneParam(FPlayerLeftDelegate, const MatchmakerModels::FPlayerLeftResponse&);
        DECLARE_DELEGATE_OneParam(FStartGameDelegate, const MatchmakerModels::FStartGameResponse&);
        DECLARE_DELEGATE_OneParam(FUserInfoDelegate, const MatchmakerModels::FUserInfoResponse&);


    private:
        TSharedPtr<UPlayFabAPISettings> settings;
        TSharedPtr<UPlayFabAuthenticationContext> authContext;
    
    public:
        UPlayFabMatchmakerInstanceAPI();
        explicit UPlayFabMatchmakerInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings);
        explicit UPlayFabMatchmakerInstanceAPI(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        UPlayFabMatchmakerInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings, TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        ~UPlayFabMatchmakerInstanceAPI();
        UPlayFabMatchmakerInstanceAPI(const UPlayFabMatchmakerInstanceAPI& source) = delete; // disable copy
        UPlayFabMatchmakerInstanceAPI(UPlayFabMatchmakerInstanceAPI&&) = delete; // disable move
        UPlayFabMatchmakerInstanceAPI& operator=(const UPlayFabMatchmakerInstanceAPI& source) = delete; // disable assignment
        UPlayFabMatchmakerInstanceAPI& operator=(UPlayFabMatchmakerInstanceAPI&& other) = delete; // disable move assignment

        int GetPendingCalls() const;
        TSharedPtr<UPlayFabAPISettings> GetSettings() const;
        void SetSettings(TSharedPtr<UPlayFabAPISettings> apiSettings);
        TSharedPtr<UPlayFabAuthenticationContext> GetAuthenticationContext() const;
        void SetAuthenticationContext(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        void ForgetAllCredentials();

    private:
        TSharedPtr<UPlayFabAuthenticationContext> GetOrCreateAuthenticationContext();
    
    public:


        // ------------ Generated API calls
        /**
         * Validates a user with the PlayFab service
         * This API allows the external match-making service to confirm that the user has a valid Session Ticket for the title, in order to securely enable match-making. The client passes the user's Session Ticket to the external match-making service, which then passes the Session Ticket in as the AuthorizationTicket in this call.
         */
        bool AuthUser(MatchmakerModels::FAuthUserRequest& request, const FAuthUserDelegate& SuccessDelegate = FAuthUserDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Informs the PlayFab game server hosting service that the indicated user has joined the Game Server Instance specified
        bool PlayerJoined(MatchmakerModels::FPlayerJoinedRequest& request, const FPlayerJoinedDelegate& SuccessDelegate = FPlayerJoinedDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Informs the PlayFab game server hosting service that the indicated user has left the Game Server Instance specified
        bool PlayerLeft(MatchmakerModels::FPlayerLeftRequest& request, const FPlayerLeftDelegate& SuccessDelegate = FPlayerLeftDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Instructs the PlayFab game server hosting service to instantiate a new Game Server Instance
        bool StartGame(MatchmakerModels::FStartGameRequest& request, const FStartGameDelegate& SuccessDelegate = FStartGameDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Retrieves the relevant details for a specified user, which the external match-making service can then use to compute
         * effective matches
         */
        bool UserInfo(MatchmakerModels::FUserInfoRequest& request, const FUserInfoDelegate& SuccessDelegate = FUserInfoDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());

    private:
        // ------------ Generated result handlers
        void OnAuthUserResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAuthUserDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnPlayerJoinedResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPlayerJoinedDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnPlayerLeftResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPlayerLeftDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnStartGameResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FStartGameDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnUserInfoResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUserInfoDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);

    };
};
