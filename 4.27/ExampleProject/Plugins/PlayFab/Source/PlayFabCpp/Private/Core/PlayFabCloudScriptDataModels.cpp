//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "Core/PlayFabCloudScriptDataModels.h"
#include "Core/PlayFabJsonHelpers.h"

using namespace PlayFab;
using namespace PlayFab::CloudScriptModels;

PlayFab::CloudScriptModels::FAdCampaignAttributionModel::~FAdCampaignAttributionModel()
{

}

void PlayFab::CloudScriptModels::FAdCampaignAttributionModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("AttributedAt"));
    writeDatetime(AttributedAt, writer);

    if (CampaignId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CampaignId"));
        writer->WriteValue(CampaignId);
    }

    if (Platform.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writer->WriteValue(Platform);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FAdCampaignAttributionModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AttributedAtValue = obj->TryGetField(TEXT("AttributedAt"));
    if (AttributedAtValue.IsValid())
        AttributedAt = readDatetime(AttributedAtValue);


    const TSharedPtr<FJsonValue> CampaignIdValue = obj->TryGetField(TEXT("CampaignId"));
    if (CampaignIdValue.IsValid() && !CampaignIdValue->IsNull())
    {
        FString TmpValue;
        if (CampaignIdValue->TryGetString(TmpValue)) { CampaignId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlatformValue = obj->TryGetField(TEXT("Platform"));
    if (PlatformValue.IsValid() && !PlatformValue->IsNull())
    {
        FString TmpValue;
        if (PlatformValue->TryGetString(TmpValue)) { Platform = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::CloudScriptModels::writeCloudScriptRevisionOptionEnumJSON(CloudScriptRevisionOption enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case CloudScriptRevisionOptionLive: writer->WriteValue(TEXT("Live")); break;
    case CloudScriptRevisionOptionLatest: writer->WriteValue(TEXT("Latest")); break;
    case CloudScriptRevisionOptionSpecific: writer->WriteValue(TEXT("Specific")); break;
    }
}

CloudScriptModels::CloudScriptRevisionOption PlayFab::CloudScriptModels::readCloudScriptRevisionOptionFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readCloudScriptRevisionOptionFromValue(value.IsValid() ? value->AsString() : "");
}

CloudScriptModels::CloudScriptRevisionOption PlayFab::CloudScriptModels::readCloudScriptRevisionOptionFromValue(const FString& value)
{
    static TMap<FString, CloudScriptRevisionOption> _CloudScriptRevisionOptionMap;
    if (_CloudScriptRevisionOptionMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _CloudScriptRevisionOptionMap.Add(TEXT("Live"), CloudScriptRevisionOptionLive);
        _CloudScriptRevisionOptionMap.Add(TEXT("Latest"), CloudScriptRevisionOptionLatest);
        _CloudScriptRevisionOptionMap.Add(TEXT("Specific"), CloudScriptRevisionOptionSpecific);

    }

    if (!value.IsEmpty())
    {
        auto output = _CloudScriptRevisionOptionMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return CloudScriptRevisionOptionLive; // Basically critical fail
}

void PlayFab::CloudScriptModels::writeEmailVerificationStatusEnumJSON(EmailVerificationStatus enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case EmailVerificationStatusUnverified: writer->WriteValue(TEXT("Unverified")); break;
    case EmailVerificationStatusPending: writer->WriteValue(TEXT("Pending")); break;
    case EmailVerificationStatusConfirmed: writer->WriteValue(TEXT("Confirmed")); break;
    }
}

CloudScriptModels::EmailVerificationStatus PlayFab::CloudScriptModels::readEmailVerificationStatusFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readEmailVerificationStatusFromValue(value.IsValid() ? value->AsString() : "");
}

CloudScriptModels::EmailVerificationStatus PlayFab::CloudScriptModels::readEmailVerificationStatusFromValue(const FString& value)
{
    static TMap<FString, EmailVerificationStatus> _EmailVerificationStatusMap;
    if (_EmailVerificationStatusMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _EmailVerificationStatusMap.Add(TEXT("Unverified"), EmailVerificationStatusUnverified);
        _EmailVerificationStatusMap.Add(TEXT("Pending"), EmailVerificationStatusPending);
        _EmailVerificationStatusMap.Add(TEXT("Confirmed"), EmailVerificationStatusConfirmed);

    }

    if (!value.IsEmpty())
    {
        auto output = _EmailVerificationStatusMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return EmailVerificationStatusUnverified; // Basically critical fail
}

PlayFab::CloudScriptModels::FContactEmailInfoModel::~FContactEmailInfoModel()
{

}

void PlayFab::CloudScriptModels::FContactEmailInfoModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (EmailAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EmailAddress"));
        writer->WriteValue(EmailAddress);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (VerificationStatus.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("VerificationStatus"));
        writeEmailVerificationStatusEnumJSON(VerificationStatus, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FContactEmailInfoModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EmailAddressValue = obj->TryGetField(TEXT("EmailAddress"));
    if (EmailAddressValue.IsValid() && !EmailAddressValue->IsNull())
    {
        FString TmpValue;
        if (EmailAddressValue->TryGetString(TmpValue)) { EmailAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    VerificationStatus = readEmailVerificationStatusFromValue(obj->TryGetField(TEXT("VerificationStatus")));

    return HasSucceeded;
}

void PlayFab::CloudScriptModels::writeContinentCodeEnumJSON(ContinentCode enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case ContinentCodeAF: writer->WriteValue(TEXT("AF")); break;
    case ContinentCodeAN: writer->WriteValue(TEXT("AN")); break;
    case ContinentCodeAS: writer->WriteValue(TEXT("AS")); break;
    case ContinentCodeEU: writer->WriteValue(TEXT("EU")); break;
    case ContinentCodeNA: writer->WriteValue(TEXT("NA")); break;
    case ContinentCodeOC: writer->WriteValue(TEXT("OC")); break;
    case ContinentCodeSA: writer->WriteValue(TEXT("SA")); break;
    }
}

CloudScriptModels::ContinentCode PlayFab::CloudScriptModels::readContinentCodeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readContinentCodeFromValue(value.IsValid() ? value->AsString() : "");
}

CloudScriptModels::ContinentCode PlayFab::CloudScriptModels::readContinentCodeFromValue(const FString& value)
{
    static TMap<FString, ContinentCode> _ContinentCodeMap;
    if (_ContinentCodeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _ContinentCodeMap.Add(TEXT("AF"), ContinentCodeAF);
        _ContinentCodeMap.Add(TEXT("AN"), ContinentCodeAN);
        _ContinentCodeMap.Add(TEXT("AS"), ContinentCodeAS);
        _ContinentCodeMap.Add(TEXT("EU"), ContinentCodeEU);
        _ContinentCodeMap.Add(TEXT("NA"), ContinentCodeNA);
        _ContinentCodeMap.Add(TEXT("OC"), ContinentCodeOC);
        _ContinentCodeMap.Add(TEXT("SA"), ContinentCodeSA);

    }

    if (!value.IsEmpty())
    {
        auto output = _ContinentCodeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return ContinentCodeAF; // Basically critical fail
}

void PlayFab::CloudScriptModels::writeCountryCodeEnumJSON(CountryCode enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case CountryCodeAF: writer->WriteValue(TEXT("AF")); break;
    case CountryCodeAX: writer->WriteValue(TEXT("AX")); break;
    case CountryCodeAL: writer->WriteValue(TEXT("AL")); break;
    case CountryCodeDZ: writer->WriteValue(TEXT("DZ")); break;
    case CountryCodeAS: writer->WriteValue(TEXT("AS")); break;
    case CountryCodeAD: writer->WriteValue(TEXT("AD")); break;
    case CountryCodeAO: writer->WriteValue(TEXT("AO")); break;
    case CountryCodeAI: writer->WriteValue(TEXT("AI")); break;
    case CountryCodeAQ: writer->WriteValue(TEXT("AQ")); break;
    case CountryCodeAG: writer->WriteValue(TEXT("AG")); break;
    case CountryCodeAR: writer->WriteValue(TEXT("AR")); break;
    case CountryCodeAM: writer->WriteValue(TEXT("AM")); break;
    case CountryCodeAW: writer->WriteValue(TEXT("AW")); break;
    case CountryCodeAU: writer->WriteValue(TEXT("AU")); break;
    case CountryCodeAT: writer->WriteValue(TEXT("AT")); break;
    case CountryCodeAZ: writer->WriteValue(TEXT("AZ")); break;
    case CountryCodeBS: writer->WriteValue(TEXT("BS")); break;
    case CountryCodeBH: writer->WriteValue(TEXT("BH")); break;
    case CountryCodeBD: writer->WriteValue(TEXT("BD")); break;
    case CountryCodeBB: writer->WriteValue(TEXT("BB")); break;
    case CountryCodeBY: writer->WriteValue(TEXT("BY")); break;
    case CountryCodeBE: writer->WriteValue(TEXT("BE")); break;
    case CountryCodeBZ: writer->WriteValue(TEXT("BZ")); break;
    case CountryCodeBJ: writer->WriteValue(TEXT("BJ")); break;
    case CountryCodeBM: writer->WriteValue(TEXT("BM")); break;
    case CountryCodeBT: writer->WriteValue(TEXT("BT")); break;
    case CountryCodeBO: writer->WriteValue(TEXT("BO")); break;
    case CountryCodeBQ: writer->WriteValue(TEXT("BQ")); break;
    case CountryCodeBA: writer->WriteValue(TEXT("BA")); break;
    case CountryCodeBW: writer->WriteValue(TEXT("BW")); break;
    case CountryCodeBV: writer->WriteValue(TEXT("BV")); break;
    case CountryCodeBR: writer->WriteValue(TEXT("BR")); break;
    case CountryCodeIO: writer->WriteValue(TEXT("IO")); break;
    case CountryCodeBN: writer->WriteValue(TEXT("BN")); break;
    case CountryCodeBG: writer->WriteValue(TEXT("BG")); break;
    case CountryCodeBF: writer->WriteValue(TEXT("BF")); break;
    case CountryCodeBI: writer->WriteValue(TEXT("BI")); break;
    case CountryCodeKH: writer->WriteValue(TEXT("KH")); break;
    case CountryCodeCM: writer->WriteValue(TEXT("CM")); break;
    case CountryCodeCA: writer->WriteValue(TEXT("CA")); break;
    case CountryCodeCV: writer->WriteValue(TEXT("CV")); break;
    case CountryCodeKY: writer->WriteValue(TEXT("KY")); break;
    case CountryCodeCF: writer->WriteValue(TEXT("CF")); break;
    case CountryCodeTD: writer->WriteValue(TEXT("TD")); break;
    case CountryCodeCL: writer->WriteValue(TEXT("CL")); break;
    case CountryCodeCN: writer->WriteValue(TEXT("CN")); break;
    case CountryCodeCX: writer->WriteValue(TEXT("CX")); break;
    case CountryCodeCC: writer->WriteValue(TEXT("CC")); break;
    case CountryCodeCO: writer->WriteValue(TEXT("CO")); break;
    case CountryCodeKM: writer->WriteValue(TEXT("KM")); break;
    case CountryCodeCG: writer->WriteValue(TEXT("CG")); break;
    case CountryCodeCD: writer->WriteValue(TEXT("CD")); break;
    case CountryCodeCK: writer->WriteValue(TEXT("CK")); break;
    case CountryCodeCR: writer->WriteValue(TEXT("CR")); break;
    case CountryCodeCI: writer->WriteValue(TEXT("CI")); break;
    case CountryCodeHR: writer->WriteValue(TEXT("HR")); break;
    case CountryCodeCU: writer->WriteValue(TEXT("CU")); break;
    case CountryCodeCW: writer->WriteValue(TEXT("CW")); break;
    case CountryCodeCY: writer->WriteValue(TEXT("CY")); break;
    case CountryCodeCZ: writer->WriteValue(TEXT("CZ")); break;
    case CountryCodeDK: writer->WriteValue(TEXT("DK")); break;
    case CountryCodeDJ: writer->WriteValue(TEXT("DJ")); break;
    case CountryCodeDM: writer->WriteValue(TEXT("DM")); break;
    case CountryCodeDO: writer->WriteValue(TEXT("DO")); break;
    case CountryCodeEC: writer->WriteValue(TEXT("EC")); break;
    case CountryCodeEG: writer->WriteValue(TEXT("EG")); break;
    case CountryCodeSV: writer->WriteValue(TEXT("SV")); break;
    case CountryCodeGQ: writer->WriteValue(TEXT("GQ")); break;
    case CountryCodeER: writer->WriteValue(TEXT("ER")); break;
    case CountryCodeEE: writer->WriteValue(TEXT("EE")); break;
    case CountryCodeET: writer->WriteValue(TEXT("ET")); break;
    case CountryCodeFK: writer->WriteValue(TEXT("FK")); break;
    case CountryCodeFO: writer->WriteValue(TEXT("FO")); break;
    case CountryCodeFJ: writer->WriteValue(TEXT("FJ")); break;
    case CountryCodeFI: writer->WriteValue(TEXT("FI")); break;
    case CountryCodeFR: writer->WriteValue(TEXT("FR")); break;
    case CountryCodeGF: writer->WriteValue(TEXT("GF")); break;
    case CountryCodePF: writer->WriteValue(TEXT("PF")); break;
    case CountryCodeTF: writer->WriteValue(TEXT("TF")); break;
    case CountryCodeGA: writer->WriteValue(TEXT("GA")); break;
    case CountryCodeGM: writer->WriteValue(TEXT("GM")); break;
    case CountryCodeGE: writer->WriteValue(TEXT("GE")); break;
    case CountryCodeDE: writer->WriteValue(TEXT("DE")); break;
    case CountryCodeGH: writer->WriteValue(TEXT("GH")); break;
    case CountryCodeGI: writer->WriteValue(TEXT("GI")); break;
    case CountryCodeGR: writer->WriteValue(TEXT("GR")); break;
    case CountryCodeGL: writer->WriteValue(TEXT("GL")); break;
    case CountryCodeGD: writer->WriteValue(TEXT("GD")); break;
    case CountryCodeGP: writer->WriteValue(TEXT("GP")); break;
    case CountryCodeGU: writer->WriteValue(TEXT("GU")); break;
    case CountryCodeGT: writer->WriteValue(TEXT("GT")); break;
    case CountryCodeGG: writer->WriteValue(TEXT("GG")); break;
    case CountryCodeGN: writer->WriteValue(TEXT("GN")); break;
    case CountryCodeGW: writer->WriteValue(TEXT("GW")); break;
    case CountryCodeGY: writer->WriteValue(TEXT("GY")); break;
    case CountryCodeHT: writer->WriteValue(TEXT("HT")); break;
    case CountryCodeHM: writer->WriteValue(TEXT("HM")); break;
    case CountryCodeVA: writer->WriteValue(TEXT("VA")); break;
    case CountryCodeHN: writer->WriteValue(TEXT("HN")); break;
    case CountryCodeHK: writer->WriteValue(TEXT("HK")); break;
    case CountryCodeHU: writer->WriteValue(TEXT("HU")); break;
    case CountryCodeIS: writer->WriteValue(TEXT("IS")); break;
    case CountryCodeIN: writer->WriteValue(TEXT("IN")); break;
    case CountryCodeID: writer->WriteValue(TEXT("ID")); break;
    case CountryCodeIR: writer->WriteValue(TEXT("IR")); break;
    case CountryCodeIQ: writer->WriteValue(TEXT("IQ")); break;
    case CountryCodeIE: writer->WriteValue(TEXT("IE")); break;
    case CountryCodeIM: writer->WriteValue(TEXT("IM")); break;
    case CountryCodeIL: writer->WriteValue(TEXT("IL")); break;
    case CountryCodeIT: writer->WriteValue(TEXT("IT")); break;
    case CountryCodeJM: writer->WriteValue(TEXT("JM")); break;
    case CountryCodeJP: writer->WriteValue(TEXT("JP")); break;
    case CountryCodeJE: writer->WriteValue(TEXT("JE")); break;
    case CountryCodeJO: writer->WriteValue(TEXT("JO")); break;
    case CountryCodeKZ: writer->WriteValue(TEXT("KZ")); break;
    case CountryCodeKE: writer->WriteValue(TEXT("KE")); break;
    case CountryCodeKI: writer->WriteValue(TEXT("KI")); break;
    case CountryCodeKP: writer->WriteValue(TEXT("KP")); break;
    case CountryCodeKR: writer->WriteValue(TEXT("KR")); break;
    case CountryCodeKW: writer->WriteValue(TEXT("KW")); break;
    case CountryCodeKG: writer->WriteValue(TEXT("KG")); break;
    case CountryCodeLA: writer->WriteValue(TEXT("LA")); break;
    case CountryCodeLV: writer->WriteValue(TEXT("LV")); break;
    case CountryCodeLB: writer->WriteValue(TEXT("LB")); break;
    case CountryCodeLS: writer->WriteValue(TEXT("LS")); break;
    case CountryCodeLR: writer->WriteValue(TEXT("LR")); break;
    case CountryCodeLY: writer->WriteValue(TEXT("LY")); break;
    case CountryCodeLI: writer->WriteValue(TEXT("LI")); break;
    case CountryCodeLT: writer->WriteValue(TEXT("LT")); break;
    case CountryCodeLU: writer->WriteValue(TEXT("LU")); break;
    case CountryCodeMO: writer->WriteValue(TEXT("MO")); break;
    case CountryCodeMK: writer->WriteValue(TEXT("MK")); break;
    case CountryCodeMG: writer->WriteValue(TEXT("MG")); break;
    case CountryCodeMW: writer->WriteValue(TEXT("MW")); break;
    case CountryCodeMY: writer->WriteValue(TEXT("MY")); break;
    case CountryCodeMV: writer->WriteValue(TEXT("MV")); break;
    case CountryCodeML: writer->WriteValue(TEXT("ML")); break;
    case CountryCodeMT: writer->WriteValue(TEXT("MT")); break;
    case CountryCodeMH: writer->WriteValue(TEXT("MH")); break;
    case CountryCodeMQ: writer->WriteValue(TEXT("MQ")); break;
    case CountryCodeMR: writer->WriteValue(TEXT("MR")); break;
    case CountryCodeMU: writer->WriteValue(TEXT("MU")); break;
    case CountryCodeYT: writer->WriteValue(TEXT("YT")); break;
    case CountryCodeMX: writer->WriteValue(TEXT("MX")); break;
    case CountryCodeFM: writer->WriteValue(TEXT("FM")); break;
    case CountryCodeMD: writer->WriteValue(TEXT("MD")); break;
    case CountryCodeMC: writer->WriteValue(TEXT("MC")); break;
    case CountryCodeMN: writer->WriteValue(TEXT("MN")); break;
    case CountryCodeME: writer->WriteValue(TEXT("ME")); break;
    case CountryCodeMS: writer->WriteValue(TEXT("MS")); break;
    case CountryCodeMA: writer->WriteValue(TEXT("MA")); break;
    case CountryCodeMZ: writer->WriteValue(TEXT("MZ")); break;
    case CountryCodeMM: writer->WriteValue(TEXT("MM")); break;
    case CountryCodeNA: writer->WriteValue(TEXT("NA")); break;
    case CountryCodeNR: writer->WriteValue(TEXT("NR")); break;
    case CountryCodeNP: writer->WriteValue(TEXT("NP")); break;
    case CountryCodeNL: writer->WriteValue(TEXT("NL")); break;
    case CountryCodeNC: writer->WriteValue(TEXT("NC")); break;
    case CountryCodeNZ: writer->WriteValue(TEXT("NZ")); break;
    case CountryCodeNI: writer->WriteValue(TEXT("NI")); break;
    case CountryCodeNE: writer->WriteValue(TEXT("NE")); break;
    case CountryCodeNG: writer->WriteValue(TEXT("NG")); break;
    case CountryCodeNU: writer->WriteValue(TEXT("NU")); break;
    case CountryCodeNF: writer->WriteValue(TEXT("NF")); break;
    case CountryCodeMP: writer->WriteValue(TEXT("MP")); break;
    case CountryCodeNO: writer->WriteValue(TEXT("NO")); break;
    case CountryCodeOM: writer->WriteValue(TEXT("OM")); break;
    case CountryCodePK: writer->WriteValue(TEXT("PK")); break;
    case CountryCodePW: writer->WriteValue(TEXT("PW")); break;
    case CountryCodePS: writer->WriteValue(TEXT("PS")); break;
    case CountryCodePA: writer->WriteValue(TEXT("PA")); break;
    case CountryCodePG: writer->WriteValue(TEXT("PG")); break;
    case CountryCodePY: writer->WriteValue(TEXT("PY")); break;
    case CountryCodePE: writer->WriteValue(TEXT("PE")); break;
    case CountryCodePH: writer->WriteValue(TEXT("PH")); break;
    case CountryCodePN: writer->WriteValue(TEXT("PN")); break;
    case CountryCodePL: writer->WriteValue(TEXT("PL")); break;
    case CountryCodePT: writer->WriteValue(TEXT("PT")); break;
    case CountryCodePR: writer->WriteValue(TEXT("PR")); break;
    case CountryCodeQA: writer->WriteValue(TEXT("QA")); break;
    case CountryCodeRE: writer->WriteValue(TEXT("RE")); break;
    case CountryCodeRO: writer->WriteValue(TEXT("RO")); break;
    case CountryCodeRU: writer->WriteValue(TEXT("RU")); break;
    case CountryCodeRW: writer->WriteValue(TEXT("RW")); break;
    case CountryCodeBL: writer->WriteValue(TEXT("BL")); break;
    case CountryCodeSH: writer->WriteValue(TEXT("SH")); break;
    case CountryCodeKN: writer->WriteValue(TEXT("KN")); break;
    case CountryCodeLC: writer->WriteValue(TEXT("LC")); break;
    case CountryCodeMF: writer->WriteValue(TEXT("MF")); break;
    case CountryCodePM: writer->WriteValue(TEXT("PM")); break;
    case CountryCodeVC: writer->WriteValue(TEXT("VC")); break;
    case CountryCodeWS: writer->WriteValue(TEXT("WS")); break;
    case CountryCodeSM: writer->WriteValue(TEXT("SM")); break;
    case CountryCodeST: writer->WriteValue(TEXT("ST")); break;
    case CountryCodeSA: writer->WriteValue(TEXT("SA")); break;
    case CountryCodeSN: writer->WriteValue(TEXT("SN")); break;
    case CountryCodeRS: writer->WriteValue(TEXT("RS")); break;
    case CountryCodeSC: writer->WriteValue(TEXT("SC")); break;
    case CountryCodeSL: writer->WriteValue(TEXT("SL")); break;
    case CountryCodeSG: writer->WriteValue(TEXT("SG")); break;
    case CountryCodeSX: writer->WriteValue(TEXT("SX")); break;
    case CountryCodeSK: writer->WriteValue(TEXT("SK")); break;
    case CountryCodeSI: writer->WriteValue(TEXT("SI")); break;
    case CountryCodeSB: writer->WriteValue(TEXT("SB")); break;
    case CountryCodeSO: writer->WriteValue(TEXT("SO")); break;
    case CountryCodeZA: writer->WriteValue(TEXT("ZA")); break;
    case CountryCodeGS: writer->WriteValue(TEXT("GS")); break;
    case CountryCodeSS: writer->WriteValue(TEXT("SS")); break;
    case CountryCodeES: writer->WriteValue(TEXT("ES")); break;
    case CountryCodeLK: writer->WriteValue(TEXT("LK")); break;
    case CountryCodeSD: writer->WriteValue(TEXT("SD")); break;
    case CountryCodeSR: writer->WriteValue(TEXT("SR")); break;
    case CountryCodeSJ: writer->WriteValue(TEXT("SJ")); break;
    case CountryCodeSZ: writer->WriteValue(TEXT("SZ")); break;
    case CountryCodeSE: writer->WriteValue(TEXT("SE")); break;
    case CountryCodeCH: writer->WriteValue(TEXT("CH")); break;
    case CountryCodeSY: writer->WriteValue(TEXT("SY")); break;
    case CountryCodeTW: writer->WriteValue(TEXT("TW")); break;
    case CountryCodeTJ: writer->WriteValue(TEXT("TJ")); break;
    case CountryCodeTZ: writer->WriteValue(TEXT("TZ")); break;
    case CountryCodeTH: writer->WriteValue(TEXT("TH")); break;
    case CountryCodeTL: writer->WriteValue(TEXT("TL")); break;
    case CountryCodeTG: writer->WriteValue(TEXT("TG")); break;
    case CountryCodeTK: writer->WriteValue(TEXT("TK")); break;
    case CountryCodeTO: writer->WriteValue(TEXT("TO")); break;
    case CountryCodeTT: writer->WriteValue(TEXT("TT")); break;
    case CountryCodeTN: writer->WriteValue(TEXT("TN")); break;
    case CountryCodeTR: writer->WriteValue(TEXT("TR")); break;
    case CountryCodeTM: writer->WriteValue(TEXT("TM")); break;
    case CountryCodeTC: writer->WriteValue(TEXT("TC")); break;
    case CountryCodeTV: writer->WriteValue(TEXT("TV")); break;
    case CountryCodeUG: writer->WriteValue(TEXT("UG")); break;
    case CountryCodeUA: writer->WriteValue(TEXT("UA")); break;
    case CountryCodeAE: writer->WriteValue(TEXT("AE")); break;
    case CountryCodeGB: writer->WriteValue(TEXT("GB")); break;
    case CountryCodeUS: writer->WriteValue(TEXT("US")); break;
    case CountryCodeUM: writer->WriteValue(TEXT("UM")); break;
    case CountryCodeUY: writer->WriteValue(TEXT("UY")); break;
    case CountryCodeUZ: writer->WriteValue(TEXT("UZ")); break;
    case CountryCodeVU: writer->WriteValue(TEXT("VU")); break;
    case CountryCodeVE: writer->WriteValue(TEXT("VE")); break;
    case CountryCodeVN: writer->WriteValue(TEXT("VN")); break;
    case CountryCodeVG: writer->WriteValue(TEXT("VG")); break;
    case CountryCodeVI: writer->WriteValue(TEXT("VI")); break;
    case CountryCodeWF: writer->WriteValue(TEXT("WF")); break;
    case CountryCodeEH: writer->WriteValue(TEXT("EH")); break;
    case CountryCodeYE: writer->WriteValue(TEXT("YE")); break;
    case CountryCodeZM: writer->WriteValue(TEXT("ZM")); break;
    case CountryCodeZW: writer->WriteValue(TEXT("ZW")); break;
    }
}

CloudScriptModels::CountryCode PlayFab::CloudScriptModels::readCountryCodeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readCountryCodeFromValue(value.IsValid() ? value->AsString() : "");
}

CloudScriptModels::CountryCode PlayFab::CloudScriptModels::readCountryCodeFromValue(const FString& value)
{
    static TMap<FString, CountryCode> _CountryCodeMap;
    if (_CountryCodeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _CountryCodeMap.Add(TEXT("AF"), CountryCodeAF);
        _CountryCodeMap.Add(TEXT("AX"), CountryCodeAX);
        _CountryCodeMap.Add(TEXT("AL"), CountryCodeAL);
        _CountryCodeMap.Add(TEXT("DZ"), CountryCodeDZ);
        _CountryCodeMap.Add(TEXT("AS"), CountryCodeAS);
        _CountryCodeMap.Add(TEXT("AD"), CountryCodeAD);
        _CountryCodeMap.Add(TEXT("AO"), CountryCodeAO);
        _CountryCodeMap.Add(TEXT("AI"), CountryCodeAI);
        _CountryCodeMap.Add(TEXT("AQ"), CountryCodeAQ);
        _CountryCodeMap.Add(TEXT("AG"), CountryCodeAG);
        _CountryCodeMap.Add(TEXT("AR"), CountryCodeAR);
        _CountryCodeMap.Add(TEXT("AM"), CountryCodeAM);
        _CountryCodeMap.Add(TEXT("AW"), CountryCodeAW);
        _CountryCodeMap.Add(TEXT("AU"), CountryCodeAU);
        _CountryCodeMap.Add(TEXT("AT"), CountryCodeAT);
        _CountryCodeMap.Add(TEXT("AZ"), CountryCodeAZ);
        _CountryCodeMap.Add(TEXT("BS"), CountryCodeBS);
        _CountryCodeMap.Add(TEXT("BH"), CountryCodeBH);
        _CountryCodeMap.Add(TEXT("BD"), CountryCodeBD);
        _CountryCodeMap.Add(TEXT("BB"), CountryCodeBB);
        _CountryCodeMap.Add(TEXT("BY"), CountryCodeBY);
        _CountryCodeMap.Add(TEXT("BE"), CountryCodeBE);
        _CountryCodeMap.Add(TEXT("BZ"), CountryCodeBZ);
        _CountryCodeMap.Add(TEXT("BJ"), CountryCodeBJ);
        _CountryCodeMap.Add(TEXT("BM"), CountryCodeBM);
        _CountryCodeMap.Add(TEXT("BT"), CountryCodeBT);
        _CountryCodeMap.Add(TEXT("BO"), CountryCodeBO);
        _CountryCodeMap.Add(TEXT("BQ"), CountryCodeBQ);
        _CountryCodeMap.Add(TEXT("BA"), CountryCodeBA);
        _CountryCodeMap.Add(TEXT("BW"), CountryCodeBW);
        _CountryCodeMap.Add(TEXT("BV"), CountryCodeBV);
        _CountryCodeMap.Add(TEXT("BR"), CountryCodeBR);
        _CountryCodeMap.Add(TEXT("IO"), CountryCodeIO);
        _CountryCodeMap.Add(TEXT("BN"), CountryCodeBN);
        _CountryCodeMap.Add(TEXT("BG"), CountryCodeBG);
        _CountryCodeMap.Add(TEXT("BF"), CountryCodeBF);
        _CountryCodeMap.Add(TEXT("BI"), CountryCodeBI);
        _CountryCodeMap.Add(TEXT("KH"), CountryCodeKH);
        _CountryCodeMap.Add(TEXT("CM"), CountryCodeCM);
        _CountryCodeMap.Add(TEXT("CA"), CountryCodeCA);
        _CountryCodeMap.Add(TEXT("CV"), CountryCodeCV);
        _CountryCodeMap.Add(TEXT("KY"), CountryCodeKY);
        _CountryCodeMap.Add(TEXT("CF"), CountryCodeCF);
        _CountryCodeMap.Add(TEXT("TD"), CountryCodeTD);
        _CountryCodeMap.Add(TEXT("CL"), CountryCodeCL);
        _CountryCodeMap.Add(TEXT("CN"), CountryCodeCN);
        _CountryCodeMap.Add(TEXT("CX"), CountryCodeCX);
        _CountryCodeMap.Add(TEXT("CC"), CountryCodeCC);
        _CountryCodeMap.Add(TEXT("CO"), CountryCodeCO);
        _CountryCodeMap.Add(TEXT("KM"), CountryCodeKM);
        _CountryCodeMap.Add(TEXT("CG"), CountryCodeCG);
        _CountryCodeMap.Add(TEXT("CD"), CountryCodeCD);
        _CountryCodeMap.Add(TEXT("CK"), CountryCodeCK);
        _CountryCodeMap.Add(TEXT("CR"), CountryCodeCR);
        _CountryCodeMap.Add(TEXT("CI"), CountryCodeCI);
        _CountryCodeMap.Add(TEXT("HR"), CountryCodeHR);
        _CountryCodeMap.Add(TEXT("CU"), CountryCodeCU);
        _CountryCodeMap.Add(TEXT("CW"), CountryCodeCW);
        _CountryCodeMap.Add(TEXT("CY"), CountryCodeCY);
        _CountryCodeMap.Add(TEXT("CZ"), CountryCodeCZ);
        _CountryCodeMap.Add(TEXT("DK"), CountryCodeDK);
        _CountryCodeMap.Add(TEXT("DJ"), CountryCodeDJ);
        _CountryCodeMap.Add(TEXT("DM"), CountryCodeDM);
        _CountryCodeMap.Add(TEXT("DO"), CountryCodeDO);
        _CountryCodeMap.Add(TEXT("EC"), CountryCodeEC);
        _CountryCodeMap.Add(TEXT("EG"), CountryCodeEG);
        _CountryCodeMap.Add(TEXT("SV"), CountryCodeSV);
        _CountryCodeMap.Add(TEXT("GQ"), CountryCodeGQ);
        _CountryCodeMap.Add(TEXT("ER"), CountryCodeER);
        _CountryCodeMap.Add(TEXT("EE"), CountryCodeEE);
        _CountryCodeMap.Add(TEXT("ET"), CountryCodeET);
        _CountryCodeMap.Add(TEXT("FK"), CountryCodeFK);
        _CountryCodeMap.Add(TEXT("FO"), CountryCodeFO);
        _CountryCodeMap.Add(TEXT("FJ"), CountryCodeFJ);
        _CountryCodeMap.Add(TEXT("FI"), CountryCodeFI);
        _CountryCodeMap.Add(TEXT("FR"), CountryCodeFR);
        _CountryCodeMap.Add(TEXT("GF"), CountryCodeGF);
        _CountryCodeMap.Add(TEXT("PF"), CountryCodePF);
        _CountryCodeMap.Add(TEXT("TF"), CountryCodeTF);
        _CountryCodeMap.Add(TEXT("GA"), CountryCodeGA);
        _CountryCodeMap.Add(TEXT("GM"), CountryCodeGM);
        _CountryCodeMap.Add(TEXT("GE"), CountryCodeGE);
        _CountryCodeMap.Add(TEXT("DE"), CountryCodeDE);
        _CountryCodeMap.Add(TEXT("GH"), CountryCodeGH);
        _CountryCodeMap.Add(TEXT("GI"), CountryCodeGI);
        _CountryCodeMap.Add(TEXT("GR"), CountryCodeGR);
        _CountryCodeMap.Add(TEXT("GL"), CountryCodeGL);
        _CountryCodeMap.Add(TEXT("GD"), CountryCodeGD);
        _CountryCodeMap.Add(TEXT("GP"), CountryCodeGP);
        _CountryCodeMap.Add(TEXT("GU"), CountryCodeGU);
        _CountryCodeMap.Add(TEXT("GT"), CountryCodeGT);
        _CountryCodeMap.Add(TEXT("GG"), CountryCodeGG);
        _CountryCodeMap.Add(TEXT("GN"), CountryCodeGN);
        _CountryCodeMap.Add(TEXT("GW"), CountryCodeGW);
        _CountryCodeMap.Add(TEXT("GY"), CountryCodeGY);
        _CountryCodeMap.Add(TEXT("HT"), CountryCodeHT);
        _CountryCodeMap.Add(TEXT("HM"), CountryCodeHM);
        _CountryCodeMap.Add(TEXT("VA"), CountryCodeVA);
        _CountryCodeMap.Add(TEXT("HN"), CountryCodeHN);
        _CountryCodeMap.Add(TEXT("HK"), CountryCodeHK);
        _CountryCodeMap.Add(TEXT("HU"), CountryCodeHU);
        _CountryCodeMap.Add(TEXT("IS"), CountryCodeIS);
        _CountryCodeMap.Add(TEXT("IN"), CountryCodeIN);
        _CountryCodeMap.Add(TEXT("ID"), CountryCodeID);
        _CountryCodeMap.Add(TEXT("IR"), CountryCodeIR);
        _CountryCodeMap.Add(TEXT("IQ"), CountryCodeIQ);
        _CountryCodeMap.Add(TEXT("IE"), CountryCodeIE);
        _CountryCodeMap.Add(TEXT("IM"), CountryCodeIM);
        _CountryCodeMap.Add(TEXT("IL"), CountryCodeIL);
        _CountryCodeMap.Add(TEXT("IT"), CountryCodeIT);
        _CountryCodeMap.Add(TEXT("JM"), CountryCodeJM);
        _CountryCodeMap.Add(TEXT("JP"), CountryCodeJP);
        _CountryCodeMap.Add(TEXT("JE"), CountryCodeJE);
        _CountryCodeMap.Add(TEXT("JO"), CountryCodeJO);
        _CountryCodeMap.Add(TEXT("KZ"), CountryCodeKZ);
        _CountryCodeMap.Add(TEXT("KE"), CountryCodeKE);
        _CountryCodeMap.Add(TEXT("KI"), CountryCodeKI);
        _CountryCodeMap.Add(TEXT("KP"), CountryCodeKP);
        _CountryCodeMap.Add(TEXT("KR"), CountryCodeKR);
        _CountryCodeMap.Add(TEXT("KW"), CountryCodeKW);
        _CountryCodeMap.Add(TEXT("KG"), CountryCodeKG);
        _CountryCodeMap.Add(TEXT("LA"), CountryCodeLA);
        _CountryCodeMap.Add(TEXT("LV"), CountryCodeLV);
        _CountryCodeMap.Add(TEXT("LB"), CountryCodeLB);
        _CountryCodeMap.Add(TEXT("LS"), CountryCodeLS);
        _CountryCodeMap.Add(TEXT("LR"), CountryCodeLR);
        _CountryCodeMap.Add(TEXT("LY"), CountryCodeLY);
        _CountryCodeMap.Add(TEXT("LI"), CountryCodeLI);
        _CountryCodeMap.Add(TEXT("LT"), CountryCodeLT);
        _CountryCodeMap.Add(TEXT("LU"), CountryCodeLU);
        _CountryCodeMap.Add(TEXT("MO"), CountryCodeMO);
        _CountryCodeMap.Add(TEXT("MK"), CountryCodeMK);
        _CountryCodeMap.Add(TEXT("MG"), CountryCodeMG);
        _CountryCodeMap.Add(TEXT("MW"), CountryCodeMW);
        _CountryCodeMap.Add(TEXT("MY"), CountryCodeMY);
        _CountryCodeMap.Add(TEXT("MV"), CountryCodeMV);
        _CountryCodeMap.Add(TEXT("ML"), CountryCodeML);
        _CountryCodeMap.Add(TEXT("MT"), CountryCodeMT);
        _CountryCodeMap.Add(TEXT("MH"), CountryCodeMH);
        _CountryCodeMap.Add(TEXT("MQ"), CountryCodeMQ);
        _CountryCodeMap.Add(TEXT("MR"), CountryCodeMR);
        _CountryCodeMap.Add(TEXT("MU"), CountryCodeMU);
        _CountryCodeMap.Add(TEXT("YT"), CountryCodeYT);
        _CountryCodeMap.Add(TEXT("MX"), CountryCodeMX);
        _CountryCodeMap.Add(TEXT("FM"), CountryCodeFM);
        _CountryCodeMap.Add(TEXT("MD"), CountryCodeMD);
        _CountryCodeMap.Add(TEXT("MC"), CountryCodeMC);
        _CountryCodeMap.Add(TEXT("MN"), CountryCodeMN);
        _CountryCodeMap.Add(TEXT("ME"), CountryCodeME);
        _CountryCodeMap.Add(TEXT("MS"), CountryCodeMS);
        _CountryCodeMap.Add(TEXT("MA"), CountryCodeMA);
        _CountryCodeMap.Add(TEXT("MZ"), CountryCodeMZ);
        _CountryCodeMap.Add(TEXT("MM"), CountryCodeMM);
        _CountryCodeMap.Add(TEXT("NA"), CountryCodeNA);
        _CountryCodeMap.Add(TEXT("NR"), CountryCodeNR);
        _CountryCodeMap.Add(TEXT("NP"), CountryCodeNP);
        _CountryCodeMap.Add(TEXT("NL"), CountryCodeNL);
        _CountryCodeMap.Add(TEXT("NC"), CountryCodeNC);
        _CountryCodeMap.Add(TEXT("NZ"), CountryCodeNZ);
        _CountryCodeMap.Add(TEXT("NI"), CountryCodeNI);
        _CountryCodeMap.Add(TEXT("NE"), CountryCodeNE);
        _CountryCodeMap.Add(TEXT("NG"), CountryCodeNG);
        _CountryCodeMap.Add(TEXT("NU"), CountryCodeNU);
        _CountryCodeMap.Add(TEXT("NF"), CountryCodeNF);
        _CountryCodeMap.Add(TEXT("MP"), CountryCodeMP);
        _CountryCodeMap.Add(TEXT("NO"), CountryCodeNO);
        _CountryCodeMap.Add(TEXT("OM"), CountryCodeOM);
        _CountryCodeMap.Add(TEXT("PK"), CountryCodePK);
        _CountryCodeMap.Add(TEXT("PW"), CountryCodePW);
        _CountryCodeMap.Add(TEXT("PS"), CountryCodePS);
        _CountryCodeMap.Add(TEXT("PA"), CountryCodePA);
        _CountryCodeMap.Add(TEXT("PG"), CountryCodePG);
        _CountryCodeMap.Add(TEXT("PY"), CountryCodePY);
        _CountryCodeMap.Add(TEXT("PE"), CountryCodePE);
        _CountryCodeMap.Add(TEXT("PH"), CountryCodePH);
        _CountryCodeMap.Add(TEXT("PN"), CountryCodePN);
        _CountryCodeMap.Add(TEXT("PL"), CountryCodePL);
        _CountryCodeMap.Add(TEXT("PT"), CountryCodePT);
        _CountryCodeMap.Add(TEXT("PR"), CountryCodePR);
        _CountryCodeMap.Add(TEXT("QA"), CountryCodeQA);
        _CountryCodeMap.Add(TEXT("RE"), CountryCodeRE);
        _CountryCodeMap.Add(TEXT("RO"), CountryCodeRO);
        _CountryCodeMap.Add(TEXT("RU"), CountryCodeRU);
        _CountryCodeMap.Add(TEXT("RW"), CountryCodeRW);
        _CountryCodeMap.Add(TEXT("BL"), CountryCodeBL);
        _CountryCodeMap.Add(TEXT("SH"), CountryCodeSH);
        _CountryCodeMap.Add(TEXT("KN"), CountryCodeKN);
        _CountryCodeMap.Add(TEXT("LC"), CountryCodeLC);
        _CountryCodeMap.Add(TEXT("MF"), CountryCodeMF);
        _CountryCodeMap.Add(TEXT("PM"), CountryCodePM);
        _CountryCodeMap.Add(TEXT("VC"), CountryCodeVC);
        _CountryCodeMap.Add(TEXT("WS"), CountryCodeWS);
        _CountryCodeMap.Add(TEXT("SM"), CountryCodeSM);
        _CountryCodeMap.Add(TEXT("ST"), CountryCodeST);
        _CountryCodeMap.Add(TEXT("SA"), CountryCodeSA);
        _CountryCodeMap.Add(TEXT("SN"), CountryCodeSN);
        _CountryCodeMap.Add(TEXT("RS"), CountryCodeRS);
        _CountryCodeMap.Add(TEXT("SC"), CountryCodeSC);
        _CountryCodeMap.Add(TEXT("SL"), CountryCodeSL);
        _CountryCodeMap.Add(TEXT("SG"), CountryCodeSG);
        _CountryCodeMap.Add(TEXT("SX"), CountryCodeSX);
        _CountryCodeMap.Add(TEXT("SK"), CountryCodeSK);
        _CountryCodeMap.Add(TEXT("SI"), CountryCodeSI);
        _CountryCodeMap.Add(TEXT("SB"), CountryCodeSB);
        _CountryCodeMap.Add(TEXT("SO"), CountryCodeSO);
        _CountryCodeMap.Add(TEXT("ZA"), CountryCodeZA);
        _CountryCodeMap.Add(TEXT("GS"), CountryCodeGS);
        _CountryCodeMap.Add(TEXT("SS"), CountryCodeSS);
        _CountryCodeMap.Add(TEXT("ES"), CountryCodeES);
        _CountryCodeMap.Add(TEXT("LK"), CountryCodeLK);
        _CountryCodeMap.Add(TEXT("SD"), CountryCodeSD);
        _CountryCodeMap.Add(TEXT("SR"), CountryCodeSR);
        _CountryCodeMap.Add(TEXT("SJ"), CountryCodeSJ);
        _CountryCodeMap.Add(TEXT("SZ"), CountryCodeSZ);
        _CountryCodeMap.Add(TEXT("SE"), CountryCodeSE);
        _CountryCodeMap.Add(TEXT("CH"), CountryCodeCH);
        _CountryCodeMap.Add(TEXT("SY"), CountryCodeSY);
        _CountryCodeMap.Add(TEXT("TW"), CountryCodeTW);
        _CountryCodeMap.Add(TEXT("TJ"), CountryCodeTJ);
        _CountryCodeMap.Add(TEXT("TZ"), CountryCodeTZ);
        _CountryCodeMap.Add(TEXT("TH"), CountryCodeTH);
        _CountryCodeMap.Add(TEXT("TL"), CountryCodeTL);
        _CountryCodeMap.Add(TEXT("TG"), CountryCodeTG);
        _CountryCodeMap.Add(TEXT("TK"), CountryCodeTK);
        _CountryCodeMap.Add(TEXT("TO"), CountryCodeTO);
        _CountryCodeMap.Add(TEXT("TT"), CountryCodeTT);
        _CountryCodeMap.Add(TEXT("TN"), CountryCodeTN);
        _CountryCodeMap.Add(TEXT("TR"), CountryCodeTR);
        _CountryCodeMap.Add(TEXT("TM"), CountryCodeTM);
        _CountryCodeMap.Add(TEXT("TC"), CountryCodeTC);
        _CountryCodeMap.Add(TEXT("TV"), CountryCodeTV);
        _CountryCodeMap.Add(TEXT("UG"), CountryCodeUG);
        _CountryCodeMap.Add(TEXT("UA"), CountryCodeUA);
        _CountryCodeMap.Add(TEXT("AE"), CountryCodeAE);
        _CountryCodeMap.Add(TEXT("GB"), CountryCodeGB);
        _CountryCodeMap.Add(TEXT("US"), CountryCodeUS);
        _CountryCodeMap.Add(TEXT("UM"), CountryCodeUM);
        _CountryCodeMap.Add(TEXT("UY"), CountryCodeUY);
        _CountryCodeMap.Add(TEXT("UZ"), CountryCodeUZ);
        _CountryCodeMap.Add(TEXT("VU"), CountryCodeVU);
        _CountryCodeMap.Add(TEXT("VE"), CountryCodeVE);
        _CountryCodeMap.Add(TEXT("VN"), CountryCodeVN);
        _CountryCodeMap.Add(TEXT("VG"), CountryCodeVG);
        _CountryCodeMap.Add(TEXT("VI"), CountryCodeVI);
        _CountryCodeMap.Add(TEXT("WF"), CountryCodeWF);
        _CountryCodeMap.Add(TEXT("EH"), CountryCodeEH);
        _CountryCodeMap.Add(TEXT("YE"), CountryCodeYE);
        _CountryCodeMap.Add(TEXT("ZM"), CountryCodeZM);
        _CountryCodeMap.Add(TEXT("ZW"), CountryCodeZW);

    }

    if (!value.IsEmpty())
    {
        auto output = _CountryCodeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return CountryCodeAF; // Basically critical fail
}

PlayFab::CloudScriptModels::FEmptyResult::~FEmptyResult()
{

}

void PlayFab::CloudScriptModels::FEmptyResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FEmptyResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FEntityKey::~FEntityKey()
{

}

void PlayFab::CloudScriptModels::FEntityKey::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Id.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EntityKey::Id, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FEntityKey::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FScriptExecutionError::~FScriptExecutionError()
{

}

void PlayFab::CloudScriptModels::FScriptExecutionError::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Error.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Error"));
        writer->WriteValue(Error);
    }

    if (Message.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Message"));
        writer->WriteValue(Message);
    }

    if (StackTrace.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StackTrace"));
        writer->WriteValue(StackTrace);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FScriptExecutionError::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ErrorValue = obj->TryGetField(TEXT("Error"));
    if (ErrorValue.IsValid() && !ErrorValue->IsNull())
    {
        FString TmpValue;
        if (ErrorValue->TryGetString(TmpValue)) { Error = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MessageValue = obj->TryGetField(TEXT("Message"));
    if (MessageValue.IsValid() && !MessageValue->IsNull())
    {
        FString TmpValue;
        if (MessageValue->TryGetString(TmpValue)) { Message = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StackTraceValue = obj->TryGetField(TEXT("StackTrace"));
    if (StackTraceValue.IsValid() && !StackTraceValue->IsNull())
    {
        FString TmpValue;
        if (StackTraceValue->TryGetString(TmpValue)) { StackTrace = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FLogStatement::~FLogStatement()
{

}

void PlayFab::CloudScriptModels::FLogStatement::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Data.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Data"));
        Data.writeJSON(writer);
    }

    if (Level.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Level"));
        writer->WriteValue(Level);
    }

    if (Message.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Message"));
        writer->WriteValue(Message);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FLogStatement::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataValue = obj->TryGetField(TEXT("Data"));
    if (DataValue.IsValid() && !DataValue->IsNull())
    {
        Data = FJsonKeeper(DataValue);
    }

    const TSharedPtr<FJsonValue> LevelValue = obj->TryGetField(TEXT("Level"));
    if (LevelValue.IsValid() && !LevelValue->IsNull())
    {
        FString TmpValue;
        if (LevelValue->TryGetString(TmpValue)) { Level = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MessageValue = obj->TryGetField(TEXT("Message"));
    if (MessageValue.IsValid() && !MessageValue->IsNull())
    {
        FString TmpValue;
        if (MessageValue->TryGetString(TmpValue)) { Message = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FExecuteCloudScriptResult::~FExecuteCloudScriptResult()
{
    //if (Error != nullptr) delete Error;

}

void PlayFab::CloudScriptModels::FExecuteCloudScriptResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("APIRequestsIssued"));
    writer->WriteValue(APIRequestsIssued);

    if (Error.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Error"));
        Error->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("ExecutionTimeSeconds"));
    writer->WriteValue(ExecutionTimeSeconds);

    if (FunctionName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionName"));
        writer->WriteValue(FunctionName);
    }

    if (FunctionResult.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionResult"));
        FunctionResult.writeJSON(writer);
    }

    if (FunctionResultTooLarge.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionResultTooLarge"));
        writer->WriteValue(FunctionResultTooLarge);
    }

    writer->WriteIdentifierPrefix(TEXT("HttpRequestsIssued"));
    writer->WriteValue(HttpRequestsIssued);

    if (Logs.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Logs"));
        for (const FLogStatement& item : Logs)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (LogsTooLarge.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LogsTooLarge"));
        writer->WriteValue(LogsTooLarge);
    }

    writer->WriteIdentifierPrefix(TEXT("MemoryConsumedBytes"));
    writer->WriteValue(static_cast<int64>(MemoryConsumedBytes));

    writer->WriteIdentifierPrefix(TEXT("ProcessorTimeSeconds"));
    writer->WriteValue(ProcessorTimeSeconds);

    writer->WriteIdentifierPrefix(TEXT("Revision"));
    writer->WriteValue(Revision);

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FExecuteCloudScriptResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> APIRequestsIssuedValue = obj->TryGetField(TEXT("APIRequestsIssued"));
    if (APIRequestsIssuedValue.IsValid() && !APIRequestsIssuedValue->IsNull())
    {
        int32 TmpValue;
        if (APIRequestsIssuedValue->TryGetNumber(TmpValue)) { APIRequestsIssued = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ErrorValue = obj->TryGetField(TEXT("Error"));
    if (ErrorValue.IsValid() && !ErrorValue->IsNull())
    {
        Error = MakeShareable(new FScriptExecutionError(ErrorValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ExecutionTimeSecondsValue = obj->TryGetField(TEXT("ExecutionTimeSeconds"));
    if (ExecutionTimeSecondsValue.IsValid() && !ExecutionTimeSecondsValue->IsNull())
    {
        double TmpValue;
        if (ExecutionTimeSecondsValue->TryGetNumber(TmpValue)) { ExecutionTimeSeconds = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionNameValue = obj->TryGetField(TEXT("FunctionName"));
    if (FunctionNameValue.IsValid() && !FunctionNameValue->IsNull())
    {
        FString TmpValue;
        if (FunctionNameValue->TryGetString(TmpValue)) { FunctionName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionResultValue = obj->TryGetField(TEXT("FunctionResult"));
    if (FunctionResultValue.IsValid() && !FunctionResultValue->IsNull())
    {
        FunctionResult = FJsonKeeper(FunctionResultValue);
    }

    const TSharedPtr<FJsonValue> FunctionResultTooLargeValue = obj->TryGetField(TEXT("FunctionResultTooLarge"));
    if (FunctionResultTooLargeValue.IsValid() && !FunctionResultTooLargeValue->IsNull())
    {
        bool TmpValue;
        if (FunctionResultTooLargeValue->TryGetBool(TmpValue)) { FunctionResultTooLarge = TmpValue; }
    }

    const TSharedPtr<FJsonValue> HttpRequestsIssuedValue = obj->TryGetField(TEXT("HttpRequestsIssued"));
    if (HttpRequestsIssuedValue.IsValid() && !HttpRequestsIssuedValue->IsNull())
    {
        int32 TmpValue;
        if (HttpRequestsIssuedValue->TryGetNumber(TmpValue)) { HttpRequestsIssued = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&LogsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Logs"));
    for (int32 Idx = 0; Idx < LogsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LogsArray[Idx];
        Logs.Add(FLogStatement(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> LogsTooLargeValue = obj->TryGetField(TEXT("LogsTooLarge"));
    if (LogsTooLargeValue.IsValid() && !LogsTooLargeValue->IsNull())
    {
        bool TmpValue;
        if (LogsTooLargeValue->TryGetBool(TmpValue)) { LogsTooLarge = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MemoryConsumedBytesValue = obj->TryGetField(TEXT("MemoryConsumedBytes"));
    if (MemoryConsumedBytesValue.IsValid() && !MemoryConsumedBytesValue->IsNull())
    {
        uint32 TmpValue;
        if (MemoryConsumedBytesValue->TryGetNumber(TmpValue)) { MemoryConsumedBytes = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProcessorTimeSecondsValue = obj->TryGetField(TEXT("ProcessorTimeSeconds"));
    if (ProcessorTimeSecondsValue.IsValid() && !ProcessorTimeSecondsValue->IsNull())
    {
        double TmpValue;
        if (ProcessorTimeSecondsValue->TryGetNumber(TmpValue)) { ProcessorTimeSeconds = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RevisionValue = obj->TryGetField(TEXT("Revision"));
    if (RevisionValue.IsValid() && !RevisionValue->IsNull())
    {
        int32 TmpValue;
        if (RevisionValue->TryGetNumber(TmpValue)) { Revision = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FExecuteEntityCloudScriptRequest::~FExecuteEntityCloudScriptRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::CloudScriptModels::FExecuteEntityCloudScriptRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (!FunctionName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ExecuteEntityCloudScriptRequest::FunctionName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionName"));
        writer->WriteValue(FunctionName);
    }

    if (FunctionParameter.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionParameter"));
        FunctionParameter.writeJSON(writer);
    }

    if (GeneratePlayStreamEvent.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("GeneratePlayStreamEvent"));
        writer->WriteValue(GeneratePlayStreamEvent);
    }

    if (RevisionSelection.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("RevisionSelection"));
        writeCloudScriptRevisionOptionEnumJSON(RevisionSelection, writer);
    }

    if (SpecificRevision.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("SpecificRevision"));
        writer->WriteValue(SpecificRevision);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FExecuteEntityCloudScriptRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> FunctionNameValue = obj->TryGetField(TEXT("FunctionName"));
    if (FunctionNameValue.IsValid() && !FunctionNameValue->IsNull())
    {
        FString TmpValue;
        if (FunctionNameValue->TryGetString(TmpValue)) { FunctionName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionParameterValue = obj->TryGetField(TEXT("FunctionParameter"));
    if (FunctionParameterValue.IsValid() && !FunctionParameterValue->IsNull())
    {
        FunctionParameter = FJsonKeeper(FunctionParameterValue);
    }

    const TSharedPtr<FJsonValue> GeneratePlayStreamEventValue = obj->TryGetField(TEXT("GeneratePlayStreamEvent"));
    if (GeneratePlayStreamEventValue.IsValid() && !GeneratePlayStreamEventValue->IsNull())
    {
        bool TmpValue;
        if (GeneratePlayStreamEventValue->TryGetBool(TmpValue)) { GeneratePlayStreamEvent = TmpValue; }
    }

    RevisionSelection = readCloudScriptRevisionOptionFromValue(obj->TryGetField(TEXT("RevisionSelection")));

    const TSharedPtr<FJsonValue> SpecificRevisionValue = obj->TryGetField(TEXT("SpecificRevision"));
    if (SpecificRevisionValue.IsValid() && !SpecificRevisionValue->IsNull())
    {
        int32 TmpValue;
        if (SpecificRevisionValue->TryGetNumber(TmpValue)) { SpecificRevision = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FExecuteFunctionRequest::~FExecuteFunctionRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::CloudScriptModels::FExecuteFunctionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (!FunctionName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ExecuteFunctionRequest::FunctionName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionName"));
        writer->WriteValue(FunctionName);
    }

    if (FunctionParameter.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionParameter"));
        FunctionParameter.writeJSON(writer);
    }

    if (GeneratePlayStreamEvent.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("GeneratePlayStreamEvent"));
        writer->WriteValue(GeneratePlayStreamEvent);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FExecuteFunctionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> FunctionNameValue = obj->TryGetField(TEXT("FunctionName"));
    if (FunctionNameValue.IsValid() && !FunctionNameValue->IsNull())
    {
        FString TmpValue;
        if (FunctionNameValue->TryGetString(TmpValue)) { FunctionName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionParameterValue = obj->TryGetField(TEXT("FunctionParameter"));
    if (FunctionParameterValue.IsValid() && !FunctionParameterValue->IsNull())
    {
        FunctionParameter = FJsonKeeper(FunctionParameterValue);
    }

    const TSharedPtr<FJsonValue> GeneratePlayStreamEventValue = obj->TryGetField(TEXT("GeneratePlayStreamEvent"));
    if (GeneratePlayStreamEventValue.IsValid() && !GeneratePlayStreamEventValue->IsNull())
    {
        bool TmpValue;
        if (GeneratePlayStreamEventValue->TryGetBool(TmpValue)) { GeneratePlayStreamEvent = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FFunctionExecutionError::~FFunctionExecutionError()
{

}

void PlayFab::CloudScriptModels::FFunctionExecutionError::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Error.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Error"));
        writer->WriteValue(Error);
    }

    if (Message.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Message"));
        writer->WriteValue(Message);
    }

    if (StackTrace.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StackTrace"));
        writer->WriteValue(StackTrace);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FFunctionExecutionError::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ErrorValue = obj->TryGetField(TEXT("Error"));
    if (ErrorValue.IsValid() && !ErrorValue->IsNull())
    {
        FString TmpValue;
        if (ErrorValue->TryGetString(TmpValue)) { Error = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MessageValue = obj->TryGetField(TEXT("Message"));
    if (MessageValue.IsValid() && !MessageValue->IsNull())
    {
        FString TmpValue;
        if (MessageValue->TryGetString(TmpValue)) { Message = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StackTraceValue = obj->TryGetField(TEXT("StackTrace"));
    if (StackTraceValue.IsValid() && !StackTraceValue->IsNull())
    {
        FString TmpValue;
        if (StackTraceValue->TryGetString(TmpValue)) { StackTrace = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FExecuteFunctionResult::~FExecuteFunctionResult()
{
    //if (Error != nullptr) delete Error;

}

void PlayFab::CloudScriptModels::FExecuteFunctionResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Error.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Error"));
        Error->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("ExecutionTimeMilliseconds"));
    writer->WriteValue(ExecutionTimeMilliseconds);

    if (FunctionName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionName"));
        writer->WriteValue(FunctionName);
    }

    if (FunctionResult.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionResult"));
        FunctionResult.writeJSON(writer);
    }

    if (FunctionResultTooLarge.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionResultTooLarge"));
        writer->WriteValue(FunctionResultTooLarge);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FExecuteFunctionResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ErrorValue = obj->TryGetField(TEXT("Error"));
    if (ErrorValue.IsValid() && !ErrorValue->IsNull())
    {
        Error = MakeShareable(new FFunctionExecutionError(ErrorValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ExecutionTimeMillisecondsValue = obj->TryGetField(TEXT("ExecutionTimeMilliseconds"));
    if (ExecutionTimeMillisecondsValue.IsValid() && !ExecutionTimeMillisecondsValue->IsNull())
    {
        int32 TmpValue;
        if (ExecutionTimeMillisecondsValue->TryGetNumber(TmpValue)) { ExecutionTimeMilliseconds = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionNameValue = obj->TryGetField(TEXT("FunctionName"));
    if (FunctionNameValue.IsValid() && !FunctionNameValue->IsNull())
    {
        FString TmpValue;
        if (FunctionNameValue->TryGetString(TmpValue)) { FunctionName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionResultValue = obj->TryGetField(TEXT("FunctionResult"));
    if (FunctionResultValue.IsValid() && !FunctionResultValue->IsNull())
    {
        FunctionResult = FJsonKeeper(FunctionResultValue);
    }

    const TSharedPtr<FJsonValue> FunctionResultTooLargeValue = obj->TryGetField(TEXT("FunctionResultTooLarge"));
    if (FunctionResultTooLargeValue.IsValid() && !FunctionResultTooLargeValue->IsNull())
    {
        bool TmpValue;
        if (FunctionResultTooLargeValue->TryGetBool(TmpValue)) { FunctionResultTooLarge = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FFunctionModel::~FFunctionModel()
{

}

void PlayFab::CloudScriptModels::FFunctionModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FunctionAddress.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionAddress"));
        writer->WriteValue(FunctionAddress);
    }

    if (FunctionName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionName"));
        writer->WriteValue(FunctionName);
    }

    if (TriggerType.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TriggerType"));
        writer->WriteValue(TriggerType);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FFunctionModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FunctionAddressValue = obj->TryGetField(TEXT("FunctionAddress"));
    if (FunctionAddressValue.IsValid() && !FunctionAddressValue->IsNull())
    {
        FString TmpValue;
        if (FunctionAddressValue->TryGetString(TmpValue)) { FunctionAddress = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionNameValue = obj->TryGetField(TEXT("FunctionName"));
    if (FunctionNameValue.IsValid() && !FunctionNameValue->IsNull())
    {
        FString TmpValue;
        if (FunctionNameValue->TryGetString(TmpValue)) { FunctionName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TriggerTypeValue = obj->TryGetField(TEXT("TriggerType"));
    if (TriggerTypeValue.IsValid() && !TriggerTypeValue->IsNull())
    {
        FString TmpValue;
        if (TriggerTypeValue->TryGetString(TmpValue)) { TriggerType = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FHttpFunctionModel::~FHttpFunctionModel()
{

}

void PlayFab::CloudScriptModels::FHttpFunctionModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FunctionName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionName"));
        writer->WriteValue(FunctionName);
    }

    if (FunctionUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionUrl"));
        writer->WriteValue(FunctionUrl);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FHttpFunctionModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FunctionNameValue = obj->TryGetField(TEXT("FunctionName"));
    if (FunctionNameValue.IsValid() && !FunctionNameValue->IsNull())
    {
        FString TmpValue;
        if (FunctionNameValue->TryGetString(TmpValue)) { FunctionName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionUrlValue = obj->TryGetField(TEXT("FunctionUrl"));
    if (FunctionUrlValue.IsValid() && !FunctionUrlValue->IsNull())
    {
        FString TmpValue;
        if (FunctionUrlValue->TryGetString(TmpValue)) { FunctionUrl = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::CloudScriptModels::writeLoginIdentityProviderEnumJSON(LoginIdentityProvider enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case LoginIdentityProviderUnknown: writer->WriteValue(TEXT("Unknown")); break;
    case LoginIdentityProviderPlayFab: writer->WriteValue(TEXT("PlayFab")); break;
    case LoginIdentityProviderCustom: writer->WriteValue(TEXT("Custom")); break;
    case LoginIdentityProviderGameCenter: writer->WriteValue(TEXT("GameCenter")); break;
    case LoginIdentityProviderGooglePlay: writer->WriteValue(TEXT("GooglePlay")); break;
    case LoginIdentityProviderSteam: writer->WriteValue(TEXT("Steam")); break;
    case LoginIdentityProviderXBoxLive: writer->WriteValue(TEXT("XBoxLive")); break;
    case LoginIdentityProviderPSN: writer->WriteValue(TEXT("PSN")); break;
    case LoginIdentityProviderKongregate: writer->WriteValue(TEXT("Kongregate")); break;
    case LoginIdentityProviderFacebook: writer->WriteValue(TEXT("Facebook")); break;
    case LoginIdentityProviderIOSDevice: writer->WriteValue(TEXT("IOSDevice")); break;
    case LoginIdentityProviderAndroidDevice: writer->WriteValue(TEXT("AndroidDevice")); break;
    case LoginIdentityProviderTwitch: writer->WriteValue(TEXT("Twitch")); break;
    case LoginIdentityProviderWindowsHello: writer->WriteValue(TEXT("WindowsHello")); break;
    case LoginIdentityProviderGameServer: writer->WriteValue(TEXT("GameServer")); break;
    case LoginIdentityProviderCustomServer: writer->WriteValue(TEXT("CustomServer")); break;
    case LoginIdentityProviderNintendoSwitch: writer->WriteValue(TEXT("NintendoSwitch")); break;
    case LoginIdentityProviderFacebookInstantGames: writer->WriteValue(TEXT("FacebookInstantGames")); break;
    case LoginIdentityProviderOpenIdConnect: writer->WriteValue(TEXT("OpenIdConnect")); break;
    case LoginIdentityProviderApple: writer->WriteValue(TEXT("Apple")); break;
    case LoginIdentityProviderNintendoSwitchAccount: writer->WriteValue(TEXT("NintendoSwitchAccount")); break;
    }
}

CloudScriptModels::LoginIdentityProvider PlayFab::CloudScriptModels::readLoginIdentityProviderFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readLoginIdentityProviderFromValue(value.IsValid() ? value->AsString() : "");
}

CloudScriptModels::LoginIdentityProvider PlayFab::CloudScriptModels::readLoginIdentityProviderFromValue(const FString& value)
{
    static TMap<FString, LoginIdentityProvider> _LoginIdentityProviderMap;
    if (_LoginIdentityProviderMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _LoginIdentityProviderMap.Add(TEXT("Unknown"), LoginIdentityProviderUnknown);
        _LoginIdentityProviderMap.Add(TEXT("PlayFab"), LoginIdentityProviderPlayFab);
        _LoginIdentityProviderMap.Add(TEXT("Custom"), LoginIdentityProviderCustom);
        _LoginIdentityProviderMap.Add(TEXT("GameCenter"), LoginIdentityProviderGameCenter);
        _LoginIdentityProviderMap.Add(TEXT("GooglePlay"), LoginIdentityProviderGooglePlay);
        _LoginIdentityProviderMap.Add(TEXT("Steam"), LoginIdentityProviderSteam);
        _LoginIdentityProviderMap.Add(TEXT("XBoxLive"), LoginIdentityProviderXBoxLive);
        _LoginIdentityProviderMap.Add(TEXT("PSN"), LoginIdentityProviderPSN);
        _LoginIdentityProviderMap.Add(TEXT("Kongregate"), LoginIdentityProviderKongregate);
        _LoginIdentityProviderMap.Add(TEXT("Facebook"), LoginIdentityProviderFacebook);
        _LoginIdentityProviderMap.Add(TEXT("IOSDevice"), LoginIdentityProviderIOSDevice);
        _LoginIdentityProviderMap.Add(TEXT("AndroidDevice"), LoginIdentityProviderAndroidDevice);
        _LoginIdentityProviderMap.Add(TEXT("Twitch"), LoginIdentityProviderTwitch);
        _LoginIdentityProviderMap.Add(TEXT("WindowsHello"), LoginIdentityProviderWindowsHello);
        _LoginIdentityProviderMap.Add(TEXT("GameServer"), LoginIdentityProviderGameServer);
        _LoginIdentityProviderMap.Add(TEXT("CustomServer"), LoginIdentityProviderCustomServer);
        _LoginIdentityProviderMap.Add(TEXT("NintendoSwitch"), LoginIdentityProviderNintendoSwitch);
        _LoginIdentityProviderMap.Add(TEXT("FacebookInstantGames"), LoginIdentityProviderFacebookInstantGames);
        _LoginIdentityProviderMap.Add(TEXT("OpenIdConnect"), LoginIdentityProviderOpenIdConnect);
        _LoginIdentityProviderMap.Add(TEXT("Apple"), LoginIdentityProviderApple);
        _LoginIdentityProviderMap.Add(TEXT("NintendoSwitchAccount"), LoginIdentityProviderNintendoSwitchAccount);

    }

    if (!value.IsEmpty())
    {
        auto output = _LoginIdentityProviderMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return LoginIdentityProviderUnknown; // Basically critical fail
}

PlayFab::CloudScriptModels::FLinkedPlatformAccountModel::~FLinkedPlatformAccountModel()
{

}

void PlayFab::CloudScriptModels::FLinkedPlatformAccountModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Email.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Email"));
        writer->WriteValue(Email);
    }

    if (Platform.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writeLoginIdentityProviderEnumJSON(Platform, writer);
    }

    if (PlatformUserId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlatformUserId"));
        writer->WriteValue(PlatformUserId);
    }

    if (Username.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Username"));
        writer->WriteValue(Username);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FLinkedPlatformAccountModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EmailValue = obj->TryGetField(TEXT("Email"));
    if (EmailValue.IsValid() && !EmailValue->IsNull())
    {
        FString TmpValue;
        if (EmailValue->TryGetString(TmpValue)) { Email = TmpValue; }
    }

    Platform = readLoginIdentityProviderFromValue(obj->TryGetField(TEXT("Platform")));

    const TSharedPtr<FJsonValue> PlatformUserIdValue = obj->TryGetField(TEXT("PlatformUserId"));
    if (PlatformUserIdValue.IsValid() && !PlatformUserIdValue->IsNull())
    {
        FString TmpValue;
        if (PlatformUserIdValue->TryGetString(TmpValue)) { PlatformUserId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UsernameValue = obj->TryGetField(TEXT("Username"));
    if (UsernameValue.IsValid() && !UsernameValue->IsNull())
    {
        FString TmpValue;
        if (UsernameValue->TryGetString(TmpValue)) { Username = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FListFunctionsRequest::~FListFunctionsRequest()
{

}

void PlayFab::CloudScriptModels::FListFunctionsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FListFunctionsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FListFunctionsResult::~FListFunctionsResult()
{

}

void PlayFab::CloudScriptModels::FListFunctionsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Functions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Functions"));
        for (const FFunctionModel& item : Functions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FListFunctionsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&FunctionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Functions"));
    for (int32 Idx = 0; Idx < FunctionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = FunctionsArray[Idx];
        Functions.Add(FFunctionModel(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::CloudScriptModels::FListHttpFunctionsResult::~FListHttpFunctionsResult()
{

}

void PlayFab::CloudScriptModels::FListHttpFunctionsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Functions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Functions"));
        for (const FHttpFunctionModel& item : Functions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FListHttpFunctionsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&FunctionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Functions"));
    for (int32 Idx = 0; Idx < FunctionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = FunctionsArray[Idx];
        Functions.Add(FHttpFunctionModel(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::CloudScriptModels::FQueuedFunctionModel::~FQueuedFunctionModel()
{

}

void PlayFab::CloudScriptModels::FQueuedFunctionModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ConnectionString.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ConnectionString"));
        writer->WriteValue(ConnectionString);
    }

    if (FunctionName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionName"));
        writer->WriteValue(FunctionName);
    }

    if (QueueName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("QueueName"));
        writer->WriteValue(QueueName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FQueuedFunctionModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ConnectionStringValue = obj->TryGetField(TEXT("ConnectionString"));
    if (ConnectionStringValue.IsValid() && !ConnectionStringValue->IsNull())
    {
        FString TmpValue;
        if (ConnectionStringValue->TryGetString(TmpValue)) { ConnectionString = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionNameValue = obj->TryGetField(TEXT("FunctionName"));
    if (FunctionNameValue.IsValid() && !FunctionNameValue->IsNull())
    {
        FString TmpValue;
        if (FunctionNameValue->TryGetString(TmpValue)) { FunctionName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> QueueNameValue = obj->TryGetField(TEXT("QueueName"));
    if (QueueNameValue.IsValid() && !QueueNameValue->IsNull())
    {
        FString TmpValue;
        if (QueueNameValue->TryGetString(TmpValue)) { QueueName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FListQueuedFunctionsResult::~FListQueuedFunctionsResult()
{

}

void PlayFab::CloudScriptModels::FListQueuedFunctionsResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Functions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Functions"));
        for (const FQueuedFunctionModel& item : Functions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FListQueuedFunctionsResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&FunctionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Functions"));
    for (int32 Idx = 0; Idx < FunctionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = FunctionsArray[Idx];
        Functions.Add(FQueuedFunctionModel(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::CloudScriptModels::FLocationModel::~FLocationModel()
{

}

void PlayFab::CloudScriptModels::FLocationModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (City.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("City"));
        writer->WriteValue(City);
    }

    if (pfContinentCode.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ContinentCode"));
        writeContinentCodeEnumJSON(pfContinentCode, writer);
    }

    if (pfCountryCode.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("CountryCode"));
        writeCountryCodeEnumJSON(pfCountryCode, writer);
    }

    if (Latitude.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Latitude"));
        writer->WriteValue(Latitude);
    }

    if (Longitude.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Longitude"));
        writer->WriteValue(Longitude);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FLocationModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CityValue = obj->TryGetField(TEXT("City"));
    if (CityValue.IsValid() && !CityValue->IsNull())
    {
        FString TmpValue;
        if (CityValue->TryGetString(TmpValue)) { City = TmpValue; }
    }

    pfContinentCode = readContinentCodeFromValue(obj->TryGetField(TEXT("ContinentCode")));

    pfCountryCode = readCountryCodeFromValue(obj->TryGetField(TEXT("CountryCode")));

    const TSharedPtr<FJsonValue> LatitudeValue = obj->TryGetField(TEXT("Latitude"));
    if (LatitudeValue.IsValid() && !LatitudeValue->IsNull())
    {
        double TmpValue;
        if (LatitudeValue->TryGetNumber(TmpValue)) { Latitude = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LongitudeValue = obj->TryGetField(TEXT("Longitude"));
    if (LongitudeValue.IsValid() && !LongitudeValue->IsNull())
    {
        double TmpValue;
        if (LongitudeValue->TryGetNumber(TmpValue)) { Longitude = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::CloudScriptModels::writeSubscriptionProviderStatusEnumJSON(SubscriptionProviderStatus enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case SubscriptionProviderStatusNoError: writer->WriteValue(TEXT("NoError")); break;
    case SubscriptionProviderStatusCancelled: writer->WriteValue(TEXT("Cancelled")); break;
    case SubscriptionProviderStatusUnknownError: writer->WriteValue(TEXT("UnknownError")); break;
    case SubscriptionProviderStatusBillingError: writer->WriteValue(TEXT("BillingError")); break;
    case SubscriptionProviderStatusProductUnavailable: writer->WriteValue(TEXT("ProductUnavailable")); break;
    case SubscriptionProviderStatusCustomerDidNotAcceptPriceChange: writer->WriteValue(TEXT("CustomerDidNotAcceptPriceChange")); break;
    case SubscriptionProviderStatusFreeTrial: writer->WriteValue(TEXT("FreeTrial")); break;
    case SubscriptionProviderStatusPaymentPending: writer->WriteValue(TEXT("PaymentPending")); break;
    }
}

CloudScriptModels::SubscriptionProviderStatus PlayFab::CloudScriptModels::readSubscriptionProviderStatusFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readSubscriptionProviderStatusFromValue(value.IsValid() ? value->AsString() : "");
}

CloudScriptModels::SubscriptionProviderStatus PlayFab::CloudScriptModels::readSubscriptionProviderStatusFromValue(const FString& value)
{
    static TMap<FString, SubscriptionProviderStatus> _SubscriptionProviderStatusMap;
    if (_SubscriptionProviderStatusMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _SubscriptionProviderStatusMap.Add(TEXT("NoError"), SubscriptionProviderStatusNoError);
        _SubscriptionProviderStatusMap.Add(TEXT("Cancelled"), SubscriptionProviderStatusCancelled);
        _SubscriptionProviderStatusMap.Add(TEXT("UnknownError"), SubscriptionProviderStatusUnknownError);
        _SubscriptionProviderStatusMap.Add(TEXT("BillingError"), SubscriptionProviderStatusBillingError);
        _SubscriptionProviderStatusMap.Add(TEXT("ProductUnavailable"), SubscriptionProviderStatusProductUnavailable);
        _SubscriptionProviderStatusMap.Add(TEXT("CustomerDidNotAcceptPriceChange"), SubscriptionProviderStatusCustomerDidNotAcceptPriceChange);
        _SubscriptionProviderStatusMap.Add(TEXT("FreeTrial"), SubscriptionProviderStatusFreeTrial);
        _SubscriptionProviderStatusMap.Add(TEXT("PaymentPending"), SubscriptionProviderStatusPaymentPending);

    }

    if (!value.IsEmpty())
    {
        auto output = _SubscriptionProviderStatusMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return SubscriptionProviderStatusNoError; // Basically critical fail
}

PlayFab::CloudScriptModels::FSubscriptionModel::~FSubscriptionModel()
{

}

void PlayFab::CloudScriptModels::FSubscriptionModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Expiration"));
    writeDatetime(Expiration, writer);

    writer->WriteIdentifierPrefix(TEXT("InitialSubscriptionTime"));
    writeDatetime(InitialSubscriptionTime, writer);

    writer->WriteIdentifierPrefix(TEXT("IsActive"));
    writer->WriteValue(IsActive);

    if (Status.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        writeSubscriptionProviderStatusEnumJSON(Status, writer);
    }

    if (SubscriptionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SubscriptionId"));
        writer->WriteValue(SubscriptionId);
    }

    if (SubscriptionItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SubscriptionItemId"));
        writer->WriteValue(SubscriptionItemId);
    }

    if (SubscriptionProvider.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("SubscriptionProvider"));
        writer->WriteValue(SubscriptionProvider);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FSubscriptionModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ExpirationValue = obj->TryGetField(TEXT("Expiration"));
    if (ExpirationValue.IsValid())
        Expiration = readDatetime(ExpirationValue);


    const TSharedPtr<FJsonValue> InitialSubscriptionTimeValue = obj->TryGetField(TEXT("InitialSubscriptionTime"));
    if (InitialSubscriptionTimeValue.IsValid())
        InitialSubscriptionTime = readDatetime(InitialSubscriptionTimeValue);


    const TSharedPtr<FJsonValue> IsActiveValue = obj->TryGetField(TEXT("IsActive"));
    if (IsActiveValue.IsValid() && !IsActiveValue->IsNull())
    {
        bool TmpValue;
        if (IsActiveValue->TryGetBool(TmpValue)) { IsActive = TmpValue; }
    }

    Status = readSubscriptionProviderStatusFromValue(obj->TryGetField(TEXT("Status")));

    const TSharedPtr<FJsonValue> SubscriptionIdValue = obj->TryGetField(TEXT("SubscriptionId"));
    if (SubscriptionIdValue.IsValid() && !SubscriptionIdValue->IsNull())
    {
        FString TmpValue;
        if (SubscriptionIdValue->TryGetString(TmpValue)) { SubscriptionId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SubscriptionItemIdValue = obj->TryGetField(TEXT("SubscriptionItemId"));
    if (SubscriptionItemIdValue.IsValid() && !SubscriptionItemIdValue->IsNull())
    {
        FString TmpValue;
        if (SubscriptionItemIdValue->TryGetString(TmpValue)) { SubscriptionItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SubscriptionProviderValue = obj->TryGetField(TEXT("SubscriptionProvider"));
    if (SubscriptionProviderValue.IsValid() && !SubscriptionProviderValue->IsNull())
    {
        FString TmpValue;
        if (SubscriptionProviderValue->TryGetString(TmpValue)) { SubscriptionProvider = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FMembershipModel::~FMembershipModel()
{

}

void PlayFab::CloudScriptModels::FMembershipModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("IsActive"));
    writer->WriteValue(IsActive);

    writer->WriteIdentifierPrefix(TEXT("MembershipExpiration"));
    writeDatetime(MembershipExpiration, writer);

    if (MembershipId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MembershipId"));
        writer->WriteValue(MembershipId);
    }

    if (OverrideExpiration.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("OverrideExpiration"));
        writeDatetime(OverrideExpiration, writer);
    }

    if (OverrideIsSet.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("OverrideIsSet"));
        writer->WriteValue(OverrideIsSet);
    }

    if (Subscriptions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Subscriptions"));
        for (const FSubscriptionModel& item : Subscriptions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FMembershipModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IsActiveValue = obj->TryGetField(TEXT("IsActive"));
    if (IsActiveValue.IsValid() && !IsActiveValue->IsNull())
    {
        bool TmpValue;
        if (IsActiveValue->TryGetBool(TmpValue)) { IsActive = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MembershipExpirationValue = obj->TryGetField(TEXT("MembershipExpiration"));
    if (MembershipExpirationValue.IsValid())
        MembershipExpiration = readDatetime(MembershipExpirationValue);


    const TSharedPtr<FJsonValue> MembershipIdValue = obj->TryGetField(TEXT("MembershipId"));
    if (MembershipIdValue.IsValid() && !MembershipIdValue->IsNull())
    {
        FString TmpValue;
        if (MembershipIdValue->TryGetString(TmpValue)) { MembershipId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OverrideExpirationValue = obj->TryGetField(TEXT("OverrideExpiration"));
    if (OverrideExpirationValue.IsValid())
        OverrideExpiration = readDatetime(OverrideExpirationValue);


    const TSharedPtr<FJsonValue> OverrideIsSetValue = obj->TryGetField(TEXT("OverrideIsSet"));
    if (OverrideIsSetValue.IsValid() && !OverrideIsSetValue->IsNull())
    {
        bool TmpValue;
        if (OverrideIsSetValue->TryGetBool(TmpValue)) { OverrideIsSet = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&SubscriptionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Subscriptions"));
    for (int32 Idx = 0; Idx < SubscriptionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SubscriptionsArray[Idx];
        Subscriptions.Add(FSubscriptionModel(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::CloudScriptModels::FNameIdentifier::~FNameIdentifier()
{

}

void PlayFab::CloudScriptModels::FNameIdentifier::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FNameIdentifier::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::CloudScriptModels::writePushNotificationPlatformEnumJSON(PushNotificationPlatform enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case PushNotificationPlatformApplePushNotificationService: writer->WriteValue(TEXT("ApplePushNotificationService")); break;
    case PushNotificationPlatformGoogleCloudMessaging: writer->WriteValue(TEXT("GoogleCloudMessaging")); break;
    }
}

CloudScriptModels::PushNotificationPlatform PlayFab::CloudScriptModels::readPushNotificationPlatformFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readPushNotificationPlatformFromValue(value.IsValid() ? value->AsString() : "");
}

CloudScriptModels::PushNotificationPlatform PlayFab::CloudScriptModels::readPushNotificationPlatformFromValue(const FString& value)
{
    static TMap<FString, PushNotificationPlatform> _PushNotificationPlatformMap;
    if (_PushNotificationPlatformMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _PushNotificationPlatformMap.Add(TEXT("ApplePushNotificationService"), PushNotificationPlatformApplePushNotificationService);
        _PushNotificationPlatformMap.Add(TEXT("GoogleCloudMessaging"), PushNotificationPlatformGoogleCloudMessaging);

    }

    if (!value.IsEmpty())
    {
        auto output = _PushNotificationPlatformMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return PushNotificationPlatformApplePushNotificationService; // Basically critical fail
}

PlayFab::CloudScriptModels::FPushNotificationRegistrationModel::~FPushNotificationRegistrationModel()
{

}

void PlayFab::CloudScriptModels::FPushNotificationRegistrationModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (NotificationEndpointARN.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NotificationEndpointARN"));
        writer->WriteValue(NotificationEndpointARN);
    }

    if (Platform.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writePushNotificationPlatformEnumJSON(Platform, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FPushNotificationRegistrationModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NotificationEndpointARNValue = obj->TryGetField(TEXT("NotificationEndpointARN"));
    if (NotificationEndpointARNValue.IsValid() && !NotificationEndpointARNValue->IsNull())
    {
        FString TmpValue;
        if (NotificationEndpointARNValue->TryGetString(TmpValue)) { NotificationEndpointARN = TmpValue; }
    }

    Platform = readPushNotificationPlatformFromValue(obj->TryGetField(TEXT("Platform")));

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FStatisticModel::~FStatisticModel()
{

}

void PlayFab::CloudScriptModels::FStatisticModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    writer->WriteIdentifierPrefix(TEXT("Value"));
    writer->WriteValue(Value);

    writer->WriteIdentifierPrefix(TEXT("Version"));
    writer->WriteValue(Version);

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FStatisticModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        int32 TmpValue;
        if (ValueValue->TryGetNumber(TmpValue)) { Value = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        int32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FTagModel::~FTagModel()
{

}

void PlayFab::CloudScriptModels::FTagModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (TagValue.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TagValue"));
        writer->WriteValue(TagValue);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FTagModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> TagValueValue = obj->TryGetField(TEXT("TagValue"));
    if (TagValueValue.IsValid() && !TagValueValue->IsNull())
    {
        FString TmpValue;
        if (TagValueValue->TryGetString(TmpValue)) { TagValue = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FValueToDateModel::~FValueToDateModel()
{

}

void PlayFab::CloudScriptModels::FValueToDateModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Currency.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Currency"));
        writer->WriteValue(Currency);
    }

    writer->WriteIdentifierPrefix(TEXT("TotalValue"));
    writer->WriteValue(static_cast<int64>(TotalValue));

    if (TotalValueAsDecimal.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TotalValueAsDecimal"));
        writer->WriteValue(TotalValueAsDecimal);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FValueToDateModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CurrencyValue = obj->TryGetField(TEXT("Currency"));
    if (CurrencyValue.IsValid() && !CurrencyValue->IsNull())
    {
        FString TmpValue;
        if (CurrencyValue->TryGetString(TmpValue)) { Currency = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalValueValue = obj->TryGetField(TEXT("TotalValue"));
    if (TotalValueValue.IsValid() && !TotalValueValue->IsNull())
    {
        uint32 TmpValue;
        if (TotalValueValue->TryGetNumber(TmpValue)) { TotalValue = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalValueAsDecimalValue = obj->TryGetField(TEXT("TotalValueAsDecimal"));
    if (TotalValueAsDecimalValue.IsValid() && !TotalValueAsDecimalValue->IsNull())
    {
        FString TmpValue;
        if (TotalValueAsDecimalValue->TryGetString(TmpValue)) { TotalValueAsDecimal = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FPlayerProfileModel::~FPlayerProfileModel()
{

}

void PlayFab::CloudScriptModels::FPlayerProfileModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AdCampaignAttributions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AdCampaignAttributions"));
        for (const FAdCampaignAttributionModel& item : AdCampaignAttributions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (AvatarUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AvatarUrl"));
        writer->WriteValue(AvatarUrl);
    }

    if (BannedUntil.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("BannedUntil"));
        writeDatetime(BannedUntil, writer);
    }

    if (ContactEmailAddresses.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ContactEmailAddresses"));
        for (const FContactEmailInfoModel& item : ContactEmailAddresses)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Created.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Created"));
        writeDatetime(Created, writer);
    }

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (ExperimentVariants.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ExperimentVariants"));
        for (const FString& item : ExperimentVariants)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (LastLogin.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LastLogin"));
        writeDatetime(LastLogin, writer);
    }

    if (LinkedAccounts.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("LinkedAccounts"));
        for (const FLinkedPlatformAccountModel& item : LinkedAccounts)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Locations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Locations"));
        for (const FLocationModel& item : Locations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Memberships.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Memberships"));
        for (const FMembershipModel& item : Memberships)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Origination.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Origination"));
        writeLoginIdentityProviderEnumJSON(Origination, writer);
    }

    if (PlayerId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PlayerId"));
        writer->WriteValue(PlayerId);
    }

    if (PublisherId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("PublisherId"));
        writer->WriteValue(PublisherId);
    }

    if (PushNotificationRegistrations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PushNotificationRegistrations"));
        for (const FPushNotificationRegistrationModel& item : PushNotificationRegistrations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Statistics.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Statistics"));
        for (const FStatisticModel& item : Statistics)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FTagModel& item : Tags)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (TitleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitleId"));
        writer->WriteValue(TitleId);
    }

    if (TotalValueToDateInUSD.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("TotalValueToDateInUSD"));
        writer->WriteValue(static_cast<int64>(TotalValueToDateInUSD));
    }

    if (ValuesToDate.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ValuesToDate"));
        for (const FValueToDateModel& item : ValuesToDate)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FPlayerProfileModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AdCampaignAttributionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("AdCampaignAttributions"));
    for (int32 Idx = 0; Idx < AdCampaignAttributionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AdCampaignAttributionsArray[Idx];
        AdCampaignAttributions.Add(FAdCampaignAttributionModel(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> AvatarUrlValue = obj->TryGetField(TEXT("AvatarUrl"));
    if (AvatarUrlValue.IsValid() && !AvatarUrlValue->IsNull())
    {
        FString TmpValue;
        if (AvatarUrlValue->TryGetString(TmpValue)) { AvatarUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> BannedUntilValue = obj->TryGetField(TEXT("BannedUntil"));
    if (BannedUntilValue.IsValid())
        BannedUntil = readDatetime(BannedUntilValue);


    const TArray<TSharedPtr<FJsonValue>>&ContactEmailAddressesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ContactEmailAddresses"));
    for (int32 Idx = 0; Idx < ContactEmailAddressesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ContactEmailAddressesArray[Idx];
        ContactEmailAddresses.Add(FContactEmailInfoModel(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("ExperimentVariants"), ExperimentVariants);

    const TSharedPtr<FJsonValue> LastLoginValue = obj->TryGetField(TEXT("LastLogin"));
    if (LastLoginValue.IsValid())
        LastLogin = readDatetime(LastLoginValue);


    const TArray<TSharedPtr<FJsonValue>>&LinkedAccountsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("LinkedAccounts"));
    for (int32 Idx = 0; Idx < LinkedAccountsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LinkedAccountsArray[Idx];
        LinkedAccounts.Add(FLinkedPlatformAccountModel(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&LocationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Locations"));
    for (int32 Idx = 0; Idx < LocationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = LocationsArray[Idx];
        Locations.Add(FLocationModel(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&MembershipsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Memberships"));
    for (int32 Idx = 0; Idx < MembershipsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = MembershipsArray[Idx];
        Memberships.Add(FMembershipModel(CurrentItem->AsObject()));
    }


    Origination = readLoginIdentityProviderFromValue(obj->TryGetField(TEXT("Origination")));

    const TSharedPtr<FJsonValue> PlayerIdValue = obj->TryGetField(TEXT("PlayerId"));
    if (PlayerIdValue.IsValid() && !PlayerIdValue->IsNull())
    {
        FString TmpValue;
        if (PlayerIdValue->TryGetString(TmpValue)) { PlayerId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PublisherIdValue = obj->TryGetField(TEXT("PublisherId"));
    if (PublisherIdValue.IsValid() && !PublisherIdValue->IsNull())
    {
        FString TmpValue;
        if (PublisherIdValue->TryGetString(TmpValue)) { PublisherId = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&PushNotificationRegistrationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("PushNotificationRegistrations"));
    for (int32 Idx = 0; Idx < PushNotificationRegistrationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PushNotificationRegistrationsArray[Idx];
        PushNotificationRegistrations.Add(FPushNotificationRegistrationModel(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&StatisticsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Statistics"));
    for (int32 Idx = 0; Idx < StatisticsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StatisticsArray[Idx];
        Statistics.Add(FStatisticModel(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&TagsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Tags"));
    for (int32 Idx = 0; Idx < TagsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = TagsArray[Idx];
        Tags.Add(FTagModel(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> TitleIdValue = obj->TryGetField(TEXT("TitleId"));
    if (TitleIdValue.IsValid() && !TitleIdValue->IsNull())
    {
        FString TmpValue;
        if (TitleIdValue->TryGetString(TmpValue)) { TitleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalValueToDateInUSDValue = obj->TryGetField(TEXT("TotalValueToDateInUSD"));
    if (TotalValueToDateInUSDValue.IsValid() && !TotalValueToDateInUSDValue->IsNull())
    {
        uint32 TmpValue;
        if (TotalValueToDateInUSDValue->TryGetNumber(TmpValue)) { TotalValueToDateInUSD = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ValuesToDateArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ValuesToDate"));
    for (int32 Idx = 0; Idx < ValuesToDateArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ValuesToDateArray[Idx];
        ValuesToDate.Add(FValueToDateModel(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::CloudScriptModels::FPlayStreamEventEnvelopeModel::~FPlayStreamEventEnvelopeModel()
{

}

void PlayFab::CloudScriptModels::FPlayStreamEventEnvelopeModel::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (EntityId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EntityId"));
        writer->WriteValue(EntityId);
    }

    if (EntityType.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EntityType"));
        writer->WriteValue(EntityType);
    }

    if (EventData.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EventData"));
        writer->WriteValue(EventData);
    }

    if (EventName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EventName"));
        writer->WriteValue(EventName);
    }

    if (EventNamespace.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EventNamespace"));
        writer->WriteValue(EventNamespace);
    }

    if (EventSettings.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EventSettings"));
        writer->WriteValue(EventSettings);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FPlayStreamEventEnvelopeModel::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityIdValue = obj->TryGetField(TEXT("EntityId"));
    if (EntityIdValue.IsValid() && !EntityIdValue->IsNull())
    {
        FString TmpValue;
        if (EntityIdValue->TryGetString(TmpValue)) { EntityId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EntityTypeValue = obj->TryGetField(TEXT("EntityType"));
    if (EntityTypeValue.IsValid() && !EntityTypeValue->IsNull())
    {
        FString TmpValue;
        if (EntityTypeValue->TryGetString(TmpValue)) { EntityType = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EventDataValue = obj->TryGetField(TEXT("EventData"));
    if (EventDataValue.IsValid() && !EventDataValue->IsNull())
    {
        FString TmpValue;
        if (EventDataValue->TryGetString(TmpValue)) { EventData = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EventNameValue = obj->TryGetField(TEXT("EventName"));
    if (EventNameValue.IsValid() && !EventNameValue->IsNull())
    {
        FString TmpValue;
        if (EventNameValue->TryGetString(TmpValue)) { EventName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EventNamespaceValue = obj->TryGetField(TEXT("EventNamespace"));
    if (EventNamespaceValue.IsValid() && !EventNamespaceValue->IsNull())
    {
        FString TmpValue;
        if (EventNamespaceValue->TryGetString(TmpValue)) { EventNamespace = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EventSettingsValue = obj->TryGetField(TEXT("EventSettings"));
    if (EventSettingsValue.IsValid() && !EventSettingsValue->IsNull())
    {
        FString TmpValue;
        if (EventSettingsValue->TryGetString(TmpValue)) { EventSettings = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FPostFunctionResultForEntityTriggeredActionRequest::~FPostFunctionResultForEntityTriggeredActionRequest()
{

}

void PlayFab::CloudScriptModels::FPostFunctionResultForEntityTriggeredActionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("FunctionResult"));
    FunctionResult.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FPostFunctionResultForEntityTriggeredActionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> FunctionResultValue = obj->TryGetField(TEXT("FunctionResult"));
    if (FunctionResultValue.IsValid() && !FunctionResultValue->IsNull())
    {
        FunctionResult = FExecuteFunctionResult(FunctionResultValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FPostFunctionResultForFunctionExecutionRequest::~FPostFunctionResultForFunctionExecutionRequest()
{

}

void PlayFab::CloudScriptModels::FPostFunctionResultForFunctionExecutionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("FunctionResult"));
    FunctionResult.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FPostFunctionResultForFunctionExecutionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> FunctionResultValue = obj->TryGetField(TEXT("FunctionResult"));
    if (FunctionResultValue.IsValid() && !FunctionResultValue->IsNull())
    {
        FunctionResult = FExecuteFunctionResult(FunctionResultValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FPostFunctionResultForPlayerTriggeredActionRequest::~FPostFunctionResultForPlayerTriggeredActionRequest()
{
    //if (Entity != nullptr) delete Entity;
    //if (PlayStreamEventEnvelope != nullptr) delete PlayStreamEventEnvelope;

}

void PlayFab::CloudScriptModels::FPostFunctionResultForPlayerTriggeredActionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("FunctionResult"));
    FunctionResult.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("PlayerProfile"));
    PlayerProfile.writeJSON(writer);

    if (PlayStreamEventEnvelope.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("PlayStreamEventEnvelope"));
        PlayStreamEventEnvelope->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FPostFunctionResultForPlayerTriggeredActionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> FunctionResultValue = obj->TryGetField(TEXT("FunctionResult"));
    if (FunctionResultValue.IsValid() && !FunctionResultValue->IsNull())
    {
        FunctionResult = FExecuteFunctionResult(FunctionResultValue->AsObject());
    }

    const TSharedPtr<FJsonValue> PlayerProfileValue = obj->TryGetField(TEXT("PlayerProfile"));
    if (PlayerProfileValue.IsValid() && !PlayerProfileValue->IsNull())
    {
        PlayerProfile = FPlayerProfileModel(PlayerProfileValue->AsObject());
    }

    const TSharedPtr<FJsonValue> PlayStreamEventEnvelopeValue = obj->TryGetField(TEXT("PlayStreamEventEnvelope"));
    if (PlayStreamEventEnvelopeValue.IsValid() && !PlayStreamEventEnvelopeValue->IsNull())
    {
        PlayStreamEventEnvelope = MakeShareable(new FPlayStreamEventEnvelopeModel(PlayStreamEventEnvelopeValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FPostFunctionResultForScheduledTaskRequest::~FPostFunctionResultForScheduledTaskRequest()
{

}

void PlayFab::CloudScriptModels::FPostFunctionResultForScheduledTaskRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("FunctionResult"));
    FunctionResult.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("ScheduledTaskId"));
    ScheduledTaskId.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FPostFunctionResultForScheduledTaskRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> FunctionResultValue = obj->TryGetField(TEXT("FunctionResult"));
    if (FunctionResultValue.IsValid() && !FunctionResultValue->IsNull())
    {
        FunctionResult = FExecuteFunctionResult(FunctionResultValue->AsObject());
    }

    const TSharedPtr<FJsonValue> ScheduledTaskIdValue = obj->TryGetField(TEXT("ScheduledTaskId"));
    if (ScheduledTaskIdValue.IsValid() && !ScheduledTaskIdValue->IsNull())
    {
        ScheduledTaskId = FNameIdentifier(ScheduledTaskIdValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FRegisterHttpFunctionRequest::~FRegisterHttpFunctionRequest()
{

}

void PlayFab::CloudScriptModels::FRegisterHttpFunctionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!FunctionName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RegisterHttpFunctionRequest::FunctionName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionName"));
        writer->WriteValue(FunctionName);
    }

    if (!FunctionUrl.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RegisterHttpFunctionRequest::FunctionUrl, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionUrl"));
        writer->WriteValue(FunctionUrl);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FRegisterHttpFunctionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> FunctionNameValue = obj->TryGetField(TEXT("FunctionName"));
    if (FunctionNameValue.IsValid() && !FunctionNameValue->IsNull())
    {
        FString TmpValue;
        if (FunctionNameValue->TryGetString(TmpValue)) { FunctionName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FunctionUrlValue = obj->TryGetField(TEXT("FunctionUrl"));
    if (FunctionUrlValue.IsValid() && !FunctionUrlValue->IsNull())
    {
        FString TmpValue;
        if (FunctionUrlValue->TryGetString(TmpValue)) { FunctionUrl = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::CloudScriptModels::FRegisterQueuedFunctionRequest::~FRegisterQueuedFunctionRequest()
{

}

void PlayFab::CloudScriptModels::FRegisterQueuedFunctionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!ConnectionString.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RegisterQueuedFunctionRequest::ConnectionString, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ConnectionString"));
        writer->WriteValue(ConnectionString);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!FunctionName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RegisterQueuedFunctionRequest::FunctionName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionName"));
        writer->WriteValue(FunctionName);
    }

    if (!QueueName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: RegisterQueuedFunctionRequest::QueueName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("QueueName"));
        writer->WriteValue(QueueName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FRegisterQueuedFunctionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ConnectionStringValue = obj->TryGetField(TEXT("ConnectionString"));
    if (ConnectionStringValue.IsValid() && !ConnectionStringValue->IsNull())
    {
        FString TmpValue;
        if (ConnectionStringValue->TryGetString(TmpValue)) { ConnectionString = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> FunctionNameValue = obj->TryGetField(TEXT("FunctionName"));
    if (FunctionNameValue.IsValid() && !FunctionNameValue->IsNull())
    {
        FString TmpValue;
        if (FunctionNameValue->TryGetString(TmpValue)) { FunctionName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> QueueNameValue = obj->TryGetField(TEXT("QueueName"));
    if (QueueNameValue.IsValid() && !QueueNameValue->IsNull())
    {
        FString TmpValue;
        if (QueueNameValue->TryGetString(TmpValue)) { QueueName = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::CloudScriptModels::writeTriggerTypeEnumJSON(TriggerType enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case TriggerTypeHTTP: writer->WriteValue(TEXT("HTTP")); break;
    case TriggerTypeQueue: writer->WriteValue(TEXT("Queue")); break;
    }
}

CloudScriptModels::TriggerType PlayFab::CloudScriptModels::readTriggerTypeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readTriggerTypeFromValue(value.IsValid() ? value->AsString() : "");
}

CloudScriptModels::TriggerType PlayFab::CloudScriptModels::readTriggerTypeFromValue(const FString& value)
{
    static TMap<FString, TriggerType> _TriggerTypeMap;
    if (_TriggerTypeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _TriggerTypeMap.Add(TEXT("HTTP"), TriggerTypeHTTP);
        _TriggerTypeMap.Add(TEXT("Queue"), TriggerTypeQueue);

    }

    if (!value.IsEmpty())
    {
        auto output = _TriggerTypeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return TriggerTypeHTTP; // Basically critical fail
}

PlayFab::CloudScriptModels::FUnregisterFunctionRequest::~FUnregisterFunctionRequest()
{

}

void PlayFab::CloudScriptModels::FUnregisterFunctionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (!FunctionName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UnregisterFunctionRequest::FunctionName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("FunctionName"));
        writer->WriteValue(FunctionName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::CloudScriptModels::FUnregisterFunctionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> FunctionNameValue = obj->TryGetField(TEXT("FunctionName"));
    if (FunctionNameValue.IsValid() && !FunctionNameValue->IsNull())
    {
        FString TmpValue;
        if (FunctionNameValue->TryGetString(TmpValue)) { FunctionName = TmpValue; }
    }

    return HasSucceeded;
}

