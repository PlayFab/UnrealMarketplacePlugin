//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "Core/PlayFabError.h"
#include "Core/PlayFabCloudScriptDataModels.h"
#include "Core/PlayFabSettings.h"
#include "PlayFabAPISettings.h"
#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"

namespace PlayFab
{
    /**
     * Main interface for PlayFab Sdk, specifically all CloudScript APIs
     */
    class PLAYFABCPP_API UPlayFabCloudScriptInstanceAPI
    {
    public:
        DECLARE_DELEGATE_OneParam(FExecuteEntityCloudScriptDelegate, const CloudScriptModels::FExecuteCloudScriptResult&);
        DECLARE_DELEGATE_OneParam(FExecuteFunctionDelegate, const CloudScriptModels::FExecuteFunctionResult&);
        DECLARE_DELEGATE_OneParam(FListFunctionsDelegate, const CloudScriptModels::FListFunctionsResult&);
        DECLARE_DELEGATE_OneParam(FListHttpFunctionsDelegate, const CloudScriptModels::FListHttpFunctionsResult&);
        DECLARE_DELEGATE_OneParam(FListQueuedFunctionsDelegate, const CloudScriptModels::FListQueuedFunctionsResult&);
        DECLARE_DELEGATE_OneParam(FPostFunctionResultForEntityTriggeredActionDelegate, const CloudScriptModels::FEmptyResult&);
        DECLARE_DELEGATE_OneParam(FPostFunctionResultForFunctionExecutionDelegate, const CloudScriptModels::FEmptyResult&);
        DECLARE_DELEGATE_OneParam(FPostFunctionResultForPlayerTriggeredActionDelegate, const CloudScriptModels::FEmptyResult&);
        DECLARE_DELEGATE_OneParam(FPostFunctionResultForScheduledTaskDelegate, const CloudScriptModels::FEmptyResult&);
        DECLARE_DELEGATE_OneParam(FRegisterHttpFunctionDelegate, const CloudScriptModels::FEmptyResult&);
        DECLARE_DELEGATE_OneParam(FRegisterQueuedFunctionDelegate, const CloudScriptModels::FEmptyResult&);
        DECLARE_DELEGATE_OneParam(FUnregisterFunctionDelegate, const CloudScriptModels::FEmptyResult&);


    private:
        TSharedPtr<UPlayFabAPISettings> settings;
        TSharedPtr<UPlayFabAuthenticationContext> authContext;
    
    public:
        UPlayFabCloudScriptInstanceAPI();
        explicit UPlayFabCloudScriptInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings);
        explicit UPlayFabCloudScriptInstanceAPI(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        UPlayFabCloudScriptInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings, TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        ~UPlayFabCloudScriptInstanceAPI();
        UPlayFabCloudScriptInstanceAPI(const UPlayFabCloudScriptInstanceAPI& source) = delete; // disable copy
        UPlayFabCloudScriptInstanceAPI(UPlayFabCloudScriptInstanceAPI&&) = delete; // disable move
        UPlayFabCloudScriptInstanceAPI& operator=(const UPlayFabCloudScriptInstanceAPI& source) = delete; // disable assignment
        UPlayFabCloudScriptInstanceAPI& operator=(UPlayFabCloudScriptInstanceAPI&& other) = delete; // disable move assignment

        int GetPendingCalls() const;
        TSharedPtr<UPlayFabAPISettings> GetSettings() const;
        void SetSettings(TSharedPtr<UPlayFabAPISettings> apiSettings);
        TSharedPtr<UPlayFabAuthenticationContext> GetAuthenticationContext() const;
        void SetAuthenticationContext(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        void ForgetAllCredentials();

    private:
        TSharedPtr<UPlayFabAuthenticationContext> GetOrCreateAuthenticationContext();
    
    public:


        // ------------ Generated API calls
        /**
         * Cloud Script is one of PlayFab's most versatile features. It allows client code to request execution of any kind of
         * custom server-side functionality you can implement, and it can be used in conjunction with virtually anything.
         * Executes CloudScript with the entity profile that is defined in the request.
         */
        bool ExecuteEntityCloudScript(CloudScriptModels::FExecuteEntityCloudScriptRequest& request, const FExecuteEntityCloudScriptDelegate& SuccessDelegate = FExecuteEntityCloudScriptDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Cloud Script is one of PlayFab's most versatile features. It allows client code to request execution of any kind of
         * custom server-side functionality you can implement, and it can be used in conjunction with virtually anything.
         * Executes an Azure Function with the profile of the entity that is defined in the request.
         */
        bool ExecuteFunction(CloudScriptModels::FExecuteFunctionRequest& request, const FExecuteFunctionDelegate& SuccessDelegate = FExecuteFunctionDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Lists all currently registered Azure Functions for a given title.
        bool ListFunctions(CloudScriptModels::FListFunctionsRequest& request, const FListFunctionsDelegate& SuccessDelegate = FListFunctionsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Lists all currently registered HTTP triggered Azure Functions for a given title.
         * A title can have many functions, ListHttpFunctions will return a list of all the currently registered HTTP triggered functions for a given title.
         */
        bool ListHttpFunctions(CloudScriptModels::FListFunctionsRequest& request, const FListHttpFunctionsDelegate& SuccessDelegate = FListHttpFunctionsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Lists all currently registered Queue triggered Azure Functions for a given title.
        bool ListQueuedFunctions(CloudScriptModels::FListFunctionsRequest& request, const FListQueuedFunctionsDelegate& SuccessDelegate = FListQueuedFunctionsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Generate an entity PlayStream event for the provided function result.
        bool PostFunctionResultForEntityTriggeredAction(CloudScriptModels::FPostFunctionResultForEntityTriggeredActionRequest& request, const FPostFunctionResultForEntityTriggeredActionDelegate& SuccessDelegate = FPostFunctionResultForEntityTriggeredActionDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Generate an entity PlayStream event for the provided function result.
        bool PostFunctionResultForFunctionExecution(CloudScriptModels::FPostFunctionResultForFunctionExecutionRequest& request, const FPostFunctionResultForFunctionExecutionDelegate& SuccessDelegate = FPostFunctionResultForFunctionExecutionDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Generate a player PlayStream event for the provided function result.
        bool PostFunctionResultForPlayerTriggeredAction(CloudScriptModels::FPostFunctionResultForPlayerTriggeredActionRequest& request, const FPostFunctionResultForPlayerTriggeredActionDelegate& SuccessDelegate = FPostFunctionResultForPlayerTriggeredActionDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Generate a PlayStream event for the provided function result.
        bool PostFunctionResultForScheduledTask(CloudScriptModels::FPostFunctionResultForScheduledTaskRequest& request, const FPostFunctionResultForScheduledTaskDelegate& SuccessDelegate = FPostFunctionResultForScheduledTaskDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Registers an HTTP triggered Azure function with a title.
        bool RegisterHttpFunction(CloudScriptModels::FRegisterHttpFunctionRequest& request, const FRegisterHttpFunctionDelegate& SuccessDelegate = FRegisterHttpFunctionDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Registers a queue triggered Azure Function with a title.
         * A title can have many functions, RegisterQueuedFunction associates a function name with a queue name and connection string.
         */
        bool RegisterQueuedFunction(CloudScriptModels::FRegisterQueuedFunctionRequest& request, const FRegisterQueuedFunctionDelegate& SuccessDelegate = FRegisterQueuedFunctionDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        // Unregisters an Azure Function with a title.
        bool UnregisterFunction(CloudScriptModels::FUnregisterFunctionRequest& request, const FUnregisterFunctionDelegate& SuccessDelegate = FUnregisterFunctionDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());

    private:
        // ------------ Generated result handlers
        void OnExecuteEntityCloudScriptResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FExecuteEntityCloudScriptDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnExecuteFunctionResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FExecuteFunctionDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnListFunctionsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListFunctionsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnListHttpFunctionsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListHttpFunctionsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnListQueuedFunctionsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListQueuedFunctionsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnPostFunctionResultForEntityTriggeredActionResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPostFunctionResultForEntityTriggeredActionDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnPostFunctionResultForFunctionExecutionResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPostFunctionResultForFunctionExecutionDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnPostFunctionResultForPlayerTriggeredActionResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPostFunctionResultForPlayerTriggeredActionDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnPostFunctionResultForScheduledTaskResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPostFunctionResultForScheduledTaskDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnRegisterHttpFunctionResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRegisterHttpFunctionDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnRegisterQueuedFunctionResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRegisterQueuedFunctionDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnUnregisterFunctionResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnregisterFunctionDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);

    };
};
