//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "Core/PlayFabProfilesDataModels.h"
#include "Core/PlayFabJsonHelpers.h"

using namespace PlayFab;
using namespace PlayFab::ProfilesModels;

void PlayFab::ProfilesModels::writeEffectTypeEnumJSON(EffectType enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case EffectTypeAllow: writer->WriteValue(TEXT("Allow")); break;
    case EffectTypeDeny: writer->WriteValue(TEXT("Deny")); break;
    }
}

ProfilesModels::EffectType PlayFab::ProfilesModels::readEffectTypeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readEffectTypeFromValue(value.IsValid() ? value->AsString() : "");
}

ProfilesModels::EffectType PlayFab::ProfilesModels::readEffectTypeFromValue(const FString& value)
{
    static TMap<FString, EffectType> _EffectTypeMap;
    if (_EffectTypeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _EffectTypeMap.Add(TEXT("Allow"), EffectTypeAllow);
        _EffectTypeMap.Add(TEXT("Deny"), EffectTypeDeny);

    }

    if (!value.IsEmpty())
    {
        auto output = _EffectTypeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return EffectTypeAllow; // Basically critical fail
}

PlayFab::ProfilesModels::FEntityDataObject::~FEntityDataObject()
{

}

void PlayFab::ProfilesModels::FEntityDataObject::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DataObject.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("DataObject"));
        DataObject.writeJSON(writer);
    }

    if (EscapedDataObject.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EscapedDataObject"));
        writer->WriteValue(EscapedDataObject);
    }

    if (ObjectName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ObjectName"));
        writer->WriteValue(ObjectName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FEntityDataObject::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataObjectValue = obj->TryGetField(TEXT("DataObject"));
    if (DataObjectValue.IsValid() && !DataObjectValue->IsNull())
    {
        DataObject = FJsonKeeper(DataObjectValue);
    }

    const TSharedPtr<FJsonValue> EscapedDataObjectValue = obj->TryGetField(TEXT("EscapedDataObject"));
    if (EscapedDataObjectValue.IsValid() && !EscapedDataObjectValue->IsNull())
    {
        FString TmpValue;
        if (EscapedDataObjectValue->TryGetString(TmpValue)) { EscapedDataObject = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ObjectNameValue = obj->TryGetField(TEXT("ObjectName"));
    if (ObjectNameValue.IsValid() && !ObjectNameValue->IsNull())
    {
        FString TmpValue;
        if (ObjectNameValue->TryGetString(TmpValue)) { ObjectName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ProfilesModels::FEntityKey::~FEntityKey()
{

}

void PlayFab::ProfilesModels::FEntityKey::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Id.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EntityKey::Id, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FEntityKey::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ProfilesModels::FEntityLineage::~FEntityLineage()
{

}

void PlayFab::ProfilesModels::FEntityLineage::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CharacterId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CharacterId"));
        writer->WriteValue(CharacterId);
    }

    if (GroupId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GroupId"));
        writer->WriteValue(GroupId);
    }

    if (MasterPlayerAccountId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MasterPlayerAccountId"));
        writer->WriteValue(MasterPlayerAccountId);
    }

    if (NamespaceId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NamespaceId"));
        writer->WriteValue(NamespaceId);
    }

    if (TitleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitleId"));
        writer->WriteValue(TitleId);
    }

    if (TitlePlayerAccountId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitlePlayerAccountId"));
        writer->WriteValue(TitlePlayerAccountId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FEntityLineage::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CharacterIdValue = obj->TryGetField(TEXT("CharacterId"));
    if (CharacterIdValue.IsValid() && !CharacterIdValue->IsNull())
    {
        FString TmpValue;
        if (CharacterIdValue->TryGetString(TmpValue)) { CharacterId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GroupIdValue = obj->TryGetField(TEXT("GroupId"));
    if (GroupIdValue.IsValid() && !GroupIdValue->IsNull())
    {
        FString TmpValue;
        if (GroupIdValue->TryGetString(TmpValue)) { GroupId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MasterPlayerAccountIdValue = obj->TryGetField(TEXT("MasterPlayerAccountId"));
    if (MasterPlayerAccountIdValue.IsValid() && !MasterPlayerAccountIdValue->IsNull())
    {
        FString TmpValue;
        if (MasterPlayerAccountIdValue->TryGetString(TmpValue)) { MasterPlayerAccountId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NamespaceIdValue = obj->TryGetField(TEXT("NamespaceId"));
    if (NamespaceIdValue.IsValid() && !NamespaceIdValue->IsNull())
    {
        FString TmpValue;
        if (NamespaceIdValue->TryGetString(TmpValue)) { NamespaceId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TitleIdValue = obj->TryGetField(TEXT("TitleId"));
    if (TitleIdValue.IsValid() && !TitleIdValue->IsNull())
    {
        FString TmpValue;
        if (TitleIdValue->TryGetString(TmpValue)) { TitleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TitlePlayerAccountIdValue = obj->TryGetField(TEXT("TitlePlayerAccountId"));
    if (TitlePlayerAccountIdValue.IsValid() && !TitlePlayerAccountIdValue->IsNull())
    {
        FString TmpValue;
        if (TitlePlayerAccountIdValue->TryGetString(TmpValue)) { TitlePlayerAccountId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ProfilesModels::FEntityPermissionStatement::~FEntityPermissionStatement()
{

}

void PlayFab::ProfilesModels::FEntityPermissionStatement::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Action.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EntityPermissionStatement::Action, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Action"));
        writer->WriteValue(Action);
    }

    if (Comment.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Comment"));
        writer->WriteValue(Comment);
    }

    if (Condition.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Condition"));
        Condition.writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Effect"));
    writeEffectTypeEnumJSON(Effect, writer);

    writer->WriteIdentifierPrefix(TEXT("Principal"));
    Principal.writeJSON(writer);

    if (!Resource.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EntityPermissionStatement::Resource, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Resource"));
        writer->WriteValue(Resource);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FEntityPermissionStatement::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ActionValue = obj->TryGetField(TEXT("Action"));
    if (ActionValue.IsValid() && !ActionValue->IsNull())
    {
        FString TmpValue;
        if (ActionValue->TryGetString(TmpValue)) { Action = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CommentValue = obj->TryGetField(TEXT("Comment"));
    if (CommentValue.IsValid() && !CommentValue->IsNull())
    {
        FString TmpValue;
        if (CommentValue->TryGetString(TmpValue)) { Comment = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ConditionValue = obj->TryGetField(TEXT("Condition"));
    if (ConditionValue.IsValid() && !ConditionValue->IsNull())
    {
        Condition = FJsonKeeper(ConditionValue);
    }

    Effect = readEffectTypeFromValue(obj->TryGetField(TEXT("Effect")));

    const TSharedPtr<FJsonValue> PrincipalValue = obj->TryGetField(TEXT("Principal"));
    if (PrincipalValue.IsValid() && !PrincipalValue->IsNull())
    {
        Principal = FJsonKeeper(PrincipalValue);
    }

    const TSharedPtr<FJsonValue> ResourceValue = obj->TryGetField(TEXT("Resource"));
    if (ResourceValue.IsValid() && !ResourceValue->IsNull())
    {
        FString TmpValue;
        if (ResourceValue->TryGetString(TmpValue)) { Resource = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ProfilesModels::FEntityProfileFileMetadata::~FEntityProfileFileMetadata()
{

}

void PlayFab::ProfilesModels::FEntityProfileFileMetadata::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Checksum.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Checksum"));
        writer->WriteValue(Checksum);
    }

    if (FileName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FileName"));
        writer->WriteValue(FileName);
    }

    writer->WriteIdentifierPrefix(TEXT("LastModified"));
    writeDatetime(LastModified, writer);

    writer->WriteIdentifierPrefix(TEXT("Size"));
    writer->WriteValue(Size);

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FEntityProfileFileMetadata::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ChecksumValue = obj->TryGetField(TEXT("Checksum"));
    if (ChecksumValue.IsValid() && !ChecksumValue->IsNull())
    {
        FString TmpValue;
        if (ChecksumValue->TryGetString(TmpValue)) { Checksum = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FileNameValue = obj->TryGetField(TEXT("FileName"));
    if (FileNameValue.IsValid() && !FileNameValue->IsNull())
    {
        FString TmpValue;
        if (FileNameValue->TryGetString(TmpValue)) { FileName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LastModifiedValue = obj->TryGetField(TEXT("LastModified"));
    if (LastModifiedValue.IsValid())
        LastModified = readDatetime(LastModifiedValue);


    const TSharedPtr<FJsonValue> SizeValue = obj->TryGetField(TEXT("Size"));
    if (SizeValue.IsValid() && !SizeValue->IsNull())
    {
        int32 TmpValue;
        if (SizeValue->TryGetNumber(TmpValue)) { Size = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ProfilesModels::FEntityStatisticChildValue::~FEntityStatisticChildValue()
{

}

void PlayFab::ProfilesModels::FEntityStatisticChildValue::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ChildName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ChildName"));
        writer->WriteValue(ChildName);
    }

    if (Metadata.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Metadata"));
        writer->WriteValue(Metadata);
    }

    writer->WriteIdentifierPrefix(TEXT("Value"));
    writer->WriteValue(Value);

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FEntityStatisticChildValue::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ChildNameValue = obj->TryGetField(TEXT("ChildName"));
    if (ChildNameValue.IsValid() && !ChildNameValue->IsNull())
    {
        FString TmpValue;
        if (ChildNameValue->TryGetString(TmpValue)) { ChildName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MetadataValue = obj->TryGetField(TEXT("Metadata"));
    if (MetadataValue.IsValid() && !MetadataValue->IsNull())
    {
        FString TmpValue;
        if (MetadataValue->TryGetString(TmpValue)) { Metadata = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        int32 TmpValue;
        if (ValueValue->TryGetNumber(TmpValue)) { Value = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ProfilesModels::FEntityStatisticValue::~FEntityStatisticValue()
{

}

void PlayFab::ProfilesModels::FEntityStatisticValue::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ChildStatistics.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("ChildStatistics"));
        for (TMap<FString, FEntityStatisticChildValue>::TConstIterator It(ChildStatistics); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    if (Metadata.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Metadata"));
        writer->WriteValue(Metadata);
    }

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (Value.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Value"));
        writer->WriteValue(Value);
    }

    writer->WriteIdentifierPrefix(TEXT("Version"));
    writer->WriteValue(Version);

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FEntityStatisticValue::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* ChildStatisticsObject;
    if (obj->TryGetObjectField(TEXT("ChildStatistics"), ChildStatisticsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*ChildStatisticsObject)->Values); It; ++It)
        {
            ChildStatistics.Add(It.Key(), FEntityStatisticChildValue(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> MetadataValue = obj->TryGetField(TEXT("Metadata"));
    if (MetadataValue.IsValid() && !MetadataValue->IsNull())
    {
        FString TmpValue;
        if (MetadataValue->TryGetString(TmpValue)) { Metadata = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        int32 TmpValue;
        if (ValueValue->TryGetNumber(TmpValue)) { Value = TmpValue; }
    }

    const TSharedPtr<FJsonValue> VersionValue = obj->TryGetField(TEXT("Version"));
    if (VersionValue.IsValid() && !VersionValue->IsNull())
    {
        int32 TmpValue;
        if (VersionValue->TryGetNumber(TmpValue)) { Version = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ProfilesModels::FEntityProfileBody::~FEntityProfileBody()
{
    //if (Entity != nullptr) delete Entity;
    //if (Lineage != nullptr) delete Lineage;

}

void PlayFab::ProfilesModels::FEntityProfileBody::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AvatarUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AvatarUrl"));
        writer->WriteValue(AvatarUrl);
    }

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writeDatetime(Created, writer);

    if (DisplayName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayName"));
        writer->WriteValue(DisplayName);
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (EntityChain.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EntityChain"));
        writer->WriteValue(EntityChain);
    }

    if (ExperimentVariants.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ExperimentVariants"));
        for (const FString& item : ExperimentVariants)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Files.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Files"));
        for (TMap<FString, FEntityProfileFileMetadata>::TConstIterator It(Files); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    if (Language.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Language"));
        writer->WriteValue(Language);
    }

    if (LeaderboardMetadata.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("LeaderboardMetadata"));
        writer->WriteValue(LeaderboardMetadata);
    }

    if (Lineage.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Lineage"));
        Lineage->writeJSON(writer);
    }

    if (Objects.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Objects"));
        for (TMap<FString, FEntityDataObject>::TConstIterator It(Objects); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    if (Permissions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Permissions"));
        for (const FEntityPermissionStatement& item : Permissions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Statistics.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Statistics"));
        for (TMap<FString, FEntityStatisticValue>::TConstIterator It(Statistics); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("VersionNumber"));
    writer->WriteValue(VersionNumber);

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FEntityProfileBody::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AvatarUrlValue = obj->TryGetField(TEXT("AvatarUrl"));
    if (AvatarUrlValue.IsValid() && !AvatarUrlValue->IsNull())
    {
        FString TmpValue;
        if (AvatarUrlValue->TryGetString(TmpValue)) { AvatarUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> DisplayNameValue = obj->TryGetField(TEXT("DisplayName"));
    if (DisplayNameValue.IsValid() && !DisplayNameValue->IsNull())
    {
        FString TmpValue;
        if (DisplayNameValue->TryGetString(TmpValue)) { DisplayName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> EntityChainValue = obj->TryGetField(TEXT("EntityChain"));
    if (EntityChainValue.IsValid() && !EntityChainValue->IsNull())
    {
        FString TmpValue;
        if (EntityChainValue->TryGetString(TmpValue)) { EntityChain = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("ExperimentVariants"), ExperimentVariants);

    const TSharedPtr<FJsonObject>* FilesObject;
    if (obj->TryGetObjectField(TEXT("Files"), FilesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*FilesObject)->Values); It; ++It)
        {
            Files.Add(It.Key(), FEntityProfileFileMetadata(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> LanguageValue = obj->TryGetField(TEXT("Language"));
    if (LanguageValue.IsValid() && !LanguageValue->IsNull())
    {
        FString TmpValue;
        if (LanguageValue->TryGetString(TmpValue)) { Language = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LeaderboardMetadataValue = obj->TryGetField(TEXT("LeaderboardMetadata"));
    if (LeaderboardMetadataValue.IsValid() && !LeaderboardMetadataValue->IsNull())
    {
        FString TmpValue;
        if (LeaderboardMetadataValue->TryGetString(TmpValue)) { LeaderboardMetadata = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LineageValue = obj->TryGetField(TEXT("Lineage"));
    if (LineageValue.IsValid() && !LineageValue->IsNull())
    {
        Lineage = MakeShareable(new FEntityLineage(LineageValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* ObjectsObject;
    if (obj->TryGetObjectField(TEXT("Objects"), ObjectsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*ObjectsObject)->Values); It; ++It)
        {
            Objects.Add(It.Key(), FEntityDataObject(It.Value()->AsObject()));
        }
    }

    const TArray<TSharedPtr<FJsonValue>>&PermissionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Permissions"));
    for (int32 Idx = 0; Idx < PermissionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PermissionsArray[Idx];
        Permissions.Add(FEntityPermissionStatement(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* StatisticsObject;
    if (obj->TryGetObjectField(TEXT("Statistics"), StatisticsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*StatisticsObject)->Values); It; ++It)
        {
            Statistics.Add(It.Key(), FEntityStatisticValue(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> VersionNumberValue = obj->TryGetField(TEXT("VersionNumber"));
    if (VersionNumberValue.IsValid() && !VersionNumberValue->IsNull())
    {
        int32 TmpValue;
        if (VersionNumberValue->TryGetNumber(TmpValue)) { VersionNumber = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ProfilesModels::FGetEntityProfileRequest::~FGetEntityProfileRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::ProfilesModels::FGetEntityProfileRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (DataAsObject.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("DataAsObject"));
        writer->WriteValue(DataAsObject);
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FGetEntityProfileRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DataAsObjectValue = obj->TryGetField(TEXT("DataAsObject"));
    if (DataAsObjectValue.IsValid() && !DataAsObjectValue->IsNull())
    {
        bool TmpValue;
        if (DataAsObjectValue->TryGetBool(TmpValue)) { DataAsObject = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::ProfilesModels::FGetEntityProfileResponse::~FGetEntityProfileResponse()
{
    //if (Profile != nullptr) delete Profile;

}

void PlayFab::ProfilesModels::FGetEntityProfileResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Profile.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Profile"));
        Profile->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FGetEntityProfileResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ProfileValue = obj->TryGetField(TEXT("Profile"));
    if (ProfileValue.IsValid() && !ProfileValue->IsNull())
    {
        Profile = MakeShareable(new FEntityProfileBody(ProfileValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::ProfilesModels::FGetEntityProfilesRequest::~FGetEntityProfilesRequest()
{

}

void PlayFab::ProfilesModels::FGetEntityProfilesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (DataAsObject.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("DataAsObject"));
        writer->WriteValue(DataAsObject);
    }

    writer->WriteArrayStart(TEXT("Entities"));
    for (const FEntityKey& item : Entities)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FGetEntityProfilesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DataAsObjectValue = obj->TryGetField(TEXT("DataAsObject"));
    if (DataAsObjectValue.IsValid() && !DataAsObjectValue->IsNull())
    {
        bool TmpValue;
        if (DataAsObjectValue->TryGetBool(TmpValue)) { DataAsObject = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&EntitiesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Entities"));
    for (int32 Idx = 0; Idx < EntitiesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = EntitiesArray[Idx];
        Entities.Add(FEntityKey(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ProfilesModels::FGetEntityProfilesResponse::~FGetEntityProfilesResponse()
{

}

void PlayFab::ProfilesModels::FGetEntityProfilesResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Profiles.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Profiles"));
        for (const FEntityProfileBody& item : Profiles)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FGetEntityProfilesResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ProfilesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Profiles"));
    for (int32 Idx = 0; Idx < ProfilesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ProfilesArray[Idx];
        Profiles.Add(FEntityProfileBody(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ProfilesModels::FGetGlobalPolicyRequest::~FGetGlobalPolicyRequest()
{

}

void PlayFab::ProfilesModels::FGetGlobalPolicyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FGetGlobalPolicyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::ProfilesModels::FGetGlobalPolicyResponse::~FGetGlobalPolicyResponse()
{

}

void PlayFab::ProfilesModels::FGetGlobalPolicyResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Permissions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Permissions"));
        for (const FEntityPermissionStatement& item : Permissions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FGetGlobalPolicyResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&PermissionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Permissions"));
    for (int32 Idx = 0; Idx < PermissionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PermissionsArray[Idx];
        Permissions.Add(FEntityPermissionStatement(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ProfilesModels::FGetTitlePlayersFromMasterPlayerAccountIdsRequest::~FGetTitlePlayersFromMasterPlayerAccountIdsRequest()
{

}

void PlayFab::ProfilesModels::FGetTitlePlayersFromMasterPlayerAccountIdsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteArrayStart(TEXT("MasterPlayerAccountIds"));
    for (const FString& item : MasterPlayerAccountIds)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    if (TitleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitleId"));
        writer->WriteValue(TitleId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FGetTitlePlayersFromMasterPlayerAccountIdsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("MasterPlayerAccountIds"), MasterPlayerAccountIds);

    const TSharedPtr<FJsonValue> TitleIdValue = obj->TryGetField(TEXT("TitleId"));
    if (TitleIdValue.IsValid() && !TitleIdValue->IsNull())
    {
        FString TmpValue;
        if (TitleIdValue->TryGetString(TmpValue)) { TitleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ProfilesModels::FGetTitlePlayersFromMasterPlayerAccountIdsResponse::~FGetTitlePlayersFromMasterPlayerAccountIdsResponse()
{

}

void PlayFab::ProfilesModels::FGetTitlePlayersFromMasterPlayerAccountIdsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (TitleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("TitleId"));
        writer->WriteValue(TitleId);
    }

    if (TitlePlayerAccounts.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("TitlePlayerAccounts"));
        for (TMap<FString, FEntityKey>::TConstIterator It(TitlePlayerAccounts); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FGetTitlePlayersFromMasterPlayerAccountIdsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> TitleIdValue = obj->TryGetField(TEXT("TitleId"));
    if (TitleIdValue.IsValid() && !TitleIdValue->IsNull())
    {
        FString TmpValue;
        if (TitleIdValue->TryGetString(TmpValue)) { TitleId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* TitlePlayerAccountsObject;
    if (obj->TryGetObjectField(TEXT("TitlePlayerAccounts"), TitlePlayerAccountsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*TitlePlayerAccountsObject)->Values); It; ++It)
        {
            TitlePlayerAccounts.Add(It.Key(), FEntityKey(It.Value()->AsObject()));
        }
    }

    return HasSucceeded;
}

void PlayFab::ProfilesModels::writeOperationTypesEnumJSON(OperationTypes enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case OperationTypesCreated: writer->WriteValue(TEXT("Created")); break;
    case OperationTypesUpdated: writer->WriteValue(TEXT("Updated")); break;
    case OperationTypesDeleted: writer->WriteValue(TEXT("Deleted")); break;
    case OperationTypesNone: writer->WriteValue(TEXT("None")); break;
    }
}

ProfilesModels::OperationTypes PlayFab::ProfilesModels::readOperationTypesFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readOperationTypesFromValue(value.IsValid() ? value->AsString() : "");
}

ProfilesModels::OperationTypes PlayFab::ProfilesModels::readOperationTypesFromValue(const FString& value)
{
    static TMap<FString, OperationTypes> _OperationTypesMap;
    if (_OperationTypesMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _OperationTypesMap.Add(TEXT("Created"), OperationTypesCreated);
        _OperationTypesMap.Add(TEXT("Updated"), OperationTypesUpdated);
        _OperationTypesMap.Add(TEXT("Deleted"), OperationTypesDeleted);
        _OperationTypesMap.Add(TEXT("None"), OperationTypesNone);

    }

    if (!value.IsEmpty())
    {
        auto output = _OperationTypesMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return OperationTypesCreated; // Basically critical fail
}

PlayFab::ProfilesModels::FSetEntityProfilePolicyRequest::~FSetEntityProfilePolicyRequest()
{

}

void PlayFab::ProfilesModels::FSetEntityProfilePolicyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    if (Statements.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Statements"));
        for (const FEntityPermissionStatement& item : Statements)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FSetEntityProfilePolicyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TArray<TSharedPtr<FJsonValue>>&StatementsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Statements"));
    for (int32 Idx = 0; Idx < StatementsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StatementsArray[Idx];
        Statements.Add(FEntityPermissionStatement(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ProfilesModels::FSetEntityProfilePolicyResponse::~FSetEntityProfilePolicyResponse()
{

}

void PlayFab::ProfilesModels::FSetEntityProfilePolicyResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Permissions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Permissions"));
        for (const FEntityPermissionStatement& item : Permissions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FSetEntityProfilePolicyResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&PermissionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Permissions"));
    for (int32 Idx = 0; Idx < PermissionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PermissionsArray[Idx];
        Permissions.Add(FEntityPermissionStatement(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ProfilesModels::FSetGlobalPolicyRequest::~FSetGlobalPolicyRequest()
{

}

void PlayFab::ProfilesModels::FSetGlobalPolicyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Permissions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Permissions"));
        for (const FEntityPermissionStatement& item : Permissions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FSetGlobalPolicyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TArray<TSharedPtr<FJsonValue>>&PermissionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Permissions"));
    for (int32 Idx = 0; Idx < PermissionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PermissionsArray[Idx];
        Permissions.Add(FEntityPermissionStatement(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::ProfilesModels::FSetGlobalPolicyResponse::~FSetGlobalPolicyResponse()
{

}

void PlayFab::ProfilesModels::FSetGlobalPolicyResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FSetGlobalPolicyResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::ProfilesModels::FSetProfileLanguageRequest::~FSetProfileLanguageRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::ProfilesModels::FSetProfileLanguageRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ExpectedVersion.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ExpectedVersion"));
        writer->WriteValue(ExpectedVersion);
    }

    if (Language.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Language"));
        writer->WriteValue(Language);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FSetProfileLanguageRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ExpectedVersionValue = obj->TryGetField(TEXT("ExpectedVersion"));
    if (ExpectedVersionValue.IsValid() && !ExpectedVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ExpectedVersionValue->TryGetNumber(TmpValue)) { ExpectedVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LanguageValue = obj->TryGetField(TEXT("Language"));
    if (LanguageValue.IsValid() && !LanguageValue->IsNull())
    {
        FString TmpValue;
        if (LanguageValue->TryGetString(TmpValue)) { Language = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::ProfilesModels::FSetProfileLanguageResponse::~FSetProfileLanguageResponse()
{

}

void PlayFab::ProfilesModels::FSetProfileLanguageResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (OperationResult.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("OperationResult"));
        writeOperationTypesEnumJSON(OperationResult, writer);
    }

    if (VersionNumber.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("VersionNumber"));
        writer->WriteValue(VersionNumber);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::ProfilesModels::FSetProfileLanguageResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    OperationResult = readOperationTypesFromValue(obj->TryGetField(TEXT("OperationResult")));

    const TSharedPtr<FJsonValue> VersionNumberValue = obj->TryGetField(TEXT("VersionNumber"));
    if (VersionNumberValue.IsValid() && !VersionNumberValue->IsNull())
    {
        int32 TmpValue;
        if (VersionNumberValue->TryGetNumber(TmpValue)) { VersionNumber = TmpValue; }
    }

    return HasSucceeded;
}

