//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "PlayFabCppBaseModel.h"

namespace PlayFab
{
namespace EventsModels
{

    struct PLAYFABCPP_API FEntityKey : public PlayFab::FPlayFabCppBaseModel
    {
        // Unique ID of the entity.
        FString Id;

        // [optional] Entity type. See https://docs.microsoft.com/gaming/playfab/features/data/entities/available-built-in-entity-types
        FString Type;

        FEntityKey() :
            FPlayFabCppBaseModel(),
            Id(),
            Type()
            {}

        FEntityKey(const FEntityKey& src) = default;

        FEntityKey(const TSharedPtr<FJsonObject>& obj) : FEntityKey()
        {
            readFromValue(obj);
        }

        ~FEntityKey();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FEventContents : public PlayFab::FPlayFabCppBaseModel
    {
        /**
         * [optional] The optional custom tags associated with the event (e.g. build number, external trace identifiers, etc.). Before an
         * event is written, this collection and the base request custom tags will be merged, but not overriden. This enables the
         * caller to specify static tags and per event tags.
         */
        TMap<FString, FString> CustomTags;
        // [optional] Entity associated with the event. If null, the event will apply to the calling entity.
        TSharedPtr<FEntityKey> Entity;

        // The namespace in which the event is defined. Allowed namespaces can vary by API.
        FString EventNamespace;

        // The name of this event.
        FString Name;

        /**
         * [optional] The original unique identifier associated with this event before it was posted to PlayFab. The value might differ from
         * the EventId value, which is assigned when the event is received by the server.
         */
        FString OriginalId;

        /**
         * [optional] The time (in UTC) associated with this event when it occurred. If specified, this value is stored in the
         * OriginalTimestamp property of the PlayStream event.
         */
        Boxed<FDateTime> OriginalTimestamp;

        // [optional] Arbitrary data associated with the event. Only one of Payload or PayloadJSON is allowed.
        FJsonKeeper Payload;

        /**
         * [optional] Arbitrary data associated with the event, represented as a JSON serialized string. Only one of Payload or PayloadJSON is
         * allowed.
         */
        FString PayloadJSON;

        FEventContents() :
            FPlayFabCppBaseModel(),
            CustomTags(),
            Entity(nullptr),
            EventNamespace(),
            Name(),
            OriginalId(),
            OriginalTimestamp(),
            Payload(),
            PayloadJSON()
            {}

        FEventContents(const FEventContents& src) = default;

        FEventContents(const TSharedPtr<FJsonObject>& obj) : FEventContents()
        {
            readFromValue(obj);
        }

        ~FEventContents();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FWriteEventsRequest : public PlayFab::FPlayFabCppRequestCommon
    {
        // [optional] The optional custom tags associated with the request (e.g. build number, external trace identifiers, etc.).
        TMap<FString, FString> CustomTags;
        // Collection of events to write to PlayStream.
        TArray<FEventContents> Events;
        FWriteEventsRequest() :
            FPlayFabCppRequestCommon(),
            CustomTags(),
            Events()
            {}

        FWriteEventsRequest(const FWriteEventsRequest& src) = default;

        FWriteEventsRequest(const TSharedPtr<FJsonObject>& obj) : FWriteEventsRequest()
        {
            readFromValue(obj);
        }

        ~FWriteEventsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FWriteEventsResponse : public PlayFab::FPlayFabCppResultCommon
    {
        /**
         * [optional] The unique identifiers assigned by the server to the events, in the same order as the events in the request. Only
         * returned if FlushToPlayStream option is true.
         */
        TArray<FString> AssignedEventIds;
        FWriteEventsResponse() :
            FPlayFabCppResultCommon(),
            AssignedEventIds()
            {}

        FWriteEventsResponse(const FWriteEventsResponse& src) = default;

        FWriteEventsResponse(const TSharedPtr<FJsonObject>& obj) : FWriteEventsResponse()
        {
            readFromValue(obj);
        }

        ~FWriteEventsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

}
}
