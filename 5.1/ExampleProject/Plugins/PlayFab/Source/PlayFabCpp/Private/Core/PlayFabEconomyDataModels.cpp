//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "Core/PlayFabEconomyDataModels.h"
#include "Core/PlayFabJsonHelpers.h"

using namespace PlayFab;
using namespace PlayFab::EconomyModels;

PlayFab::EconomyModels::FAlternateId::~FAlternateId()
{

}

void PlayFab::EconomyModels::FAlternateId::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    if (Value.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Value"));
        writer->WriteValue(Value);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FAlternateId::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        FString TmpValue;
        if (ValueValue->TryGetString(TmpValue)) { Value = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FInventoryItemReference::~FInventoryItemReference()
{
    //if (AlternateId != nullptr) delete AlternateId;

}

void PlayFab::EconomyModels::FInventoryItemReference::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (pfAlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        pfAlternateId->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (StackId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StackId"));
        writer->WriteValue(StackId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FInventoryItemReference::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        pfAlternateId = MakeShareable(new FAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StackIdValue = obj->TryGetField(TEXT("StackId"));
    if (StackIdValue.IsValid() && !StackIdValue->IsNull())
    {
        FString TmpValue;
        if (StackIdValue->TryGetString(TmpValue)) { StackId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FAddInventoryItemsOperation::~FAddInventoryItemsOperation()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FAddInventoryItemsOperation::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FAddInventoryItemsOperation::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FInventoryItemReference(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FEntityKey::~FEntityKey()
{

}

void PlayFab::EconomyModels::FEntityKey::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Id.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EntityKey::Id, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FEntityKey::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FAddInventoryItemsRequest::~FAddInventoryItemsRequest()
{
    //if (Entity != nullptr) delete Entity;
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FAddInventoryItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (CollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionId"));
        writer->WriteValue(CollectionId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (IdempotencyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IdempotencyId"));
        writer->WriteValue(IdempotencyId);
    }

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FAddInventoryItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CollectionIdValue = obj->TryGetField(TEXT("CollectionId"));
    if (CollectionIdValue.IsValid() && !CollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (CollectionIdValue->TryGetString(TmpValue)) { CollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdempotencyIdValue = obj->TryGetField(TEXT("IdempotencyId"));
    if (IdempotencyIdValue.IsValid() && !IdempotencyIdValue->IsNull())
    {
        FString TmpValue;
        if (IdempotencyIdValue->TryGetString(TmpValue)) { IdempotencyId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FInventoryItemReference(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FAddInventoryItemsResponse::~FAddInventoryItemsResponse()
{

}

void PlayFab::EconomyModels::FAddInventoryItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (IdempotencyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IdempotencyId"));
        writer->WriteValue(IdempotencyId);
    }

    if (TransactionIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TransactionIds"));
        for (const FString& item : TransactionIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FAddInventoryItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdempotencyIdValue = obj->TryGetField(TEXT("IdempotencyId"));
    if (IdempotencyIdValue.IsValid() && !IdempotencyIdValue->IsNull())
    {
        FString TmpValue;
        if (IdempotencyIdValue->TryGetString(TmpValue)) { IdempotencyId = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("TransactionIds"), TransactionIds);

    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogAlternateId::~FCatalogAlternateId()
{

}

void PlayFab::EconomyModels::FCatalogAlternateId::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    if (Value.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Value"));
        writer->WriteValue(Value);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogAlternateId::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ValueValue = obj->TryGetField(TEXT("Value"));
    if (ValueValue.IsValid() && !ValueValue->IsNull())
    {
        FString TmpValue;
        if (ValueValue->TryGetString(TmpValue)) { Value = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogSpecificConfig::~FCatalogSpecificConfig()
{

}

void PlayFab::EconomyModels::FCatalogSpecificConfig::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContentTypes.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ContentTypes"));
        for (const FString& item : ContentTypes)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogSpecificConfig::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("ContentTypes"), ContentTypes);

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    return HasSucceeded;
}

PlayFab::EconomyModels::FDeepLinkFormat::~FDeepLinkFormat()
{

}

void PlayFab::EconomyModels::FDeepLinkFormat::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Format.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Format"));
        writer->WriteValue(Format);
    }

    if (Platform.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writer->WriteValue(Platform);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeepLinkFormat::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FormatValue = obj->TryGetField(TEXT("Format"));
    if (FormatValue.IsValid() && !FormatValue->IsNull())
    {
        FString TmpValue;
        if (FormatValue->TryGetString(TmpValue)) { Format = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PlatformValue = obj->TryGetField(TEXT("Platform"));
    if (PlatformValue.IsValid() && !PlatformValue->IsNull())
    {
        FString TmpValue;
        if (PlatformValue->TryGetString(TmpValue)) { Platform = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::EconomyModels::writeDisplayPropertyTypeEnumJSON(DisplayPropertyType enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case DisplayPropertyTypeNone: writer->WriteValue(TEXT("None")); break;
    case DisplayPropertyTypeQueryDateTime: writer->WriteValue(TEXT("QueryDateTime")); break;
    case DisplayPropertyTypeQueryDouble: writer->WriteValue(TEXT("QueryDouble")); break;
    case DisplayPropertyTypeQueryString: writer->WriteValue(TEXT("QueryString")); break;
    case DisplayPropertyTypeSearchString: writer->WriteValue(TEXT("SearchString")); break;
    }
}

EconomyModels::DisplayPropertyType PlayFab::EconomyModels::readDisplayPropertyTypeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readDisplayPropertyTypeFromValue(value.IsValid() ? value->AsString() : "");
}

EconomyModels::DisplayPropertyType PlayFab::EconomyModels::readDisplayPropertyTypeFromValue(const FString& value)
{
    static TMap<FString, DisplayPropertyType> _DisplayPropertyTypeMap;
    if (_DisplayPropertyTypeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _DisplayPropertyTypeMap.Add(TEXT("None"), DisplayPropertyTypeNone);
        _DisplayPropertyTypeMap.Add(TEXT("QueryDateTime"), DisplayPropertyTypeQueryDateTime);
        _DisplayPropertyTypeMap.Add(TEXT("QueryDouble"), DisplayPropertyTypeQueryDouble);
        _DisplayPropertyTypeMap.Add(TEXT("QueryString"), DisplayPropertyTypeQueryString);
        _DisplayPropertyTypeMap.Add(TEXT("SearchString"), DisplayPropertyTypeSearchString);

    }

    if (!value.IsEmpty())
    {
        auto output = _DisplayPropertyTypeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return DisplayPropertyTypeNone; // Basically critical fail
}

PlayFab::EconomyModels::FDisplayPropertyIndexInfo::~FDisplayPropertyIndexInfo()
{

}

void PlayFab::EconomyModels::FDisplayPropertyIndexInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Name.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Name"));
        writer->WriteValue(Name);
    }

    if (Type.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writeDisplayPropertyTypeEnumJSON(Type, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDisplayPropertyIndexInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> NameValue = obj->TryGetField(TEXT("Name"));
    if (NameValue.IsValid() && !NameValue->IsNull())
    {
        FString TmpValue;
        if (NameValue->TryGetString(TmpValue)) { Name = TmpValue; }
    }

    Type = readDisplayPropertyTypeFromValue(obj->TryGetField(TEXT("Type")));

    return HasSucceeded;
}

PlayFab::EconomyModels::FFileConfig::~FFileConfig()
{

}

void PlayFab::EconomyModels::FFileConfig::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContentTypes.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ContentTypes"));
        for (const FString& item : ContentTypes)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FFileConfig::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("ContentTypes"), ContentTypes);

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    return HasSucceeded;
}

PlayFab::EconomyModels::FImageConfig::~FImageConfig()
{

}

void PlayFab::EconomyModels::FImageConfig::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FImageConfig::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    return HasSucceeded;
}

PlayFab::EconomyModels::FUserGeneratedContentSpecificConfig::~FUserGeneratedContentSpecificConfig()
{

}

void PlayFab::EconomyModels::FUserGeneratedContentSpecificConfig::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContentTypes.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ContentTypes"));
        for (const FString& item : ContentTypes)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUserGeneratedContentSpecificConfig::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("ContentTypes"), ContentTypes);

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogConfig::~FCatalogConfig()
{
    //if (Catalog != nullptr) delete Catalog;
    //if (File != nullptr) delete File;
    //if (Image != nullptr) delete Image;
    //if (UserGeneratedContent != nullptr) delete UserGeneratedContent;

}

void PlayFab::EconomyModels::FCatalogConfig::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AdminEntities.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AdminEntities"));
        for (const FEntityKey& item : AdminEntities)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Catalog.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Catalog"));
        Catalog->writeJSON(writer);
    }

    if (DeepLinkFormats.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("DeepLinkFormats"));
        for (const FDeepLinkFormat& item : DeepLinkFormats)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (DisplayPropertyIndexInfos.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("DisplayPropertyIndexInfos"));
        for (const FDisplayPropertyIndexInfo& item : DisplayPropertyIndexInfos)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (File.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("File"));
        File->writeJSON(writer);
    }

    if (Image.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Image"));
        Image->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("IsCatalogEnabled"));
    writer->WriteValue(IsCatalogEnabled);

    if (Platforms.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Platforms"));
        for (const FString& item : Platforms)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (ReviewerEntities.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ReviewerEntities"));
        for (const FEntityKey& item : ReviewerEntities)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (UserGeneratedContent.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("UserGeneratedContent"));
        UserGeneratedContent->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogConfig::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AdminEntitiesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("AdminEntities"));
    for (int32 Idx = 0; Idx < AdminEntitiesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AdminEntitiesArray[Idx];
        AdminEntities.Add(FEntityKey(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> CatalogValue = obj->TryGetField(TEXT("Catalog"));
    if (CatalogValue.IsValid() && !CatalogValue->IsNull())
    {
        Catalog = MakeShareable(new FCatalogSpecificConfig(CatalogValue->AsObject()));
    }

    const TArray<TSharedPtr<FJsonValue>>&DeepLinkFormatsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("DeepLinkFormats"));
    for (int32 Idx = 0; Idx < DeepLinkFormatsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = DeepLinkFormatsArray[Idx];
        DeepLinkFormats.Add(FDeepLinkFormat(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&DisplayPropertyIndexInfosArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("DisplayPropertyIndexInfos"));
    for (int32 Idx = 0; Idx < DisplayPropertyIndexInfosArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = DisplayPropertyIndexInfosArray[Idx];
        DisplayPropertyIndexInfos.Add(FDisplayPropertyIndexInfo(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> FileValue = obj->TryGetField(TEXT("File"));
    if (FileValue.IsValid() && !FileValue->IsNull())
    {
        File = MakeShareable(new FFileConfig(FileValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ImageValue = obj->TryGetField(TEXT("Image"));
    if (ImageValue.IsValid() && !ImageValue->IsNull())
    {
        Image = MakeShareable(new FImageConfig(ImageValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IsCatalogEnabledValue = obj->TryGetField(TEXT("IsCatalogEnabled"));
    if (IsCatalogEnabledValue.IsValid() && !IsCatalogEnabledValue->IsNull())
    {
        bool TmpValue;
        if (IsCatalogEnabledValue->TryGetBool(TmpValue)) { IsCatalogEnabled = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("Platforms"), Platforms);

    const TArray<TSharedPtr<FJsonValue>>&ReviewerEntitiesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ReviewerEntities"));
    for (int32 Idx = 0; Idx < ReviewerEntitiesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ReviewerEntitiesArray[Idx];
        ReviewerEntities.Add(FEntityKey(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> UserGeneratedContentValue = obj->TryGetField(TEXT("UserGeneratedContent"));
    if (UserGeneratedContentValue.IsValid() && !UserGeneratedContentValue->IsNull())
    {
        UserGeneratedContent = MakeShareable(new FUserGeneratedContentSpecificConfig(UserGeneratedContentValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FContent::~FContent()
{

}

void PlayFab::EconomyModels::FContent::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (MaxClientVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MaxClientVersion"));
        writer->WriteValue(MaxClientVersion);
    }

    if (MinClientVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MinClientVersion"));
        writer->WriteValue(MinClientVersion);
    }

    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    if (Url.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Url"));
        writer->WriteValue(Url);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FContent::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MaxClientVersionValue = obj->TryGetField(TEXT("MaxClientVersion"));
    if (MaxClientVersionValue.IsValid() && !MaxClientVersionValue->IsNull())
    {
        FString TmpValue;
        if (MaxClientVersionValue->TryGetString(TmpValue)) { MaxClientVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MinClientVersionValue = obj->TryGetField(TEXT("MinClientVersion"));
    if (MinClientVersionValue.IsValid() && !MinClientVersionValue->IsNull())
    {
        FString TmpValue;
        if (MinClientVersionValue->TryGetString(TmpValue)) { MinClientVersion = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UrlValue = obj->TryGetField(TEXT("Url"));
    if (UrlValue.IsValid() && !UrlValue->IsNull())
    {
        FString TmpValue;
        if (UrlValue->TryGetString(TmpValue)) { Url = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FDeepLink::~FDeepLink()
{

}

void PlayFab::EconomyModels::FDeepLink::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Platform.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Platform"));
        writer->WriteValue(Platform);
    }

    if (Url.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Url"));
        writer->WriteValue(Url);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeepLink::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> PlatformValue = obj->TryGetField(TEXT("Platform"));
    if (PlatformValue.IsValid() && !PlatformValue->IsNull())
    {
        FString TmpValue;
        if (PlatformValue->TryGetString(TmpValue)) { Platform = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UrlValue = obj->TryGetField(TEXT("Url"));
    if (UrlValue.IsValid() && !UrlValue->IsNull())
    {
        FString TmpValue;
        if (UrlValue->TryGetString(TmpValue)) { Url = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FImage::~FImage()
{

}

void PlayFab::EconomyModels::FImage::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Tag.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Tag"));
        writer->WriteValue(Tag);
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    if (Url.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Url"));
        writer->WriteValue(Url);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FImage::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TagValue = obj->TryGetField(TEXT("Tag"));
    if (TagValue.IsValid() && !TagValue->IsNull())
    {
        FString TmpValue;
        if (TagValue->TryGetString(TmpValue)) { Tag = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UrlValue = obj->TryGetField(TEXT("Url"));
    if (UrlValue.IsValid() && !UrlValue->IsNull())
    {
        FString TmpValue;
        if (UrlValue->TryGetString(TmpValue)) { Url = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogPriceAmount::~FCatalogPriceAmount()
{

}

void PlayFab::EconomyModels::FCatalogPriceAmount::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogPriceAmount::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogPrice::~FCatalogPrice()
{

}

void PlayFab::EconomyModels::FCatalogPrice::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Amounts.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Amounts"));
        for (const FCatalogPriceAmount& item : Amounts)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogPrice::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AmountsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Amounts"));
    for (int32 Idx = 0; Idx < AmountsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AmountsArray[Idx];
        Amounts.Add(FCatalogPriceAmount(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogPriceOptions::~FCatalogPriceOptions()
{

}

void PlayFab::EconomyModels::FCatalogPriceOptions::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Prices.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Prices"));
        for (const FCatalogPrice& item : Prices)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogPriceOptions::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&PricesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Prices"));
    for (int32 Idx = 0; Idx < PricesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PricesArray[Idx];
        Prices.Add(FCatalogPrice(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogItemReference::~FCatalogItemReference()
{
    //if (PriceOptions != nullptr) delete PriceOptions;

}

void PlayFab::EconomyModels::FCatalogItemReference::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Amount.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Amount"));
        writer->WriteValue(Amount);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (PriceOptions.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("PriceOptions"));
        PriceOptions->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogItemReference::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> PriceOptionsValue = obj->TryGetField(TEXT("PriceOptions"));
    if (PriceOptionsValue.IsValid() && !PriceOptionsValue->IsNull())
    {
        PriceOptions = MakeShareable(new FCatalogPriceOptions(PriceOptionsValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FKeywordSet::~FKeywordSet()
{

}

void PlayFab::EconomyModels::FKeywordSet::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Values.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Values"));
        for (const FString& item : Values)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FKeywordSet::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("Values"), Values);

    return HasSucceeded;
}

void PlayFab::EconomyModels::writeModerationStatusEnumJSON(ModerationStatus enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case ModerationStatusUnknown: writer->WriteValue(TEXT("Unknown")); break;
    case ModerationStatusAwaitingModeration: writer->WriteValue(TEXT("AwaitingModeration")); break;
    case ModerationStatusApproved: writer->WriteValue(TEXT("Approved")); break;
    case ModerationStatusRejected: writer->WriteValue(TEXT("Rejected")); break;
    }
}

EconomyModels::ModerationStatus PlayFab::EconomyModels::readModerationStatusFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readModerationStatusFromValue(value.IsValid() ? value->AsString() : "");
}

EconomyModels::ModerationStatus PlayFab::EconomyModels::readModerationStatusFromValue(const FString& value)
{
    static TMap<FString, ModerationStatus> _ModerationStatusMap;
    if (_ModerationStatusMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _ModerationStatusMap.Add(TEXT("Unknown"), ModerationStatusUnknown);
        _ModerationStatusMap.Add(TEXT("AwaitingModeration"), ModerationStatusAwaitingModeration);
        _ModerationStatusMap.Add(TEXT("Approved"), ModerationStatusApproved);
        _ModerationStatusMap.Add(TEXT("Rejected"), ModerationStatusRejected);

    }

    if (!value.IsEmpty())
    {
        auto output = _ModerationStatusMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return ModerationStatusUnknown; // Basically critical fail
}

PlayFab::EconomyModels::FModerationState::~FModerationState()
{

}

void PlayFab::EconomyModels::FModerationState::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (LastModifiedDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LastModifiedDate"));
        writeDatetime(LastModifiedDate, writer);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    if (Status.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        writeModerationStatusEnumJSON(Status, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FModerationState::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> LastModifiedDateValue = obj->TryGetField(TEXT("LastModifiedDate"));
    if (LastModifiedDateValue.IsValid())
        LastModifiedDate = readDatetime(LastModifiedDateValue);


    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    Status = readModerationStatusFromValue(obj->TryGetField(TEXT("Status")));

    return HasSucceeded;
}

PlayFab::EconomyModels::FRating::~FRating()
{

}

void PlayFab::EconomyModels::FRating::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Average.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Average"));
        writer->WriteValue(Average);
    }

    if (Count1Star.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Count1Star"));
        writer->WriteValue(Count1Star);
    }

    if (Count2Star.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Count2Star"));
        writer->WriteValue(Count2Star);
    }

    if (Count3Star.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Count3Star"));
        writer->WriteValue(Count3Star);
    }

    if (Count4Star.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Count4Star"));
        writer->WriteValue(Count4Star);
    }

    if (Count5Star.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Count5Star"));
        writer->WriteValue(Count5Star);
    }

    if (TotalCount.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("TotalCount"));
        writer->WriteValue(TotalCount);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRating::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AverageValue = obj->TryGetField(TEXT("Average"));
    if (AverageValue.IsValid() && !AverageValue->IsNull())
    {
        double TmpValue;
        if (AverageValue->TryGetNumber(TmpValue)) { Average = TmpValue; }
    }

    const TSharedPtr<FJsonValue> Count1StarValue = obj->TryGetField(TEXT("Count1Star"));
    if (Count1StarValue.IsValid() && !Count1StarValue->IsNull())
    {
        int32 TmpValue;
        if (Count1StarValue->TryGetNumber(TmpValue)) { Count1Star = TmpValue; }
    }

    const TSharedPtr<FJsonValue> Count2StarValue = obj->TryGetField(TEXT("Count2Star"));
    if (Count2StarValue.IsValid() && !Count2StarValue->IsNull())
    {
        int32 TmpValue;
        if (Count2StarValue->TryGetNumber(TmpValue)) { Count2Star = TmpValue; }
    }

    const TSharedPtr<FJsonValue> Count3StarValue = obj->TryGetField(TEXT("Count3Star"));
    if (Count3StarValue.IsValid() && !Count3StarValue->IsNull())
    {
        int32 TmpValue;
        if (Count3StarValue->TryGetNumber(TmpValue)) { Count3Star = TmpValue; }
    }

    const TSharedPtr<FJsonValue> Count4StarValue = obj->TryGetField(TEXT("Count4Star"));
    if (Count4StarValue.IsValid() && !Count4StarValue->IsNull())
    {
        int32 TmpValue;
        if (Count4StarValue->TryGetNumber(TmpValue)) { Count4Star = TmpValue; }
    }

    const TSharedPtr<FJsonValue> Count5StarValue = obj->TryGetField(TEXT("Count5Star"));
    if (Count5StarValue.IsValid() && !Count5StarValue->IsNull())
    {
        int32 TmpValue;
        if (Count5StarValue->TryGetNumber(TmpValue)) { Count5Star = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TotalCountValue = obj->TryGetField(TEXT("TotalCount"));
    if (TotalCountValue.IsValid() && !TotalCountValue->IsNull())
    {
        int32 TmpValue;
        if (TotalCountValue->TryGetNumber(TmpValue)) { TotalCount = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FFilterOptions::~FFilterOptions()
{

}

void PlayFab::EconomyModels::FFilterOptions::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Filter.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Filter"));
        writer->WriteValue(Filter);
    }

    if (IncludeAllItems.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IncludeAllItems"));
        writer->WriteValue(IncludeAllItems);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FFilterOptions::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FilterValue = obj->TryGetField(TEXT("Filter"));
    if (FilterValue.IsValid() && !FilterValue->IsNull())
    {
        FString TmpValue;
        if (FilterValue->TryGetString(TmpValue)) { Filter = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IncludeAllItemsValue = obj->TryGetField(TEXT("IncludeAllItems"));
    if (IncludeAllItemsValue.IsValid() && !IncludeAllItemsValue->IsNull())
    {
        bool TmpValue;
        if (IncludeAllItemsValue->TryGetBool(TmpValue)) { IncludeAllItems = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogPriceAmountOverride::~FCatalogPriceAmountOverride()
{

}

void PlayFab::EconomyModels::FCatalogPriceAmountOverride::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FixedValue.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("FixedValue"));
        writer->WriteValue(FixedValue);
    }

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (Multiplier.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Multiplier"));
        writer->WriteValue(Multiplier);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogPriceAmountOverride::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FixedValueValue = obj->TryGetField(TEXT("FixedValue"));
    if (FixedValueValue.IsValid() && !FixedValueValue->IsNull())
    {
        int32 TmpValue;
        if (FixedValueValue->TryGetNumber(TmpValue)) { FixedValue = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MultiplierValue = obj->TryGetField(TEXT("Multiplier"));
    if (MultiplierValue.IsValid() && !MultiplierValue->IsNull())
    {
        double TmpValue;
        if (MultiplierValue->TryGetNumber(TmpValue)) { Multiplier = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogPriceOverride::~FCatalogPriceOverride()
{

}

void PlayFab::EconomyModels::FCatalogPriceOverride::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Amounts.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Amounts"));
        for (const FCatalogPriceAmountOverride& item : Amounts)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogPriceOverride::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AmountsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Amounts"));
    for (int32 Idx = 0; Idx < AmountsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AmountsArray[Idx];
        Amounts.Add(FCatalogPriceAmountOverride(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogPriceOptionsOverride::~FCatalogPriceOptionsOverride()
{

}

void PlayFab::EconomyModels::FCatalogPriceOptionsOverride::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Prices.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Prices"));
        for (const FCatalogPriceOverride& item : Prices)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogPriceOptionsOverride::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&PricesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Prices"));
    for (int32 Idx = 0; Idx < PricesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PricesArray[Idx];
        Prices.Add(FCatalogPriceOverride(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FStoreDetails::~FStoreDetails()
{
    //if (FilterOptions != nullptr) delete FilterOptions;
    //if (PriceOptionsOverride != nullptr) delete PriceOptionsOverride;

}

void PlayFab::EconomyModels::FStoreDetails::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (pfFilterOptions.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("FilterOptions"));
        pfFilterOptions->writeJSON(writer);
    }

    if (PriceOptionsOverride.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("PriceOptionsOverride"));
        PriceOptionsOverride->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FStoreDetails::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FilterOptionsValue = obj->TryGetField(TEXT("FilterOptions"));
    if (FilterOptionsValue.IsValid() && !FilterOptionsValue->IsNull())
    {
        pfFilterOptions = MakeShareable(new FFilterOptions(FilterOptionsValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> PriceOptionsOverrideValue = obj->TryGetField(TEXT("PriceOptionsOverride"));
    if (PriceOptionsOverrideValue.IsValid() && !PriceOptionsOverrideValue->IsNull())
    {
        PriceOptionsOverride = MakeShareable(new FCatalogPriceOptionsOverride(PriceOptionsOverrideValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCatalogItem::~FCatalogItem()
{
    //if (CreatorEntity != nullptr) delete CreatorEntity;
    //if (Moderation != nullptr) delete Moderation;
    //if (PriceOptions != nullptr) delete PriceOptions;
    //if (Rating != nullptr) delete Rating;
    //if (StoreDetails != nullptr) delete StoreDetails;

}

void PlayFab::EconomyModels::FCatalogItem::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AlternateIds"));
        for (const FCatalogAlternateId& item : AlternateIds)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Contents.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Contents"));
        for (const FContent& item : Contents)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (ContentType.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContentType"));
        writer->WriteValue(ContentType);
    }

    if (CreationDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("CreationDate"));
        writeDatetime(CreationDate, writer);
    }

    if (CreatorEntity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("CreatorEntity"));
        CreatorEntity->writeJSON(writer);
    }

    if (DeepLinks.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("DeepLinks"));
        for (const FDeepLink& item : DeepLinks)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Description.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Description"));
        for (TMap<FString, FString>::TConstIterator It(Description); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (DisplayProperties.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayProperties"));
        DisplayProperties.writeJSON(writer);
    }

    if (DisplayVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DisplayVersion"));
        writer->WriteValue(DisplayVersion);
    }

    if (EndDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("EndDate"));
        writeDatetime(EndDate, writer);
    }

    if (ETag.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ETag"));
        writer->WriteValue(ETag);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Images.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Images"));
        for (const FImage& item : Images)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (IsHidden.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IsHidden"));
        writer->WriteValue(IsHidden);
    }

    if (ItemReferences.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ItemReferences"));
        for (const FCatalogItemReference& item : ItemReferences)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Keywords.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Keywords"));
        for (TMap<FString, FKeywordSet>::TConstIterator It(Keywords); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    if (LastModifiedDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("LastModifiedDate"));
        writeDatetime(LastModifiedDate, writer);
    }

    if (Moderation.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Moderation"));
        Moderation->writeJSON(writer);
    }

    if (Platforms.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Platforms"));
        for (const FString& item : Platforms)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (PriceOptions.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("PriceOptions"));
        PriceOptions->writeJSON(writer);
    }

    if (pfRating.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Rating"));
        pfRating->writeJSON(writer);
    }

    if (StartDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("StartDate"));
        writeDatetime(StartDate, writer);
    }

    if (pfStoreDetails.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("StoreDetails"));
        pfStoreDetails->writeJSON(writer);
    }

    if (Tags.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Tags"));
        for (const FString& item : Tags)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (Title.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Title"));
        for (TMap<FString, FString>::TConstIterator It(Title); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCatalogItem::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AlternateIdsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("AlternateIds"));
    for (int32 Idx = 0; Idx < AlternateIdsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AlternateIdsArray[Idx];
        AlternateIds.Add(FCatalogAlternateId(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&ContentsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Contents"));
    for (int32 Idx = 0; Idx < ContentsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ContentsArray[Idx];
        Contents.Add(FContent(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> ContentTypeValue = obj->TryGetField(TEXT("ContentType"));
    if (ContentTypeValue.IsValid() && !ContentTypeValue->IsNull())
    {
        FString TmpValue;
        if (ContentTypeValue->TryGetString(TmpValue)) { ContentType = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreationDateValue = obj->TryGetField(TEXT("CreationDate"));
    if (CreationDateValue.IsValid())
        CreationDate = readDatetime(CreationDateValue);


    const TSharedPtr<FJsonValue> CreatorEntityValue = obj->TryGetField(TEXT("CreatorEntity"));
    if (CreatorEntityValue.IsValid() && !CreatorEntityValue->IsNull())
    {
        CreatorEntity = MakeShareable(new FEntityKey(CreatorEntityValue->AsObject()));
    }

    const TArray<TSharedPtr<FJsonValue>>&DeepLinksArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("DeepLinks"));
    for (int32 Idx = 0; Idx < DeepLinksArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = DeepLinksArray[Idx];
        DeepLinks.Add(FDeepLink(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* DescriptionObject;
    if (obj->TryGetObjectField(TEXT("Description"), DescriptionObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*DescriptionObject)->Values); It; ++It)
        {
            Description.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DisplayPropertiesValue = obj->TryGetField(TEXT("DisplayProperties"));
    if (DisplayPropertiesValue.IsValid() && !DisplayPropertiesValue->IsNull())
    {
        DisplayProperties = FJsonKeeper(DisplayPropertiesValue);
    }

    const TSharedPtr<FJsonValue> DisplayVersionValue = obj->TryGetField(TEXT("DisplayVersion"));
    if (DisplayVersionValue.IsValid() && !DisplayVersionValue->IsNull())
    {
        FString TmpValue;
        if (DisplayVersionValue->TryGetString(TmpValue)) { DisplayVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EndDateValue = obj->TryGetField(TEXT("EndDate"));
    if (EndDateValue.IsValid())
        EndDate = readDatetime(EndDateValue);


    const TSharedPtr<FJsonValue> ETagValue = obj->TryGetField(TEXT("ETag"));
    if (ETagValue.IsValid() && !ETagValue->IsNull())
    {
        FString TmpValue;
        if (ETagValue->TryGetString(TmpValue)) { ETag = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ImagesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Images"));
    for (int32 Idx = 0; Idx < ImagesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ImagesArray[Idx];
        Images.Add(FImage(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> IsHiddenValue = obj->TryGetField(TEXT("IsHidden"));
    if (IsHiddenValue.IsValid() && !IsHiddenValue->IsNull())
    {
        bool TmpValue;
        if (IsHiddenValue->TryGetBool(TmpValue)) { IsHidden = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ItemReferencesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("ItemReferences"));
    for (int32 Idx = 0; Idx < ItemReferencesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemReferencesArray[Idx];
        ItemReferences.Add(FCatalogItemReference(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* KeywordsObject;
    if (obj->TryGetObjectField(TEXT("Keywords"), KeywordsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*KeywordsObject)->Values); It; ++It)
        {
            Keywords.Add(It.Key(), FKeywordSet(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> LastModifiedDateValue = obj->TryGetField(TEXT("LastModifiedDate"));
    if (LastModifiedDateValue.IsValid())
        LastModifiedDate = readDatetime(LastModifiedDateValue);


    const TSharedPtr<FJsonValue> ModerationValue = obj->TryGetField(TEXT("Moderation"));
    if (ModerationValue.IsValid() && !ModerationValue->IsNull())
    {
        Moderation = MakeShareable(new FModerationState(ModerationValue->AsObject()));
    }

    obj->TryGetStringArrayField(TEXT("Platforms"), Platforms);

    const TSharedPtr<FJsonValue> PriceOptionsValue = obj->TryGetField(TEXT("PriceOptions"));
    if (PriceOptionsValue.IsValid() && !PriceOptionsValue->IsNull())
    {
        PriceOptions = MakeShareable(new FCatalogPriceOptions(PriceOptionsValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> RatingValue = obj->TryGetField(TEXT("Rating"));
    if (RatingValue.IsValid() && !RatingValue->IsNull())
    {
        pfRating = MakeShareable(new FRating(RatingValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> StartDateValue = obj->TryGetField(TEXT("StartDate"));
    if (StartDateValue.IsValid())
        StartDate = readDatetime(StartDateValue);


    const TSharedPtr<FJsonValue> StoreDetailsValue = obj->TryGetField(TEXT("StoreDetails"));
    if (StoreDetailsValue.IsValid() && !StoreDetailsValue->IsNull())
    {
        pfStoreDetails = MakeShareable(new FStoreDetails(StoreDetailsValue->AsObject()));
    }

    obj->TryGetStringArrayField(TEXT("Tags"), Tags);

    const TSharedPtr<FJsonObject>* TitleObject;
    if (obj->TryGetObjectField(TEXT("Title"), TitleObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*TitleObject)->Values); It; ++It)
        {
            Title.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::EconomyModels::writeConcernCategoryEnumJSON(ConcernCategory enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case ConcernCategoryNone: writer->WriteValue(TEXT("None")); break;
    case ConcernCategoryOffensiveContent: writer->WriteValue(TEXT("OffensiveContent")); break;
    case ConcernCategoryChildExploitation: writer->WriteValue(TEXT("ChildExploitation")); break;
    case ConcernCategoryMalwareOrVirus: writer->WriteValue(TEXT("MalwareOrVirus")); break;
    case ConcernCategoryPrivacyConcerns: writer->WriteValue(TEXT("PrivacyConcerns")); break;
    case ConcernCategoryMisleadingApp: writer->WriteValue(TEXT("MisleadingApp")); break;
    case ConcernCategoryPoorPerformance: writer->WriteValue(TEXT("PoorPerformance")); break;
    case ConcernCategoryReviewResponse: writer->WriteValue(TEXT("ReviewResponse")); break;
    case ConcernCategorySpamAdvertising: writer->WriteValue(TEXT("SpamAdvertising")); break;
    case ConcernCategoryProfanity: writer->WriteValue(TEXT("Profanity")); break;
    }
}

EconomyModels::ConcernCategory PlayFab::EconomyModels::readConcernCategoryFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readConcernCategoryFromValue(value.IsValid() ? value->AsString() : "");
}

EconomyModels::ConcernCategory PlayFab::EconomyModels::readConcernCategoryFromValue(const FString& value)
{
    static TMap<FString, ConcernCategory> _ConcernCategoryMap;
    if (_ConcernCategoryMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _ConcernCategoryMap.Add(TEXT("None"), ConcernCategoryNone);
        _ConcernCategoryMap.Add(TEXT("OffensiveContent"), ConcernCategoryOffensiveContent);
        _ConcernCategoryMap.Add(TEXT("ChildExploitation"), ConcernCategoryChildExploitation);
        _ConcernCategoryMap.Add(TEXT("MalwareOrVirus"), ConcernCategoryMalwareOrVirus);
        _ConcernCategoryMap.Add(TEXT("PrivacyConcerns"), ConcernCategoryPrivacyConcerns);
        _ConcernCategoryMap.Add(TEXT("MisleadingApp"), ConcernCategoryMisleadingApp);
        _ConcernCategoryMap.Add(TEXT("PoorPerformance"), ConcernCategoryPoorPerformance);
        _ConcernCategoryMap.Add(TEXT("ReviewResponse"), ConcernCategoryReviewResponse);
        _ConcernCategoryMap.Add(TEXT("SpamAdvertising"), ConcernCategorySpamAdvertising);
        _ConcernCategoryMap.Add(TEXT("Profanity"), ConcernCategoryProfanity);

    }

    if (!value.IsEmpty())
    {
        auto output = _ConcernCategoryMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return ConcernCategoryNone; // Basically critical fail
}

PlayFab::EconomyModels::FContentFeed::~FContentFeed()
{

}

void PlayFab::EconomyModels::FContentFeed::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FContentFeed::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

void PlayFab::EconomyModels::writeCountryCodeEnumJSON(CountryCode enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case CountryCodeAF: writer->WriteValue(TEXT("AF")); break;
    case CountryCodeAX: writer->WriteValue(TEXT("AX")); break;
    case CountryCodeAL: writer->WriteValue(TEXT("AL")); break;
    case CountryCodeDZ: writer->WriteValue(TEXT("DZ")); break;
    case CountryCodeAS: writer->WriteValue(TEXT("AS")); break;
    case CountryCodeAD: writer->WriteValue(TEXT("AD")); break;
    case CountryCodeAO: writer->WriteValue(TEXT("AO")); break;
    case CountryCodeAI: writer->WriteValue(TEXT("AI")); break;
    case CountryCodeAQ: writer->WriteValue(TEXT("AQ")); break;
    case CountryCodeAG: writer->WriteValue(TEXT("AG")); break;
    case CountryCodeAR: writer->WriteValue(TEXT("AR")); break;
    case CountryCodeAM: writer->WriteValue(TEXT("AM")); break;
    case CountryCodeAW: writer->WriteValue(TEXT("AW")); break;
    case CountryCodeAU: writer->WriteValue(TEXT("AU")); break;
    case CountryCodeAT: writer->WriteValue(TEXT("AT")); break;
    case CountryCodeAZ: writer->WriteValue(TEXT("AZ")); break;
    case CountryCodeBS: writer->WriteValue(TEXT("BS")); break;
    case CountryCodeBH: writer->WriteValue(TEXT("BH")); break;
    case CountryCodeBD: writer->WriteValue(TEXT("BD")); break;
    case CountryCodeBB: writer->WriteValue(TEXT("BB")); break;
    case CountryCodeBY: writer->WriteValue(TEXT("BY")); break;
    case CountryCodeBE: writer->WriteValue(TEXT("BE")); break;
    case CountryCodeBZ: writer->WriteValue(TEXT("BZ")); break;
    case CountryCodeBJ: writer->WriteValue(TEXT("BJ")); break;
    case CountryCodeBM: writer->WriteValue(TEXT("BM")); break;
    case CountryCodeBT: writer->WriteValue(TEXT("BT")); break;
    case CountryCodeBO: writer->WriteValue(TEXT("BO")); break;
    case CountryCodeBQ: writer->WriteValue(TEXT("BQ")); break;
    case CountryCodeBA: writer->WriteValue(TEXT("BA")); break;
    case CountryCodeBW: writer->WriteValue(TEXT("BW")); break;
    case CountryCodeBV: writer->WriteValue(TEXT("BV")); break;
    case CountryCodeBR: writer->WriteValue(TEXT("BR")); break;
    case CountryCodeIO: writer->WriteValue(TEXT("IO")); break;
    case CountryCodeBN: writer->WriteValue(TEXT("BN")); break;
    case CountryCodeBG: writer->WriteValue(TEXT("BG")); break;
    case CountryCodeBF: writer->WriteValue(TEXT("BF")); break;
    case CountryCodeBI: writer->WriteValue(TEXT("BI")); break;
    case CountryCodeKH: writer->WriteValue(TEXT("KH")); break;
    case CountryCodeCM: writer->WriteValue(TEXT("CM")); break;
    case CountryCodeCA: writer->WriteValue(TEXT("CA")); break;
    case CountryCodeCV: writer->WriteValue(TEXT("CV")); break;
    case CountryCodeKY: writer->WriteValue(TEXT("KY")); break;
    case CountryCodeCF: writer->WriteValue(TEXT("CF")); break;
    case CountryCodeTD: writer->WriteValue(TEXT("TD")); break;
    case CountryCodeCL: writer->WriteValue(TEXT("CL")); break;
    case CountryCodeCN: writer->WriteValue(TEXT("CN")); break;
    case CountryCodeCX: writer->WriteValue(TEXT("CX")); break;
    case CountryCodeCC: writer->WriteValue(TEXT("CC")); break;
    case CountryCodeCO: writer->WriteValue(TEXT("CO")); break;
    case CountryCodeKM: writer->WriteValue(TEXT("KM")); break;
    case CountryCodeCG: writer->WriteValue(TEXT("CG")); break;
    case CountryCodeCD: writer->WriteValue(TEXT("CD")); break;
    case CountryCodeCK: writer->WriteValue(TEXT("CK")); break;
    case CountryCodeCR: writer->WriteValue(TEXT("CR")); break;
    case CountryCodeCI: writer->WriteValue(TEXT("CI")); break;
    case CountryCodeHR: writer->WriteValue(TEXT("HR")); break;
    case CountryCodeCU: writer->WriteValue(TEXT("CU")); break;
    case CountryCodeCW: writer->WriteValue(TEXT("CW")); break;
    case CountryCodeCY: writer->WriteValue(TEXT("CY")); break;
    case CountryCodeCZ: writer->WriteValue(TEXT("CZ")); break;
    case CountryCodeDK: writer->WriteValue(TEXT("DK")); break;
    case CountryCodeDJ: writer->WriteValue(TEXT("DJ")); break;
    case CountryCodeDM: writer->WriteValue(TEXT("DM")); break;
    case CountryCodeDO: writer->WriteValue(TEXT("DO")); break;
    case CountryCodeEC: writer->WriteValue(TEXT("EC")); break;
    case CountryCodeEG: writer->WriteValue(TEXT("EG")); break;
    case CountryCodeSV: writer->WriteValue(TEXT("SV")); break;
    case CountryCodeGQ: writer->WriteValue(TEXT("GQ")); break;
    case CountryCodeER: writer->WriteValue(TEXT("ER")); break;
    case CountryCodeEE: writer->WriteValue(TEXT("EE")); break;
    case CountryCodeET: writer->WriteValue(TEXT("ET")); break;
    case CountryCodeFK: writer->WriteValue(TEXT("FK")); break;
    case CountryCodeFO: writer->WriteValue(TEXT("FO")); break;
    case CountryCodeFJ: writer->WriteValue(TEXT("FJ")); break;
    case CountryCodeFI: writer->WriteValue(TEXT("FI")); break;
    case CountryCodeFR: writer->WriteValue(TEXT("FR")); break;
    case CountryCodeGF: writer->WriteValue(TEXT("GF")); break;
    case CountryCodePF: writer->WriteValue(TEXT("PF")); break;
    case CountryCodeTF: writer->WriteValue(TEXT("TF")); break;
    case CountryCodeGA: writer->WriteValue(TEXT("GA")); break;
    case CountryCodeGM: writer->WriteValue(TEXT("GM")); break;
    case CountryCodeGE: writer->WriteValue(TEXT("GE")); break;
    case CountryCodeDE: writer->WriteValue(TEXT("DE")); break;
    case CountryCodeGH: writer->WriteValue(TEXT("GH")); break;
    case CountryCodeGI: writer->WriteValue(TEXT("GI")); break;
    case CountryCodeGR: writer->WriteValue(TEXT("GR")); break;
    case CountryCodeGL: writer->WriteValue(TEXT("GL")); break;
    case CountryCodeGD: writer->WriteValue(TEXT("GD")); break;
    case CountryCodeGP: writer->WriteValue(TEXT("GP")); break;
    case CountryCodeGU: writer->WriteValue(TEXT("GU")); break;
    case CountryCodeGT: writer->WriteValue(TEXT("GT")); break;
    case CountryCodeGG: writer->WriteValue(TEXT("GG")); break;
    case CountryCodeGN: writer->WriteValue(TEXT("GN")); break;
    case CountryCodeGW: writer->WriteValue(TEXT("GW")); break;
    case CountryCodeGY: writer->WriteValue(TEXT("GY")); break;
    case CountryCodeHT: writer->WriteValue(TEXT("HT")); break;
    case CountryCodeHM: writer->WriteValue(TEXT("HM")); break;
    case CountryCodeVA: writer->WriteValue(TEXT("VA")); break;
    case CountryCodeHN: writer->WriteValue(TEXT("HN")); break;
    case CountryCodeHK: writer->WriteValue(TEXT("HK")); break;
    case CountryCodeHU: writer->WriteValue(TEXT("HU")); break;
    case CountryCodeIS: writer->WriteValue(TEXT("IS")); break;
    case CountryCodeIN: writer->WriteValue(TEXT("IN")); break;
    case CountryCodeID: writer->WriteValue(TEXT("ID")); break;
    case CountryCodeIR: writer->WriteValue(TEXT("IR")); break;
    case CountryCodeIQ: writer->WriteValue(TEXT("IQ")); break;
    case CountryCodeIE: writer->WriteValue(TEXT("IE")); break;
    case CountryCodeIM: writer->WriteValue(TEXT("IM")); break;
    case CountryCodeIL: writer->WriteValue(TEXT("IL")); break;
    case CountryCodeIT: writer->WriteValue(TEXT("IT")); break;
    case CountryCodeJM: writer->WriteValue(TEXT("JM")); break;
    case CountryCodeJP: writer->WriteValue(TEXT("JP")); break;
    case CountryCodeJE: writer->WriteValue(TEXT("JE")); break;
    case CountryCodeJO: writer->WriteValue(TEXT("JO")); break;
    case CountryCodeKZ: writer->WriteValue(TEXT("KZ")); break;
    case CountryCodeKE: writer->WriteValue(TEXT("KE")); break;
    case CountryCodeKI: writer->WriteValue(TEXT("KI")); break;
    case CountryCodeKP: writer->WriteValue(TEXT("KP")); break;
    case CountryCodeKR: writer->WriteValue(TEXT("KR")); break;
    case CountryCodeKW: writer->WriteValue(TEXT("KW")); break;
    case CountryCodeKG: writer->WriteValue(TEXT("KG")); break;
    case CountryCodeLA: writer->WriteValue(TEXT("LA")); break;
    case CountryCodeLV: writer->WriteValue(TEXT("LV")); break;
    case CountryCodeLB: writer->WriteValue(TEXT("LB")); break;
    case CountryCodeLS: writer->WriteValue(TEXT("LS")); break;
    case CountryCodeLR: writer->WriteValue(TEXT("LR")); break;
    case CountryCodeLY: writer->WriteValue(TEXT("LY")); break;
    case CountryCodeLI: writer->WriteValue(TEXT("LI")); break;
    case CountryCodeLT: writer->WriteValue(TEXT("LT")); break;
    case CountryCodeLU: writer->WriteValue(TEXT("LU")); break;
    case CountryCodeMO: writer->WriteValue(TEXT("MO")); break;
    case CountryCodeMK: writer->WriteValue(TEXT("MK")); break;
    case CountryCodeMG: writer->WriteValue(TEXT("MG")); break;
    case CountryCodeMW: writer->WriteValue(TEXT("MW")); break;
    case CountryCodeMY: writer->WriteValue(TEXT("MY")); break;
    case CountryCodeMV: writer->WriteValue(TEXT("MV")); break;
    case CountryCodeML: writer->WriteValue(TEXT("ML")); break;
    case CountryCodeMT: writer->WriteValue(TEXT("MT")); break;
    case CountryCodeMH: writer->WriteValue(TEXT("MH")); break;
    case CountryCodeMQ: writer->WriteValue(TEXT("MQ")); break;
    case CountryCodeMR: writer->WriteValue(TEXT("MR")); break;
    case CountryCodeMU: writer->WriteValue(TEXT("MU")); break;
    case CountryCodeYT: writer->WriteValue(TEXT("YT")); break;
    case CountryCodeMX: writer->WriteValue(TEXT("MX")); break;
    case CountryCodeFM: writer->WriteValue(TEXT("FM")); break;
    case CountryCodeMD: writer->WriteValue(TEXT("MD")); break;
    case CountryCodeMC: writer->WriteValue(TEXT("MC")); break;
    case CountryCodeMN: writer->WriteValue(TEXT("MN")); break;
    case CountryCodeME: writer->WriteValue(TEXT("ME")); break;
    case CountryCodeMS: writer->WriteValue(TEXT("MS")); break;
    case CountryCodeMA: writer->WriteValue(TEXT("MA")); break;
    case CountryCodeMZ: writer->WriteValue(TEXT("MZ")); break;
    case CountryCodeMM: writer->WriteValue(TEXT("MM")); break;
    case CountryCodeNA: writer->WriteValue(TEXT("NA")); break;
    case CountryCodeNR: writer->WriteValue(TEXT("NR")); break;
    case CountryCodeNP: writer->WriteValue(TEXT("NP")); break;
    case CountryCodeNL: writer->WriteValue(TEXT("NL")); break;
    case CountryCodeNC: writer->WriteValue(TEXT("NC")); break;
    case CountryCodeNZ: writer->WriteValue(TEXT("NZ")); break;
    case CountryCodeNI: writer->WriteValue(TEXT("NI")); break;
    case CountryCodeNE: writer->WriteValue(TEXT("NE")); break;
    case CountryCodeNG: writer->WriteValue(TEXT("NG")); break;
    case CountryCodeNU: writer->WriteValue(TEXT("NU")); break;
    case CountryCodeNF: writer->WriteValue(TEXT("NF")); break;
    case CountryCodeMP: writer->WriteValue(TEXT("MP")); break;
    case CountryCodeNO: writer->WriteValue(TEXT("NO")); break;
    case CountryCodeOM: writer->WriteValue(TEXT("OM")); break;
    case CountryCodePK: writer->WriteValue(TEXT("PK")); break;
    case CountryCodePW: writer->WriteValue(TEXT("PW")); break;
    case CountryCodePS: writer->WriteValue(TEXT("PS")); break;
    case CountryCodePA: writer->WriteValue(TEXT("PA")); break;
    case CountryCodePG: writer->WriteValue(TEXT("PG")); break;
    case CountryCodePY: writer->WriteValue(TEXT("PY")); break;
    case CountryCodePE: writer->WriteValue(TEXT("PE")); break;
    case CountryCodePH: writer->WriteValue(TEXT("PH")); break;
    case CountryCodePN: writer->WriteValue(TEXT("PN")); break;
    case CountryCodePL: writer->WriteValue(TEXT("PL")); break;
    case CountryCodePT: writer->WriteValue(TEXT("PT")); break;
    case CountryCodePR: writer->WriteValue(TEXT("PR")); break;
    case CountryCodeQA: writer->WriteValue(TEXT("QA")); break;
    case CountryCodeRE: writer->WriteValue(TEXT("RE")); break;
    case CountryCodeRO: writer->WriteValue(TEXT("RO")); break;
    case CountryCodeRU: writer->WriteValue(TEXT("RU")); break;
    case CountryCodeRW: writer->WriteValue(TEXT("RW")); break;
    case CountryCodeBL: writer->WriteValue(TEXT("BL")); break;
    case CountryCodeSH: writer->WriteValue(TEXT("SH")); break;
    case CountryCodeKN: writer->WriteValue(TEXT("KN")); break;
    case CountryCodeLC: writer->WriteValue(TEXT("LC")); break;
    case CountryCodeMF: writer->WriteValue(TEXT("MF")); break;
    case CountryCodePM: writer->WriteValue(TEXT("PM")); break;
    case CountryCodeVC: writer->WriteValue(TEXT("VC")); break;
    case CountryCodeWS: writer->WriteValue(TEXT("WS")); break;
    case CountryCodeSM: writer->WriteValue(TEXT("SM")); break;
    case CountryCodeST: writer->WriteValue(TEXT("ST")); break;
    case CountryCodeSA: writer->WriteValue(TEXT("SA")); break;
    case CountryCodeSN: writer->WriteValue(TEXT("SN")); break;
    case CountryCodeRS: writer->WriteValue(TEXT("RS")); break;
    case CountryCodeSC: writer->WriteValue(TEXT("SC")); break;
    case CountryCodeSL: writer->WriteValue(TEXT("SL")); break;
    case CountryCodeSG: writer->WriteValue(TEXT("SG")); break;
    case CountryCodeSX: writer->WriteValue(TEXT("SX")); break;
    case CountryCodeSK: writer->WriteValue(TEXT("SK")); break;
    case CountryCodeSI: writer->WriteValue(TEXT("SI")); break;
    case CountryCodeSB: writer->WriteValue(TEXT("SB")); break;
    case CountryCodeSO: writer->WriteValue(TEXT("SO")); break;
    case CountryCodeZA: writer->WriteValue(TEXT("ZA")); break;
    case CountryCodeGS: writer->WriteValue(TEXT("GS")); break;
    case CountryCodeSS: writer->WriteValue(TEXT("SS")); break;
    case CountryCodeES: writer->WriteValue(TEXT("ES")); break;
    case CountryCodeLK: writer->WriteValue(TEXT("LK")); break;
    case CountryCodeSD: writer->WriteValue(TEXT("SD")); break;
    case CountryCodeSR: writer->WriteValue(TEXT("SR")); break;
    case CountryCodeSJ: writer->WriteValue(TEXT("SJ")); break;
    case CountryCodeSZ: writer->WriteValue(TEXT("SZ")); break;
    case CountryCodeSE: writer->WriteValue(TEXT("SE")); break;
    case CountryCodeCH: writer->WriteValue(TEXT("CH")); break;
    case CountryCodeSY: writer->WriteValue(TEXT("SY")); break;
    case CountryCodeTW: writer->WriteValue(TEXT("TW")); break;
    case CountryCodeTJ: writer->WriteValue(TEXT("TJ")); break;
    case CountryCodeTZ: writer->WriteValue(TEXT("TZ")); break;
    case CountryCodeTH: writer->WriteValue(TEXT("TH")); break;
    case CountryCodeTL: writer->WriteValue(TEXT("TL")); break;
    case CountryCodeTG: writer->WriteValue(TEXT("TG")); break;
    case CountryCodeTK: writer->WriteValue(TEXT("TK")); break;
    case CountryCodeTO: writer->WriteValue(TEXT("TO")); break;
    case CountryCodeTT: writer->WriteValue(TEXT("TT")); break;
    case CountryCodeTN: writer->WriteValue(TEXT("TN")); break;
    case CountryCodeTR: writer->WriteValue(TEXT("TR")); break;
    case CountryCodeTM: writer->WriteValue(TEXT("TM")); break;
    case CountryCodeTC: writer->WriteValue(TEXT("TC")); break;
    case CountryCodeTV: writer->WriteValue(TEXT("TV")); break;
    case CountryCodeUG: writer->WriteValue(TEXT("UG")); break;
    case CountryCodeUA: writer->WriteValue(TEXT("UA")); break;
    case CountryCodeAE: writer->WriteValue(TEXT("AE")); break;
    case CountryCodeGB: writer->WriteValue(TEXT("GB")); break;
    case CountryCodeUS: writer->WriteValue(TEXT("US")); break;
    case CountryCodeUM: writer->WriteValue(TEXT("UM")); break;
    case CountryCodeUY: writer->WriteValue(TEXT("UY")); break;
    case CountryCodeUZ: writer->WriteValue(TEXT("UZ")); break;
    case CountryCodeVU: writer->WriteValue(TEXT("VU")); break;
    case CountryCodeVE: writer->WriteValue(TEXT("VE")); break;
    case CountryCodeVN: writer->WriteValue(TEXT("VN")); break;
    case CountryCodeVG: writer->WriteValue(TEXT("VG")); break;
    case CountryCodeVI: writer->WriteValue(TEXT("VI")); break;
    case CountryCodeWF: writer->WriteValue(TEXT("WF")); break;
    case CountryCodeEH: writer->WriteValue(TEXT("EH")); break;
    case CountryCodeYE: writer->WriteValue(TEXT("YE")); break;
    case CountryCodeZM: writer->WriteValue(TEXT("ZM")); break;
    case CountryCodeZW: writer->WriteValue(TEXT("ZW")); break;
    }
}

EconomyModels::CountryCode PlayFab::EconomyModels::readCountryCodeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readCountryCodeFromValue(value.IsValid() ? value->AsString() : "");
}

EconomyModels::CountryCode PlayFab::EconomyModels::readCountryCodeFromValue(const FString& value)
{
    static TMap<FString, CountryCode> _CountryCodeMap;
    if (_CountryCodeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _CountryCodeMap.Add(TEXT("AF"), CountryCodeAF);
        _CountryCodeMap.Add(TEXT("AX"), CountryCodeAX);
        _CountryCodeMap.Add(TEXT("AL"), CountryCodeAL);
        _CountryCodeMap.Add(TEXT("DZ"), CountryCodeDZ);
        _CountryCodeMap.Add(TEXT("AS"), CountryCodeAS);
        _CountryCodeMap.Add(TEXT("AD"), CountryCodeAD);
        _CountryCodeMap.Add(TEXT("AO"), CountryCodeAO);
        _CountryCodeMap.Add(TEXT("AI"), CountryCodeAI);
        _CountryCodeMap.Add(TEXT("AQ"), CountryCodeAQ);
        _CountryCodeMap.Add(TEXT("AG"), CountryCodeAG);
        _CountryCodeMap.Add(TEXT("AR"), CountryCodeAR);
        _CountryCodeMap.Add(TEXT("AM"), CountryCodeAM);
        _CountryCodeMap.Add(TEXT("AW"), CountryCodeAW);
        _CountryCodeMap.Add(TEXT("AU"), CountryCodeAU);
        _CountryCodeMap.Add(TEXT("AT"), CountryCodeAT);
        _CountryCodeMap.Add(TEXT("AZ"), CountryCodeAZ);
        _CountryCodeMap.Add(TEXT("BS"), CountryCodeBS);
        _CountryCodeMap.Add(TEXT("BH"), CountryCodeBH);
        _CountryCodeMap.Add(TEXT("BD"), CountryCodeBD);
        _CountryCodeMap.Add(TEXT("BB"), CountryCodeBB);
        _CountryCodeMap.Add(TEXT("BY"), CountryCodeBY);
        _CountryCodeMap.Add(TEXT("BE"), CountryCodeBE);
        _CountryCodeMap.Add(TEXT("BZ"), CountryCodeBZ);
        _CountryCodeMap.Add(TEXT("BJ"), CountryCodeBJ);
        _CountryCodeMap.Add(TEXT("BM"), CountryCodeBM);
        _CountryCodeMap.Add(TEXT("BT"), CountryCodeBT);
        _CountryCodeMap.Add(TEXT("BO"), CountryCodeBO);
        _CountryCodeMap.Add(TEXT("BQ"), CountryCodeBQ);
        _CountryCodeMap.Add(TEXT("BA"), CountryCodeBA);
        _CountryCodeMap.Add(TEXT("BW"), CountryCodeBW);
        _CountryCodeMap.Add(TEXT("BV"), CountryCodeBV);
        _CountryCodeMap.Add(TEXT("BR"), CountryCodeBR);
        _CountryCodeMap.Add(TEXT("IO"), CountryCodeIO);
        _CountryCodeMap.Add(TEXT("BN"), CountryCodeBN);
        _CountryCodeMap.Add(TEXT("BG"), CountryCodeBG);
        _CountryCodeMap.Add(TEXT("BF"), CountryCodeBF);
        _CountryCodeMap.Add(TEXT("BI"), CountryCodeBI);
        _CountryCodeMap.Add(TEXT("KH"), CountryCodeKH);
        _CountryCodeMap.Add(TEXT("CM"), CountryCodeCM);
        _CountryCodeMap.Add(TEXT("CA"), CountryCodeCA);
        _CountryCodeMap.Add(TEXT("CV"), CountryCodeCV);
        _CountryCodeMap.Add(TEXT("KY"), CountryCodeKY);
        _CountryCodeMap.Add(TEXT("CF"), CountryCodeCF);
        _CountryCodeMap.Add(TEXT("TD"), CountryCodeTD);
        _CountryCodeMap.Add(TEXT("CL"), CountryCodeCL);
        _CountryCodeMap.Add(TEXT("CN"), CountryCodeCN);
        _CountryCodeMap.Add(TEXT("CX"), CountryCodeCX);
        _CountryCodeMap.Add(TEXT("CC"), CountryCodeCC);
        _CountryCodeMap.Add(TEXT("CO"), CountryCodeCO);
        _CountryCodeMap.Add(TEXT("KM"), CountryCodeKM);
        _CountryCodeMap.Add(TEXT("CG"), CountryCodeCG);
        _CountryCodeMap.Add(TEXT("CD"), CountryCodeCD);
        _CountryCodeMap.Add(TEXT("CK"), CountryCodeCK);
        _CountryCodeMap.Add(TEXT("CR"), CountryCodeCR);
        _CountryCodeMap.Add(TEXT("CI"), CountryCodeCI);
        _CountryCodeMap.Add(TEXT("HR"), CountryCodeHR);
        _CountryCodeMap.Add(TEXT("CU"), CountryCodeCU);
        _CountryCodeMap.Add(TEXT("CW"), CountryCodeCW);
        _CountryCodeMap.Add(TEXT("CY"), CountryCodeCY);
        _CountryCodeMap.Add(TEXT("CZ"), CountryCodeCZ);
        _CountryCodeMap.Add(TEXT("DK"), CountryCodeDK);
        _CountryCodeMap.Add(TEXT("DJ"), CountryCodeDJ);
        _CountryCodeMap.Add(TEXT("DM"), CountryCodeDM);
        _CountryCodeMap.Add(TEXT("DO"), CountryCodeDO);
        _CountryCodeMap.Add(TEXT("EC"), CountryCodeEC);
        _CountryCodeMap.Add(TEXT("EG"), CountryCodeEG);
        _CountryCodeMap.Add(TEXT("SV"), CountryCodeSV);
        _CountryCodeMap.Add(TEXT("GQ"), CountryCodeGQ);
        _CountryCodeMap.Add(TEXT("ER"), CountryCodeER);
        _CountryCodeMap.Add(TEXT("EE"), CountryCodeEE);
        _CountryCodeMap.Add(TEXT("ET"), CountryCodeET);
        _CountryCodeMap.Add(TEXT("FK"), CountryCodeFK);
        _CountryCodeMap.Add(TEXT("FO"), CountryCodeFO);
        _CountryCodeMap.Add(TEXT("FJ"), CountryCodeFJ);
        _CountryCodeMap.Add(TEXT("FI"), CountryCodeFI);
        _CountryCodeMap.Add(TEXT("FR"), CountryCodeFR);
        _CountryCodeMap.Add(TEXT("GF"), CountryCodeGF);
        _CountryCodeMap.Add(TEXT("PF"), CountryCodePF);
        _CountryCodeMap.Add(TEXT("TF"), CountryCodeTF);
        _CountryCodeMap.Add(TEXT("GA"), CountryCodeGA);
        _CountryCodeMap.Add(TEXT("GM"), CountryCodeGM);
        _CountryCodeMap.Add(TEXT("GE"), CountryCodeGE);
        _CountryCodeMap.Add(TEXT("DE"), CountryCodeDE);
        _CountryCodeMap.Add(TEXT("GH"), CountryCodeGH);
        _CountryCodeMap.Add(TEXT("GI"), CountryCodeGI);
        _CountryCodeMap.Add(TEXT("GR"), CountryCodeGR);
        _CountryCodeMap.Add(TEXT("GL"), CountryCodeGL);
        _CountryCodeMap.Add(TEXT("GD"), CountryCodeGD);
        _CountryCodeMap.Add(TEXT("GP"), CountryCodeGP);
        _CountryCodeMap.Add(TEXT("GU"), CountryCodeGU);
        _CountryCodeMap.Add(TEXT("GT"), CountryCodeGT);
        _CountryCodeMap.Add(TEXT("GG"), CountryCodeGG);
        _CountryCodeMap.Add(TEXT("GN"), CountryCodeGN);
        _CountryCodeMap.Add(TEXT("GW"), CountryCodeGW);
        _CountryCodeMap.Add(TEXT("GY"), CountryCodeGY);
        _CountryCodeMap.Add(TEXT("HT"), CountryCodeHT);
        _CountryCodeMap.Add(TEXT("HM"), CountryCodeHM);
        _CountryCodeMap.Add(TEXT("VA"), CountryCodeVA);
        _CountryCodeMap.Add(TEXT("HN"), CountryCodeHN);
        _CountryCodeMap.Add(TEXT("HK"), CountryCodeHK);
        _CountryCodeMap.Add(TEXT("HU"), CountryCodeHU);
        _CountryCodeMap.Add(TEXT("IS"), CountryCodeIS);
        _CountryCodeMap.Add(TEXT("IN"), CountryCodeIN);
        _CountryCodeMap.Add(TEXT("ID"), CountryCodeID);
        _CountryCodeMap.Add(TEXT("IR"), CountryCodeIR);
        _CountryCodeMap.Add(TEXT("IQ"), CountryCodeIQ);
        _CountryCodeMap.Add(TEXT("IE"), CountryCodeIE);
        _CountryCodeMap.Add(TEXT("IM"), CountryCodeIM);
        _CountryCodeMap.Add(TEXT("IL"), CountryCodeIL);
        _CountryCodeMap.Add(TEXT("IT"), CountryCodeIT);
        _CountryCodeMap.Add(TEXT("JM"), CountryCodeJM);
        _CountryCodeMap.Add(TEXT("JP"), CountryCodeJP);
        _CountryCodeMap.Add(TEXT("JE"), CountryCodeJE);
        _CountryCodeMap.Add(TEXT("JO"), CountryCodeJO);
        _CountryCodeMap.Add(TEXT("KZ"), CountryCodeKZ);
        _CountryCodeMap.Add(TEXT("KE"), CountryCodeKE);
        _CountryCodeMap.Add(TEXT("KI"), CountryCodeKI);
        _CountryCodeMap.Add(TEXT("KP"), CountryCodeKP);
        _CountryCodeMap.Add(TEXT("KR"), CountryCodeKR);
        _CountryCodeMap.Add(TEXT("KW"), CountryCodeKW);
        _CountryCodeMap.Add(TEXT("KG"), CountryCodeKG);
        _CountryCodeMap.Add(TEXT("LA"), CountryCodeLA);
        _CountryCodeMap.Add(TEXT("LV"), CountryCodeLV);
        _CountryCodeMap.Add(TEXT("LB"), CountryCodeLB);
        _CountryCodeMap.Add(TEXT("LS"), CountryCodeLS);
        _CountryCodeMap.Add(TEXT("LR"), CountryCodeLR);
        _CountryCodeMap.Add(TEXT("LY"), CountryCodeLY);
        _CountryCodeMap.Add(TEXT("LI"), CountryCodeLI);
        _CountryCodeMap.Add(TEXT("LT"), CountryCodeLT);
        _CountryCodeMap.Add(TEXT("LU"), CountryCodeLU);
        _CountryCodeMap.Add(TEXT("MO"), CountryCodeMO);
        _CountryCodeMap.Add(TEXT("MK"), CountryCodeMK);
        _CountryCodeMap.Add(TEXT("MG"), CountryCodeMG);
        _CountryCodeMap.Add(TEXT("MW"), CountryCodeMW);
        _CountryCodeMap.Add(TEXT("MY"), CountryCodeMY);
        _CountryCodeMap.Add(TEXT("MV"), CountryCodeMV);
        _CountryCodeMap.Add(TEXT("ML"), CountryCodeML);
        _CountryCodeMap.Add(TEXT("MT"), CountryCodeMT);
        _CountryCodeMap.Add(TEXT("MH"), CountryCodeMH);
        _CountryCodeMap.Add(TEXT("MQ"), CountryCodeMQ);
        _CountryCodeMap.Add(TEXT("MR"), CountryCodeMR);
        _CountryCodeMap.Add(TEXT("MU"), CountryCodeMU);
        _CountryCodeMap.Add(TEXT("YT"), CountryCodeYT);
        _CountryCodeMap.Add(TEXT("MX"), CountryCodeMX);
        _CountryCodeMap.Add(TEXT("FM"), CountryCodeFM);
        _CountryCodeMap.Add(TEXT("MD"), CountryCodeMD);
        _CountryCodeMap.Add(TEXT("MC"), CountryCodeMC);
        _CountryCodeMap.Add(TEXT("MN"), CountryCodeMN);
        _CountryCodeMap.Add(TEXT("ME"), CountryCodeME);
        _CountryCodeMap.Add(TEXT("MS"), CountryCodeMS);
        _CountryCodeMap.Add(TEXT("MA"), CountryCodeMA);
        _CountryCodeMap.Add(TEXT("MZ"), CountryCodeMZ);
        _CountryCodeMap.Add(TEXT("MM"), CountryCodeMM);
        _CountryCodeMap.Add(TEXT("NA"), CountryCodeNA);
        _CountryCodeMap.Add(TEXT("NR"), CountryCodeNR);
        _CountryCodeMap.Add(TEXT("NP"), CountryCodeNP);
        _CountryCodeMap.Add(TEXT("NL"), CountryCodeNL);
        _CountryCodeMap.Add(TEXT("NC"), CountryCodeNC);
        _CountryCodeMap.Add(TEXT("NZ"), CountryCodeNZ);
        _CountryCodeMap.Add(TEXT("NI"), CountryCodeNI);
        _CountryCodeMap.Add(TEXT("NE"), CountryCodeNE);
        _CountryCodeMap.Add(TEXT("NG"), CountryCodeNG);
        _CountryCodeMap.Add(TEXT("NU"), CountryCodeNU);
        _CountryCodeMap.Add(TEXT("NF"), CountryCodeNF);
        _CountryCodeMap.Add(TEXT("MP"), CountryCodeMP);
        _CountryCodeMap.Add(TEXT("NO"), CountryCodeNO);
        _CountryCodeMap.Add(TEXT("OM"), CountryCodeOM);
        _CountryCodeMap.Add(TEXT("PK"), CountryCodePK);
        _CountryCodeMap.Add(TEXT("PW"), CountryCodePW);
        _CountryCodeMap.Add(TEXT("PS"), CountryCodePS);
        _CountryCodeMap.Add(TEXT("PA"), CountryCodePA);
        _CountryCodeMap.Add(TEXT("PG"), CountryCodePG);
        _CountryCodeMap.Add(TEXT("PY"), CountryCodePY);
        _CountryCodeMap.Add(TEXT("PE"), CountryCodePE);
        _CountryCodeMap.Add(TEXT("PH"), CountryCodePH);
        _CountryCodeMap.Add(TEXT("PN"), CountryCodePN);
        _CountryCodeMap.Add(TEXT("PL"), CountryCodePL);
        _CountryCodeMap.Add(TEXT("PT"), CountryCodePT);
        _CountryCodeMap.Add(TEXT("PR"), CountryCodePR);
        _CountryCodeMap.Add(TEXT("QA"), CountryCodeQA);
        _CountryCodeMap.Add(TEXT("RE"), CountryCodeRE);
        _CountryCodeMap.Add(TEXT("RO"), CountryCodeRO);
        _CountryCodeMap.Add(TEXT("RU"), CountryCodeRU);
        _CountryCodeMap.Add(TEXT("RW"), CountryCodeRW);
        _CountryCodeMap.Add(TEXT("BL"), CountryCodeBL);
        _CountryCodeMap.Add(TEXT("SH"), CountryCodeSH);
        _CountryCodeMap.Add(TEXT("KN"), CountryCodeKN);
        _CountryCodeMap.Add(TEXT("LC"), CountryCodeLC);
        _CountryCodeMap.Add(TEXT("MF"), CountryCodeMF);
        _CountryCodeMap.Add(TEXT("PM"), CountryCodePM);
        _CountryCodeMap.Add(TEXT("VC"), CountryCodeVC);
        _CountryCodeMap.Add(TEXT("WS"), CountryCodeWS);
        _CountryCodeMap.Add(TEXT("SM"), CountryCodeSM);
        _CountryCodeMap.Add(TEXT("ST"), CountryCodeST);
        _CountryCodeMap.Add(TEXT("SA"), CountryCodeSA);
        _CountryCodeMap.Add(TEXT("SN"), CountryCodeSN);
        _CountryCodeMap.Add(TEXT("RS"), CountryCodeRS);
        _CountryCodeMap.Add(TEXT("SC"), CountryCodeSC);
        _CountryCodeMap.Add(TEXT("SL"), CountryCodeSL);
        _CountryCodeMap.Add(TEXT("SG"), CountryCodeSG);
        _CountryCodeMap.Add(TEXT("SX"), CountryCodeSX);
        _CountryCodeMap.Add(TEXT("SK"), CountryCodeSK);
        _CountryCodeMap.Add(TEXT("SI"), CountryCodeSI);
        _CountryCodeMap.Add(TEXT("SB"), CountryCodeSB);
        _CountryCodeMap.Add(TEXT("SO"), CountryCodeSO);
        _CountryCodeMap.Add(TEXT("ZA"), CountryCodeZA);
        _CountryCodeMap.Add(TEXT("GS"), CountryCodeGS);
        _CountryCodeMap.Add(TEXT("SS"), CountryCodeSS);
        _CountryCodeMap.Add(TEXT("ES"), CountryCodeES);
        _CountryCodeMap.Add(TEXT("LK"), CountryCodeLK);
        _CountryCodeMap.Add(TEXT("SD"), CountryCodeSD);
        _CountryCodeMap.Add(TEXT("SR"), CountryCodeSR);
        _CountryCodeMap.Add(TEXT("SJ"), CountryCodeSJ);
        _CountryCodeMap.Add(TEXT("SZ"), CountryCodeSZ);
        _CountryCodeMap.Add(TEXT("SE"), CountryCodeSE);
        _CountryCodeMap.Add(TEXT("CH"), CountryCodeCH);
        _CountryCodeMap.Add(TEXT("SY"), CountryCodeSY);
        _CountryCodeMap.Add(TEXT("TW"), CountryCodeTW);
        _CountryCodeMap.Add(TEXT("TJ"), CountryCodeTJ);
        _CountryCodeMap.Add(TEXT("TZ"), CountryCodeTZ);
        _CountryCodeMap.Add(TEXT("TH"), CountryCodeTH);
        _CountryCodeMap.Add(TEXT("TL"), CountryCodeTL);
        _CountryCodeMap.Add(TEXT("TG"), CountryCodeTG);
        _CountryCodeMap.Add(TEXT("TK"), CountryCodeTK);
        _CountryCodeMap.Add(TEXT("TO"), CountryCodeTO);
        _CountryCodeMap.Add(TEXT("TT"), CountryCodeTT);
        _CountryCodeMap.Add(TEXT("TN"), CountryCodeTN);
        _CountryCodeMap.Add(TEXT("TR"), CountryCodeTR);
        _CountryCodeMap.Add(TEXT("TM"), CountryCodeTM);
        _CountryCodeMap.Add(TEXT("TC"), CountryCodeTC);
        _CountryCodeMap.Add(TEXT("TV"), CountryCodeTV);
        _CountryCodeMap.Add(TEXT("UG"), CountryCodeUG);
        _CountryCodeMap.Add(TEXT("UA"), CountryCodeUA);
        _CountryCodeMap.Add(TEXT("AE"), CountryCodeAE);
        _CountryCodeMap.Add(TEXT("GB"), CountryCodeGB);
        _CountryCodeMap.Add(TEXT("US"), CountryCodeUS);
        _CountryCodeMap.Add(TEXT("UM"), CountryCodeUM);
        _CountryCodeMap.Add(TEXT("UY"), CountryCodeUY);
        _CountryCodeMap.Add(TEXT("UZ"), CountryCodeUZ);
        _CountryCodeMap.Add(TEXT("VU"), CountryCodeVU);
        _CountryCodeMap.Add(TEXT("VE"), CountryCodeVE);
        _CountryCodeMap.Add(TEXT("VN"), CountryCodeVN);
        _CountryCodeMap.Add(TEXT("VG"), CountryCodeVG);
        _CountryCodeMap.Add(TEXT("VI"), CountryCodeVI);
        _CountryCodeMap.Add(TEXT("WF"), CountryCodeWF);
        _CountryCodeMap.Add(TEXT("EH"), CountryCodeEH);
        _CountryCodeMap.Add(TEXT("YE"), CountryCodeYE);
        _CountryCodeMap.Add(TEXT("ZM"), CountryCodeZM);
        _CountryCodeMap.Add(TEXT("ZW"), CountryCodeZW);

    }

    if (!value.IsEmpty())
    {
        auto output = _CountryCodeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return CountryCodeAF; // Basically critical fail
}

PlayFab::EconomyModels::FCreateDraftItemRequest::~FCreateDraftItemRequest()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FCreateDraftItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Publish"));
    writer->WriteValue(Publish);

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCreateDraftItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FCatalogItem(ItemValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> PublishValue = obj->TryGetField(TEXT("Publish"));
    if (PublishValue.IsValid() && !PublishValue->IsNull())
    {
        bool TmpValue;
        if (PublishValue->TryGetBool(TmpValue)) { Publish = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCreateDraftItemResponse::~FCreateDraftItemResponse()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FCreateDraftItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCreateDraftItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FCatalogItem(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FUploadInfo::~FUploadInfo()
{

}

void PlayFab::EconomyModels::FUploadInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FileName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FileName"));
        writer->WriteValue(FileName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUploadInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FileNameValue = obj->TryGetField(TEXT("FileName"));
    if (FileNameValue.IsValid() && !FileNameValue->IsNull())
    {
        FString TmpValue;
        if (FileNameValue->TryGetString(TmpValue)) { FileName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCreateUploadUrlsRequest::~FCreateUploadUrlsRequest()
{

}

void PlayFab::EconomyModels::FCreateUploadUrlsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Files.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Files"));
        for (const FUploadInfo& item : Files)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCreateUploadUrlsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TArray<TSharedPtr<FJsonValue>>&FilesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Files"));
    for (int32 Idx = 0; Idx < FilesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = FilesArray[Idx];
        Files.Add(FUploadInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FUploadUrlMetadata::~FUploadUrlMetadata()
{

}

void PlayFab::EconomyModels::FUploadUrlMetadata::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FileName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FileName"));
        writer->WriteValue(FileName);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Url.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Url"));
        writer->WriteValue(Url);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUploadUrlMetadata::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FileNameValue = obj->TryGetField(TEXT("FileName"));
    if (FileNameValue.IsValid() && !FileNameValue->IsNull())
    {
        FString TmpValue;
        if (FileNameValue->TryGetString(TmpValue)) { FileName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UrlValue = obj->TryGetField(TEXT("Url"));
    if (UrlValue.IsValid() && !UrlValue->IsNull())
    {
        FString TmpValue;
        if (UrlValue->TryGetString(TmpValue)) { Url = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FCreateUploadUrlsResponse::~FCreateUploadUrlsResponse()
{

}

void PlayFab::EconomyModels::FCreateUploadUrlsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (UploadUrls.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("UploadUrls"));
        for (const FUploadUrlMetadata& item : UploadUrls)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FCreateUploadUrlsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&UploadUrlsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("UploadUrls"));
    for (int32 Idx = 0; Idx < UploadUrlsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = UploadUrlsArray[Idx];
        UploadUrls.Add(FUploadUrlMetadata(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FDeleteEntityItemReviewsRequest::~FDeleteEntityItemReviewsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FDeleteEntityItemReviewsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeleteEntityItemReviewsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FDeleteEntityItemReviewsResponse::~FDeleteEntityItemReviewsResponse()
{

}

void PlayFab::EconomyModels::FDeleteEntityItemReviewsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeleteEntityItemReviewsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FDeleteInventoryCollectionRequest::~FDeleteInventoryCollectionRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FDeleteInventoryCollectionRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionId"));
        writer->WriteValue(CollectionId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeleteInventoryCollectionRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CollectionIdValue = obj->TryGetField(TEXT("CollectionId"));
    if (CollectionIdValue.IsValid() && !CollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (CollectionIdValue->TryGetString(TmpValue)) { CollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FDeleteInventoryCollectionResponse::~FDeleteInventoryCollectionResponse()
{

}

void PlayFab::EconomyModels::FDeleteInventoryCollectionResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeleteInventoryCollectionResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FDeleteInventoryItemsOperation::~FDeleteInventoryItemsOperation()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FDeleteInventoryItemsOperation::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeleteInventoryItemsOperation::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FInventoryItemReference(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FDeleteInventoryItemsRequest::~FDeleteInventoryItemsRequest()
{
    //if (Entity != nullptr) delete Entity;
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FDeleteInventoryItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionId"));
        writer->WriteValue(CollectionId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (IdempotencyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IdempotencyId"));
        writer->WriteValue(IdempotencyId);
    }

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeleteInventoryItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CollectionIdValue = obj->TryGetField(TEXT("CollectionId"));
    if (CollectionIdValue.IsValid() && !CollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (CollectionIdValue->TryGetString(TmpValue)) { CollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdempotencyIdValue = obj->TryGetField(TEXT("IdempotencyId"));
    if (IdempotencyIdValue.IsValid() && !IdempotencyIdValue->IsNull())
    {
        FString TmpValue;
        if (IdempotencyIdValue->TryGetString(TmpValue)) { IdempotencyId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FInventoryItemReference(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FDeleteInventoryItemsResponse::~FDeleteInventoryItemsResponse()
{

}

void PlayFab::EconomyModels::FDeleteInventoryItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (IdempotencyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IdempotencyId"));
        writer->WriteValue(IdempotencyId);
    }

    if (TransactionIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TransactionIds"));
        for (const FString& item : TransactionIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeleteInventoryItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdempotencyIdValue = obj->TryGetField(TEXT("IdempotencyId"));
    if (IdempotencyIdValue.IsValid() && !IdempotencyIdValue->IsNull())
    {
        FString TmpValue;
        if (IdempotencyIdValue->TryGetString(TmpValue)) { IdempotencyId = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("TransactionIds"), TransactionIds);

    return HasSucceeded;
}

PlayFab::EconomyModels::FDeleteItemRequest::~FDeleteItemRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FDeleteItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeleteItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FDeleteItemResponse::~FDeleteItemResponse()
{

}

void PlayFab::EconomyModels::FDeleteItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FDeleteItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FPurchasePriceAmount::~FPurchasePriceAmount()
{

}

void PlayFab::EconomyModels::FPurchasePriceAmount::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (StackId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StackId"));
        writer->WriteValue(StackId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FPurchasePriceAmount::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StackIdValue = obj->TryGetField(TEXT("StackId"));
    if (StackIdValue.IsValid() && !StackIdValue->IsNull())
    {
        FString TmpValue;
        if (StackIdValue->TryGetString(TmpValue)) { StackId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FPurchaseInventoryItemsOperation::~FPurchaseInventoryItemsOperation()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FPurchaseInventoryItemsOperation::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    writer->WriteIdentifierPrefix(TEXT("DeleteEmptyStacks"));
    writer->WriteValue(DeleteEmptyStacks);

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    if (PriceAmounts.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PriceAmounts"));
        for (const FPurchasePriceAmount& item : PriceAmounts)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (StoreId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StoreId"));
        writer->WriteValue(StoreId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FPurchaseInventoryItemsOperation::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DeleteEmptyStacksValue = obj->TryGetField(TEXT("DeleteEmptyStacks"));
    if (DeleteEmptyStacksValue.IsValid() && !DeleteEmptyStacksValue->IsNull())
    {
        bool TmpValue;
        if (DeleteEmptyStacksValue->TryGetBool(TmpValue)) { DeleteEmptyStacks = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FInventoryItemReference(ItemValue->AsObject()));
    }

    const TArray<TSharedPtr<FJsonValue>>&PriceAmountsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("PriceAmounts"));
    for (int32 Idx = 0; Idx < PriceAmountsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PriceAmountsArray[Idx];
        PriceAmounts.Add(FPurchasePriceAmount(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> StoreIdValue = obj->TryGetField(TEXT("StoreId"));
    if (StoreIdValue.IsValid() && !StoreIdValue->IsNull())
    {
        FString TmpValue;
        if (StoreIdValue->TryGetString(TmpValue)) { StoreId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FSubtractInventoryItemsOperation::~FSubtractInventoryItemsOperation()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FSubtractInventoryItemsOperation::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    writer->WriteIdentifierPrefix(TEXT("DeleteEmptyStacks"));
    writer->WriteValue(DeleteEmptyStacks);

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSubtractInventoryItemsOperation::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DeleteEmptyStacksValue = obj->TryGetField(TEXT("DeleteEmptyStacks"));
    if (DeleteEmptyStacksValue.IsValid() && !DeleteEmptyStacksValue->IsNull())
    {
        bool TmpValue;
        if (DeleteEmptyStacksValue->TryGetBool(TmpValue)) { DeleteEmptyStacks = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FInventoryItemReference(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FTransferInventoryItemsOperation::~FTransferInventoryItemsOperation()
{
    //if (GivingItem != nullptr) delete GivingItem;
    //if (ReceivingItem != nullptr) delete ReceivingItem;

}

void PlayFab::EconomyModels::FTransferInventoryItemsOperation::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    writer->WriteIdentifierPrefix(TEXT("DeleteEmptyStacks"));
    writer->WriteValue(DeleteEmptyStacks);

    if (GivingItem.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("GivingItem"));
        GivingItem->writeJSON(writer);
    }

    if (ReceivingItem.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("ReceivingItem"));
        ReceivingItem->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FTransferInventoryItemsOperation::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DeleteEmptyStacksValue = obj->TryGetField(TEXT("DeleteEmptyStacks"));
    if (DeleteEmptyStacksValue.IsValid() && !DeleteEmptyStacksValue->IsNull())
    {
        bool TmpValue;
        if (DeleteEmptyStacksValue->TryGetBool(TmpValue)) { DeleteEmptyStacks = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GivingItemValue = obj->TryGetField(TEXT("GivingItem"));
    if (GivingItemValue.IsValid() && !GivingItemValue->IsNull())
    {
        GivingItem = MakeShareable(new FInventoryItemReference(GivingItemValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ReceivingItemValue = obj->TryGetField(TEXT("ReceivingItem"));
    if (ReceivingItemValue.IsValid() && !ReceivingItemValue->IsNull())
    {
        ReceivingItem = MakeShareable(new FInventoryItemReference(ReceivingItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FInventoryItem::~FInventoryItem()
{

}

void PlayFab::EconomyModels::FInventoryItem::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (StackId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StackId"));
        writer->WriteValue(StackId);
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FInventoryItem::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StackIdValue = obj->TryGetField(TEXT("StackId"));
    if (StackIdValue.IsValid() && !StackIdValue->IsNull())
    {
        FString TmpValue;
        if (StackIdValue->TryGetString(TmpValue)) { StackId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FUpdateInventoryItemsOperation::~FUpdateInventoryItemsOperation()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FUpdateInventoryItemsOperation::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUpdateInventoryItemsOperation::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FInventoryItem(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FInventoryOperation::~FInventoryOperation()
{
    //if (Add != nullptr) delete Add;
    //if (Delete != nullptr) delete Delete;
    //if (Purchase != nullptr) delete Purchase;
    //if (Subtract != nullptr) delete Subtract;
    //if (Transfer != nullptr) delete Transfer;
    //if (Update != nullptr) delete Update;

}

void PlayFab::EconomyModels::FInventoryOperation::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Add.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Add"));
        Add->writeJSON(writer);
    }

    if (Delete.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Delete"));
        Delete->writeJSON(writer);
    }

    if (Purchase.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Purchase"));
        Purchase->writeJSON(writer);
    }

    if (Subtract.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Subtract"));
        Subtract->writeJSON(writer);
    }

    if (Transfer.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Transfer"));
        Transfer->writeJSON(writer);
    }

    if (Update.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Update"));
        Update->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FInventoryOperation::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AddValue = obj->TryGetField(TEXT("Add"));
    if (AddValue.IsValid() && !AddValue->IsNull())
    {
        Add = MakeShareable(new FAddInventoryItemsOperation(AddValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> DeleteValue = obj->TryGetField(TEXT("Delete"));
    if (DeleteValue.IsValid() && !DeleteValue->IsNull())
    {
        Delete = MakeShareable(new FDeleteInventoryItemsOperation(DeleteValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> PurchaseValue = obj->TryGetField(TEXT("Purchase"));
    if (PurchaseValue.IsValid() && !PurchaseValue->IsNull())
    {
        Purchase = MakeShareable(new FPurchaseInventoryItemsOperation(PurchaseValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> SubtractValue = obj->TryGetField(TEXT("Subtract"));
    if (SubtractValue.IsValid() && !SubtractValue->IsNull())
    {
        Subtract = MakeShareable(new FSubtractInventoryItemsOperation(SubtractValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> TransferValue = obj->TryGetField(TEXT("Transfer"));
    if (TransferValue.IsValid() && !TransferValue->IsNull())
    {
        Transfer = MakeShareable(new FTransferInventoryItemsOperation(TransferValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> UpdateValue = obj->TryGetField(TEXT("Update"));
    if (UpdateValue.IsValid() && !UpdateValue->IsNull())
    {
        Update = MakeShareable(new FUpdateInventoryItemsOperation(UpdateValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FExecuteInventoryOperationsRequest::~FExecuteInventoryOperationsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FExecuteInventoryOperationsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionId"));
        writer->WriteValue(CollectionId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (IdempotencyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IdempotencyId"));
        writer->WriteValue(IdempotencyId);
    }

    if (Operations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Operations"));
        for (const FInventoryOperation& item : Operations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FExecuteInventoryOperationsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CollectionIdValue = obj->TryGetField(TEXT("CollectionId"));
    if (CollectionIdValue.IsValid() && !CollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (CollectionIdValue->TryGetString(TmpValue)) { CollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdempotencyIdValue = obj->TryGetField(TEXT("IdempotencyId"));
    if (IdempotencyIdValue.IsValid() && !IdempotencyIdValue->IsNull())
    {
        FString TmpValue;
        if (IdempotencyIdValue->TryGetString(TmpValue)) { IdempotencyId = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&OperationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Operations"));
    for (int32 Idx = 0; Idx < OperationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = OperationsArray[Idx];
        Operations.Add(FInventoryOperation(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FExecuteInventoryOperationsResponse::~FExecuteInventoryOperationsResponse()
{

}

void PlayFab::EconomyModels::FExecuteInventoryOperationsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (IdempotencyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IdempotencyId"));
        writer->WriteValue(IdempotencyId);
    }

    if (TransactionIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TransactionIds"));
        for (const FString& item : TransactionIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FExecuteInventoryOperationsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdempotencyIdValue = obj->TryGetField(TEXT("IdempotencyId"));
    if (IdempotencyIdValue.IsValid() && !IdempotencyIdValue->IsNull())
    {
        FString TmpValue;
        if (IdempotencyIdValue->TryGetString(TmpValue)) { IdempotencyId = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("TransactionIds"), TransactionIds);

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetCatalogConfigRequest::~FGetCatalogConfigRequest()
{

}

void PlayFab::EconomyModels::FGetCatalogConfigRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetCatalogConfigRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetCatalogConfigResponse::~FGetCatalogConfigResponse()
{
    //if (Config != nullptr) delete Config;

}

void PlayFab::EconomyModels::FGetCatalogConfigResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Config.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Config"));
        Config->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetCatalogConfigResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ConfigValue = obj->TryGetField(TEXT("Config"));
    if (ConfigValue.IsValid() && !ConfigValue->IsNull())
    {
        Config = MakeShareable(new FCatalogConfig(ConfigValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetDraftItemRequest::~FGetDraftItemRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetDraftItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetDraftItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetDraftItemResponse::~FGetDraftItemResponse()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FGetDraftItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetDraftItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FCatalogItem(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetDraftItemsRequest::~FGetDraftItemsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetDraftItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AlternateIds"));
        for (const FCatalogAlternateId& item : AlternateIds)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Ids.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Ids"));
        for (const FString& item : Ids)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetDraftItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AlternateIdsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("AlternateIds"));
    for (int32 Idx = 0; Idx < AlternateIdsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AlternateIdsArray[Idx];
        AlternateIds.Add(FCatalogAlternateId(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    obj->TryGetStringArrayField(TEXT("Ids"), Ids);

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetDraftItemsResponse::~FGetDraftItemsResponse()
{

}

void PlayFab::EconomyModels::FGetDraftItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    if (Items.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Items"));
        for (const FCatalogItem& item : Items)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetDraftItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ItemsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Items"));
    for (int32 Idx = 0; Idx < ItemsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemsArray[Idx];
        Items.Add(FCatalogItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FGetEntityDraftItemsRequest::~FGetEntityDraftItemsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetEntityDraftItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    writer->WriteIdentifierPrefix(TEXT("Count"));
    writer->WriteValue(Count);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Filter.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Filter"));
        writer->WriteValue(Filter);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetEntityDraftItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CountValue = obj->TryGetField(TEXT("Count"));
    if (CountValue.IsValid() && !CountValue->IsNull())
    {
        int32 TmpValue;
        if (CountValue->TryGetNumber(TmpValue)) { Count = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> FilterValue = obj->TryGetField(TEXT("Filter"));
    if (FilterValue.IsValid() && !FilterValue->IsNull())
    {
        FString TmpValue;
        if (FilterValue->TryGetString(TmpValue)) { Filter = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetEntityDraftItemsResponse::~FGetEntityDraftItemsResponse()
{

}

void PlayFab::EconomyModels::FGetEntityDraftItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    if (Items.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Items"));
        for (const FCatalogItem& item : Items)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetEntityDraftItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ItemsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Items"));
    for (int32 Idx = 0; Idx < ItemsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemsArray[Idx];
        Items.Add(FCatalogItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FGetEntityItemReviewRequest::~FGetEntityItemReviewRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetEntityItemReviewRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetEntityItemReviewRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FReview::~FReview()
{
    //if (ReviewerEntity != nullptr) delete ReviewerEntity;

}

void PlayFab::EconomyModels::FReview::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("HelpfulNegative"));
    writer->WriteValue(HelpfulNegative);

    writer->WriteIdentifierPrefix(TEXT("HelpfulPositive"));
    writer->WriteValue(HelpfulPositive);

    writer->WriteIdentifierPrefix(TEXT("IsInstalled"));
    writer->WriteValue(IsInstalled);

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (ItemVersion.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemVersion"));
        writer->WriteValue(ItemVersion);
    }

    if (Locale.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Locale"));
        writer->WriteValue(Locale);
    }

    writer->WriteIdentifierPrefix(TEXT("Rating"));
    writer->WriteValue(Rating);

    if (ReviewerEntity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("ReviewerEntity"));
        ReviewerEntity->writeJSON(writer);
    }

    if (ReviewerId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ReviewerId"));
        writer->WriteValue(ReviewerId);
    }

    if (ReviewId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ReviewId"));
        writer->WriteValue(ReviewId);
    }

    if (ReviewText.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ReviewText"));
        writer->WriteValue(ReviewText);
    }

    writer->WriteIdentifierPrefix(TEXT("Submitted"));
    writeDatetime(Submitted, writer);

    if (Title.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Title"));
        writer->WriteValue(Title);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReview::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> HelpfulNegativeValue = obj->TryGetField(TEXT("HelpfulNegative"));
    if (HelpfulNegativeValue.IsValid() && !HelpfulNegativeValue->IsNull())
    {
        int32 TmpValue;
        if (HelpfulNegativeValue->TryGetNumber(TmpValue)) { HelpfulNegative = TmpValue; }
    }

    const TSharedPtr<FJsonValue> HelpfulPositiveValue = obj->TryGetField(TEXT("HelpfulPositive"));
    if (HelpfulPositiveValue.IsValid() && !HelpfulPositiveValue->IsNull())
    {
        int32 TmpValue;
        if (HelpfulPositiveValue->TryGetNumber(TmpValue)) { HelpfulPositive = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IsInstalledValue = obj->TryGetField(TEXT("IsInstalled"));
    if (IsInstalledValue.IsValid() && !IsInstalledValue->IsNull())
    {
        bool TmpValue;
        if (IsInstalledValue->TryGetBool(TmpValue)) { IsInstalled = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemVersionValue = obj->TryGetField(TEXT("ItemVersion"));
    if (ItemVersionValue.IsValid() && !ItemVersionValue->IsNull())
    {
        FString TmpValue;
        if (ItemVersionValue->TryGetString(TmpValue)) { ItemVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LocaleValue = obj->TryGetField(TEXT("Locale"));
    if (LocaleValue.IsValid() && !LocaleValue->IsNull())
    {
        FString TmpValue;
        if (LocaleValue->TryGetString(TmpValue)) { Locale = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RatingValue = obj->TryGetField(TEXT("Rating"));
    if (RatingValue.IsValid() && !RatingValue->IsNull())
    {
        int32 TmpValue;
        if (RatingValue->TryGetNumber(TmpValue)) { Rating = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReviewerEntityValue = obj->TryGetField(TEXT("ReviewerEntity"));
    if (ReviewerEntityValue.IsValid() && !ReviewerEntityValue->IsNull())
    {
        ReviewerEntity = MakeShareable(new FEntityKey(ReviewerEntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ReviewerIdValue = obj->TryGetField(TEXT("ReviewerId"));
    if (ReviewerIdValue.IsValid() && !ReviewerIdValue->IsNull())
    {
        FString TmpValue;
        if (ReviewerIdValue->TryGetString(TmpValue)) { ReviewerId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReviewIdValue = obj->TryGetField(TEXT("ReviewId"));
    if (ReviewIdValue.IsValid() && !ReviewIdValue->IsNull())
    {
        FString TmpValue;
        if (ReviewIdValue->TryGetString(TmpValue)) { ReviewId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReviewTextValue = obj->TryGetField(TEXT("ReviewText"));
    if (ReviewTextValue.IsValid() && !ReviewTextValue->IsNull())
    {
        FString TmpValue;
        if (ReviewTextValue->TryGetString(TmpValue)) { ReviewText = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SubmittedValue = obj->TryGetField(TEXT("Submitted"));
    if (SubmittedValue.IsValid())
        Submitted = readDatetime(SubmittedValue);


    const TSharedPtr<FJsonValue> TitleValue = obj->TryGetField(TEXT("Title"));
    if (TitleValue.IsValid() && !TitleValue->IsNull())
    {
        FString TmpValue;
        if (TitleValue->TryGetString(TmpValue)) { Title = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetEntityItemReviewResponse::~FGetEntityItemReviewResponse()
{
    //if (Review != nullptr) delete Review;

}

void PlayFab::EconomyModels::FGetEntityItemReviewResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (pfReview.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Review"));
        pfReview->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetEntityItemReviewResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ReviewValue = obj->TryGetField(TEXT("Review"));
    if (ReviewValue.IsValid() && !ReviewValue->IsNull())
    {
        pfReview = MakeShareable(new FReview(ReviewValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetInventoryCollectionIdsRequest::~FGetInventoryCollectionIdsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetInventoryCollectionIdsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    writer->WriteIdentifierPrefix(TEXT("Count"));
    writer->WriteValue(Count);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetInventoryCollectionIdsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CountValue = obj->TryGetField(TEXT("Count"));
    if (CountValue.IsValid() && !CountValue->IsNull())
    {
        int32 TmpValue;
        if (CountValue->TryGetNumber(TmpValue)) { Count = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetInventoryCollectionIdsResponse::~FGetInventoryCollectionIdsResponse()
{

}

void PlayFab::EconomyModels::FGetInventoryCollectionIdsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CollectionIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("CollectionIds"));
        for (const FString& item : CollectionIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetInventoryCollectionIdsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("CollectionIds"), CollectionIds);

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetInventoryItemsRequest::~FGetInventoryItemsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetInventoryItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionId"));
        writer->WriteValue(CollectionId);
    }

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    writer->WriteIdentifierPrefix(TEXT("Count"));
    writer->WriteValue(Count);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Filter.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Filter"));
        writer->WriteValue(Filter);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetInventoryItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CollectionIdValue = obj->TryGetField(TEXT("CollectionId"));
    if (CollectionIdValue.IsValid() && !CollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (CollectionIdValue->TryGetString(TmpValue)) { CollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CountValue = obj->TryGetField(TEXT("Count"));
    if (CountValue.IsValid() && !CountValue->IsNull())
    {
        int32 TmpValue;
        if (CountValue->TryGetNumber(TmpValue)) { Count = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> FilterValue = obj->TryGetField(TEXT("Filter"));
    if (FilterValue.IsValid() && !FilterValue->IsNull())
    {
        FString TmpValue;
        if (FilterValue->TryGetString(TmpValue)) { Filter = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetInventoryItemsResponse::~FGetInventoryItemsResponse()
{

}

void PlayFab::EconomyModels::FGetInventoryItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    if (Items.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Items"));
        for (const FInventoryItem& item : Items)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetInventoryItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ItemsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Items"));
    for (int32 Idx = 0; Idx < ItemsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemsArray[Idx];
        Items.Add(FInventoryItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemContainersRequest::~FGetItemContainersRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetItemContainersRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    writer->WriteIdentifierPrefix(TEXT("Count"));
    writer->WriteValue(Count);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemContainersRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CountValue = obj->TryGetField(TEXT("Count"));
    if (CountValue.IsValid() && !CountValue->IsNull())
    {
        int32 TmpValue;
        if (CountValue->TryGetNumber(TmpValue)) { Count = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemContainersResponse::~FGetItemContainersResponse()
{

}

void PlayFab::EconomyModels::FGetItemContainersResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Containers.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Containers"));
        for (const FCatalogItem& item : Containers)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemContainersResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ContainersArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Containers"));
    for (int32 Idx = 0; Idx < ContainersArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ContainersArray[Idx];
        Containers.Add(FCatalogItem(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemModerationStateRequest::~FGetItemModerationStateRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;

}

void PlayFab::EconomyModels::FGetItemModerationStateRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemModerationStateRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemModerationStateResponse::~FGetItemModerationStateResponse()
{
    //if (State != nullptr) delete State;

}

void PlayFab::EconomyModels::FGetItemModerationStateResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (State.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("State"));
        State->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemModerationStateResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> StateValue = obj->TryGetField(TEXT("State"));
    if (StateValue.IsValid() && !StateValue->IsNull())
    {
        State = MakeShareable(new FModerationState(StateValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemPublishStatusRequest::~FGetItemPublishStatusRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetItemPublishStatusRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemPublishStatusRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::EconomyModels::writePublishResultEnumJSON(PublishResult enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case PublishResultUnknown: writer->WriteValue(TEXT("Unknown")); break;
    case PublishResultPending: writer->WriteValue(TEXT("Pending")); break;
    case PublishResultSucceeded: writer->WriteValue(TEXT("Succeeded")); break;
    case PublishResultFailed: writer->WriteValue(TEXT("Failed")); break;
    case PublishResultCanceled: writer->WriteValue(TEXT("Canceled")); break;
    }
}

EconomyModels::PublishResult PlayFab::EconomyModels::readPublishResultFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readPublishResultFromValue(value.IsValid() ? value->AsString() : "");
}

EconomyModels::PublishResult PlayFab::EconomyModels::readPublishResultFromValue(const FString& value)
{
    static TMap<FString, PublishResult> _PublishResultMap;
    if (_PublishResultMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _PublishResultMap.Add(TEXT("Unknown"), PublishResultUnknown);
        _PublishResultMap.Add(TEXT("Pending"), PublishResultPending);
        _PublishResultMap.Add(TEXT("Succeeded"), PublishResultSucceeded);
        _PublishResultMap.Add(TEXT("Failed"), PublishResultFailed);
        _PublishResultMap.Add(TEXT("Canceled"), PublishResultCanceled);

    }

    if (!value.IsEmpty())
    {
        auto output = _PublishResultMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return PublishResultUnknown; // Basically critical fail
}

PlayFab::EconomyModels::FGetItemPublishStatusResponse::~FGetItemPublishStatusResponse()
{

}

void PlayFab::EconomyModels::FGetItemPublishStatusResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Result.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Result"));
        writePublishResultEnumJSON(Result, writer);
    }

    if (StatusMessage.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StatusMessage"));
        writer->WriteValue(StatusMessage);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemPublishStatusResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    Result = readPublishResultFromValue(obj->TryGetField(TEXT("Result")));

    const TSharedPtr<FJsonValue> StatusMessageValue = obj->TryGetField(TEXT("StatusMessage"));
    if (StatusMessageValue.IsValid() && !StatusMessageValue->IsNull())
    {
        FString TmpValue;
        if (StatusMessageValue->TryGetString(TmpValue)) { StatusMessage = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemRequest::~FGetItemRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemResponse::~FGetItemResponse()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FGetItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FCatalogItem(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemReviewsRequest::~FGetItemReviewsRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;

}

void PlayFab::EconomyModels::FGetItemReviewsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    writer->WriteIdentifierPrefix(TEXT("Count"));
    writer->WriteValue(Count);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (OrderBy.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OrderBy"));
        writer->WriteValue(OrderBy);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemReviewsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CountValue = obj->TryGetField(TEXT("Count"));
    if (CountValue.IsValid() && !CountValue->IsNull())
    {
        int32 TmpValue;
        if (CountValue->TryGetNumber(TmpValue)) { Count = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OrderByValue = obj->TryGetField(TEXT("OrderBy"));
    if (OrderByValue.IsValid() && !OrderByValue->IsNull())
    {
        FString TmpValue;
        if (OrderByValue->TryGetString(TmpValue)) { OrderBy = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemReviewsResponse::~FGetItemReviewsResponse()
{

}

void PlayFab::EconomyModels::FGetItemReviewsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    if (Reviews.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Reviews"));
        for (const FReview& item : Reviews)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemReviewsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ReviewsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Reviews"));
    for (int32 Idx = 0; Idx < ReviewsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ReviewsArray[Idx];
        Reviews.Add(FReview(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemReviewSummaryRequest::~FGetItemReviewSummaryRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;

}

void PlayFab::EconomyModels::FGetItemReviewSummaryRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemReviewSummaryRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemReviewSummaryResponse::~FGetItemReviewSummaryResponse()
{
    //if (LeastFavorableReview != nullptr) delete LeastFavorableReview;
    //if (MostFavorableReview != nullptr) delete MostFavorableReview;
    //if (Rating != nullptr) delete Rating;

}

void PlayFab::EconomyModels::FGetItemReviewSummaryResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (LeastFavorableReview.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("LeastFavorableReview"));
        LeastFavorableReview->writeJSON(writer);
    }

    if (MostFavorableReview.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("MostFavorableReview"));
        MostFavorableReview->writeJSON(writer);
    }

    if (pfRating.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Rating"));
        pfRating->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("ReviewsCount"));
    writer->WriteValue(ReviewsCount);

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemReviewSummaryResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> LeastFavorableReviewValue = obj->TryGetField(TEXT("LeastFavorableReview"));
    if (LeastFavorableReviewValue.IsValid() && !LeastFavorableReviewValue->IsNull())
    {
        LeastFavorableReview = MakeShareable(new FReview(LeastFavorableReviewValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> MostFavorableReviewValue = obj->TryGetField(TEXT("MostFavorableReview"));
    if (MostFavorableReviewValue.IsValid() && !MostFavorableReviewValue->IsNull())
    {
        MostFavorableReview = MakeShareable(new FReview(MostFavorableReviewValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> RatingValue = obj->TryGetField(TEXT("Rating"));
    if (RatingValue.IsValid() && !RatingValue->IsNull())
    {
        pfRating = MakeShareable(new FRating(RatingValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ReviewsCountValue = obj->TryGetField(TEXT("ReviewsCount"));
    if (ReviewsCountValue.IsValid() && !ReviewsCountValue->IsNull())
    {
        int32 TmpValue;
        if (ReviewsCountValue->TryGetNumber(TmpValue)) { ReviewsCount = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemsRequest::~FGetItemsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FGetItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("AlternateIds"));
        for (const FCatalogAlternateId& item : AlternateIds)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Ids.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Ids"));
        for (const FString& item : Ids)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&AlternateIdsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("AlternateIds"));
    for (int32 Idx = 0; Idx < AlternateIdsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = AlternateIdsArray[Idx];
        AlternateIds.Add(FCatalogAlternateId(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    obj->TryGetStringArrayField(TEXT("Ids"), Ids);

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetItemsResponse::~FGetItemsResponse()
{

}

void PlayFab::EconomyModels::FGetItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Items.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Items"));
        for (const FCatalogItem& item : Items)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ItemsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Items"));
    for (int32 Idx = 0; Idx < ItemsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemsArray[Idx];
        Items.Add(FCatalogItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FGetMicrosoftStoreAccessTokensRequest::~FGetMicrosoftStoreAccessTokensRequest()
{

}

void PlayFab::EconomyModels::FGetMicrosoftStoreAccessTokensRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetMicrosoftStoreAccessTokensRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FGetMicrosoftStoreAccessTokensResponse::~FGetMicrosoftStoreAccessTokensResponse()
{

}

void PlayFab::EconomyModels::FGetMicrosoftStoreAccessTokensResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CollectionsAccessToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionsAccessToken"));
        writer->WriteValue(CollectionsAccessToken);
    }

    writer->WriteIdentifierPrefix(TEXT("CollectionsAccessTokenExpirationDate"));
    writeDatetime(CollectionsAccessTokenExpirationDate, writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGetMicrosoftStoreAccessTokensResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CollectionsAccessTokenValue = obj->TryGetField(TEXT("CollectionsAccessToken"));
    if (CollectionsAccessTokenValue.IsValid() && !CollectionsAccessTokenValue->IsNull())
    {
        FString TmpValue;
        if (CollectionsAccessTokenValue->TryGetString(TmpValue)) { CollectionsAccessToken = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CollectionsAccessTokenExpirationDateValue = obj->TryGetField(TEXT("CollectionsAccessTokenExpirationDate"));
    if (CollectionsAccessTokenExpirationDateValue.IsValid())
        CollectionsAccessTokenExpirationDate = readDatetime(CollectionsAccessTokenExpirationDateValue);


    return HasSucceeded;
}

PlayFab::EconomyModels::FGooglePlayProductPurchase::~FGooglePlayProductPurchase()
{

}

void PlayFab::EconomyModels::FGooglePlayProductPurchase::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ProductId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ProductId"));
        writer->WriteValue(ProductId);
    }

    if (Token.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Token"));
        writer->WriteValue(Token);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FGooglePlayProductPurchase::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ProductIdValue = obj->TryGetField(TEXT("ProductId"));
    if (ProductIdValue.IsValid() && !ProductIdValue->IsNull())
    {
        FString TmpValue;
        if (ProductIdValue->TryGetString(TmpValue)) { ProductId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TokenValue = obj->TryGetField(TEXT("Token"));
    if (TokenValue.IsValid() && !TokenValue->IsNull())
    {
        FString TmpValue;
        if (TokenValue->TryGetString(TmpValue)) { Token = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::EconomyModels::writeHelpfulnessVoteEnumJSON(HelpfulnessVote enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case HelpfulnessVoteNone: writer->WriteValue(TEXT("None")); break;
    case HelpfulnessVoteUnHelpful: writer->WriteValue(TEXT("UnHelpful")); break;
    case HelpfulnessVoteHelpful: writer->WriteValue(TEXT("Helpful")); break;
    }
}

EconomyModels::HelpfulnessVote PlayFab::EconomyModels::readHelpfulnessVoteFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readHelpfulnessVoteFromValue(value.IsValid() ? value->AsString() : "");
}

EconomyModels::HelpfulnessVote PlayFab::EconomyModels::readHelpfulnessVoteFromValue(const FString& value)
{
    static TMap<FString, HelpfulnessVote> _HelpfulnessVoteMap;
    if (_HelpfulnessVoteMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _HelpfulnessVoteMap.Add(TEXT("None"), HelpfulnessVoteNone);
        _HelpfulnessVoteMap.Add(TEXT("UnHelpful"), HelpfulnessVoteUnHelpful);
        _HelpfulnessVoteMap.Add(TEXT("Helpful"), HelpfulnessVoteHelpful);

    }

    if (!value.IsEmpty())
    {
        auto output = _HelpfulnessVoteMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return HelpfulnessVoteNone; // Basically critical fail
}

PlayFab::EconomyModels::FPayoutDetails::~FPayoutDetails()
{

}

void PlayFab::EconomyModels::FPayoutDetails::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FPayoutDetails::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FPublishDraftItemRequest::~FPublishDraftItemRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FPublishDraftItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ETag.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ETag"));
        writer->WriteValue(ETag);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FPublishDraftItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ETagValue = obj->TryGetField(TEXT("ETag"));
    if (ETagValue.IsValid() && !ETagValue->IsNull())
    {
        FString TmpValue;
        if (ETagValue->TryGetString(TmpValue)) { ETag = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FPublishDraftItemResponse::~FPublishDraftItemResponse()
{

}

void PlayFab::EconomyModels::FPublishDraftItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FPublishDraftItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FPurchaseInventoryItemsRequest::~FPurchaseInventoryItemsRequest()
{
    //if (Entity != nullptr) delete Entity;
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FPurchaseInventoryItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (CollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionId"));
        writer->WriteValue(CollectionId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("DeleteEmptyStacks"));
    writer->WriteValue(DeleteEmptyStacks);

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (IdempotencyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IdempotencyId"));
        writer->WriteValue(IdempotencyId);
    }

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    if (PriceAmounts.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("PriceAmounts"));
        for (const FPurchasePriceAmount& item : PriceAmounts)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (StoreId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("StoreId"));
        writer->WriteValue(StoreId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FPurchaseInventoryItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CollectionIdValue = obj->TryGetField(TEXT("CollectionId"));
    if (CollectionIdValue.IsValid() && !CollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (CollectionIdValue->TryGetString(TmpValue)) { CollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DeleteEmptyStacksValue = obj->TryGetField(TEXT("DeleteEmptyStacks"));
    if (DeleteEmptyStacksValue.IsValid() && !DeleteEmptyStacksValue->IsNull())
    {
        bool TmpValue;
        if (DeleteEmptyStacksValue->TryGetBool(TmpValue)) { DeleteEmptyStacks = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdempotencyIdValue = obj->TryGetField(TEXT("IdempotencyId"));
    if (IdempotencyIdValue.IsValid() && !IdempotencyIdValue->IsNull())
    {
        FString TmpValue;
        if (IdempotencyIdValue->TryGetString(TmpValue)) { IdempotencyId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FInventoryItemReference(ItemValue->AsObject()));
    }

    const TArray<TSharedPtr<FJsonValue>>&PriceAmountsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("PriceAmounts"));
    for (int32 Idx = 0; Idx < PriceAmountsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PriceAmountsArray[Idx];
        PriceAmounts.Add(FPurchasePriceAmount(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> StoreIdValue = obj->TryGetField(TEXT("StoreId"));
    if (StoreIdValue.IsValid() && !StoreIdValue->IsNull())
    {
        FString TmpValue;
        if (StoreIdValue->TryGetString(TmpValue)) { StoreId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FPurchaseInventoryItemsResponse::~FPurchaseInventoryItemsResponse()
{

}

void PlayFab::EconomyModels::FPurchaseInventoryItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (IdempotencyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IdempotencyId"));
        writer->WriteValue(IdempotencyId);
    }

    if (TransactionIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TransactionIds"));
        for (const FString& item : TransactionIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FPurchaseInventoryItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdempotencyIdValue = obj->TryGetField(TEXT("IdempotencyId"));
    if (IdempotencyIdValue.IsValid() && !IdempotencyIdValue->IsNull())
    {
        FString TmpValue;
        if (IdempotencyIdValue->TryGetString(TmpValue)) { IdempotencyId = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("TransactionIds"), TransactionIds);

    return HasSucceeded;
}

PlayFab::EconomyModels::FPurchaseOverride::~FPurchaseOverride()
{

}

void PlayFab::EconomyModels::FPurchaseOverride::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FPurchaseOverride::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FRedeemAppleAppStoreInventoryItemsRequest::~FRedeemAppleAppStoreInventoryItemsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FRedeemAppleAppStoreInventoryItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionId"));
        writer->WriteValue(CollectionId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Receipt.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Receipt"));
        writer->WriteValue(Receipt);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRedeemAppleAppStoreInventoryItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CollectionIdValue = obj->TryGetField(TEXT("CollectionId"));
    if (CollectionIdValue.IsValid() && !CollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (CollectionIdValue->TryGetString(TmpValue)) { CollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ReceiptValue = obj->TryGetField(TEXT("Receipt"));
    if (ReceiptValue.IsValid() && !ReceiptValue->IsNull())
    {
        FString TmpValue;
        if (ReceiptValue->TryGetString(TmpValue)) { Receipt = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FRedemptionFailure::~FRedemptionFailure()
{

}

void PlayFab::EconomyModels::FRedemptionFailure::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FailureCode.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FailureCode"));
        writer->WriteValue(FailureCode);
    }

    if (FailureDetails.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FailureDetails"));
        writer->WriteValue(FailureDetails);
    }

    if (MarketplaceTransactionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MarketplaceTransactionId"));
        writer->WriteValue(MarketplaceTransactionId);
    }

    if (OfferId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OfferId"));
        writer->WriteValue(OfferId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRedemptionFailure::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FailureCodeValue = obj->TryGetField(TEXT("FailureCode"));
    if (FailureCodeValue.IsValid() && !FailureCodeValue->IsNull())
    {
        FString TmpValue;
        if (FailureCodeValue->TryGetString(TmpValue)) { FailureCode = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FailureDetailsValue = obj->TryGetField(TEXT("FailureDetails"));
    if (FailureDetailsValue.IsValid() && !FailureDetailsValue->IsNull())
    {
        FString TmpValue;
        if (FailureDetailsValue->TryGetString(TmpValue)) { FailureDetails = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MarketplaceTransactionIdValue = obj->TryGetField(TEXT("MarketplaceTransactionId"));
    if (MarketplaceTransactionIdValue.IsValid() && !MarketplaceTransactionIdValue->IsNull())
    {
        FString TmpValue;
        if (MarketplaceTransactionIdValue->TryGetString(TmpValue)) { MarketplaceTransactionId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OfferIdValue = obj->TryGetField(TEXT("OfferId"));
    if (OfferIdValue.IsValid() && !OfferIdValue->IsNull())
    {
        FString TmpValue;
        if (OfferIdValue->TryGetString(TmpValue)) { OfferId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FRedemptionSuccess::~FRedemptionSuccess()
{

}

void PlayFab::EconomyModels::FRedemptionSuccess::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (MarketplaceTransactionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MarketplaceTransactionId"));
        writer->WriteValue(MarketplaceTransactionId);
    }

    if (OfferId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OfferId"));
        writer->WriteValue(OfferId);
    }

    writer->WriteIdentifierPrefix(TEXT("SuccessTimestamp"));
    writeDatetime(SuccessTimestamp, writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRedemptionSuccess::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> MarketplaceTransactionIdValue = obj->TryGetField(TEXT("MarketplaceTransactionId"));
    if (MarketplaceTransactionIdValue.IsValid() && !MarketplaceTransactionIdValue->IsNull())
    {
        FString TmpValue;
        if (MarketplaceTransactionIdValue->TryGetString(TmpValue)) { MarketplaceTransactionId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OfferIdValue = obj->TryGetField(TEXT("OfferId"));
    if (OfferIdValue.IsValid() && !OfferIdValue->IsNull())
    {
        FString TmpValue;
        if (OfferIdValue->TryGetString(TmpValue)) { OfferId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SuccessTimestampValue = obj->TryGetField(TEXT("SuccessTimestamp"));
    if (SuccessTimestampValue.IsValid())
        SuccessTimestamp = readDatetime(SuccessTimestampValue);


    return HasSucceeded;
}

PlayFab::EconomyModels::FRedeemAppleAppStoreInventoryItemsResponse::~FRedeemAppleAppStoreInventoryItemsResponse()
{

}

void PlayFab::EconomyModels::FRedeemAppleAppStoreInventoryItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Failed.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Failed"));
        for (const FRedemptionFailure& item : Failed)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Succeeded.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Succeeded"));
        for (const FRedemptionSuccess& item : Succeeded)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (TransactionIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TransactionIds"));
        for (const FString& item : TransactionIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRedeemAppleAppStoreInventoryItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&FailedArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Failed"));
    for (int32 Idx = 0; Idx < FailedArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = FailedArray[Idx];
        Failed.Add(FRedemptionFailure(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&SucceededArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Succeeded"));
    for (int32 Idx = 0; Idx < SucceededArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SucceededArray[Idx];
        Succeeded.Add(FRedemptionSuccess(CurrentItem->AsObject()));
    }


    obj->TryGetStringArrayField(TEXT("TransactionIds"), TransactionIds);

    return HasSucceeded;
}

PlayFab::EconomyModels::FRedeemGooglePlayInventoryItemsRequest::~FRedeemGooglePlayInventoryItemsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FRedeemGooglePlayInventoryItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionId"));
        writer->WriteValue(CollectionId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Purchases.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Purchases"));
        for (const FGooglePlayProductPurchase& item : Purchases)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRedeemGooglePlayInventoryItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CollectionIdValue = obj->TryGetField(TEXT("CollectionId"));
    if (CollectionIdValue.IsValid() && !CollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (CollectionIdValue->TryGetString(TmpValue)) { CollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TArray<TSharedPtr<FJsonValue>>&PurchasesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Purchases"));
    for (int32 Idx = 0; Idx < PurchasesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PurchasesArray[Idx];
        Purchases.Add(FGooglePlayProductPurchase(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FRedeemGooglePlayInventoryItemsResponse::~FRedeemGooglePlayInventoryItemsResponse()
{

}

void PlayFab::EconomyModels::FRedeemGooglePlayInventoryItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Failed.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Failed"));
        for (const FRedemptionFailure& item : Failed)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Succeeded.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Succeeded"));
        for (const FRedemptionSuccess& item : Succeeded)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (TransactionIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TransactionIds"));
        for (const FString& item : TransactionIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRedeemGooglePlayInventoryItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&FailedArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Failed"));
    for (int32 Idx = 0; Idx < FailedArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = FailedArray[Idx];
        Failed.Add(FRedemptionFailure(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&SucceededArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Succeeded"));
    for (int32 Idx = 0; Idx < SucceededArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SucceededArray[Idx];
        Succeeded.Add(FRedemptionSuccess(CurrentItem->AsObject()));
    }


    obj->TryGetStringArrayField(TEXT("TransactionIds"), TransactionIds);

    return HasSucceeded;
}

PlayFab::EconomyModels::FRedeemMicrosoftStoreInventoryItemsRequest::~FRedeemMicrosoftStoreInventoryItemsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FRedeemMicrosoftStoreInventoryItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionId"));
        writer->WriteValue(CollectionId);
    }

    if (CollectionsIdKey.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionsIdKey"));
        writer->WriteValue(CollectionsIdKey);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (XboxToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("XboxToken"));
        writer->WriteValue(XboxToken);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRedeemMicrosoftStoreInventoryItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CollectionIdValue = obj->TryGetField(TEXT("CollectionId"));
    if (CollectionIdValue.IsValid() && !CollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (CollectionIdValue->TryGetString(TmpValue)) { CollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CollectionsIdKeyValue = obj->TryGetField(TEXT("CollectionsIdKey"));
    if (CollectionsIdKeyValue.IsValid() && !CollectionsIdKeyValue->IsNull())
    {
        FString TmpValue;
        if (CollectionsIdKeyValue->TryGetString(TmpValue)) { CollectionsIdKey = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> XboxTokenValue = obj->TryGetField(TEXT("XboxToken"));
    if (XboxTokenValue.IsValid() && !XboxTokenValue->IsNull())
    {
        FString TmpValue;
        if (XboxTokenValue->TryGetString(TmpValue)) { XboxToken = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FRedeemMicrosoftStoreInventoryItemsResponse::~FRedeemMicrosoftStoreInventoryItemsResponse()
{

}

void PlayFab::EconomyModels::FRedeemMicrosoftStoreInventoryItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Failed.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Failed"));
        for (const FRedemptionFailure& item : Failed)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Succeeded.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Succeeded"));
        for (const FRedemptionSuccess& item : Succeeded)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (TransactionIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TransactionIds"));
        for (const FString& item : TransactionIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRedeemMicrosoftStoreInventoryItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&FailedArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Failed"));
    for (int32 Idx = 0; Idx < FailedArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = FailedArray[Idx];
        Failed.Add(FRedemptionFailure(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&SucceededArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Succeeded"));
    for (int32 Idx = 0; Idx < SucceededArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SucceededArray[Idx];
        Succeeded.Add(FRedemptionSuccess(CurrentItem->AsObject()));
    }


    obj->TryGetStringArrayField(TEXT("TransactionIds"), TransactionIds);

    return HasSucceeded;
}

PlayFab::EconomyModels::FRedeemNintendoEShopInventoryItemsRequest::~FRedeemNintendoEShopInventoryItemsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FRedeemNintendoEShopInventoryItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionId"));
        writer->WriteValue(CollectionId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (NintendoServiceAccountIdToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NintendoServiceAccountIdToken"));
        writer->WriteValue(NintendoServiceAccountIdToken);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRedeemNintendoEShopInventoryItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CollectionIdValue = obj->TryGetField(TEXT("CollectionId"));
    if (CollectionIdValue.IsValid() && !CollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (CollectionIdValue->TryGetString(TmpValue)) { CollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> NintendoServiceAccountIdTokenValue = obj->TryGetField(TEXT("NintendoServiceAccountIdToken"));
    if (NintendoServiceAccountIdTokenValue.IsValid() && !NintendoServiceAccountIdTokenValue->IsNull())
    {
        FString TmpValue;
        if (NintendoServiceAccountIdTokenValue->TryGetString(TmpValue)) { NintendoServiceAccountIdToken = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FRedeemNintendoEShopInventoryItemsResponse::~FRedeemNintendoEShopInventoryItemsResponse()
{

}

void PlayFab::EconomyModels::FRedeemNintendoEShopInventoryItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Failed.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Failed"));
        for (const FRedemptionFailure& item : Failed)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Succeeded.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Succeeded"));
        for (const FRedemptionSuccess& item : Succeeded)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (TransactionIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TransactionIds"));
        for (const FString& item : TransactionIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRedeemNintendoEShopInventoryItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&FailedArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Failed"));
    for (int32 Idx = 0; Idx < FailedArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = FailedArray[Idx];
        Failed.Add(FRedemptionFailure(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&SucceededArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Succeeded"));
    for (int32 Idx = 0; Idx < SucceededArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SucceededArray[Idx];
        Succeeded.Add(FRedemptionSuccess(CurrentItem->AsObject()));
    }


    obj->TryGetStringArrayField(TEXT("TransactionIds"), TransactionIds);

    return HasSucceeded;
}

PlayFab::EconomyModels::FRedeemPlayStationStoreInventoryItemsRequest::~FRedeemPlayStationStoreInventoryItemsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FRedeemPlayStationStoreInventoryItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AuthorizationCode.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AuthorizationCode"));
        writer->WriteValue(AuthorizationCode);
    }

    if (CollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionId"));
        writer->WriteValue(CollectionId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ServiceLabel.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ServiceLabel"));
        writer->WriteValue(ServiceLabel);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRedeemPlayStationStoreInventoryItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AuthorizationCodeValue = obj->TryGetField(TEXT("AuthorizationCode"));
    if (AuthorizationCodeValue.IsValid() && !AuthorizationCodeValue->IsNull())
    {
        FString TmpValue;
        if (AuthorizationCodeValue->TryGetString(TmpValue)) { AuthorizationCode = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CollectionIdValue = obj->TryGetField(TEXT("CollectionId"));
    if (CollectionIdValue.IsValid() && !CollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (CollectionIdValue->TryGetString(TmpValue)) { CollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ServiceLabelValue = obj->TryGetField(TEXT("ServiceLabel"));
    if (ServiceLabelValue.IsValid() && !ServiceLabelValue->IsNull())
    {
        FString TmpValue;
        if (ServiceLabelValue->TryGetString(TmpValue)) { ServiceLabel = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FRedeemPlayStationStoreInventoryItemsResponse::~FRedeemPlayStationStoreInventoryItemsResponse()
{

}

void PlayFab::EconomyModels::FRedeemPlayStationStoreInventoryItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Failed.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Failed"));
        for (const FRedemptionFailure& item : Failed)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Succeeded.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Succeeded"));
        for (const FRedemptionSuccess& item : Succeeded)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (TransactionIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TransactionIds"));
        for (const FString& item : TransactionIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRedeemPlayStationStoreInventoryItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&FailedArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Failed"));
    for (int32 Idx = 0; Idx < FailedArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = FailedArray[Idx];
        Failed.Add(FRedemptionFailure(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&SucceededArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Succeeded"));
    for (int32 Idx = 0; Idx < SucceededArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SucceededArray[Idx];
        Succeeded.Add(FRedemptionSuccess(CurrentItem->AsObject()));
    }


    obj->TryGetStringArrayField(TEXT("TransactionIds"), TransactionIds);

    return HasSucceeded;
}

PlayFab::EconomyModels::FRedeemSteamInventoryItemsRequest::~FRedeemSteamInventoryItemsRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FRedeemSteamInventoryItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionId"));
        writer->WriteValue(CollectionId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRedeemSteamInventoryItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CollectionIdValue = obj->TryGetField(TEXT("CollectionId"));
    if (CollectionIdValue.IsValid() && !CollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (CollectionIdValue->TryGetString(TmpValue)) { CollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FRedeemSteamInventoryItemsResponse::~FRedeemSteamInventoryItemsResponse()
{

}

void PlayFab::EconomyModels::FRedeemSteamInventoryItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Failed.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Failed"));
        for (const FRedemptionFailure& item : Failed)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Succeeded.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Succeeded"));
        for (const FRedemptionSuccess& item : Succeeded)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (TransactionIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TransactionIds"));
        for (const FString& item : TransactionIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FRedeemSteamInventoryItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&FailedArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Failed"));
    for (int32 Idx = 0; Idx < FailedArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = FailedArray[Idx];
        Failed.Add(FRedemptionFailure(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&SucceededArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Succeeded"));
    for (int32 Idx = 0; Idx < SucceededArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SucceededArray[Idx];
        Succeeded.Add(FRedemptionSuccess(CurrentItem->AsObject()));
    }


    obj->TryGetStringArrayField(TEXT("TransactionIds"), TransactionIds);

    return HasSucceeded;
}

PlayFab::EconomyModels::FReportItemRequest::~FReportItemRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FReportItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (pfConcernCategory.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ConcernCategory"));
        writeConcernCategoryEnumJSON(pfConcernCategory, writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReportItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    pfConcernCategory = readConcernCategoryFromValue(obj->TryGetField(TEXT("ConcernCategory")));

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FReportItemResponse::~FReportItemResponse()
{

}

void PlayFab::EconomyModels::FReportItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReportItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FReportItemReviewRequest::~FReportItemReviewRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FReportItemReviewRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (pfConcernCategory.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ConcernCategory"));
        writeConcernCategoryEnumJSON(pfConcernCategory, writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    if (ReviewId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ReviewId"));
        writer->WriteValue(ReviewId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReportItemReviewRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    pfConcernCategory = readConcernCategoryFromValue(obj->TryGetField(TEXT("ConcernCategory")));

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReviewIdValue = obj->TryGetField(TEXT("ReviewId"));
    if (ReviewIdValue.IsValid() && !ReviewIdValue->IsNull())
    {
        FString TmpValue;
        if (ReviewIdValue->TryGetString(TmpValue)) { ReviewId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FReportItemReviewResponse::~FReportItemReviewResponse()
{

}

void PlayFab::EconomyModels::FReportItemReviewResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReportItemReviewResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FReviewItemRequest::~FReviewItemRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;
    //if (Review != nullptr) delete Review;

}

void PlayFab::EconomyModels::FReviewItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (pfReview.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Review"));
        pfReview->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReviewItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReviewValue = obj->TryGetField(TEXT("Review"));
    if (ReviewValue.IsValid() && !ReviewValue->IsNull())
    {
        pfReview = MakeShareable(new FReview(ReviewValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FReviewItemResponse::~FReviewItemResponse()
{

}

void PlayFab::EconomyModels::FReviewItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReviewItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FReviewTakedown::~FReviewTakedown()
{
    //if (AlternateId != nullptr) delete AlternateId;

}

void PlayFab::EconomyModels::FReviewTakedown::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (ReviewId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ReviewId"));
        writer->WriteValue(ReviewId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FReviewTakedown::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReviewIdValue = obj->TryGetField(TEXT("ReviewId"));
    if (ReviewIdValue.IsValid() && !ReviewIdValue->IsNull())
    {
        FString TmpValue;
        if (ReviewIdValue->TryGetString(TmpValue)) { ReviewId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FScanResult::~FScanResult()
{

}

void PlayFab::EconomyModels::FScanResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Url.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Url"));
        writer->WriteValue(Url);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FScanResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> UrlValue = obj->TryGetField(TEXT("Url"));
    if (UrlValue.IsValid() && !UrlValue->IsNull())
    {
        FString TmpValue;
        if (UrlValue->TryGetString(TmpValue)) { Url = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FStoreReference::~FStoreReference()
{
    //if (AlternateId != nullptr) delete AlternateId;

}

void PlayFab::EconomyModels::FStoreReference::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FStoreReference::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FSearchItemsRequest::~FSearchItemsRequest()
{
    //if (Entity != nullptr) delete Entity;
    //if (Store != nullptr) delete Store;

}

void PlayFab::EconomyModels::FSearchItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    writer->WriteIdentifierPrefix(TEXT("Count"));
    writer->WriteValue(Count);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Filter.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Filter"));
        writer->WriteValue(Filter);
    }

    if (OrderBy.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OrderBy"));
        writer->WriteValue(OrderBy);
    }

    if (Search.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Search"));
        writer->WriteValue(Search);
    }

    if (Select.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Select"));
        writer->WriteValue(Select);
    }

    if (Store.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Store"));
        Store->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSearchItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CountValue = obj->TryGetField(TEXT("Count"));
    if (CountValue.IsValid() && !CountValue->IsNull())
    {
        int32 TmpValue;
        if (CountValue->TryGetNumber(TmpValue)) { Count = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> FilterValue = obj->TryGetField(TEXT("Filter"));
    if (FilterValue.IsValid() && !FilterValue->IsNull())
    {
        FString TmpValue;
        if (FilterValue->TryGetString(TmpValue)) { Filter = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OrderByValue = obj->TryGetField(TEXT("OrderBy"));
    if (OrderByValue.IsValid() && !OrderByValue->IsNull())
    {
        FString TmpValue;
        if (OrderByValue->TryGetString(TmpValue)) { OrderBy = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SearchValue = obj->TryGetField(TEXT("Search"));
    if (SearchValue.IsValid() && !SearchValue->IsNull())
    {
        FString TmpValue;
        if (SearchValue->TryGetString(TmpValue)) { Search = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SelectValue = obj->TryGetField(TEXT("Select"));
    if (SelectValue.IsValid() && !SelectValue->IsNull())
    {
        FString TmpValue;
        if (SelectValue->TryGetString(TmpValue)) { Select = TmpValue; }
    }

    const TSharedPtr<FJsonValue> StoreValue = obj->TryGetField(TEXT("Store"));
    if (StoreValue.IsValid() && !StoreValue->IsNull())
    {
        Store = MakeShareable(new FStoreReference(StoreValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FSearchItemsResponse::~FSearchItemsResponse()
{

}

void PlayFab::EconomyModels::FSearchItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ContinuationToken.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ContinuationToken"));
        writer->WriteValue(ContinuationToken);
    }

    if (Items.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Items"));
        for (const FCatalogItem& item : Items)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSearchItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ContinuationTokenValue = obj->TryGetField(TEXT("ContinuationToken"));
    if (ContinuationTokenValue.IsValid() && !ContinuationTokenValue->IsNull())
    {
        FString TmpValue;
        if (ContinuationTokenValue->TryGetString(TmpValue)) { ContinuationToken = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ItemsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Items"));
    for (int32 Idx = 0; Idx < ItemsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ItemsArray[Idx];
        Items.Add(FCatalogItem(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FSetItemModerationStateRequest::~FSetItemModerationStateRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;

}

void PlayFab::EconomyModels::FSetItemModerationStateRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Id.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Reason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Reason"));
        writer->WriteValue(Reason);
    }

    if (Status.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Status"));
        writeModerationStatusEnumJSON(Status, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSetItemModerationStateRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReasonValue = obj->TryGetField(TEXT("Reason"));
    if (ReasonValue.IsValid() && !ReasonValue->IsNull())
    {
        FString TmpValue;
        if (ReasonValue->TryGetString(TmpValue)) { Reason = TmpValue; }
    }

    Status = readModerationStatusFromValue(obj->TryGetField(TEXT("Status")));

    return HasSucceeded;
}

PlayFab::EconomyModels::FSetItemModerationStateResponse::~FSetItemModerationStateResponse()
{

}

void PlayFab::EconomyModels::FSetItemModerationStateResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSetItemModerationStateResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FSubmitItemReviewVoteRequest::~FSubmitItemReviewVoteRequest()
{
    //if (AlternateId != nullptr) delete AlternateId;
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EconomyModels::FSubmitItemReviewVoteRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AlternateId.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("AlternateId"));
        AlternateId->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ItemId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ItemId"));
        writer->WriteValue(ItemId);
    }

    if (ReviewId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ReviewId"));
        writer->WriteValue(ReviewId);
    }

    if (Vote.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("Vote"));
        writeHelpfulnessVoteEnumJSON(Vote, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSubmitItemReviewVoteRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AlternateIdValue = obj->TryGetField(TEXT("AlternateId"));
    if (AlternateIdValue.IsValid() && !AlternateIdValue->IsNull())
    {
        AlternateId = MakeShareable(new FCatalogAlternateId(AlternateIdValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ItemIdValue = obj->TryGetField(TEXT("ItemId"));
    if (ItemIdValue.IsValid() && !ItemIdValue->IsNull())
    {
        FString TmpValue;
        if (ItemIdValue->TryGetString(TmpValue)) { ItemId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReviewIdValue = obj->TryGetField(TEXT("ReviewId"));
    if (ReviewIdValue.IsValid() && !ReviewIdValue->IsNull())
    {
        FString TmpValue;
        if (ReviewIdValue->TryGetString(TmpValue)) { ReviewId = TmpValue; }
    }

    Vote = readHelpfulnessVoteFromValue(obj->TryGetField(TEXT("Vote")));

    return HasSucceeded;
}

PlayFab::EconomyModels::FSubmitItemReviewVoteResponse::~FSubmitItemReviewVoteResponse()
{

}

void PlayFab::EconomyModels::FSubmitItemReviewVoteResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSubmitItemReviewVoteResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FSubscriptionDetails::~FSubscriptionDetails()
{

}

void PlayFab::EconomyModels::FSubscriptionDetails::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("DurationInSeconds"));
    writer->WriteValue(DurationInSeconds);

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSubscriptionDetails::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DurationInSecondsValue = obj->TryGetField(TEXT("DurationInSeconds"));
    if (DurationInSecondsValue.IsValid() && !DurationInSecondsValue->IsNull())
    {
        double TmpValue;
        if (DurationInSecondsValue->TryGetNumber(TmpValue)) { DurationInSeconds = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FSubtractInventoryItemsRequest::~FSubtractInventoryItemsRequest()
{
    //if (Entity != nullptr) delete Entity;
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FSubtractInventoryItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (CollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionId"));
        writer->WriteValue(CollectionId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("DeleteEmptyStacks"));
    writer->WriteValue(DeleteEmptyStacks);

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (IdempotencyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IdempotencyId"));
        writer->WriteValue(IdempotencyId);
    }

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSubtractInventoryItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CollectionIdValue = obj->TryGetField(TEXT("CollectionId"));
    if (CollectionIdValue.IsValid() && !CollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (CollectionIdValue->TryGetString(TmpValue)) { CollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DeleteEmptyStacksValue = obj->TryGetField(TEXT("DeleteEmptyStacks"));
    if (DeleteEmptyStacksValue.IsValid() && !DeleteEmptyStacksValue->IsNull())
    {
        bool TmpValue;
        if (DeleteEmptyStacksValue->TryGetBool(TmpValue)) { DeleteEmptyStacks = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdempotencyIdValue = obj->TryGetField(TEXT("IdempotencyId"));
    if (IdempotencyIdValue.IsValid() && !IdempotencyIdValue->IsNull())
    {
        FString TmpValue;
        if (IdempotencyIdValue->TryGetString(TmpValue)) { IdempotencyId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FInventoryItemReference(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FSubtractInventoryItemsResponse::~FSubtractInventoryItemsResponse()
{

}

void PlayFab::EconomyModels::FSubtractInventoryItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (IdempotencyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IdempotencyId"));
        writer->WriteValue(IdempotencyId);
    }

    if (TransactionIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TransactionIds"));
        for (const FString& item : TransactionIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FSubtractInventoryItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdempotencyIdValue = obj->TryGetField(TEXT("IdempotencyId"));
    if (IdempotencyIdValue.IsValid() && !IdempotencyIdValue->IsNull())
    {
        FString TmpValue;
        if (IdempotencyIdValue->TryGetString(TmpValue)) { IdempotencyId = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("TransactionIds"), TransactionIds);

    return HasSucceeded;
}

PlayFab::EconomyModels::FTakedownItemReviewsRequest::~FTakedownItemReviewsRequest()
{

}

void PlayFab::EconomyModels::FTakedownItemReviewsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Reviews.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Reviews"));
        for (const FReviewTakedown& item : Reviews)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FTakedownItemReviewsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TArray<TSharedPtr<FJsonValue>>&ReviewsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Reviews"));
    for (int32 Idx = 0; Idx < ReviewsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ReviewsArray[Idx];
        Reviews.Add(FReviewTakedown(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EconomyModels::FTakedownItemReviewsResponse::~FTakedownItemReviewsResponse()
{

}

void PlayFab::EconomyModels::FTakedownItemReviewsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FTakedownItemReviewsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FTransferInventoryItemsRequest::~FTransferInventoryItemsRequest()
{
    //if (GivingEntity != nullptr) delete GivingEntity;
    //if (GivingItem != nullptr) delete GivingItem;
    //if (ReceivingEntity != nullptr) delete ReceivingEntity;
    //if (ReceivingItem != nullptr) delete ReceivingItem;

}

void PlayFab::EconomyModels::FTransferInventoryItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Amount"));
    writer->WriteValue(Amount);

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("DeleteEmptyStacks"));
    writer->WriteValue(DeleteEmptyStacks);

    if (GivingCollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GivingCollectionId"));
        writer->WriteValue(GivingCollectionId);
    }

    if (GivingEntity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("GivingEntity"));
        GivingEntity->writeJSON(writer);
    }

    if (GivingItem.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("GivingItem"));
        GivingItem->writeJSON(writer);
    }

    if (IdempotencyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IdempotencyId"));
        writer->WriteValue(IdempotencyId);
    }

    if (ReceivingCollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ReceivingCollectionId"));
        writer->WriteValue(ReceivingCollectionId);
    }

    if (ReceivingEntity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("ReceivingEntity"));
        ReceivingEntity->writeJSON(writer);
    }

    if (ReceivingItem.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("ReceivingItem"));
        ReceivingItem->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FTransferInventoryItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AmountValue = obj->TryGetField(TEXT("Amount"));
    if (AmountValue.IsValid() && !AmountValue->IsNull())
    {
        int32 TmpValue;
        if (AmountValue->TryGetNumber(TmpValue)) { Amount = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DeleteEmptyStacksValue = obj->TryGetField(TEXT("DeleteEmptyStacks"));
    if (DeleteEmptyStacksValue.IsValid() && !DeleteEmptyStacksValue->IsNull())
    {
        bool TmpValue;
        if (DeleteEmptyStacksValue->TryGetBool(TmpValue)) { DeleteEmptyStacks = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GivingCollectionIdValue = obj->TryGetField(TEXT("GivingCollectionId"));
    if (GivingCollectionIdValue.IsValid() && !GivingCollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (GivingCollectionIdValue->TryGetString(TmpValue)) { GivingCollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GivingEntityValue = obj->TryGetField(TEXT("GivingEntity"));
    if (GivingEntityValue.IsValid() && !GivingEntityValue->IsNull())
    {
        GivingEntity = MakeShareable(new FEntityKey(GivingEntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GivingItemValue = obj->TryGetField(TEXT("GivingItem"));
    if (GivingItemValue.IsValid() && !GivingItemValue->IsNull())
    {
        GivingItem = MakeShareable(new FInventoryItemReference(GivingItemValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdempotencyIdValue = obj->TryGetField(TEXT("IdempotencyId"));
    if (IdempotencyIdValue.IsValid() && !IdempotencyIdValue->IsNull())
    {
        FString TmpValue;
        if (IdempotencyIdValue->TryGetString(TmpValue)) { IdempotencyId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReceivingCollectionIdValue = obj->TryGetField(TEXT("ReceivingCollectionId"));
    if (ReceivingCollectionIdValue.IsValid() && !ReceivingCollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (ReceivingCollectionIdValue->TryGetString(TmpValue)) { ReceivingCollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ReceivingEntityValue = obj->TryGetField(TEXT("ReceivingEntity"));
    if (ReceivingEntityValue.IsValid() && !ReceivingEntityValue->IsNull())
    {
        ReceivingEntity = MakeShareable(new FEntityKey(ReceivingEntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ReceivingItemValue = obj->TryGetField(TEXT("ReceivingItem"));
    if (ReceivingItemValue.IsValid() && !ReceivingItemValue->IsNull())
    {
        ReceivingItem = MakeShareable(new FInventoryItemReference(ReceivingItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FTransferInventoryItemsResponse::~FTransferInventoryItemsResponse()
{

}

void PlayFab::EconomyModels::FTransferInventoryItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (GivingTransactionIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("GivingTransactionIds"));
        for (const FString& item : GivingTransactionIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    if (IdempotencyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IdempotencyId"));
        writer->WriteValue(IdempotencyId);
    }

    if (ReceivingTransactionIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("ReceivingTransactionIds"));
        for (const FString& item : ReceivingTransactionIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FTransferInventoryItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    obj->TryGetStringArrayField(TEXT("GivingTransactionIds"), GivingTransactionIds);

    const TSharedPtr<FJsonValue> IdempotencyIdValue = obj->TryGetField(TEXT("IdempotencyId"));
    if (IdempotencyIdValue.IsValid() && !IdempotencyIdValue->IsNull())
    {
        FString TmpValue;
        if (IdempotencyIdValue->TryGetString(TmpValue)) { IdempotencyId = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("ReceivingTransactionIds"), ReceivingTransactionIds);

    return HasSucceeded;
}

PlayFab::EconomyModels::FUpdateCatalogConfigRequest::~FUpdateCatalogConfigRequest()
{
    //if (Config != nullptr) delete Config;

}

void PlayFab::EconomyModels::FUpdateCatalogConfigRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Config.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Config"));
        Config->writeJSON(writer);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUpdateCatalogConfigRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ConfigValue = obj->TryGetField(TEXT("Config"));
    if (ConfigValue.IsValid() && !ConfigValue->IsNull())
    {
        Config = MakeShareable(new FCatalogConfig(ConfigValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FUpdateCatalogConfigResponse::~FUpdateCatalogConfigResponse()
{

}

void PlayFab::EconomyModels::FUpdateCatalogConfigResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUpdateCatalogConfigResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EconomyModels::FUpdateDraftItemRequest::~FUpdateDraftItemRequest()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FUpdateDraftItemRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Publish"));
    writer->WriteValue(Publish);

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUpdateDraftItemRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FCatalogItem(ItemValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> PublishValue = obj->TryGetField(TEXT("Publish"));
    if (PublishValue.IsValid() && !PublishValue->IsNull())
    {
        bool TmpValue;
        if (PublishValue->TryGetBool(TmpValue)) { Publish = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FUpdateDraftItemResponse::~FUpdateDraftItemResponse()
{
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FUpdateDraftItemResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUpdateDraftItemResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FCatalogItem(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FUpdateInventoryItemsRequest::~FUpdateInventoryItemsRequest()
{
    //if (Entity != nullptr) delete Entity;
    //if (Item != nullptr) delete Item;

}

void PlayFab::EconomyModels::FUpdateInventoryItemsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CollectionId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("CollectionId"));
        writer->WriteValue(CollectionId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (IdempotencyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IdempotencyId"));
        writer->WriteValue(IdempotencyId);
    }

    if (Item.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Item"));
        Item->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUpdateInventoryItemsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CollectionIdValue = obj->TryGetField(TEXT("CollectionId"));
    if (CollectionIdValue.IsValid() && !CollectionIdValue->IsNull())
    {
        FString TmpValue;
        if (CollectionIdValue->TryGetString(TmpValue)) { CollectionId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> IdempotencyIdValue = obj->TryGetField(TEXT("IdempotencyId"));
    if (IdempotencyIdValue.IsValid() && !IdempotencyIdValue->IsNull())
    {
        FString TmpValue;
        if (IdempotencyIdValue->TryGetString(TmpValue)) { IdempotencyId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ItemValue = obj->TryGetField(TEXT("Item"));
    if (ItemValue.IsValid() && !ItemValue->IsNull())
    {
        Item = MakeShareable(new FInventoryItem(ItemValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EconomyModels::FUpdateInventoryItemsResponse::~FUpdateInventoryItemsResponse()
{

}

void PlayFab::EconomyModels::FUpdateInventoryItemsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (IdempotencyId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("IdempotencyId"));
        writer->WriteValue(IdempotencyId);
    }

    if (TransactionIds.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("TransactionIds"));
        for (const FString& item : TransactionIds)
            writer->WriteValue(item);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EconomyModels::FUpdateInventoryItemsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdempotencyIdValue = obj->TryGetField(TEXT("IdempotencyId"));
    if (IdempotencyIdValue.IsValid() && !IdempotencyIdValue->IsNull())
    {
        FString TmpValue;
        if (IdempotencyIdValue->TryGetString(TmpValue)) { IdempotencyId = TmpValue; }
    }

    obj->TryGetStringArrayField(TEXT("TransactionIds"), TransactionIds);

    return HasSucceeded;
}

