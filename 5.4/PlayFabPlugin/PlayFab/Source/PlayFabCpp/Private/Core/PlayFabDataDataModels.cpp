//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "Core/PlayFabDataDataModels.h"
#include "Core/PlayFabJsonHelpers.h"

using namespace PlayFab;
using namespace PlayFab::DataModels;

PlayFab::DataModels::FEntityKey::~FEntityKey()
{

}

void PlayFab::DataModels::FEntityKey::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Id.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EntityKey::Id, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FEntityKey::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::DataModels::FAbortFileUploadsRequest::~FAbortFileUploadsRequest()
{

}

void PlayFab::DataModels::FAbortFileUploadsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    writer->WriteArrayStart(TEXT("FileNames"));
    for (const FString& item : FileNames)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    if (ProfileVersion.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
        writer->WriteValue(ProfileVersion);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FAbortFileUploadsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("FileNames"), FileNames);

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::DataModels::FAbortFileUploadsResponse::~FAbortFileUploadsResponse()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::DataModels::FAbortFileUploadsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
    writer->WriteValue(ProfileVersion);

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FAbortFileUploadsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::DataModels::FDeleteFilesRequest::~FDeleteFilesRequest()
{

}

void PlayFab::DataModels::FDeleteFilesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    writer->WriteArrayStart(TEXT("FileNames"));
    for (const FString& item : FileNames)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    if (ProfileVersion.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
        writer->WriteValue(ProfileVersion);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FDeleteFilesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("FileNames"), FileNames);

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::DataModels::FDeleteFilesResponse::~FDeleteFilesResponse()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::DataModels::FDeleteFilesResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
    writer->WriteValue(ProfileVersion);

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FDeleteFilesResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::DataModels::FFinalizeFileUploadsRequest::~FFinalizeFileUploadsRequest()
{

}

void PlayFab::DataModels::FFinalizeFileUploadsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    writer->WriteArrayStart(TEXT("FileNames"));
    for (const FString& item : FileNames)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
    writer->WriteValue(ProfileVersion);

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FFinalizeFileUploadsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("FileNames"), FileNames);

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::DataModels::FGetFileMetadata::~FGetFileMetadata()
{

}

void PlayFab::DataModels::FGetFileMetadata::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Checksum.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Checksum"));
        writer->WriteValue(Checksum);
    }

    if (DownloadUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DownloadUrl"));
        writer->WriteValue(DownloadUrl);
    }

    if (FileName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FileName"));
        writer->WriteValue(FileName);
    }

    writer->WriteIdentifierPrefix(TEXT("LastModified"));
    writeDatetime(LastModified, writer);

    writer->WriteIdentifierPrefix(TEXT("Size"));
    writer->WriteValue(Size);

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FGetFileMetadata::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ChecksumValue = obj->TryGetField(TEXT("Checksum"));
    if (ChecksumValue.IsValid() && !ChecksumValue->IsNull())
    {
        FString TmpValue;
        if (ChecksumValue->TryGetString(TmpValue)) { Checksum = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DownloadUrlValue = obj->TryGetField(TEXT("DownloadUrl"));
    if (DownloadUrlValue.IsValid() && !DownloadUrlValue->IsNull())
    {
        FString TmpValue;
        if (DownloadUrlValue->TryGetString(TmpValue)) { DownloadUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FileNameValue = obj->TryGetField(TEXT("FileName"));
    if (FileNameValue.IsValid() && !FileNameValue->IsNull())
    {
        FString TmpValue;
        if (FileNameValue->TryGetString(TmpValue)) { FileName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LastModifiedValue = obj->TryGetField(TEXT("LastModified"));
    if (LastModifiedValue.IsValid())
        LastModified = readDatetime(LastModifiedValue);


    const TSharedPtr<FJsonValue> SizeValue = obj->TryGetField(TEXT("Size"));
    if (SizeValue.IsValid() && !SizeValue->IsNull())
    {
        int32 TmpValue;
        if (SizeValue->TryGetNumber(TmpValue)) { Size = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::DataModels::FFinalizeFileUploadsResponse::~FFinalizeFileUploadsResponse()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::DataModels::FFinalizeFileUploadsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Metadata.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Metadata"));
        for (TMap<FString, FGetFileMetadata>::TConstIterator It(Metadata); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
    writer->WriteValue(ProfileVersion);

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FFinalizeFileUploadsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* MetadataObject;
    if (obj->TryGetObjectField(TEXT("Metadata"), MetadataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*MetadataObject)->Values); It; ++It)
        {
            Metadata.Add(It.Key(), FGetFileMetadata(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::DataModels::FGetFilesRequest::~FGetFilesRequest()
{

}

void PlayFab::DataModels::FGetFilesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FGetFilesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::DataModels::FGetFilesResponse::~FGetFilesResponse()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::DataModels::FGetFilesResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Metadata.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Metadata"));
        for (TMap<FString, FGetFileMetadata>::TConstIterator It(Metadata); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
    writer->WriteValue(ProfileVersion);

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FGetFilesResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* MetadataObject;
    if (obj->TryGetObjectField(TEXT("Metadata"), MetadataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*MetadataObject)->Values); It; ++It)
        {
            Metadata.Add(It.Key(), FGetFileMetadata(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::DataModels::FGetObjectsRequest::~FGetObjectsRequest()
{

}

void PlayFab::DataModels::FGetObjectsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    if (EscapeObject.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("EscapeObject"));
        writer->WriteValue(EscapeObject);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FGetObjectsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> EscapeObjectValue = obj->TryGetField(TEXT("EscapeObject"));
    if (EscapeObjectValue.IsValid() && !EscapeObjectValue->IsNull())
    {
        bool TmpValue;
        if (EscapeObjectValue->TryGetBool(TmpValue)) { EscapeObject = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::DataModels::FObjectResult::~FObjectResult()
{

}

void PlayFab::DataModels::FObjectResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DataObject.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("DataObject"));
        DataObject.writeJSON(writer);
    }

    if (EscapedDataObject.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EscapedDataObject"));
        writer->WriteValue(EscapedDataObject);
    }

    if (ObjectName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ObjectName"));
        writer->WriteValue(ObjectName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FObjectResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataObjectValue = obj->TryGetField(TEXT("DataObject"));
    if (DataObjectValue.IsValid() && !DataObjectValue->IsNull())
    {
        DataObject = FJsonKeeper(DataObjectValue);
    }

    const TSharedPtr<FJsonValue> EscapedDataObjectValue = obj->TryGetField(TEXT("EscapedDataObject"));
    if (EscapedDataObjectValue.IsValid() && !EscapedDataObjectValue->IsNull())
    {
        FString TmpValue;
        if (EscapedDataObjectValue->TryGetString(TmpValue)) { EscapedDataObject = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ObjectNameValue = obj->TryGetField(TEXT("ObjectName"));
    if (ObjectNameValue.IsValid() && !ObjectNameValue->IsNull())
    {
        FString TmpValue;
        if (ObjectNameValue->TryGetString(TmpValue)) { ObjectName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::DataModels::FGetObjectsResponse::~FGetObjectsResponse()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::DataModels::FGetObjectsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Objects.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Objects"));
        for (TMap<FString, FObjectResult>::TConstIterator It(Objects); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
    writer->WriteValue(ProfileVersion);

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FGetObjectsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* ObjectsObject;
    if (obj->TryGetObjectField(TEXT("Objects"), ObjectsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*ObjectsObject)->Values); It; ++It)
        {
            Objects.Add(It.Key(), FObjectResult(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::DataModels::FInitiateFileUploadMetadata::~FInitiateFileUploadMetadata()
{

}

void PlayFab::DataModels::FInitiateFileUploadMetadata::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FileName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("FileName"));
        writer->WriteValue(FileName);
    }

    if (UploadUrl.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("UploadUrl"));
        writer->WriteValue(UploadUrl);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FInitiateFileUploadMetadata::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FileNameValue = obj->TryGetField(TEXT("FileName"));
    if (FileNameValue.IsValid() && !FileNameValue->IsNull())
    {
        FString TmpValue;
        if (FileNameValue->TryGetString(TmpValue)) { FileName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UploadUrlValue = obj->TryGetField(TEXT("UploadUrl"));
    if (UploadUrlValue.IsValid() && !UploadUrlValue->IsNull())
    {
        FString TmpValue;
        if (UploadUrlValue->TryGetString(TmpValue)) { UploadUrl = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::DataModels::FInitiateFileUploadsRequest::~FInitiateFileUploadsRequest()
{

}

void PlayFab::DataModels::FInitiateFileUploadsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    writer->WriteArrayStart(TEXT("FileNames"));
    for (const FString& item : FileNames)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    if (ProfileVersion.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
        writer->WriteValue(ProfileVersion);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FInitiateFileUploadsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("FileNames"), FileNames);

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::DataModels::FInitiateFileUploadsResponse::~FInitiateFileUploadsResponse()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::DataModels::FInitiateFileUploadsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
    writer->WriteValue(ProfileVersion);

    if (UploadDetails.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("UploadDetails"));
        for (const FInitiateFileUploadMetadata& item : UploadDetails)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FInitiateFileUploadsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&UploadDetailsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("UploadDetails"));
    for (int32 Idx = 0; Idx < UploadDetailsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = UploadDetailsArray[Idx];
        UploadDetails.Add(FInitiateFileUploadMetadata(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

void PlayFab::DataModels::writeOperationTypesEnumJSON(OperationTypes enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case OperationTypesCreated: writer->WriteValue(TEXT("Created")); break;
    case OperationTypesUpdated: writer->WriteValue(TEXT("Updated")); break;
    case OperationTypesDeleted: writer->WriteValue(TEXT("Deleted")); break;
    case OperationTypesNone: writer->WriteValue(TEXT("None")); break;
    }
}

DataModels::OperationTypes PlayFab::DataModels::readOperationTypesFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readOperationTypesFromValue(value.IsValid() ? value->AsString() : "");
}

DataModels::OperationTypes PlayFab::DataModels::readOperationTypesFromValue(const FString& value)
{
    static TMap<FString, OperationTypes> _OperationTypesMap;
    if (_OperationTypesMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _OperationTypesMap.Add(TEXT("Created"), OperationTypesCreated);
        _OperationTypesMap.Add(TEXT("Updated"), OperationTypesUpdated);
        _OperationTypesMap.Add(TEXT("Deleted"), OperationTypesDeleted);
        _OperationTypesMap.Add(TEXT("None"), OperationTypesNone);

    }

    if (!value.IsEmpty())
    {
        auto output = _OperationTypesMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return OperationTypesCreated; // Basically critical fail
}

PlayFab::DataModels::FSetObject::~FSetObject()
{

}

void PlayFab::DataModels::FSetObject::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DataObject.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("DataObject"));
        DataObject.writeJSON(writer);
    }

    if (DeleteObject.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("DeleteObject"));
        writer->WriteValue(DeleteObject);
    }

    if (EscapedDataObject.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("EscapedDataObject"));
        writer->WriteValue(EscapedDataObject);
    }

    if (!ObjectName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: SetObject::ObjectName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ObjectName"));
        writer->WriteValue(ObjectName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FSetObject::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataObjectValue = obj->TryGetField(TEXT("DataObject"));
    if (DataObjectValue.IsValid() && !DataObjectValue->IsNull())
    {
        DataObject = FJsonKeeper(DataObjectValue);
    }

    const TSharedPtr<FJsonValue> DeleteObjectValue = obj->TryGetField(TEXT("DeleteObject"));
    if (DeleteObjectValue.IsValid() && !DeleteObjectValue->IsNull())
    {
        bool TmpValue;
        if (DeleteObjectValue->TryGetBool(TmpValue)) { DeleteObject = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EscapedDataObjectValue = obj->TryGetField(TEXT("EscapedDataObject"));
    if (EscapedDataObjectValue.IsValid() && !EscapedDataObjectValue->IsNull())
    {
        FString TmpValue;
        if (EscapedDataObjectValue->TryGetString(TmpValue)) { EscapedDataObject = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ObjectNameValue = obj->TryGetField(TEXT("ObjectName"));
    if (ObjectNameValue.IsValid() && !ObjectNameValue->IsNull())
    {
        FString TmpValue;
        if (ObjectNameValue->TryGetString(TmpValue)) { ObjectName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::DataModels::FSetObjectInfo::~FSetObjectInfo()
{

}

void PlayFab::DataModels::FSetObjectInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ObjectName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ObjectName"));
        writer->WriteValue(ObjectName);
    }

    if (OperationReason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OperationReason"));
        writer->WriteValue(OperationReason);
    }

    if (SetResult.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("SetResult"));
        writeOperationTypesEnumJSON(SetResult, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FSetObjectInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ObjectNameValue = obj->TryGetField(TEXT("ObjectName"));
    if (ObjectNameValue.IsValid() && !ObjectNameValue->IsNull())
    {
        FString TmpValue;
        if (ObjectNameValue->TryGetString(TmpValue)) { ObjectName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OperationReasonValue = obj->TryGetField(TEXT("OperationReason"));
    if (OperationReasonValue.IsValid() && !OperationReasonValue->IsNull())
    {
        FString TmpValue;
        if (OperationReasonValue->TryGetString(TmpValue)) { OperationReason = TmpValue; }
    }

    SetResult = readOperationTypesFromValue(obj->TryGetField(TEXT("SetResult")));

    return HasSucceeded;
}

PlayFab::DataModels::FSetObjectsRequest::~FSetObjectsRequest()
{

}

void PlayFab::DataModels::FSetObjectsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    if (ExpectedProfileVersion.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ExpectedProfileVersion"));
        writer->WriteValue(ExpectedProfileVersion);
    }

    writer->WriteArrayStart(TEXT("Objects"));
    for (const FSetObject& item : Objects)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FSetObjectsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> ExpectedProfileVersionValue = obj->TryGetField(TEXT("ExpectedProfileVersion"));
    if (ExpectedProfileVersionValue.IsValid() && !ExpectedProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ExpectedProfileVersionValue->TryGetNumber(TmpValue)) { ExpectedProfileVersion = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ObjectsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Objects"));
    for (int32 Idx = 0; Idx < ObjectsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ObjectsArray[Idx];
        Objects.Add(FSetObject(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::DataModels::FSetObjectsResponse::~FSetObjectsResponse()
{

}

void PlayFab::DataModels::FSetObjectsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
    writer->WriteValue(ProfileVersion);

    if (SetResults.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("SetResults"));
        for (const FSetObjectInfo& item : SetResults)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::DataModels::FSetObjectsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&SetResultsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("SetResults"));
    for (int32 Idx = 0; Idx < SetResultsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SetResultsArray[Idx];
        SetResults.Add(FSetObjectInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

