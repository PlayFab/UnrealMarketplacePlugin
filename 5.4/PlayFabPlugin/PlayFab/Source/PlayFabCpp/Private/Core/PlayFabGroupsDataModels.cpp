//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "Core/PlayFabGroupsDataModels.h"
#include "Core/PlayFabJsonHelpers.h"

using namespace PlayFab;
using namespace PlayFab::GroupsModels;

PlayFab::GroupsModels::FEntityKey::~FEntityKey()
{

}

void PlayFab::GroupsModels::FEntityKey::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Id.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EntityKey::Id, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FEntityKey::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FAcceptGroupApplicationRequest::~FAcceptGroupApplicationRequest()
{

}

void PlayFab::GroupsModels::FAcceptGroupApplicationRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FAcceptGroupApplicationRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FAcceptGroupInvitationRequest::~FAcceptGroupInvitationRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::GroupsModels::FAcceptGroupInvitationRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FAcceptGroupInvitationRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FAddMembersRequest::~FAddMembersRequest()
{

}

void PlayFab::GroupsModels::FAddMembersRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteArrayStart(TEXT("Members"));
    for (const FEntityKey& item : Members)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    if (RoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("RoleId"));
        writer->WriteValue(RoleId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FAddMembersRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TArray<TSharedPtr<FJsonValue>>&MembersArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Members"));
    for (int32 Idx = 0; Idx < MembersArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = MembersArray[Idx];
        Members.Add(FEntityKey(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FApplyToGroupRequest::~FApplyToGroupRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::GroupsModels::FApplyToGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AutoAcceptOutstandingInvite.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("AutoAcceptOutstandingInvite"));
        writer->WriteValue(AutoAcceptOutstandingInvite);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FApplyToGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AutoAcceptOutstandingInviteValue = obj->TryGetField(TEXT("AutoAcceptOutstandingInvite"));
    if (AutoAcceptOutstandingInviteValue.IsValid() && !AutoAcceptOutstandingInviteValue->IsNull())
    {
        bool TmpValue;
        if (AutoAcceptOutstandingInviteValue->TryGetBool(TmpValue)) { AutoAcceptOutstandingInvite = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FEntityWithLineage::~FEntityWithLineage()
{
    //if (Key != nullptr) delete Key;

}

void PlayFab::GroupsModels::FEntityWithLineage::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Key.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Key"));
        Key->writeJSON(writer);
    }

    if (Lineage.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Lineage"));
        for (TMap<FString, FEntityKey>::TConstIterator It(Lineage); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FEntityWithLineage::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> KeyValue = obj->TryGetField(TEXT("Key"));
    if (KeyValue.IsValid() && !KeyValue->IsNull())
    {
        Key = MakeShareable(new FEntityKey(KeyValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* LineageObject;
    if (obj->TryGetObjectField(TEXT("Lineage"), LineageObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*LineageObject)->Values); It; ++It)
        {
            Lineage.Add(It.Key(), FEntityKey(It.Value()->AsObject()));
        }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FApplyToGroupResponse::~FApplyToGroupResponse()
{
    //if (Entity != nullptr) delete Entity;
    //if (Group != nullptr) delete Group;

}

void PlayFab::GroupsModels::FApplyToGroupResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Expires"));
    writeDatetime(Expires, writer);

    if (Group.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Group"));
        Group->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FApplyToGroupResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityWithLineage(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ExpiresValue = obj->TryGetField(TEXT("Expires"));
    if (ExpiresValue.IsValid())
        Expires = readDatetime(ExpiresValue);


    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = MakeShareable(new FEntityKey(GroupValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FBlockEntityRequest::~FBlockEntityRequest()
{

}

void PlayFab::GroupsModels::FBlockEntityRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FBlockEntityRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FChangeMemberRoleRequest::~FChangeMemberRoleRequest()
{

}

void PlayFab::GroupsModels::FChangeMemberRoleRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (DestinationRoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("DestinationRoleId"));
        writer->WriteValue(DestinationRoleId);
    }

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteArrayStart(TEXT("Members"));
    for (const FEntityKey& item : Members)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    if (!OriginRoleId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: ChangeMemberRoleRequest::OriginRoleId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("OriginRoleId"));
        writer->WriteValue(OriginRoleId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FChangeMemberRoleRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> DestinationRoleIdValue = obj->TryGetField(TEXT("DestinationRoleId"));
    if (DestinationRoleIdValue.IsValid() && !DestinationRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (DestinationRoleIdValue->TryGetString(TmpValue)) { DestinationRoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TArray<TSharedPtr<FJsonValue>>&MembersArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Members"));
    for (int32 Idx = 0; Idx < MembersArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = MembersArray[Idx];
        Members.Add(FEntityKey(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> OriginRoleIdValue = obj->TryGetField(TEXT("OriginRoleId"));
    if (OriginRoleIdValue.IsValid() && !OriginRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (OriginRoleIdValue->TryGetString(TmpValue)) { OriginRoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FCreateGroupRequest::~FCreateGroupRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::GroupsModels::FCreateGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (!GroupName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateGroupRequest::GroupName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("GroupName"));
        writer->WriteValue(GroupName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FCreateGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GroupNameValue = obj->TryGetField(TEXT("GroupName"));
    if (GroupNameValue.IsValid() && !GroupNameValue->IsNull())
    {
        FString TmpValue;
        if (GroupNameValue->TryGetString(TmpValue)) { GroupName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FCreateGroupResponse::~FCreateGroupResponse()
{

}

void PlayFab::GroupsModels::FCreateGroupResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AdminRoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AdminRoleId"));
        writer->WriteValue(AdminRoleId);
    }

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writeDatetime(Created, writer);

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    if (GroupName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GroupName"));
        writer->WriteValue(GroupName);
    }

    if (MemberRoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MemberRoleId"));
        writer->WriteValue(MemberRoleId);
    }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
    writer->WriteValue(ProfileVersion);

    if (Roles.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Roles"));
        for (TMap<FString, FString>::TConstIterator It(Roles); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FCreateGroupResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AdminRoleIdValue = obj->TryGetField(TEXT("AdminRoleId"));
    if (AdminRoleIdValue.IsValid() && !AdminRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (AdminRoleIdValue->TryGetString(TmpValue)) { AdminRoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupNameValue = obj->TryGetField(TEXT("GroupName"));
    if (GroupNameValue.IsValid() && !GroupNameValue->IsNull())
    {
        FString TmpValue;
        if (GroupNameValue->TryGetString(TmpValue)) { GroupName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MemberRoleIdValue = obj->TryGetField(TEXT("MemberRoleId"));
    if (MemberRoleIdValue.IsValid() && !MemberRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (MemberRoleIdValue->TryGetString(TmpValue)) { MemberRoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* RolesObject;
    if (obj->TryGetObjectField(TEXT("Roles"), RolesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*RolesObject)->Values); It; ++It)
        {
            Roles.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FCreateGroupRoleRequest::~FCreateGroupRoleRequest()
{

}

void PlayFab::GroupsModels::FCreateGroupRoleRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    if (!RoleId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateGroupRoleRequest::RoleId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("RoleId"));
        writer->WriteValue(RoleId);
    }

    if (!RoleName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateGroupRoleRequest::RoleName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("RoleName"));
        writer->WriteValue(RoleName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FCreateGroupRoleRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RoleNameValue = obj->TryGetField(TEXT("RoleName"));
    if (RoleNameValue.IsValid() && !RoleNameValue->IsNull())
    {
        FString TmpValue;
        if (RoleNameValue->TryGetString(TmpValue)) { RoleName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FCreateGroupRoleResponse::~FCreateGroupRoleResponse()
{

}

void PlayFab::GroupsModels::FCreateGroupRoleResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
    writer->WriteValue(ProfileVersion);

    if (RoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("RoleId"));
        writer->WriteValue(RoleId);
    }

    if (RoleName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("RoleName"));
        writer->WriteValue(RoleName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FCreateGroupRoleResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RoleNameValue = obj->TryGetField(TEXT("RoleName"));
    if (RoleNameValue.IsValid() && !RoleNameValue->IsNull())
    {
        FString TmpValue;
        if (RoleNameValue->TryGetString(TmpValue)) { RoleName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FDeleteGroupRequest::~FDeleteGroupRequest()
{

}

void PlayFab::GroupsModels::FDeleteGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FDeleteGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FDeleteRoleRequest::~FDeleteRoleRequest()
{

}

void PlayFab::GroupsModels::FDeleteRoleRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    if (RoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("RoleId"));
        writer->WriteValue(RoleId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FDeleteRoleRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FEmptyResponse::~FEmptyResponse()
{

}

void PlayFab::GroupsModels::FEmptyResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FEmptyResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::GroupsModels::FEntityMemberRole::~FEntityMemberRole()
{

}

void PlayFab::GroupsModels::FEntityMemberRole::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Members.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Members"));
        for (const FEntityWithLineage& item : Members)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (RoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("RoleId"));
        writer->WriteValue(RoleId);
    }

    if (RoleName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("RoleName"));
        writer->WriteValue(RoleName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FEntityMemberRole::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&MembersArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Members"));
    for (int32 Idx = 0; Idx < MembersArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = MembersArray[Idx];
        Members.Add(FEntityWithLineage(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RoleNameValue = obj->TryGetField(TEXT("RoleName"));
    if (RoleNameValue.IsValid() && !RoleNameValue->IsNull())
    {
        FString TmpValue;
        if (RoleNameValue->TryGetString(TmpValue)) { RoleName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FGetGroupRequest::~FGetGroupRequest()
{
    //if (Group != nullptr) delete Group;

}

void PlayFab::GroupsModels::FGetGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Group.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Group"));
        Group->writeJSON(writer);
    }

    if (GroupName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GroupName"));
        writer->WriteValue(GroupName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FGetGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = MakeShareable(new FEntityKey(GroupValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GroupNameValue = obj->TryGetField(TEXT("GroupName"));
    if (GroupNameValue.IsValid() && !GroupNameValue->IsNull())
    {
        FString TmpValue;
        if (GroupNameValue->TryGetString(TmpValue)) { GroupName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FGetGroupResponse::~FGetGroupResponse()
{

}

void PlayFab::GroupsModels::FGetGroupResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AdminRoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AdminRoleId"));
        writer->WriteValue(AdminRoleId);
    }

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writeDatetime(Created, writer);

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    if (GroupName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GroupName"));
        writer->WriteValue(GroupName);
    }

    if (MemberRoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MemberRoleId"));
        writer->WriteValue(MemberRoleId);
    }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
    writer->WriteValue(ProfileVersion);

    if (Roles.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Roles"));
        for (TMap<FString, FString>::TConstIterator It(Roles); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FGetGroupResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AdminRoleIdValue = obj->TryGetField(TEXT("AdminRoleId"));
    if (AdminRoleIdValue.IsValid() && !AdminRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (AdminRoleIdValue->TryGetString(TmpValue)) { AdminRoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupNameValue = obj->TryGetField(TEXT("GroupName"));
    if (GroupNameValue.IsValid() && !GroupNameValue->IsNull())
    {
        FString TmpValue;
        if (GroupNameValue->TryGetString(TmpValue)) { GroupName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MemberRoleIdValue = obj->TryGetField(TEXT("MemberRoleId"));
    if (MemberRoleIdValue.IsValid() && !MemberRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (MemberRoleIdValue->TryGetString(TmpValue)) { MemberRoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* RolesObject;
    if (obj->TryGetObjectField(TEXT("Roles"), RolesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*RolesObject)->Values); It; ++It)
        {
            Roles.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FGroupApplication::~FGroupApplication()
{
    //if (Entity != nullptr) delete Entity;
    //if (Group != nullptr) delete Group;

}

void PlayFab::GroupsModels::FGroupApplication::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Expires"));
    writeDatetime(Expires, writer);

    if (Group.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Group"));
        Group->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FGroupApplication::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityWithLineage(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ExpiresValue = obj->TryGetField(TEXT("Expires"));
    if (ExpiresValue.IsValid())
        Expires = readDatetime(ExpiresValue);


    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = MakeShareable(new FEntityKey(GroupValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FGroupBlock::~FGroupBlock()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::GroupsModels::FGroupBlock::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FGroupBlock::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityWithLineage(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FGroupInvitation::~FGroupInvitation()
{
    //if (Group != nullptr) delete Group;
    //if (InvitedByEntity != nullptr) delete InvitedByEntity;
    //if (InvitedEntity != nullptr) delete InvitedEntity;

}

void PlayFab::GroupsModels::FGroupInvitation::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Expires"));
    writeDatetime(Expires, writer);

    if (Group.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Group"));
        Group->writeJSON(writer);
    }

    if (InvitedByEntity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("InvitedByEntity"));
        InvitedByEntity->writeJSON(writer);
    }

    if (InvitedEntity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("InvitedEntity"));
        InvitedEntity->writeJSON(writer);
    }

    if (RoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("RoleId"));
        writer->WriteValue(RoleId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FGroupInvitation::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ExpiresValue = obj->TryGetField(TEXT("Expires"));
    if (ExpiresValue.IsValid())
        Expires = readDatetime(ExpiresValue);


    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = MakeShareable(new FEntityKey(GroupValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> InvitedByEntityValue = obj->TryGetField(TEXT("InvitedByEntity"));
    if (InvitedByEntityValue.IsValid() && !InvitedByEntityValue->IsNull())
    {
        InvitedByEntity = MakeShareable(new FEntityWithLineage(InvitedByEntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> InvitedEntityValue = obj->TryGetField(TEXT("InvitedEntity"));
    if (InvitedEntityValue.IsValid() && !InvitedEntityValue->IsNull())
    {
        InvitedEntity = MakeShareable(new FEntityWithLineage(InvitedEntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FGroupRole::~FGroupRole()
{

}

void PlayFab::GroupsModels::FGroupRole::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (RoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("RoleId"));
        writer->WriteValue(RoleId);
    }

    if (RoleName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("RoleName"));
        writer->WriteValue(RoleName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FGroupRole::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RoleNameValue = obj->TryGetField(TEXT("RoleName"));
    if (RoleNameValue.IsValid() && !RoleNameValue->IsNull())
    {
        FString TmpValue;
        if (RoleNameValue->TryGetString(TmpValue)) { RoleName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FGroupWithRoles::~FGroupWithRoles()
{
    //if (Group != nullptr) delete Group;

}

void PlayFab::GroupsModels::FGroupWithRoles::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Group.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Group"));
        Group->writeJSON(writer);
    }

    if (GroupName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GroupName"));
        writer->WriteValue(GroupName);
    }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
    writer->WriteValue(ProfileVersion);

    if (Roles.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Roles"));
        for (const FGroupRole& item : Roles)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FGroupWithRoles::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = MakeShareable(new FEntityKey(GroupValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GroupNameValue = obj->TryGetField(TEXT("GroupName"));
    if (GroupNameValue.IsValid() && !GroupNameValue->IsNull())
    {
        FString TmpValue;
        if (GroupNameValue->TryGetString(TmpValue)) { GroupName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&RolesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Roles"));
    for (int32 Idx = 0; Idx < RolesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = RolesArray[Idx];
        Roles.Add(FGroupRole(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::GroupsModels::FInviteToGroupRequest::~FInviteToGroupRequest()
{

}

void PlayFab::GroupsModels::FInviteToGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AutoAcceptOutstandingApplication.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("AutoAcceptOutstandingApplication"));
        writer->WriteValue(AutoAcceptOutstandingApplication);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    if (RoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("RoleId"));
        writer->WriteValue(RoleId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FInviteToGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AutoAcceptOutstandingApplicationValue = obj->TryGetField(TEXT("AutoAcceptOutstandingApplication"));
    if (AutoAcceptOutstandingApplicationValue.IsValid() && !AutoAcceptOutstandingApplicationValue->IsNull())
    {
        bool TmpValue;
        if (AutoAcceptOutstandingApplicationValue->TryGetBool(TmpValue)) { AutoAcceptOutstandingApplication = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FInviteToGroupResponse::~FInviteToGroupResponse()
{
    //if (Group != nullptr) delete Group;
    //if (InvitedByEntity != nullptr) delete InvitedByEntity;
    //if (InvitedEntity != nullptr) delete InvitedEntity;

}

void PlayFab::GroupsModels::FInviteToGroupResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Expires"));
    writeDatetime(Expires, writer);

    if (Group.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Group"));
        Group->writeJSON(writer);
    }

    if (InvitedByEntity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("InvitedByEntity"));
        InvitedByEntity->writeJSON(writer);
    }

    if (InvitedEntity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("InvitedEntity"));
        InvitedEntity->writeJSON(writer);
    }

    if (RoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("RoleId"));
        writer->WriteValue(RoleId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FInviteToGroupResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ExpiresValue = obj->TryGetField(TEXT("Expires"));
    if (ExpiresValue.IsValid())
        Expires = readDatetime(ExpiresValue);


    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = MakeShareable(new FEntityKey(GroupValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> InvitedByEntityValue = obj->TryGetField(TEXT("InvitedByEntity"));
    if (InvitedByEntityValue.IsValid() && !InvitedByEntityValue->IsNull())
    {
        InvitedByEntity = MakeShareable(new FEntityWithLineage(InvitedByEntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> InvitedEntityValue = obj->TryGetField(TEXT("InvitedEntity"));
    if (InvitedEntityValue.IsValid() && !InvitedEntityValue->IsNull())
    {
        InvitedEntity = MakeShareable(new FEntityWithLineage(InvitedEntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FIsMemberRequest::~FIsMemberRequest()
{

}

void PlayFab::GroupsModels::FIsMemberRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    if (RoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("RoleId"));
        writer->WriteValue(RoleId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FIsMemberRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FIsMemberResponse::~FIsMemberResponse()
{

}

void PlayFab::GroupsModels::FIsMemberResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("IsMember"));
    writer->WriteValue(IsMember);

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FIsMemberResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IsMemberValue = obj->TryGetField(TEXT("IsMember"));
    if (IsMemberValue.IsValid() && !IsMemberValue->IsNull())
    {
        bool TmpValue;
        if (IsMemberValue->TryGetBool(TmpValue)) { IsMember = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FListGroupApplicationsRequest::~FListGroupApplicationsRequest()
{

}

void PlayFab::GroupsModels::FListGroupApplicationsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FListGroupApplicationsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FListGroupApplicationsResponse::~FListGroupApplicationsResponse()
{

}

void PlayFab::GroupsModels::FListGroupApplicationsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Applications.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Applications"));
        for (const FGroupApplication& item : Applications)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FListGroupApplicationsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ApplicationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Applications"));
    for (int32 Idx = 0; Idx < ApplicationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ApplicationsArray[Idx];
        Applications.Add(FGroupApplication(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::GroupsModels::FListGroupBlocksRequest::~FListGroupBlocksRequest()
{

}

void PlayFab::GroupsModels::FListGroupBlocksRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FListGroupBlocksRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FListGroupBlocksResponse::~FListGroupBlocksResponse()
{

}

void PlayFab::GroupsModels::FListGroupBlocksResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BlockedEntities.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BlockedEntities"));
        for (const FGroupBlock& item : BlockedEntities)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FListGroupBlocksResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BlockedEntitiesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("BlockedEntities"));
    for (int32 Idx = 0; Idx < BlockedEntitiesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BlockedEntitiesArray[Idx];
        BlockedEntities.Add(FGroupBlock(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::GroupsModels::FListGroupInvitationsRequest::~FListGroupInvitationsRequest()
{

}

void PlayFab::GroupsModels::FListGroupInvitationsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FListGroupInvitationsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FListGroupInvitationsResponse::~FListGroupInvitationsResponse()
{

}

void PlayFab::GroupsModels::FListGroupInvitationsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Invitations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Invitations"));
        for (const FGroupInvitation& item : Invitations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FListGroupInvitationsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&InvitationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Invitations"));
    for (int32 Idx = 0; Idx < InvitationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = InvitationsArray[Idx];
        Invitations.Add(FGroupInvitation(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::GroupsModels::FListGroupMembersRequest::~FListGroupMembersRequest()
{

}

void PlayFab::GroupsModels::FListGroupMembersRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FListGroupMembersRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FListGroupMembersResponse::~FListGroupMembersResponse()
{

}

void PlayFab::GroupsModels::FListGroupMembersResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Members.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Members"));
        for (const FEntityMemberRole& item : Members)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FListGroupMembersResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&MembersArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Members"));
    for (int32 Idx = 0; Idx < MembersArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = MembersArray[Idx];
        Members.Add(FEntityMemberRole(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::GroupsModels::FListMembershipOpportunitiesRequest::~FListMembershipOpportunitiesRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::GroupsModels::FListMembershipOpportunitiesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FListMembershipOpportunitiesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FListMembershipOpportunitiesResponse::~FListMembershipOpportunitiesResponse()
{

}

void PlayFab::GroupsModels::FListMembershipOpportunitiesResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Applications.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Applications"));
        for (const FGroupApplication& item : Applications)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Invitations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Invitations"));
        for (const FGroupInvitation& item : Invitations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FListMembershipOpportunitiesResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ApplicationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Applications"));
    for (int32 Idx = 0; Idx < ApplicationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ApplicationsArray[Idx];
        Applications.Add(FGroupApplication(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&InvitationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Invitations"));
    for (int32 Idx = 0; Idx < InvitationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = InvitationsArray[Idx];
        Invitations.Add(FGroupInvitation(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::GroupsModels::FListMembershipRequest::~FListMembershipRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::GroupsModels::FListMembershipRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FListMembershipRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FListMembershipResponse::~FListMembershipResponse()
{

}

void PlayFab::GroupsModels::FListMembershipResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Groups.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Groups"));
        for (const FGroupWithRoles& item : Groups)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FListMembershipResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&GroupsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Groups"));
    for (int32 Idx = 0; Idx < GroupsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = GroupsArray[Idx];
        Groups.Add(FGroupWithRoles(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

void PlayFab::GroupsModels::writeOperationTypesEnumJSON(OperationTypes enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case OperationTypesCreated: writer->WriteValue(TEXT("Created")); break;
    case OperationTypesUpdated: writer->WriteValue(TEXT("Updated")); break;
    case OperationTypesDeleted: writer->WriteValue(TEXT("Deleted")); break;
    case OperationTypesNone: writer->WriteValue(TEXT("None")); break;
    }
}

GroupsModels::OperationTypes PlayFab::GroupsModels::readOperationTypesFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readOperationTypesFromValue(value.IsValid() ? value->AsString() : "");
}

GroupsModels::OperationTypes PlayFab::GroupsModels::readOperationTypesFromValue(const FString& value)
{
    static TMap<FString, OperationTypes> _OperationTypesMap;
    if (_OperationTypesMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _OperationTypesMap.Add(TEXT("Created"), OperationTypesCreated);
        _OperationTypesMap.Add(TEXT("Updated"), OperationTypesUpdated);
        _OperationTypesMap.Add(TEXT("Deleted"), OperationTypesDeleted);
        _OperationTypesMap.Add(TEXT("None"), OperationTypesNone);

    }

    if (!value.IsEmpty())
    {
        auto output = _OperationTypesMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return OperationTypesCreated; // Basically critical fail
}

PlayFab::GroupsModels::FRemoveGroupApplicationRequest::~FRemoveGroupApplicationRequest()
{

}

void PlayFab::GroupsModels::FRemoveGroupApplicationRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FRemoveGroupApplicationRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FRemoveGroupInvitationRequest::~FRemoveGroupInvitationRequest()
{

}

void PlayFab::GroupsModels::FRemoveGroupInvitationRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FRemoveGroupInvitationRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FRemoveMembersRequest::~FRemoveMembersRequest()
{

}

void PlayFab::GroupsModels::FRemoveMembersRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteArrayStart(TEXT("Members"));
    for (const FEntityKey& item : Members)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    if (RoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("RoleId"));
        writer->WriteValue(RoleId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FRemoveMembersRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TArray<TSharedPtr<FJsonValue>>&MembersArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Members"));
    for (int32 Idx = 0; Idx < MembersArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = MembersArray[Idx];
        Members.Add(FEntityKey(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FUnblockEntityRequest::~FUnblockEntityRequest()
{

}

void PlayFab::GroupsModels::FUnblockEntityRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("Entity"));
    Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FUnblockEntityRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FUpdateGroupRequest::~FUpdateGroupRequest()
{

}

void PlayFab::GroupsModels::FUpdateGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AdminRoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AdminRoleId"));
        writer->WriteValue(AdminRoleId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (ExpectedProfileVersion.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ExpectedProfileVersion"));
        writer->WriteValue(ExpectedProfileVersion);
    }

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    if (GroupName.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("GroupName"));
        writer->WriteValue(GroupName);
    }

    if (MemberRoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("MemberRoleId"));
        writer->WriteValue(MemberRoleId);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FUpdateGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AdminRoleIdValue = obj->TryGetField(TEXT("AdminRoleId"));
    if (AdminRoleIdValue.IsValid() && !AdminRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (AdminRoleIdValue->TryGetString(TmpValue)) { AdminRoleId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ExpectedProfileVersionValue = obj->TryGetField(TEXT("ExpectedProfileVersion"));
    if (ExpectedProfileVersionValue.IsValid() && !ExpectedProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ExpectedProfileVersionValue->TryGetNumber(TmpValue)) { ExpectedProfileVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupNameValue = obj->TryGetField(TEXT("GroupName"));
    if (GroupNameValue.IsValid() && !GroupNameValue->IsNull())
    {
        FString TmpValue;
        if (GroupNameValue->TryGetString(TmpValue)) { GroupName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MemberRoleIdValue = obj->TryGetField(TEXT("MemberRoleId"));
    if (MemberRoleIdValue.IsValid() && !MemberRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (MemberRoleIdValue->TryGetString(TmpValue)) { MemberRoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FUpdateGroupResponse::~FUpdateGroupResponse()
{

}

void PlayFab::GroupsModels::FUpdateGroupResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (OperationReason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OperationReason"));
        writer->WriteValue(OperationReason);
    }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
    writer->WriteValue(ProfileVersion);

    if (SetResult.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("SetResult"));
        writeOperationTypesEnumJSON(SetResult, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FUpdateGroupResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> OperationReasonValue = obj->TryGetField(TEXT("OperationReason"));
    if (OperationReasonValue.IsValid() && !OperationReasonValue->IsNull())
    {
        FString TmpValue;
        if (OperationReasonValue->TryGetString(TmpValue)) { OperationReason = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    SetResult = readOperationTypesFromValue(obj->TryGetField(TEXT("SetResult")));

    return HasSucceeded;
}

PlayFab::GroupsModels::FUpdateGroupRoleRequest::~FUpdateGroupRoleRequest()
{

}

void PlayFab::GroupsModels::FUpdateGroupRoleRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (ExpectedProfileVersion.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ExpectedProfileVersion"));
        writer->WriteValue(ExpectedProfileVersion);
    }

    writer->WriteIdentifierPrefix(TEXT("Group"));
    Group.writeJSON(writer);

    if (RoleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("RoleId"));
        writer->WriteValue(RoleId);
    }

    if (!RoleName.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: UpdateGroupRoleRequest::RoleName, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("RoleName"));
        writer->WriteValue(RoleName);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FUpdateGroupRoleRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> ExpectedProfileVersionValue = obj->TryGetField(TEXT("ExpectedProfileVersion"));
    if (ExpectedProfileVersionValue.IsValid() && !ExpectedProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ExpectedProfileVersionValue->TryGetNumber(TmpValue)) { ExpectedProfileVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RoleNameValue = obj->TryGetField(TEXT("RoleName"));
    if (RoleNameValue.IsValid() && !RoleNameValue->IsNull())
    {
        FString TmpValue;
        if (RoleNameValue->TryGetString(TmpValue)) { RoleName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::GroupsModels::FUpdateGroupRoleResponse::~FUpdateGroupRoleResponse()
{

}

void PlayFab::GroupsModels::FUpdateGroupRoleResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (OperationReason.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OperationReason"));
        writer->WriteValue(OperationReason);
    }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion"));
    writer->WriteValue(ProfileVersion);

    if (SetResult.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("SetResult"));
        writeOperationTypesEnumJSON(SetResult, writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::GroupsModels::FUpdateGroupRoleResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> OperationReasonValue = obj->TryGetField(TEXT("OperationReason"));
    if (OperationReasonValue.IsValid() && !OperationReasonValue->IsNull())
    {
        FString TmpValue;
        if (OperationReasonValue->TryGetString(TmpValue)) { OperationReason = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    SetResult = readOperationTypesFromValue(obj->TryGetField(TEXT("SetResult")));

    return HasSucceeded;
}

