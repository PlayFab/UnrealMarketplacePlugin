//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "Core/PlayFabError.h"
#include "Core/PlayFabEventsDataModels.h"
#include "Core/PlayFabSettings.h"
#include "PlayFabAPISettings.h"
#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"

namespace PlayFab
{
    /**
     * Main interface for PlayFab Sdk, specifically all Events APIs
     */
    class PLAYFABCPP_API UPlayFabEventsInstanceAPI
    {
    public:
        DECLARE_DELEGATE_OneParam(FCreateTelemetryKeyDelegate, const EventsModels::FCreateTelemetryKeyResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteTelemetryKeyDelegate, const EventsModels::FDeleteTelemetryKeyResponse&);
        DECLARE_DELEGATE_OneParam(FGetTelemetryKeyDelegate, const EventsModels::FGetTelemetryKeyResponse&);
        DECLARE_DELEGATE_OneParam(FListTelemetryKeysDelegate, const EventsModels::FListTelemetryKeysResponse&);
        DECLARE_DELEGATE_OneParam(FSetTelemetryKeyActiveDelegate, const EventsModels::FSetTelemetryKeyActiveResponse&);
        DECLARE_DELEGATE_OneParam(FWriteEventsDelegate, const EventsModels::FWriteEventsResponse&);
        DECLARE_DELEGATE_OneParam(FWriteTelemetryEventsDelegate, const EventsModels::FWriteEventsResponse&);


    private:
        TSharedPtr<UPlayFabAPISettings> settings;
        TSharedPtr<UPlayFabAuthenticationContext> authContext;
    
    public:
        UPlayFabEventsInstanceAPI();
        explicit UPlayFabEventsInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings);
        explicit UPlayFabEventsInstanceAPI(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        UPlayFabEventsInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings, TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        ~UPlayFabEventsInstanceAPI();
        UPlayFabEventsInstanceAPI(const UPlayFabEventsInstanceAPI& source) = delete; // disable copy
        UPlayFabEventsInstanceAPI(UPlayFabEventsInstanceAPI&&) = delete; // disable move
        UPlayFabEventsInstanceAPI& operator=(const UPlayFabEventsInstanceAPI& source) = delete; // disable assignment
        UPlayFabEventsInstanceAPI& operator=(UPlayFabEventsInstanceAPI&& other) = delete; // disable move assignment

        int GetPendingCalls() const;
        TSharedPtr<UPlayFabAPISettings> GetSettings() const;
        void SetSettings(TSharedPtr<UPlayFabAPISettings> apiSettings);
        TSharedPtr<UPlayFabAuthenticationContext> GetAuthenticationContext() const;
        void SetAuthenticationContext(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        void ForgetAllCredentials();

    private:
        TSharedPtr<UPlayFabAuthenticationContext> GetOrCreateAuthenticationContext();
    
    public:


        // ------------ Generated API calls
        // Creates a new telemetry key for the title.
        bool CreateTelemetryKey(EventsModels::FCreateTelemetryKeyRequest& request, const FCreateTelemetryKeyDelegate& SuccessDelegate = FCreateTelemetryKeyDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());

        // Deletes a telemetry key configured for the title.
        bool DeleteTelemetryKey(EventsModels::FDeleteTelemetryKeyRequest& request, const FDeleteTelemetryKeyDelegate& SuccessDelegate = FDeleteTelemetryKeyDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());

        // Gets information about a telemetry key configured for the title.
        bool GetTelemetryKey(EventsModels::FGetTelemetryKeyRequest& request, const FGetTelemetryKeyDelegate& SuccessDelegate = FGetTelemetryKeyDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());

        // Lists all telemetry keys configured for the title.
        bool ListTelemetryKeys(EventsModels::FListTelemetryKeysRequest& request, const FListTelemetryKeysDelegate& SuccessDelegate = FListTelemetryKeysDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());

        // Sets a telemetry key to the active or deactivated state.
        bool SetTelemetryKeyActive(EventsModels::FSetTelemetryKeyActiveRequest& request, const FSetTelemetryKeyActiveDelegate& SuccessDelegate = FSetTelemetryKeyActiveDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());

        // Write batches of entity based events to PlayStream. The namespace of the Event must be 'custom' or start with 'custom.'.
        bool WriteEvents(EventsModels::FWriteEventsRequest& request, const FWriteEventsDelegate& SuccessDelegate = FWriteEventsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());

        /**
         * Write batches of entity based events to as Telemetry events (bypass PlayStream). The namespace must be 'custom' or start
         * with 'custom.'
         * This API must be called with either X-EntityToken or X-TelemetryKey headers. If sending X-EntityToken the value must be a valid EntityToken for your title. If using X-TelemetryKey the value must be a Telemetry Key configured for your title set to 'Active'. If both are provided, X-TelemetryKey will be ignored.
         */
        bool WriteTelemetryEvents(EventsModels::FWriteEventsRequest& request, const FWriteTelemetryEventsDelegate& SuccessDelegate = FWriteTelemetryEventsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());

        /**
        * Write batches of entity based events to as Telemetry events (bypass PlayStream) using a Telemetry Key. The namespace must be 'custom' or start
        * with 'custom.'
        */
        bool WriteTelemetryEvents(EventsModels::FWriteEventsRequest& request, FString telemetryKey, const FWriteTelemetryEventsDelegate& SuccessDelegate = FWriteTelemetryEventsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());

    private:
        // ------------ Generated result handlers
        void OnCreateTelemetryKeyResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateTelemetryKeyDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteTelemetryKeyResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteTelemetryKeyDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetTelemetryKeyResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetTelemetryKeyDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnListTelemetryKeysResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListTelemetryKeysDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnSetTelemetryKeyActiveResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetTelemetryKeyActiveDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnWriteEventsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FWriteEventsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnWriteTelemetryEventsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FWriteTelemetryEventsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);

    };
};
