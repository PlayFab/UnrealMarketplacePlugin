//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "Core/PlayFabError.h"
#include "Core/PlayFabGroupsDataModels.h"
#include "Core/PlayFabSettings.h"
#include "PlayFabAPISettings.h"
#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"

namespace PlayFab
{
    /**
     * Main interface for PlayFab Sdk, specifically all Groups APIs
     */
    class PLAYFABCPP_API UPlayFabGroupsInstanceAPI
    {
    public:
        DECLARE_DELEGATE_OneParam(FAcceptGroupApplicationDelegate, const GroupsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FAcceptGroupInvitationDelegate, const GroupsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FAddMembersDelegate, const GroupsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FApplyToGroupDelegate, const GroupsModels::FApplyToGroupResponse&);
        DECLARE_DELEGATE_OneParam(FBlockEntityDelegate, const GroupsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FChangeMemberRoleDelegate, const GroupsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FCreateGroupDelegate, const GroupsModels::FCreateGroupResponse&);
        DECLARE_DELEGATE_OneParam(FCreateRoleDelegate, const GroupsModels::FCreateGroupRoleResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteGroupDelegate, const GroupsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FDeleteRoleDelegate, const GroupsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FGetGroupDelegate, const GroupsModels::FGetGroupResponse&);
        DECLARE_DELEGATE_OneParam(FInviteToGroupDelegate, const GroupsModels::FInviteToGroupResponse&);
        DECLARE_DELEGATE_OneParam(FIsMemberDelegate, const GroupsModels::FIsMemberResponse&);
        DECLARE_DELEGATE_OneParam(FListGroupApplicationsDelegate, const GroupsModels::FListGroupApplicationsResponse&);
        DECLARE_DELEGATE_OneParam(FListGroupBlocksDelegate, const GroupsModels::FListGroupBlocksResponse&);
        DECLARE_DELEGATE_OneParam(FListGroupInvitationsDelegate, const GroupsModels::FListGroupInvitationsResponse&);
        DECLARE_DELEGATE_OneParam(FListGroupMembersDelegate, const GroupsModels::FListGroupMembersResponse&);
        DECLARE_DELEGATE_OneParam(FListMembershipDelegate, const GroupsModels::FListMembershipResponse&);
        DECLARE_DELEGATE_OneParam(FListMembershipOpportunitiesDelegate, const GroupsModels::FListMembershipOpportunitiesResponse&);
        DECLARE_DELEGATE_OneParam(FRemoveGroupApplicationDelegate, const GroupsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FRemoveGroupInvitationDelegate, const GroupsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FRemoveMembersDelegate, const GroupsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FUnblockEntityDelegate, const GroupsModels::FEmptyResponse&);
        DECLARE_DELEGATE_OneParam(FUpdateGroupDelegate, const GroupsModels::FUpdateGroupResponse&);
        DECLARE_DELEGATE_OneParam(FUpdateRoleDelegate, const GroupsModels::FUpdateGroupRoleResponse&);


    private:
        TSharedPtr<UPlayFabAPISettings> settings;
        TSharedPtr<UPlayFabAuthenticationContext> authContext;
    
    public:
        UPlayFabGroupsInstanceAPI();
        explicit UPlayFabGroupsInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings);
        explicit UPlayFabGroupsInstanceAPI(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        UPlayFabGroupsInstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings, TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        ~UPlayFabGroupsInstanceAPI();
        UPlayFabGroupsInstanceAPI(const UPlayFabGroupsInstanceAPI& source) = delete; // disable copy
        UPlayFabGroupsInstanceAPI(UPlayFabGroupsInstanceAPI&&) = delete; // disable move
        UPlayFabGroupsInstanceAPI& operator=(const UPlayFabGroupsInstanceAPI& source) = delete; // disable assignment
        UPlayFabGroupsInstanceAPI& operator=(UPlayFabGroupsInstanceAPI&& other) = delete; // disable move assignment

        int GetPendingCalls() const;
        TSharedPtr<UPlayFabAPISettings> GetSettings() const;
        void SetSettings(TSharedPtr<UPlayFabAPISettings> apiSettings);
        TSharedPtr<UPlayFabAuthenticationContext> GetAuthenticationContext() const;
        void SetAuthenticationContext(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        void ForgetAllCredentials();

    private:
        TSharedPtr<UPlayFabAuthenticationContext> GetOrCreateAuthenticationContext();
    
    public:


        // ------------ Generated API calls
        /**
         * Accepts an outstanding invitation to to join a group
         * Accepts an outstanding invitation to to join a group if the invited entity is not blocked by the group. Nothing is returned in the case of success.
         */
        bool AcceptGroupApplication(GroupsModels::FAcceptGroupApplicationRequest& request, const FAcceptGroupApplicationDelegate& SuccessDelegate = FAcceptGroupApplicationDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Accepts an invitation to join a group
         * Accepts an outstanding invitation to join the group if the invited entity is not blocked by the group. Only the invited entity or a parent in its chain (e.g. title) may accept the invitation on the invited entity's behalf. Nothing is returned in the case of success.
         */
        bool AcceptGroupInvitation(GroupsModels::FAcceptGroupInvitationRequest& request, const FAcceptGroupInvitationDelegate& SuccessDelegate = FAcceptGroupInvitationDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Adds members to a group or role.
         * Adds members to a group or role. Existing members of the group will added to roles within the group, but if the user is not already a member of the group, only title claimants may add them to the group, and others must use the group application or invite system to add new members to a group. Returns nothing if successful.
         */
        bool AddMembers(GroupsModels::FAddMembersRequest& request, const FAddMembersDelegate& SuccessDelegate = FAddMembersDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Applies to join a group
         * Creates an application to join a group. Calling this while a group application already exists will return the same application instead of an error and will not refresh the time before the application expires. By default, if the entity has an invitation to join the group outstanding, this will accept the invitation to join the group instead and return an error indicating such, rather than creating a duplicate application to join that will need to be cleaned up later. Returns information about the application or an error indicating an invitation was accepted instead.
         */
        bool ApplyToGroup(GroupsModels::FApplyToGroupRequest& request, const FApplyToGroupDelegate& SuccessDelegate = FApplyToGroupDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Blocks a list of entities from joining a group.
         * Blocks a list of entities from joining a group. Blocked entities may not create new applications to join, be invited to join, accept an invitation, or have an application accepted. Failure due to being blocked does not clean up existing applications or invitations to the group. No data is returned in the case of success.
         */
        bool BlockEntity(GroupsModels::FBlockEntityRequest& request, const FBlockEntityDelegate& SuccessDelegate = FBlockEntityDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Changes the role membership of a list of entities from one role to another.
         * Changes the role membership of a list of entities from one role to another in in a single operation. The destination role must already exist. This is equivalent to adding the entities to the destination role and removing from the origin role. Returns nothing if successful.
         */
        bool ChangeMemberRole(GroupsModels::FChangeMemberRoleRequest& request, const FChangeMemberRoleDelegate& SuccessDelegate = FChangeMemberRoleDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Creates a new group.
         * Creates a new group, as well as administration and member roles, based off of a title's group template. Returns information about the group that was created.
         */
        bool CreateGroup(GroupsModels::FCreateGroupRequest& request, const FCreateGroupDelegate& SuccessDelegate = FCreateGroupDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Creates a new group role.
         * Creates a new role within an existing group, with no members. Both the role ID and role name must be unique within the group, but the name can be the same as the ID. The role ID is set at creation and cannot be changed. Returns information about the role that was created.
         */
        bool CreateRole(GroupsModels::FCreateGroupRoleRequest& request, const FCreateRoleDelegate& SuccessDelegate = FCreateRoleDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Deletes a group and all roles, invitations, join requests, and blocks associated with it.
         * Deletes a group and all roles, invitations, join requests, and blocks associated with it. Permission to delete is only required the group itself to execute this action. The group and data cannot be cannot be recovered once removed, but any abuse reports about the group will remain. No data is returned in the case of success.
         */
        bool DeleteGroup(GroupsModels::FDeleteGroupRequest& request, const FDeleteGroupDelegate& SuccessDelegate = FDeleteGroupDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Deletes an existing role in a group.
         * Returns information about the role
         */
        bool DeleteRole(GroupsModels::FDeleteRoleRequest& request, const FDeleteRoleDelegate& SuccessDelegate = FDeleteRoleDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Gets information about a group and its roles
         * Returns the ID, name, role list and other non-membership related information about a group.
         */
        bool GetGroup(GroupsModels::FGetGroupRequest& request, const FGetGroupDelegate& SuccessDelegate = FGetGroupDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Invites a player to join a group
         * Invites a player to join a group, if they are not blocked by the group. An optional role can be provided to automatically assign the player to the role if they accept the invitation. By default, if the entity has an application to the group outstanding, this will accept the application instead and return an error indicating such, rather than creating a duplicate invitation to join that will need to be cleaned up later. Returns information about the new invitation or an error indicating an existing application to join was accepted.
         */
        bool InviteToGroup(GroupsModels::FInviteToGroupRequest& request, const FInviteToGroupDelegate& SuccessDelegate = FInviteToGroupDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Checks to see if an entity is a member of a group or role within the group
         * Checks to see if an entity is a member of a group or role within the group. A result indicating if the entity is a member of the group is returned, or a permission error if the caller does not have permission to read the group's member list.
         */
        bool IsMember(GroupsModels::FIsMemberRequest& request, const FIsMemberDelegate& SuccessDelegate = FIsMemberDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Lists all outstanding requests to join a group
         * Lists all outstanding requests to join a group. Returns a list of all requests to join, as well as when the request will expire. To get the group applications for a specific entity, use ListMembershipOpportunities.
         */
        bool ListGroupApplications(GroupsModels::FListGroupApplicationsRequest& request, const FListGroupApplicationsDelegate& SuccessDelegate = FListGroupApplicationsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Lists all entities blocked from joining a group
         * Lists all entities blocked from joining a group. A list of blocked entities is returned
         */
        bool ListGroupBlocks(GroupsModels::FListGroupBlocksRequest& request, const FListGroupBlocksDelegate& SuccessDelegate = FListGroupBlocksDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Lists all outstanding invitations for a group
         * Lists all outstanding invitations for a group. Returns a list of entities that have been invited, as well as when the invitation will expire. To get the group invitations for a specific entity, use ListMembershipOpportunities.
         */
        bool ListGroupInvitations(GroupsModels::FListGroupInvitationsRequest& request, const FListGroupInvitationsDelegate& SuccessDelegate = FListGroupInvitationsDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Lists all members for a group
         * Gets a list of members and the roles they belong to within the group. If the caller does not have permission to view the role, and the member is in no other role, the member is not displayed. Returns a list of entities that are members of the group.
         */
        bool ListGroupMembers(GroupsModels::FListGroupMembersRequest& request, const FListGroupMembersDelegate& SuccessDelegate = FListGroupMembersDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Lists all groups and roles for an entity
         * Lists the groups and roles that an entity is a part of, checking to see if group and role metadata and memberships should be visible to the caller. If the entity is not in any roles that are visible to the caller, the group is not returned in the results, even if the caller otherwise has permission to see that the entity is a member of that group.
         */
        bool ListMembership(GroupsModels::FListMembershipRequest& request, const FListMembershipDelegate& SuccessDelegate = FListMembershipDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Lists all outstanding invitations and group applications for an entity
         * Lists all outstanding group applications and invitations for an entity. Anyone may call this for any entity, but data will only be returned for the entity or a parent of that entity. To list invitations or applications for a group to check if a player is trying to join, use ListGroupInvitations and ListGroupApplications.
         */
        bool ListMembershipOpportunities(GroupsModels::FListMembershipOpportunitiesRequest& request, const FListMembershipOpportunitiesDelegate& SuccessDelegate = FListMembershipOpportunitiesDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Removes an application to join a group
         * Removes an existing application to join the group. This is used for both rejection of an application as well as withdrawing an application. The applying entity or a parent in its chain (e.g. title) may withdraw the application, and any caller with appropriate access in the group may reject an application. No data is returned in the case of success.
         */
        bool RemoveGroupApplication(GroupsModels::FRemoveGroupApplicationRequest& request, const FRemoveGroupApplicationDelegate& SuccessDelegate = FRemoveGroupApplicationDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Removes an invitation join a group
         * Removes an existing invitation to join the group. This is used for both rejection of an invitation as well as rescinding an invitation. The invited entity or a parent in its chain (e.g. title) may reject the invitation by calling this method, and any caller with appropriate access in the group may rescind an invitation. No data is returned in the case of success.
         */
        bool RemoveGroupInvitation(GroupsModels::FRemoveGroupInvitationRequest& request, const FRemoveGroupInvitationDelegate& SuccessDelegate = FRemoveGroupInvitationDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Removes members from a group.
         * Removes members from a group. A member can always remove themselves from a group, regardless of permissions. Returns nothing if successful.
         */
        bool RemoveMembers(GroupsModels::FRemoveMembersRequest& request, const FRemoveMembersDelegate& SuccessDelegate = FRemoveMembersDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Unblocks a list of entities from joining a group
         * Unblocks a list of entities from joining a group. No data is returned in the case of success.
         */
        bool UnblockEntity(GroupsModels::FUnblockEntityRequest& request, const FUnblockEntityDelegate& SuccessDelegate = FUnblockEntityDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Updates non-membership data about a group.
         * Updates data about a group, such as the name or default member role. Returns information about whether the update was successful. Only title claimants may modify the administration role for a group.
         */
        bool UpdateGroup(GroupsModels::FUpdateGroupRequest& request, const FUpdateGroupDelegate& SuccessDelegate = FUpdateGroupDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
        /**
         * Updates metadata about a role.
         * Updates the role name. Returns information about whether the update was successful.
         */
        bool UpdateRole(GroupsModels::FUpdateGroupRoleRequest& request, const FUpdateRoleDelegate& SuccessDelegate = FUpdateRoleDelegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());

    private:
        // ------------ Generated result handlers
        void OnAcceptGroupApplicationResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAcceptGroupApplicationDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnAcceptGroupInvitationResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAcceptGroupInvitationDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnAddMembersResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddMembersDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnApplyToGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FApplyToGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnBlockEntityResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBlockEntityDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnChangeMemberRoleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FChangeMemberRoleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnCreateGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnCreateRoleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateRoleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnDeleteRoleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteRoleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnGetGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnInviteToGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FInviteToGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnIsMemberResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIsMemberDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnListGroupApplicationsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListGroupApplicationsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnListGroupBlocksResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListGroupBlocksDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnListGroupInvitationsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListGroupInvitationsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnListGroupMembersResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListGroupMembersDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnListMembershipResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListMembershipDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnListMembershipOpportunitiesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListMembershipOpportunitiesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnRemoveGroupApplicationResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveGroupApplicationDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnRemoveGroupInvitationResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveGroupInvitationDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnRemoveMembersResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveMembersDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnUnblockEntityResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnblockEntityDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnUpdateGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
        void OnUpdateRoleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateRoleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);

    };
};
