//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "Core/PlayFabAddonDataModels.h"
#include "Core/PlayFabJsonHelpers.h"

using namespace PlayFab;
using namespace PlayFab::AddonModels;

PlayFab::AddonModels::FEntityKey::~FEntityKey()
{

}

void PlayFab::AddonModels::FEntityKey::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!Id.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: EntityKey::Id, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("Id"));
        writer->WriteValue(Id);
    }

    if (Type.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("Type"));
        writer->WriteValue(Type);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FEntityKey::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TypeValue = obj->TryGetField(TEXT("Type"));
    if (TypeValue.IsValid() && !TypeValue->IsNull())
    {
        FString TmpValue;
        if (TypeValue->TryGetString(TmpValue)) { Type = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateAppleRequest::~FCreateOrUpdateAppleRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FCreateOrUpdateAppleRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!AppBundleId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateOrUpdateAppleRequest::AppBundleId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("AppBundleId"));
        writer->WriteValue(AppBundleId);
    }

    if (AppSharedSecret.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AppSharedSecret"));
        writer->WriteValue(AppSharedSecret);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ErrorIfExists.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorIfExists"));
        writer->WriteValue(ErrorIfExists);
    }

    if (IgnoreExpirationDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IgnoreExpirationDate"));
        writer->WriteValue(IgnoreExpirationDate);
    }

    if (RequireSecureAuthentication.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("RequireSecureAuthentication"));
        writer->WriteValue(RequireSecureAuthentication);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateAppleRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AppBundleIdValue = obj->TryGetField(TEXT("AppBundleId"));
    if (AppBundleIdValue.IsValid() && !AppBundleIdValue->IsNull())
    {
        FString TmpValue;
        if (AppBundleIdValue->TryGetString(TmpValue)) { AppBundleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> AppSharedSecretValue = obj->TryGetField(TEXT("AppSharedSecret"));
    if (AppSharedSecretValue.IsValid() && !AppSharedSecretValue->IsNull())
    {
        FString TmpValue;
        if (AppSharedSecretValue->TryGetString(TmpValue)) { AppSharedSecret = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ErrorIfExistsValue = obj->TryGetField(TEXT("ErrorIfExists"));
    if (ErrorIfExistsValue.IsValid() && !ErrorIfExistsValue->IsNull())
    {
        bool TmpValue;
        if (ErrorIfExistsValue->TryGetBool(TmpValue)) { ErrorIfExists = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IgnoreExpirationDateValue = obj->TryGetField(TEXT("IgnoreExpirationDate"));
    if (IgnoreExpirationDateValue.IsValid() && !IgnoreExpirationDateValue->IsNull())
    {
        bool TmpValue;
        if (IgnoreExpirationDateValue->TryGetBool(TmpValue)) { IgnoreExpirationDate = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RequireSecureAuthenticationValue = obj->TryGetField(TEXT("RequireSecureAuthentication"));
    if (RequireSecureAuthenticationValue.IsValid() && !RequireSecureAuthenticationValue->IsNull())
    {
        bool TmpValue;
        if (RequireSecureAuthenticationValue->TryGetBool(TmpValue)) { RequireSecureAuthentication = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateAppleResponse::~FCreateOrUpdateAppleResponse()
{

}

void PlayFab::AddonModels::FCreateOrUpdateAppleResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateAppleResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateFacebookInstantGamesRequest::~FCreateOrUpdateFacebookInstantGamesRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FCreateOrUpdateFacebookInstantGamesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!AppID.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateOrUpdateFacebookInstantGamesRequest::AppID, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("AppID"));
        writer->WriteValue(AppID);
    }

    if (!AppSecret.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateOrUpdateFacebookInstantGamesRequest::AppSecret, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("AppSecret"));
        writer->WriteValue(AppSecret);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ErrorIfExists.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorIfExists"));
        writer->WriteValue(ErrorIfExists);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateFacebookInstantGamesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AppIDValue = obj->TryGetField(TEXT("AppID"));
    if (AppIDValue.IsValid() && !AppIDValue->IsNull())
    {
        FString TmpValue;
        if (AppIDValue->TryGetString(TmpValue)) { AppID = TmpValue; }
    }

    const TSharedPtr<FJsonValue> AppSecretValue = obj->TryGetField(TEXT("AppSecret"));
    if (AppSecretValue.IsValid() && !AppSecretValue->IsNull())
    {
        FString TmpValue;
        if (AppSecretValue->TryGetString(TmpValue)) { AppSecret = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ErrorIfExistsValue = obj->TryGetField(TEXT("ErrorIfExists"));
    if (ErrorIfExistsValue.IsValid() && !ErrorIfExistsValue->IsNull())
    {
        bool TmpValue;
        if (ErrorIfExistsValue->TryGetBool(TmpValue)) { ErrorIfExists = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateFacebookInstantGamesResponse::~FCreateOrUpdateFacebookInstantGamesResponse()
{

}

void PlayFab::AddonModels::FCreateOrUpdateFacebookInstantGamesResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateFacebookInstantGamesResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateFacebookRequest::~FCreateOrUpdateFacebookRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FCreateOrUpdateFacebookRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!AppID.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateOrUpdateFacebookRequest::AppID, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("AppID"));
        writer->WriteValue(AppID);
    }

    if (!AppSecret.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateOrUpdateFacebookRequest::AppSecret, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("AppSecret"));
        writer->WriteValue(AppSecret);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ErrorIfExists.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorIfExists"));
        writer->WriteValue(ErrorIfExists);
    }

    if (!NotificationEmail.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateOrUpdateFacebookRequest::NotificationEmail, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("NotificationEmail"));
        writer->WriteValue(NotificationEmail);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateFacebookRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AppIDValue = obj->TryGetField(TEXT("AppID"));
    if (AppIDValue.IsValid() && !AppIDValue->IsNull())
    {
        FString TmpValue;
        if (AppIDValue->TryGetString(TmpValue)) { AppID = TmpValue; }
    }

    const TSharedPtr<FJsonValue> AppSecretValue = obj->TryGetField(TEXT("AppSecret"));
    if (AppSecretValue.IsValid() && !AppSecretValue->IsNull())
    {
        FString TmpValue;
        if (AppSecretValue->TryGetString(TmpValue)) { AppSecret = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ErrorIfExistsValue = obj->TryGetField(TEXT("ErrorIfExists"));
    if (ErrorIfExistsValue.IsValid() && !ErrorIfExistsValue->IsNull())
    {
        bool TmpValue;
        if (ErrorIfExistsValue->TryGetBool(TmpValue)) { ErrorIfExists = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NotificationEmailValue = obj->TryGetField(TEXT("NotificationEmail"));
    if (NotificationEmailValue.IsValid() && !NotificationEmailValue->IsNull())
    {
        FString TmpValue;
        if (NotificationEmailValue->TryGetString(TmpValue)) { NotificationEmail = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateFacebookResponse::~FCreateOrUpdateFacebookResponse()
{

}

void PlayFab::AddonModels::FCreateOrUpdateFacebookResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateFacebookResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateGoogleRequest::~FCreateOrUpdateGoogleRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FCreateOrUpdateGoogleRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AppLicenseKey.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AppLicenseKey"));
        writer->WriteValue(AppLicenseKey);
    }

    if (AppPackageID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AppPackageID"));
        writer->WriteValue(AppPackageID);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ErrorIfExists.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorIfExists"));
        writer->WriteValue(ErrorIfExists);
    }

    if (OAuthClientID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OAuthClientID"));
        writer->WriteValue(OAuthClientID);
    }

    if (OAuthClientSecret.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OAuthClientSecret"));
        writer->WriteValue(OAuthClientSecret);
    }

    if (OAuthCustomRedirectUri.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OAuthCustomRedirectUri"));
        writer->WriteValue(OAuthCustomRedirectUri);
    }

    if (ServiceAccountKey.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ServiceAccountKey"));
        writer->WriteValue(ServiceAccountKey);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateGoogleRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AppLicenseKeyValue = obj->TryGetField(TEXT("AppLicenseKey"));
    if (AppLicenseKeyValue.IsValid() && !AppLicenseKeyValue->IsNull())
    {
        FString TmpValue;
        if (AppLicenseKeyValue->TryGetString(TmpValue)) { AppLicenseKey = TmpValue; }
    }

    const TSharedPtr<FJsonValue> AppPackageIDValue = obj->TryGetField(TEXT("AppPackageID"));
    if (AppPackageIDValue.IsValid() && !AppPackageIDValue->IsNull())
    {
        FString TmpValue;
        if (AppPackageIDValue->TryGetString(TmpValue)) { AppPackageID = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ErrorIfExistsValue = obj->TryGetField(TEXT("ErrorIfExists"));
    if (ErrorIfExistsValue.IsValid() && !ErrorIfExistsValue->IsNull())
    {
        bool TmpValue;
        if (ErrorIfExistsValue->TryGetBool(TmpValue)) { ErrorIfExists = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OAuthClientIDValue = obj->TryGetField(TEXT("OAuthClientID"));
    if (OAuthClientIDValue.IsValid() && !OAuthClientIDValue->IsNull())
    {
        FString TmpValue;
        if (OAuthClientIDValue->TryGetString(TmpValue)) { OAuthClientID = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OAuthClientSecretValue = obj->TryGetField(TEXT("OAuthClientSecret"));
    if (OAuthClientSecretValue.IsValid() && !OAuthClientSecretValue->IsNull())
    {
        FString TmpValue;
        if (OAuthClientSecretValue->TryGetString(TmpValue)) { OAuthClientSecret = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OAuthCustomRedirectUriValue = obj->TryGetField(TEXT("OAuthCustomRedirectUri"));
    if (OAuthCustomRedirectUriValue.IsValid() && !OAuthCustomRedirectUriValue->IsNull())
    {
        FString TmpValue;
        if (OAuthCustomRedirectUriValue->TryGetString(TmpValue)) { OAuthCustomRedirectUri = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ServiceAccountKeyValue = obj->TryGetField(TEXT("ServiceAccountKey"));
    if (ServiceAccountKeyValue.IsValid() && !ServiceAccountKeyValue->IsNull())
    {
        FString TmpValue;
        if (ServiceAccountKeyValue->TryGetString(TmpValue)) { ServiceAccountKey = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateGoogleResponse::~FCreateOrUpdateGoogleResponse()
{

}

void PlayFab::AddonModels::FCreateOrUpdateGoogleResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateGoogleResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateKongregateRequest::~FCreateOrUpdateKongregateRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FCreateOrUpdateKongregateRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ErrorIfExists.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorIfExists"));
        writer->WriteValue(ErrorIfExists);
    }

    if (!SecretAPIKey.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateOrUpdateKongregateRequest::SecretAPIKey, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("SecretAPIKey"));
        writer->WriteValue(SecretAPIKey);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateKongregateRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ErrorIfExistsValue = obj->TryGetField(TEXT("ErrorIfExists"));
    if (ErrorIfExistsValue.IsValid() && !ErrorIfExistsValue->IsNull())
    {
        bool TmpValue;
        if (ErrorIfExistsValue->TryGetBool(TmpValue)) { ErrorIfExists = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SecretAPIKeyValue = obj->TryGetField(TEXT("SecretAPIKey"));
    if (SecretAPIKeyValue.IsValid() && !SecretAPIKeyValue->IsNull())
    {
        FString TmpValue;
        if (SecretAPIKeyValue->TryGetString(TmpValue)) { SecretAPIKey = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateKongregateResponse::~FCreateOrUpdateKongregateResponse()
{

}

void PlayFab::AddonModels::FCreateOrUpdateKongregateResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateKongregateResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FNintendoEnvironment::~FNintendoEnvironment()
{

}

void PlayFab::AddonModels::FNintendoEnvironment::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ClientID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ClientID"));
        writer->WriteValue(ClientID);
    }

    if (ClientSecret.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ClientSecret"));
        writer->WriteValue(ClientSecret);
    }

    if (ID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ID"));
        writer->WriteValue(ID);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FNintendoEnvironment::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ClientIDValue = obj->TryGetField(TEXT("ClientID"));
    if (ClientIDValue.IsValid() && !ClientIDValue->IsNull())
    {
        FString TmpValue;
        if (ClientIDValue->TryGetString(TmpValue)) { ClientID = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ClientSecretValue = obj->TryGetField(TEXT("ClientSecret"));
    if (ClientSecretValue.IsValid() && !ClientSecretValue->IsNull())
    {
        FString TmpValue;
        if (ClientSecretValue->TryGetString(TmpValue)) { ClientSecret = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IDValue = obj->TryGetField(TEXT("ID"));
    if (IDValue.IsValid() && !IDValue->IsNull())
    {
        FString TmpValue;
        if (IDValue->TryGetString(TmpValue)) { ID = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateNintendoRequest::~FCreateOrUpdateNintendoRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FCreateOrUpdateNintendoRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ApplicationID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ApplicationID"));
        writer->WriteValue(ApplicationID);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (Environments.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Environments"));
        for (const FNintendoEnvironment& item : Environments)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (ErrorIfExists.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorIfExists"));
        writer->WriteValue(ErrorIfExists);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateNintendoRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ApplicationIDValue = obj->TryGetField(TEXT("ApplicationID"));
    if (ApplicationIDValue.IsValid() && !ApplicationIDValue->IsNull())
    {
        FString TmpValue;
        if (ApplicationIDValue->TryGetString(TmpValue)) { ApplicationID = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TArray<TSharedPtr<FJsonValue>>&EnvironmentsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Environments"));
    for (int32 Idx = 0; Idx < EnvironmentsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = EnvironmentsArray[Idx];
        Environments.Add(FNintendoEnvironment(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> ErrorIfExistsValue = obj->TryGetField(TEXT("ErrorIfExists"));
    if (ErrorIfExistsValue.IsValid() && !ErrorIfExistsValue->IsNull())
    {
        bool TmpValue;
        if (ErrorIfExistsValue->TryGetBool(TmpValue)) { ErrorIfExists = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateNintendoResponse::~FCreateOrUpdateNintendoResponse()
{

}

void PlayFab::AddonModels::FCreateOrUpdateNintendoResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateNintendoResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdatePSNRequest::~FCreateOrUpdatePSNRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FCreateOrUpdatePSNRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ClientID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ClientID"));
        writer->WriteValue(ClientID);
    }

    if (ClientSecret.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ClientSecret"));
        writer->WriteValue(ClientSecret);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ErrorIfExists.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorIfExists"));
        writer->WriteValue(ErrorIfExists);
    }

    if (NextGenClientID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NextGenClientID"));
        writer->WriteValue(NextGenClientID);
    }

    if (NextGenClientSecret.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NextGenClientSecret"));
        writer->WriteValue(NextGenClientSecret);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdatePSNRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ClientIDValue = obj->TryGetField(TEXT("ClientID"));
    if (ClientIDValue.IsValid() && !ClientIDValue->IsNull())
    {
        FString TmpValue;
        if (ClientIDValue->TryGetString(TmpValue)) { ClientID = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ClientSecretValue = obj->TryGetField(TEXT("ClientSecret"));
    if (ClientSecretValue.IsValid() && !ClientSecretValue->IsNull())
    {
        FString TmpValue;
        if (ClientSecretValue->TryGetString(TmpValue)) { ClientSecret = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ErrorIfExistsValue = obj->TryGetField(TEXT("ErrorIfExists"));
    if (ErrorIfExistsValue.IsValid() && !ErrorIfExistsValue->IsNull())
    {
        bool TmpValue;
        if (ErrorIfExistsValue->TryGetBool(TmpValue)) { ErrorIfExists = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NextGenClientIDValue = obj->TryGetField(TEXT("NextGenClientID"));
    if (NextGenClientIDValue.IsValid() && !NextGenClientIDValue->IsNull())
    {
        FString TmpValue;
        if (NextGenClientIDValue->TryGetString(TmpValue)) { NextGenClientID = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NextGenClientSecretValue = obj->TryGetField(TEXT("NextGenClientSecret"));
    if (NextGenClientSecretValue.IsValid() && !NextGenClientSecretValue->IsNull())
    {
        FString TmpValue;
        if (NextGenClientSecretValue->TryGetString(TmpValue)) { NextGenClientSecret = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdatePSNResponse::~FCreateOrUpdatePSNResponse()
{

}

void PlayFab::AddonModels::FCreateOrUpdatePSNResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdatePSNResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateSteamRequest::~FCreateOrUpdateSteamRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FCreateOrUpdateSteamRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (!ApplicationId.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateOrUpdateSteamRequest::ApplicationId, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("ApplicationId"));
        writer->WriteValue(ApplicationId);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (EnforceServiceSpecificTickets.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("EnforceServiceSpecificTickets"));
        writer->WriteValue(EnforceServiceSpecificTickets);
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ErrorIfExists.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorIfExists"));
        writer->WriteValue(ErrorIfExists);
    }

    if (!SecretKey.IsEmpty() == false)
    {
        UE_LOG(LogTemp, Error, TEXT("This field is required: CreateOrUpdateSteamRequest::SecretKey, PlayFab calls may not work if it remains empty."));
    }
    else
    {
        writer->WriteIdentifierPrefix(TEXT("SecretKey"));
        writer->WriteValue(SecretKey);
    }

    if (UseSandbox.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("UseSandbox"));
        writer->WriteValue(UseSandbox);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateSteamRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ApplicationIdValue = obj->TryGetField(TEXT("ApplicationId"));
    if (ApplicationIdValue.IsValid() && !ApplicationIdValue->IsNull())
    {
        FString TmpValue;
        if (ApplicationIdValue->TryGetString(TmpValue)) { ApplicationId = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EnforceServiceSpecificTicketsValue = obj->TryGetField(TEXT("EnforceServiceSpecificTickets"));
    if (EnforceServiceSpecificTicketsValue.IsValid() && !EnforceServiceSpecificTicketsValue->IsNull())
    {
        bool TmpValue;
        if (EnforceServiceSpecificTicketsValue->TryGetBool(TmpValue)) { EnforceServiceSpecificTickets = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ErrorIfExistsValue = obj->TryGetField(TEXT("ErrorIfExists"));
    if (ErrorIfExistsValue.IsValid() && !ErrorIfExistsValue->IsNull())
    {
        bool TmpValue;
        if (ErrorIfExistsValue->TryGetBool(TmpValue)) { ErrorIfExists = TmpValue; }
    }

    const TSharedPtr<FJsonValue> SecretKeyValue = obj->TryGetField(TEXT("SecretKey"));
    if (SecretKeyValue.IsValid() && !SecretKeyValue->IsNull())
    {
        FString TmpValue;
        if (SecretKeyValue->TryGetString(TmpValue)) { SecretKey = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UseSandboxValue = obj->TryGetField(TEXT("UseSandbox"));
    if (UseSandboxValue.IsValid() && !UseSandboxValue->IsNull())
    {
        bool TmpValue;
        if (UseSandboxValue->TryGetBool(TmpValue)) { UseSandbox = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateSteamResponse::~FCreateOrUpdateSteamResponse()
{

}

void PlayFab::AddonModels::FCreateOrUpdateSteamResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateSteamResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateTwitchRequest::~FCreateOrUpdateTwitchRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FCreateOrUpdateTwitchRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ClientID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ClientID"));
        writer->WriteValue(ClientID);
    }

    if (ClientSecret.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ClientSecret"));
        writer->WriteValue(ClientSecret);
    }

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    if (ErrorIfExists.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("ErrorIfExists"));
        writer->WriteValue(ErrorIfExists);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateTwitchRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ClientIDValue = obj->TryGetField(TEXT("ClientID"));
    if (ClientIDValue.IsValid() && !ClientIDValue->IsNull())
    {
        FString TmpValue;
        if (ClientIDValue->TryGetString(TmpValue)) { ClientID = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ClientSecretValue = obj->TryGetField(TEXT("ClientSecret"));
    if (ClientSecretValue.IsValid() && !ClientSecretValue->IsNull())
    {
        FString TmpValue;
        if (ClientSecretValue->TryGetString(TmpValue)) { ClientSecret = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ErrorIfExistsValue = obj->TryGetField(TEXT("ErrorIfExists"));
    if (ErrorIfExistsValue.IsValid() && !ErrorIfExistsValue->IsNull())
    {
        bool TmpValue;
        if (ErrorIfExistsValue->TryGetBool(TmpValue)) { ErrorIfExists = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FCreateOrUpdateTwitchResponse::~FCreateOrUpdateTwitchResponse()
{

}

void PlayFab::AddonModels::FCreateOrUpdateTwitchResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FCreateOrUpdateTwitchResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteAppleRequest::~FDeleteAppleRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FDeleteAppleRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteAppleRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteAppleResponse::~FDeleteAppleResponse()
{

}

void PlayFab::AddonModels::FDeleteAppleResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteAppleResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteFacebookInstantGamesRequest::~FDeleteFacebookInstantGamesRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FDeleteFacebookInstantGamesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteFacebookInstantGamesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteFacebookInstantGamesResponse::~FDeleteFacebookInstantGamesResponse()
{

}

void PlayFab::AddonModels::FDeleteFacebookInstantGamesResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteFacebookInstantGamesResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteFacebookRequest::~FDeleteFacebookRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FDeleteFacebookRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteFacebookRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteFacebookResponse::~FDeleteFacebookResponse()
{

}

void PlayFab::AddonModels::FDeleteFacebookResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteFacebookResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteGoogleRequest::~FDeleteGoogleRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FDeleteGoogleRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteGoogleRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteGoogleResponse::~FDeleteGoogleResponse()
{

}

void PlayFab::AddonModels::FDeleteGoogleResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteGoogleResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteKongregateRequest::~FDeleteKongregateRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FDeleteKongregateRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteKongregateRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteKongregateResponse::~FDeleteKongregateResponse()
{

}

void PlayFab::AddonModels::FDeleteKongregateResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteKongregateResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteNintendoRequest::~FDeleteNintendoRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FDeleteNintendoRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteNintendoRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteNintendoResponse::~FDeleteNintendoResponse()
{

}

void PlayFab::AddonModels::FDeleteNintendoResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteNintendoResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FDeletePSNRequest::~FDeletePSNRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FDeletePSNRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeletePSNRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FDeletePSNResponse::~FDeletePSNResponse()
{

}

void PlayFab::AddonModels::FDeletePSNResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeletePSNResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteSteamRequest::~FDeleteSteamRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FDeleteSteamRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteSteamRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteSteamResponse::~FDeleteSteamResponse()
{

}

void PlayFab::AddonModels::FDeleteSteamResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteSteamResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteTwitchRequest::~FDeleteTwitchRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FDeleteTwitchRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteTwitchRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FDeleteTwitchResponse::~FDeleteTwitchResponse()
{

}

void PlayFab::AddonModels::FDeleteTwitchResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FDeleteTwitchResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::AddonModels::FGetAppleRequest::~FGetAppleRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FGetAppleRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetAppleRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetAppleResponse::~FGetAppleResponse()
{

}

void PlayFab::AddonModels::FGetAppleResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AppBundleId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AppBundleId"));
        writer->WriteValue(AppBundleId);
    }

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writer->WriteValue(Created);

    if (IgnoreExpirationDate.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("IgnoreExpirationDate"));
        writer->WriteValue(IgnoreExpirationDate);
    }

    if (RequireSecureAuthentication.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("RequireSecureAuthentication"));
        writer->WriteValue(RequireSecureAuthentication);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetAppleResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AppBundleIdValue = obj->TryGetField(TEXT("AppBundleId"));
    if (AppBundleIdValue.IsValid() && !AppBundleIdValue->IsNull())
    {
        FString TmpValue;
        if (AppBundleIdValue->TryGetString(TmpValue)) { AppBundleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid() && !CreatedValue->IsNull())
    {
        bool TmpValue;
        if (CreatedValue->TryGetBool(TmpValue)) { Created = TmpValue; }
    }

    const TSharedPtr<FJsonValue> IgnoreExpirationDateValue = obj->TryGetField(TEXT("IgnoreExpirationDate"));
    if (IgnoreExpirationDateValue.IsValid() && !IgnoreExpirationDateValue->IsNull())
    {
        bool TmpValue;
        if (IgnoreExpirationDateValue->TryGetBool(TmpValue)) { IgnoreExpirationDate = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RequireSecureAuthenticationValue = obj->TryGetField(TEXT("RequireSecureAuthentication"));
    if (RequireSecureAuthenticationValue.IsValid() && !RequireSecureAuthenticationValue->IsNull())
    {
        bool TmpValue;
        if (RequireSecureAuthenticationValue->TryGetBool(TmpValue)) { RequireSecureAuthentication = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetFacebookInstantGamesRequest::~FGetFacebookInstantGamesRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FGetFacebookInstantGamesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetFacebookInstantGamesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetFacebookInstantGamesResponse::~FGetFacebookInstantGamesResponse()
{

}

void PlayFab::AddonModels::FGetFacebookInstantGamesResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AppID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AppID"));
        writer->WriteValue(AppID);
    }

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writer->WriteValue(Created);

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetFacebookInstantGamesResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AppIDValue = obj->TryGetField(TEXT("AppID"));
    if (AppIDValue.IsValid() && !AppIDValue->IsNull())
    {
        FString TmpValue;
        if (AppIDValue->TryGetString(TmpValue)) { AppID = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid() && !CreatedValue->IsNull())
    {
        bool TmpValue;
        if (CreatedValue->TryGetBool(TmpValue)) { Created = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetFacebookRequest::~FGetFacebookRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FGetFacebookRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetFacebookRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetFacebookResponse::~FGetFacebookResponse()
{

}

void PlayFab::AddonModels::FGetFacebookResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AppID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AppID"));
        writer->WriteValue(AppID);
    }

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writer->WriteValue(Created);

    if (NotificationEmail.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NotificationEmail"));
        writer->WriteValue(NotificationEmail);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetFacebookResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AppIDValue = obj->TryGetField(TEXT("AppID"));
    if (AppIDValue.IsValid() && !AppIDValue->IsNull())
    {
        FString TmpValue;
        if (AppIDValue->TryGetString(TmpValue)) { AppID = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid() && !CreatedValue->IsNull())
    {
        bool TmpValue;
        if (CreatedValue->TryGetBool(TmpValue)) { Created = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NotificationEmailValue = obj->TryGetField(TEXT("NotificationEmail"));
    if (NotificationEmailValue.IsValid() && !NotificationEmailValue->IsNull())
    {
        FString TmpValue;
        if (NotificationEmailValue->TryGetString(TmpValue)) { NotificationEmail = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetGoogleRequest::~FGetGoogleRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FGetGoogleRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetGoogleRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetGoogleResponse::~FGetGoogleResponse()
{

}

void PlayFab::AddonModels::FGetGoogleResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AppPackageID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("AppPackageID"));
        writer->WriteValue(AppPackageID);
    }

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writer->WriteValue(Created);

    if (OAuthClientID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OAuthClientID"));
        writer->WriteValue(OAuthClientID);
    }

    if (OauthCustomRedirectUri.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("OauthCustomRedirectUri"));
        writer->WriteValue(OauthCustomRedirectUri);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetGoogleResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AppPackageIDValue = obj->TryGetField(TEXT("AppPackageID"));
    if (AppPackageIDValue.IsValid() && !AppPackageIDValue->IsNull())
    {
        FString TmpValue;
        if (AppPackageIDValue->TryGetString(TmpValue)) { AppPackageID = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid() && !CreatedValue->IsNull())
    {
        bool TmpValue;
        if (CreatedValue->TryGetBool(TmpValue)) { Created = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OAuthClientIDValue = obj->TryGetField(TEXT("OAuthClientID"));
    if (OAuthClientIDValue.IsValid() && !OAuthClientIDValue->IsNull())
    {
        FString TmpValue;
        if (OAuthClientIDValue->TryGetString(TmpValue)) { OAuthClientID = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OauthCustomRedirectUriValue = obj->TryGetField(TEXT("OauthCustomRedirectUri"));
    if (OauthCustomRedirectUriValue.IsValid() && !OauthCustomRedirectUriValue->IsNull())
    {
        FString TmpValue;
        if (OauthCustomRedirectUriValue->TryGetString(TmpValue)) { OauthCustomRedirectUri = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetKongregateRequest::~FGetKongregateRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FGetKongregateRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetKongregateRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetKongregateResponse::~FGetKongregateResponse()
{

}

void PlayFab::AddonModels::FGetKongregateResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writer->WriteValue(Created);

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetKongregateResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid() && !CreatedValue->IsNull())
    {
        bool TmpValue;
        if (CreatedValue->TryGetBool(TmpValue)) { Created = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetNintendoRequest::~FGetNintendoRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FGetNintendoRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetNintendoRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetNintendoResponse::~FGetNintendoResponse()
{

}

void PlayFab::AddonModels::FGetNintendoResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ApplicationID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ApplicationID"));
        writer->WriteValue(ApplicationID);
    }

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writer->WriteValue(Created);

    if (Environments.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Environments"));
        for (const FNintendoEnvironment& item : Environments)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetNintendoResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ApplicationIDValue = obj->TryGetField(TEXT("ApplicationID"));
    if (ApplicationIDValue.IsValid() && !ApplicationIDValue->IsNull())
    {
        FString TmpValue;
        if (ApplicationIDValue->TryGetString(TmpValue)) { ApplicationID = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid() && !CreatedValue->IsNull())
    {
        bool TmpValue;
        if (CreatedValue->TryGetBool(TmpValue)) { Created = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&EnvironmentsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Environments"));
    for (int32 Idx = 0; Idx < EnvironmentsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = EnvironmentsArray[Idx];
        Environments.Add(FNintendoEnvironment(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::AddonModels::FGetPSNRequest::~FGetPSNRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FGetPSNRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetPSNRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetPSNResponse::~FGetPSNResponse()
{

}

void PlayFab::AddonModels::FGetPSNResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ClientID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ClientID"));
        writer->WriteValue(ClientID);
    }

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writer->WriteValue(Created);

    if (NextGenClientID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("NextGenClientID"));
        writer->WriteValue(NextGenClientID);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetPSNResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ClientIDValue = obj->TryGetField(TEXT("ClientID"));
    if (ClientIDValue.IsValid() && !ClientIDValue->IsNull())
    {
        FString TmpValue;
        if (ClientIDValue->TryGetString(TmpValue)) { ClientID = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid() && !CreatedValue->IsNull())
    {
        bool TmpValue;
        if (CreatedValue->TryGetBool(TmpValue)) { Created = TmpValue; }
    }

    const TSharedPtr<FJsonValue> NextGenClientIDValue = obj->TryGetField(TEXT("NextGenClientID"));
    if (NextGenClientIDValue.IsValid() && !NextGenClientIDValue->IsNull())
    {
        FString TmpValue;
        if (NextGenClientIDValue->TryGetString(TmpValue)) { NextGenClientID = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetSteamRequest::~FGetSteamRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FGetSteamRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetSteamRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetSteamResponse::~FGetSteamResponse()
{

}

void PlayFab::AddonModels::FGetSteamResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ApplicationId.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ApplicationId"));
        writer->WriteValue(ApplicationId);
    }

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writer->WriteValue(Created);

    if (EnforceServiceSpecificTickets.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("EnforceServiceSpecificTickets"));
        writer->WriteValue(EnforceServiceSpecificTickets);
    }

    if (UseSandbox.notNull())
    {
        writer->WriteIdentifierPrefix(TEXT("UseSandbox"));
        writer->WriteValue(UseSandbox);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetSteamResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ApplicationIdValue = obj->TryGetField(TEXT("ApplicationId"));
    if (ApplicationIdValue.IsValid() && !ApplicationIdValue->IsNull())
    {
        FString TmpValue;
        if (ApplicationIdValue->TryGetString(TmpValue)) { ApplicationId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid() && !CreatedValue->IsNull())
    {
        bool TmpValue;
        if (CreatedValue->TryGetBool(TmpValue)) { Created = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EnforceServiceSpecificTicketsValue = obj->TryGetField(TEXT("EnforceServiceSpecificTickets"));
    if (EnforceServiceSpecificTicketsValue.IsValid() && !EnforceServiceSpecificTicketsValue->IsNull())
    {
        bool TmpValue;
        if (EnforceServiceSpecificTicketsValue->TryGetBool(TmpValue)) { EnforceServiceSpecificTickets = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UseSandboxValue = obj->TryGetField(TEXT("UseSandbox"));
    if (UseSandboxValue.IsValid() && !UseSandboxValue->IsNull())
    {
        bool TmpValue;
        if (UseSandboxValue->TryGetBool(TmpValue)) { UseSandbox = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetTwitchRequest::~FGetTwitchRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::AddonModels::FGetTwitchRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (CustomTags.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("CustomTags"));
        for (TMap<FString, FString>::TConstIterator It(CustomTags); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    if (Entity.IsValid())
    {
        writer->WriteIdentifierPrefix(TEXT("Entity"));
        Entity->writeJSON(writer);
    }

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetTwitchRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonObject>* CustomTagsObject;
    if (obj->TryGetObjectField(TEXT("CustomTags"), CustomTagsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*CustomTagsObject)->Values); It; ++It)
        {
            CustomTags.Add(It.Key(), It.Value()->AsString());
        }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::AddonModels::FGetTwitchResponse::~FGetTwitchResponse()
{

}

void PlayFab::AddonModels::FGetTwitchResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ClientID.IsEmpty() == false)
    {
        writer->WriteIdentifierPrefix(TEXT("ClientID"));
        writer->WriteValue(ClientID);
    }

    writer->WriteIdentifierPrefix(TEXT("Created"));
    writer->WriteValue(Created);

    writer->WriteObjectEnd();
}

bool PlayFab::AddonModels::FGetTwitchResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ClientIDValue = obj->TryGetField(TEXT("ClientID"));
    if (ClientIDValue.IsValid() && !ClientIDValue->IsNull())
    {
        FString TmpValue;
        if (ClientIDValue->TryGetString(TmpValue)) { ClientID = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid() && !CreatedValue->IsNull())
    {
        bool TmpValue;
        if (CreatedValue->TryGetBool(TmpValue)) { Created = TmpValue; }
    }

    return HasSucceeded;
}

