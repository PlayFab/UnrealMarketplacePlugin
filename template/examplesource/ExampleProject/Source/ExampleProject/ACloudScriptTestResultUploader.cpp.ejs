<%- copyright %>

#include "ACloudScriptTestResultUploader.h"

#include "IPlayFab.h"
#include "PlayFabCppBaseModel.h"
#include "PlayFabError.h"
#include "Core/PlayFabClientAPI.h"
#include "TestFramework/PlayFabTestContext.h"

#include "Runtime/Core/Public/GenericPlatform/GenericPlatformMisc.h"
#include "Runtime/Engine/Classes/Engine/World.h"

DEFINE_LOG_CATEGORY(LogTestResults);

void ACloudScriptTestResultUploader::UploadToCloudscript(const TArray<class UPlayFabTestContext*>& SuiteTests)
{
    PlayFabClientPtr ClientAPI = IPlayFabModuleInterface::Get().GetClientAPI();

    float totalTime = 0;
    int totalFailures = 0, totalSkipped = 0, totalTimedout = 0;
    FString buildIdLc = ClientAPI->GetBuildIdentifier().ToLower();

    TArray<TSharedPtr<FJsonValue>> TestReport;
    for (auto SuiteTest : SuiteTests)
    {
        totalTime += SuiteTest->GetDurationInSeconds();

        FString finishStateStr;
        switch (SuiteTest->finishState)
        {
        case PlayFabApiTestFinishState::PASSED:
            finishStateStr = TEXT("PASSED");
            break;
        case PlayFabApiTestFinishState::FAILED:
            finishStateStr = TEXT("FAILED");
            totalFailures += 1;
            break;
        case PlayFabApiTestFinishState::SKIPPED:
            finishStateStr = TEXT("SKIPPED");
            totalSkipped += 1;
            break;
        case PlayFabApiTestFinishState::TIMEDOUT:
            finishStateStr = TEXT("TIMEDOUT");
            totalTimedout += 1;
            break;
        default: finishStateStr = TEXT("");
            break;
        }

        TSharedPtr<FJsonObject> JsonObject = MakeShareable(new FJsonObject());
        JsonObject->SetStringField(TEXT("failureText"), finishStateStr);
        JsonObject->SetStringField(TEXT("finishState"), finishStateStr);
        JsonObject->SetStringField(TEXT("classname"), buildIdLc);
        JsonObject->SetStringField(TEXT("message"), SuiteTest->testResultMsg);
        JsonObject->SetStringField(TEXT("name"), SuiteTest->testName); // This test's name.
        JsonObject->SetNumberField(TEXT("time"), SuiteTest->GetDurationInSeconds());

        TestReport.Add(MakeShareable(new FJsonValueObject(JsonObject)));
    }

    TSharedPtr<FJsonObject> finalJson = MakeShareable(new FJsonObject());
    finalJson->SetStringField(TEXT("name"), buildIdLc);
    finalJson->SetNumberField(TEXT("time"), totalTime);
    finalJson->SetNumberField(TEXT("errors"), totalTimedout);
    finalJson->SetNumberField(TEXT("failures"), totalFailures);
    finalJson->SetNumberField(TEXT("skipped"), totalSkipped);
    finalJson->SetArrayField(TEXT("testResults"), TestReport);

    auto functionParameter = PlayFab::FJsonKeeper();
    functionParameter.readFromValue(MakeShareable(new FJsonValueObject(finalJson)));

    PlayFab::ClientModels::FExecuteCloudScriptRequest request;
    request.FunctionName = TEXT("SaveTestData");
    request.FunctionParameter = functionParameter;
    request.GeneratePlayStreamEvent = true;

    UE_LOG(LogTestResults, Log, TEXT("Cloud Save Request: \n%s"), *request.toJSONString());

    ClientAPI->ExecuteCloudScript(
        request,
        PlayFab::UPlayFabClientAPI::FExecuteCloudScriptDelegate::CreateUObject(this, &ACloudScriptTestResultUploader::SuccessfulUpload),
        PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ACloudScriptTestResultUploader::UploadErrored)
    );
}

void ACloudScriptTestResultUploader::SuccessfulUpload(const PlayFab::ClientModels::FExecuteCloudScriptResult& result)
{
    UE_LOG(LogTestResults, Log, TEXT("Cloud Upload Success: \n%s"), *result.toJSONString());
    isComplete = true;
}

void ACloudScriptTestResultUploader::UploadErrored(const PlayFab::FPlayFabCppError& error)
{
    UE_LOG(LogTestResults, Error, TEXT("Cloud Upload Error: \n%s"), *error.GenerateErrorReport());
    isComplete = true;
}
