<%- copyright %>

// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"

namespace PlayFab
{

    enum PLAYFABCPP_API PlayFabErrorCode
    {
        PlayFabErrorHostnameNotFound=1,
        PlayFabErrorConnectionTimeout,
        PlayFabErrorConnectionRefused,
        PlayFabErrorSocketError,
		<% for(var i=0; i<errorList.length-1; i++) { var errorProps = errors[errorList[i]] %>PlayFabError<%- errorProps.name %> = <%- errorProps.id %>,
        <% } %>PlayFabError<% var errorProps = errors[errorList[errorList.length-1]] %><%- errorProps.name %> = <%- errorProps.id %>
    };

    struct PLAYFABCPP_API FPlayFabCppError
    {
        int32 HttpCode;
        FString HttpStatus;
        int32 ErrorCode;
        FString ErrorName;
        FString ErrorMessage;
        TMultiMap< FString, FString > ErrorDetails;

        /*
         * This converts the PlayFabError into a human readable string describing the error.
         * If error is not found, it will return the http code, status, and error
         */
        FString GenerateErrorReport() const
        {
            FString output = TEXT("");
            if (ErrorMessage.Len() > 0) 
            {
                output += ErrorMessage;
            }
            else 
            {
                output += "Http Code: ";
                output += FString::FromInt(HttpCode);
                output += "\nHttp Status: ";
                output += HttpStatus;
                output += "\nError Code: ";
                output += FString::FromInt(ErrorCode);
            }
            for (auto& Elem : ErrorDetails)
                output += TEXT(" - ") + Elem.Key + TEXT(": ") + Elem.Value;
            return output;
        }
    };

    DECLARE_DELEGATE_OneParam(FPlayFabErrorDelegate, const FPlayFabCppError&);
}
