<%- copyright %>

// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "Core/PlayFab<%- api.name %>InstanceAPI.h"
#include "Core/PlayFabSettings.h"
#include "Core/PlayFabResultHandler.h"
#include "PlayFab.h"

using namespace PlayFab;
using namespace PlayFab::<%- api.name %>Models;

UPlayFab<%- api.name %>InstanceAPI::UPlayFab<%- api.name %>InstanceAPI()
{
}

UPlayFab<%- api.name %>InstanceAPI::UPlayFab<%- api.name %>InstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings)
{
    this->settings = MoveTemp(apiSettings);
}

UPlayFab<%- api.name %>InstanceAPI::UPlayFab<%- api.name %>InstanceAPI(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext)
{
    this->authContext = MoveTemp(authenticationContext);
}

UPlayFab<%- api.name %>InstanceAPI::UPlayFab<%- api.name %>InstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings, TSharedPtr<UPlayFabAuthenticationContext> authenticationContext)
{
    this->settings = MoveTemp(apiSettings);
    this->authContext = MoveTemp(authenticationContext);
}

UPlayFab<%- api.name %>InstanceAPI::~UPlayFab<%- api.name %>InstanceAPI()
{
}

TSharedPtr<UPlayFabAPISettings> UPlayFab<%- api.name %>InstanceAPI::GetSettings() const
{
    return this->settings;
}

int UPlayFab<%- api.name %>InstanceAPI::GetPendingCalls() const
{
    return PlayFabRequestHandler::GetPendingCalls();
}

void UPlayFab<%- api.name %>InstanceAPI::SetSettings(TSharedPtr<UPlayFabAPISettings> apiSettings)
{
    this->settings = MoveTemp(apiSettings);
}

TSharedPtr<UPlayFabAuthenticationContext> UPlayFab<%- api.name %>InstanceAPI::GetAuthenticationContext() const
{
    return this->authContext;
}

void UPlayFab<%- api.name %>InstanceAPI::SetAuthenticationContext(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext)
{
    this->authContext = MoveTemp(authenticationContext);
}

void UPlayFab<%- api.name %>InstanceAPI::ForgetAllCredentials()
{
    if (!this->authContext.IsValid())
        return;

    this->authContext->ForgetAllCredentials();
}

TSharedPtr<UPlayFabAuthenticationContext> UPlayFab<%- api.name %>InstanceAPI::GetOrCreateAuthenticationContext()
{
    if (!this->authContext.IsValid())
        this->authContext = MakeSharedUObject<UPlayFabAuthenticationContext>();

    return this->authContext;
}
<% if (hasClientOptions) { %>
bool UPlayFabClientInstanceAPI::IsClientLoggedIn()
{
    return !this->GetOrCreateAuthenticationContext()->GetClientSessionTicket().IsEmpty();
}

void UPlayFabClientInstanceAPI::MultiStepClientLogin(bool needsAttribution)
{
    if (!this->settings.IsValid()) {
        if (needsAttribution && !PlayFabSettings::GetDisableAdvertising() && !PlayFabSettings::GetAdvertisingIdType().IsEmpty() && !PlayFabSettings::GetAdvertisingIdValue().IsEmpty()) {
            PlayFab::ClientModels::FAttributeInstallRequest request{};
            if (PlayFabSettings::GetAdvertisingIdType() == PlayFabSettings::AD_TYPE_IDFA)
                request.Idfa = PlayFabSettings::GetAdvertisingIdValue();
            else if (PlayFabSettings::GetAdvertisingIdType() == PlayFabSettings::AD_TYPE_ANDROID_ID)
                request.Adid = PlayFabSettings::GetAdvertisingIdValue();
            else
                return;
            AttributeInstall(request);
        }
    }
    else {
        if (needsAttribution && !settings->GetDisableAdvertising() && settings->GetAdvertisingIdType().Len() > 0 && settings->GetAdvertisingIdValue().Len() > 0) {
            PlayFab::ClientModels::FAttributeInstallRequest request{};
            if (settings->GetAdvertisingIdType() == PlayFabSettings::AD_TYPE_IDFA)
                request.Idfa = settings->GetAdvertisingIdValue();
            else if (settings->GetAdvertisingIdType() == PlayFabSettings::AD_TYPE_ANDROID_ID)
                request.Adid = settings->GetAdvertisingIdValue();
            else
                return;
            AttributeInstall(request, nullptr, nullptr);
        }
    }
}
<% } %><% for(var i in api.calls) { var apiCall = api.calls[i];%><% if (!hasRequest(apiCall, api)) { %>
bool UPlayFab<%- api.name %>InstanceAPI::<%- apiCall.name %>(
    const F<%- apiCall.name %>Delegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{ 
    <%- api.name %>Models::F<%- apiCall.request %> emptyRequest = <%- api.name %>Models::F<%- apiCall.request %>();
    return UPlayFab<%- api.name %>InstanceAPI::<%- apiCall.name %>(emptyRequest, SuccessDelegate, ErrorDelegate);
}
<% } %>
bool UPlayFab<%- api.name %>InstanceAPI::<%- apiCall.name %>(
    <%- api.name %>Models::F<%- apiCall.request %>& request,
    const F<%- apiCall.name %>Delegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
<%- getRequestActions("    ", apiCall, true)%>
<%- getCustomApiLogic("    ", apiCall, true) %>
    auto HttpRequest = PlayFabRequestHandler::SendRequest(<%- getUrlAccessor(apiCall, true) %>, request.toJSONString(), <%- getAuthParams(apiCall, true) %>);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFab<%- api.name %>InstanceAPI::On<%- apiCall.name %>Result, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFab<%- api.name %>InstanceAPI::On<%- apiCall.name %>Result(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, F<%- apiCall.name %>Delegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    <%- api.name %>Models::F<%- apiCall.result%> outResult;
    FPlayFabCppError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
<%- getResultActions("        ", apiCall, true)
%>        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}
<% } %>