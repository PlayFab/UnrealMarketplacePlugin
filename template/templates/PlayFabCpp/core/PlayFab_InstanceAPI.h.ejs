<%- copyright %>

// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "Core/PlayFabError.h"
#include "Core/PlayFab<%- api.name %>DataModels.h"
#include "Core/PlayFabSettings.h"
#include "PlayFabAPISettings.h"
#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"

namespace PlayFab
{
    /**
     * Main interface for PlayFab Sdk, specifically all <%- api.name %> APIs
     */
    class PLAYFABCPP_API UPlayFab<%- api.name %>InstanceAPI
    {
    public:
<% for(var i in api.calls) { var apiCall = api.calls[i]; %>        DECLARE_DELEGATE_OneParam(F<%- apiCall.name %>Delegate, const <%- api.name %>Models::F<%- apiCall.result%>&);
<% } %>

    private:
        TSharedPtr<UPlayFabAPISettings> settings;
        TSharedPtr<UPlayFabAuthenticationContext> authContext;
    
    public:
        UPlayFab<%- api.name %>InstanceAPI();
        explicit UPlayFab<%- api.name %>InstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings);
        explicit UPlayFab<%- api.name %>InstanceAPI(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        UPlayFab<%- api.name %>InstanceAPI(TSharedPtr<UPlayFabAPISettings> apiSettings, TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        ~UPlayFab<%- api.name %>InstanceAPI();
        UPlayFab<%- api.name %>InstanceAPI(const UPlayFab<%- api.name %>InstanceAPI& source) = delete; // disable copy
        UPlayFab<%- api.name %>InstanceAPI(UPlayFab<%- api.name %>InstanceAPI&&) = delete; // disable move
        UPlayFab<%- api.name %>InstanceAPI& operator=(const UPlayFab<%- api.name %>InstanceAPI& source) = delete; // disable assignment
        UPlayFab<%- api.name %>InstanceAPI& operator=(UPlayFab<%- api.name %>InstanceAPI&& other) = delete; // disable move assignment

        int GetPendingCalls() const;
        TSharedPtr<UPlayFabAPISettings> GetSettings() const;
        void SetSettings(TSharedPtr<UPlayFabAPISettings> apiSettings);
        TSharedPtr<UPlayFabAuthenticationContext> GetAuthenticationContext() const;
        void SetAuthenticationContext(TSharedPtr<UPlayFabAuthenticationContext> authenticationContext);
        void ForgetAllCredentials();

    private:
        TSharedPtr<UPlayFabAuthenticationContext> GetOrCreateAuthenticationContext();
    
    public:
<% if (hasClientOptions) { %>
        // Public, Client-Specific
        bool IsClientLoggedIn();
        void MultiStepClientLogin(bool needsAttribution);
<% } %>

        // ------------ Generated API calls
<% for(var i in api.calls) { var apiCall = api.calls[i];
if (hasRequest(apiCall, api)) {
%><%- generateApiSummary("        ", apiCall, "summary")
%>        bool <%- apiCall.name %>(<%- api.name %>Models::F<%- apiCall.request %>& request, const F<%- apiCall.name %>Delegate& SuccessDelegate = F<%- apiCall.name %>Delegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
<%    } else  {%><%- generateApiSummary("        ", apiCall, "summary") %>
        bool <%- apiCall.name %>(const F<%- apiCall.name %>Delegate& SuccessDelegate = F<%- apiCall.name %>Delegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
<%- generateApiSummary("        ", apiCall, "summary")
%>        bool <%- apiCall.name %>(<%- api.name %>Models::F<%- apiCall.request %>& request, const F<%- apiCall.name %>Delegate& SuccessDelegate = F<%- apiCall.name %>Delegate(), const FPlayFabErrorDelegate& ErrorDelegate = FPlayFabErrorDelegate());
<% } 
} %>
    private:
        // ------------ Generated result handlers
<% for(var i in api.calls) { var apiCall = api.calls[i];
%>        void On<%- apiCall.name %>Result(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, F<%- apiCall.name %>Delegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate);
<% } %>
    };
};
